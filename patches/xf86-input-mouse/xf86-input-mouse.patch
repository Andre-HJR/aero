From 560b74fa3e234dced21e0bbf03ea444197b7da15 Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Sat, 4 Feb 2023 13:21:25 +1100
Subject: [PATCH xf86-input-mouse] <xxx>

---
 configure.ac     |   3 ++
 src/Makefile.am  |   2 +-
 src/aero_mouse.c | 115 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 119 insertions(+), 1 deletion(-)
 create mode 100644 src/aero_mouse.c

diff --git a/configure.ac b/configure.ac
index 6c453cd..a3dd16d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -81,6 +81,9 @@ case $host_os in
   solaris*)
     OS_MOUSE_NAME=sun
     ;;
+  aero*)
+    OS_MOUSE_NAME=aero
+    ;;
   gnu*)
     OS_MOUSE_NAME=hurd
     ;;
diff --git a/src/Makefile.am b/src/Makefile.am
index aad8d0e..6de4354 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -32,7 +32,7 @@ AM_CPPFLAGS = -I$(top_srcdir)/include $(XORG_CFLAGS)
 
 # We have to list all the mouse drivers here, even if we don't build them, so
 # they get included in distcheck.
-OS_SRCS = bsd_mouse.c hurd_mouse.c lnx_mouse.c sun_mouse.c
+OS_SRCS = bsd_mouse.c hurd_mouse.c lnx_mouse.c sun_mouse.c aero_mouse.c
 
 @DRIVER_NAME@_drv_la_SOURCES = \
 	mouse.c \
diff --git a/src/aero_mouse.c b/src/aero_mouse.c
new file mode 100644
index 0000000..de18985
--- /dev/null
+++ b/src/aero_mouse.c
@@ -0,0 +1,115 @@
+#include "mouse.h"
+#include <fcntl.h>
+#include <stddef.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <sys/stat.h>
+
+#include "xf86_OSlib.h"
+
+#define MOUSE_FLAG_LB (1 << 0)
+#define MOUSE_FLAG_RB (1 << 1)
+#define MOUSE_FLAG_MB (1 << 2)
+
+#define DEVPATH "/dev/mouse0"
+
+struct mouse_packet {
+    int16_t x;
+    int16_t y;
+
+    uint8_t flags;
+};
+
+static void MouseReadInput(InputInfoPtr pInfo) {
+    MouseDevPtr mouse = pInfo->private;
+
+    struct mouse_packet packet;
+    
+    for (;;) {
+        size_t result = read(pInfo->fd, &packet, sizeof(struct mouse_packet));
+
+        if (result != sizeof(struct mouse_packet)) {
+            break; 
+        }
+        
+        int b = mouse->lastButtons;
+        b &= ~0x7;
+
+        b |= (packet.flags & MOUSE_FLAG_RB) ? 1 : 0;
+        b |= (packet.flags & MOUSE_FLAG_MB) ? 2 : 0;
+        b |= (packet.flags & MOUSE_FLAG_LB) ? 4 : 0;
+
+        mouse->PostEvent(pInfo, b, packet.x, -packet.y, 0, 0);
+    }
+}
+
+static Bool OsMousePreInit(InputInfoPtr pInfo, const char *protocol, int flags) {
+    MouseDevPtr mouse = pInfo->private;
+    mouse->protocol = protocol;
+
+    xf86ProcessCommonOptions(pInfo, pInfo->options);
+
+    pInfo->fd = xf86OpenSerial(pInfo->options);
+    if (pInfo->fd == -1) {
+        xf86Msg(X_ERROR, "%s: cannot open %s\n", pInfo->name, DEVPATH);
+        return FALSE;
+    }
+
+    mouse->CommonOptions(pInfo);
+    pInfo->read_input = MouseReadInput;
+    return TRUE;
+}
+
+static const char *internalNames[] = {
+    "Aero",
+    NULL
+};
+
+static const char ** BuiltinNames(void) {
+    return internalNames;
+}
+
+static Bool CheckProtocol(const char *protocol) {
+    for (int i = 0; internalNames[i]; i++) {
+        if (xf86NameCmp(protocol, internalNames[i]) == 0)
+            return TRUE;
+    }
+
+    return FALSE;
+}
+
+static const char *FindDevice(InputInfoPtr pInfo, const char *protocol, int flags) {
+    struct stat st;
+
+    if (stat(DEVPATH, &st) == -1)
+        return NULL;
+
+    pInfo->options = xf86AddNewOption(pInfo->options, "Device", DEVPATH);
+    return DEVPATH;
+}
+
+static const char *DefaultProtocol(void) {
+    return "Aero";
+}
+
+static int SupportedInterfaces(void) {
+    return MSE_PS2;
+}
+
+OSMouseInfoPtr OSMouseInit(int flags) {
+    OSMouseInfoPtr p;
+
+    p = calloc(sizeof(OSMouseInfoRec), 1);
+    if (p == NULL)
+        return NULL;
+
+    p->SupportedInterfaces = SupportedInterfaces;
+    p->BuiltinNames = BuiltinNames;
+    p->FindDevice = FindDevice;
+    p->DefaultProtocol = DefaultProtocol;
+    p->CheckProtocol = CheckProtocol;
+    p->PreInit = OsMousePreInit;
+
+    return p;
+}
\ No newline at end of file
-- 
2.39.1

