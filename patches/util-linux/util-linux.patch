From c63f96131bad9edf92f3a6f6353b1d0eba2f712b Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Thu, 1 Dec 2022 20:24:57 +1100
Subject: [PATCH] <xxx>

---
 configure.ac                  | 258 ++++++++++++++++++++++++++++------
 disk-utils/cfdisk.c           |   1 +
 include/namespace.h           |   2 +
 include/path.h                |   2 +
 lib/cpuset.c                  |   2 +
 lib/path.c                    |   2 +
 libblkid/src/topology/ioctl.c |   2 +
 login-utils/logindefs.c       |   2 +-
 login-utils/lslogins.c        |   2 +-
 misc-utils/lsblk.h            |   2 +
 term-utils/agetty.c           |   8 ++
 11 files changed, 239 insertions(+), 44 deletions(-)

diff --git a/configure.ac b/configure.ac
index 2ac4c2b..a711717 100644
--- a/configure.ac
+++ b/configure.ac
@@ -212,6 +212,8 @@ bsd_os=no
 AS_CASE([${host_os}],
   [*linux*],
      [linux_os=yes],
+  [*aero*],
+     [linux_os=yes],
   [*darwin*],
      [darwin_os=yes],
   [*bsd*],
@@ -425,7 +427,10 @@ have_pty_h=$ac_cv_header_pty_h
 
 AS_CASE([$linux_os:$have_linux_version_h],
   [yes:no],
-    [AC_MSG_ERROR([kernel headers required on Linux])]
+    AS_CASE([${host_os}],
+      [*linux*],
+        [AC_MSG_ERROR([kernel headers required on Linux])]
+    )
 )
 
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
@@ -1523,20 +1528,37 @@ AS_IF([test "x$enable_hwclock_gplv3" = xyes ], [
 ])
 
 
-UL_BUILD_INIT([mkfs], [yes])
+AC_ARG_ENABLE([mkfs],
+  AS_HELP_STRING([--disable-mkfs], [do not build mkfs]),
+  [], [UL_DEFAULT_ENABLE([mkfs], [yes])]
+)
+UL_BUILD_INIT([mkfs])
 AM_CONDITIONAL([BUILD_MKFS], [test "x$build_mkfs" = xyes])
 
+AC_ARG_ENABLE([isosize],
+  AS_HELP_STRING([--disable-isosize], [do not build isosize]),
+  [], [UL_DEFAULT_ENABLE([isosize], [yes])]
+)
+UL_BUILD_INIT([isosize])
 UL_BUILD_INIT([isosize], [yes])
 AM_CONDITIONAL([BUILD_ISOSIZE], [test "x$build_isosize" = xyes])
 
 
-UL_BUILD_INIT([fstrim], [check])
+AC_ARG_ENABLE([fstrim],
+  AS_HELP_STRING([--disable-fstrim], [do not build fstrim]),
+  [], [UL_DEFAULT_ENABLE([fstrim], [check])]
+)
+UL_BUILD_INIT([fstrim])
 UL_REQUIRES_LINUX([fstrim])
 UL_REQUIRES_BUILD([fstrim], [libmount])
 AM_CONDITIONAL([BUILD_FSTRIM], [test "x$build_fstrim" = xyes])
 
 
-UL_BUILD_INIT([swapon], [check])
+AC_ARG_ENABLE([swapon],
+  AS_HELP_STRING([--disable-swapon], [do not build swapon, swapoff]),
+  [], [UL_DEFAULT_ENABLE([swapon], [check])]
+)
+UL_BUILD_INIT([swapon])
 UL_REQUIRES_LINUX([swapon])
 UL_REQUIRES_SYSCALL_CHECK([swapon], [UL_CHECK_SYSCALL([swapon])], [swapon])
 UL_REQUIRES_SYSCALL_CHECK([swapon], [UL_CHECK_SYSCALL([swapoff])], [swapoff])
@@ -1548,7 +1570,11 @@ AC_CHECK_FUNCS([swapon])
 AC_CHECK_FUNCS([swapoff])
 
 
-UL_BUILD_INIT([lsblk], [check])
+AC_ARG_ENABLE([lsblk],
+  AS_HELP_STRING([--disable-lsblk], [do not build lsblk]),
+  [], [UL_DEFAULT_ENABLE([lsblk], [check])]
+)
+UL_BUILD_INIT([lsblk])
 UL_REQUIRES_LINUX([lsblk])
 UL_REQUIRES_BUILD([lsblk], [libblkid])
 UL_REQUIRES_BUILD([lsblk], [libmount])
@@ -1556,7 +1582,11 @@ UL_REQUIRES_BUILD([lsblk], [libsmartcols])
 AM_CONDITIONAL([BUILD_LSBLK], [test "x$build_lsblk" = xyes])
 
 
-UL_BUILD_INIT([lscpu], [check])
+AC_ARG_ENABLE([lscpu],
+  AS_HELP_STRING([--disable-lscpu], [do not build lscpu]),
+  [], [UL_DEFAULT_ENABLE([lscpu], [check])]
+)
+UL_BUILD_INIT([lscpu])
 UL_REQUIRES_LINUX([lscpu])
 UL_REQUIRES_BUILD([lscpu], [libsmartcols])
 UL_REQUIRES_HAVE([lscpu], [cpu_set_t], [cpu_set_t type])
@@ -1575,7 +1605,11 @@ UL_REQUIRES_HAVE([lslogins], [gnu_utmpx], [GNU utmpx functions])
 AM_CONDITIONAL([BUILD_LSLOGINS], [test "x$build_lslogins" = xyes])
 
 
-UL_BUILD_INIT([chcpu], [check])
+AC_ARG_ENABLE([chcpu],
+  AS_HELP_STRING([--disable-chcpu], [do not build chcpu]),
+  [], [UL_DEFAULT_ENABLE([chcpu], [check])]
+)
+UL_BUILD_INIT([chcpu])
 UL_REQUIRES_LINUX([chcpu])
 UL_REQUIRES_HAVE([chcpu], [cpu_set_t], [cpu_set_t type])
 AM_CONDITIONAL([BUILD_CHCPU], [test "x$build_chcpu" = xyes])
@@ -1592,12 +1626,20 @@ UL_REQUIRES_HAVE([wdctl], [linux_watchdog_h], [linux/watchdog.h header file])
 AM_CONDITIONAL([BUILD_WDCTL], [test "x$build_wdctl" = xyes])
 
 
-UL_BUILD_INIT([swaplabel], [check])
+AC_ARG_ENABLE([swaplabel],
+  AS_HELP_STRING([--disable-swaplabel], [do not build swaplabel]),
+  [], [UL_DEFAULT_ENABLE([swaplabel], [check])]
+)
+UL_BUILD_INIT([swaplabel])
 UL_REQUIRES_BUILD([swaplabel], [libblkid])
 AM_CONDITIONAL([BUILD_SWAPLABEL], [test "x$build_swaplabel" = xyes])
 
 
-UL_BUILD_INIT([mkswap], [yes])
+AC_ARG_ENABLE([mkswap],
+  AS_HELP_STRING([--disable-mkswap], [do not build mkswap]),
+  [], [UL_DEFAULT_ENABLE([mkswap], [yes])]
+)
+UL_BUILD_INIT([mkswap])
 AM_CONDITIONAL([BUILD_MKSWAP], [test "x$build_mkswap" = xyes])
 AS_IF([test "x$build_mkswap" = xyes && test "x$build_libuuid" != xyes], [
   AC_MSG_WARN([uuid library is not found; mkswap(8) will not generate UUIDs])
@@ -1618,13 +1660,25 @@ AC_ARG_ENABLE([logger],
 UL_BUILD_INIT([logger])
 AM_CONDITIONAL([BUILD_LOGGER], [test "x$build_logger" = xyes])
 
-UL_BUILD_INIT([look], [yes])
+AC_ARG_ENABLE([look],
+  AS_HELP_STRING([--disable-look], [do not build look]),
+  [], [UL_DEFAULT_ENABLE([look], [yes])]
+)
+UL_BUILD_INIT([look])
 AM_CONDITIONAL([BUILD_LOOK], [test "x$build_look" = xyes])
 
-UL_BUILD_INIT([mcookie], [yes])
+AC_ARG_ENABLE([mcookie],
+  AS_HELP_STRING([--disable-mcookie], [do not build mcookie]),
+  [], [UL_DEFAULT_ENABLE([mcookie], [yes])]
+)
+UL_BUILD_INIT([mcookie])
 AM_CONDITIONAL([BUILD_MCOOKIE], [test "x$build_mcookie" = xyes])
 
-UL_BUILD_INIT([namei], [yes])
+AC_ARG_ENABLE([namei],
+  AS_HELP_STRING([--disable-namei], [do not build namei]),
+  [], [UL_DEFAULT_ENABLE([namei], [yes])]
+)
+UL_BUILD_INIT([namei])
 AM_CONDITIONAL([BUILD_NAMEI], [test "x$build_namei" = xyes])
 
 matriplet="$($CC -print-multiarch 2>/dev/null || true)"
@@ -1635,16 +1689,28 @@ fi
 UL_BUILD_INIT([whereis], [yes])
 AM_CONDITIONAL([BUILD_WHEREIS], [test "x$build_whereis" = xyes])
 
-UL_BUILD_INIT([getopt], [yes])
+AC_ARG_ENABLE([getopt],
+  AS_HELP_STRING([--disable-getopt], [do not build getopt]),
+  [], [UL_DEFAULT_ENABLE([getopt], [yes])]
+)
+UL_BUILD_INIT([getopt])
 AM_CONDITIONAL([BUILD_GETOPT], [test "x$build_getopt" = xyes])
 
 
-UL_BUILD_INIT([blockdev], [check])
+AC_ARG_ENABLE([blockdev],
+  AS_HELP_STRING([--disable-blockdev], [do not build blockdev]),
+  [], [UL_DEFAULT_ENABLE([blockdev], [check])]
+)
+UL_BUILD_INIT([blockdev])
 UL_REQUIRES_LINUX([blockdev])
 AM_CONDITIONAL([BUILD_BLOCKDEV], [test "x$build_blockdev" = xyes])
 
 
-UL_BUILD_INIT([prlimit], [check])
+AC_ARG_ENABLE([prlimit],
+  AS_HELP_STRING([--disable-prlimit], [do not build prlimit]),
+  [], [UL_DEFAULT_ENABLE([prlimit], [check])]
+)
+UL_BUILD_INIT([prlimit])
 UL_REQUIRES_LINUX([prlimit])
 UL_REQUIRES_BUILD([prlimit], [libsmartcols])
 UL_REQUIRES_SYSCALL_CHECK([prlimit], [UL_CHECK_SYSCALL([prlimit64])], [prlimit64])
@@ -1654,7 +1720,11 @@ AS_IF([test "x$build_prlimit" = xyes], [
 ])
 
 
-UL_BUILD_INIT([lslocks], [check])
+AC_ARG_ENABLE([lslocks],
+  AS_HELP_STRING([--disable-lslocks], [do not build lslocks]),
+  [], [UL_DEFAULT_ENABLE([lslocks], [check])]
+)
+UL_BUILD_INIT([lslocks])
 UL_REQUIRES_LINUX([lslocks])
 UL_REQUIRES_BUILD([lslocks], [libmount])
 UL_REQUIRES_BUILD([lslocks], [libsmartcols])
@@ -1682,7 +1752,11 @@ UL_REQUIRES_SYSCALL_CHECK([pivot_root], [UL_CHECK_SYSCALL([pivot_root])])
 AM_CONDITIONAL([BUILD_PIVOT_ROOT], [test "x$build_pivot_root" = xyes])
 
 
-UL_BUILD_INIT([flock], [check])
+AC_ARG_ENABLE([flock],
+  AS_HELP_STRING([--disable-flock], [do not build flock]),
+  [], [UL_DEFAULT_ENABLE([flock], [check])]
+)
+UL_BUILD_INIT([flock])
 UL_REQUIRES_HAVE([flock], [timer], [timer_create/setitimer function])
 AM_CONDITIONAL([BUILD_FLOCK], [test "x$build_flock" = xyes])
 
@@ -1705,7 +1779,11 @@ UL_BUILD_INIT([chmem])
 UL_REQUIRES_LINUX([chmem])
 AM_CONDITIONAL([BUILD_CHMEM], [test "x$build_chmem" = xyes])
 
-UL_BUILD_INIT([ipcmk], [yes])
+AC_ARG_ENABLE([ipcmk],
+  AS_HELP_STRING([--disable-ipcmk], [do not build ipcmk]),
+  [], [UL_DEFAULT_ENABLE([ipcmk], [yes])]
+)
+UL_BUILD_INIT([ipcmk])
 AM_CONDITIONAL([BUILD_IPCMK], [test "x$build_ipcmk" = xyes])
 
 
@@ -1745,22 +1823,38 @@ UL_REQUIRES_BUILD([lsirq], [libsmartcols])
 AM_CONDITIONAL([BUILD_LSIRQ], [test "x$build_lsirq" = xyes])
 
 
-UL_BUILD_INIT([choom], [check])
+AC_ARG_ENABLE([choom],
+  AS_HELP_STRING([--disable-choom], [do not build choom]),
+  [], [UL_DEFAULT_ENABLE([choom], [check])]
+)
+UL_BUILD_INIT([choom])
 UL_REQUIRES_LINUX([choom])
 AM_CONDITIONAL([BUILD_CHOOM], [test "x$build_choom" = xyes])
 
-UL_BUILD_INIT([lsipc], [check])
+AC_ARG_ENABLE([lsipc],
+  AS_HELP_STRING([--disable-lsipc], [do not build lsipc]),
+  [], [UL_DEFAULT_ENABLE([lsipc], [check])]
+)
+UL_BUILD_INIT([lsipc])
 UL_REQUIRES_LINUX([lsipc])
 UL_REQUIRES_BUILD([lsipc], [libsmartcols])
 AM_CONDITIONAL([BUILD_LSIPC], [test "x$build_lsipc" = xyes])
 
-UL_BUILD_INIT([lsns], [check])
+AC_ARG_ENABLE([lsns],
+  AS_HELP_STRING([--disable-lsns], [do not build lsns]),
+  [], [UL_DEFAULT_ENABLE([lsns], [check])]
+)
+UL_BUILD_INIT([lsns])
 UL_REQUIRES_LINUX([lsns])
 UL_REQUIRES_BUILD([lsns], [libsmartcols])
 UL_REQUIRES_BUILD([lsns], [libmount])
 AM_CONDITIONAL([BUILD_LSNS], [test "x$build_lsns" = xyes])
 
-UL_BUILD_INIT([renice], [yes])
+AC_ARG_ENABLE([renice],
+  AS_HELP_STRING([--disable-renice], [do not build renice]),
+  [], [UL_DEFAULT_ENABLE([renice], [yes])]
+)
+UL_BUILD_INIT([renice])
 AM_CONDITIONAL([BUILD_RENICE], [test "x$build_renice" = xyes])
 
 
@@ -1774,18 +1868,34 @@ UL_REQUIRES_BUILD([rfkill], [libsmartcols])
 AM_CONDITIONAL([BUILD_RFKILL], [test "x$build_rfkill" = xyes])
 
 
-UL_BUILD_INIT([setsid], [yes])
+AC_ARG_ENABLE([setsid],
+  AS_HELP_STRING([--disable-setsid], [do not build setsid]),
+  [], [UL_DEFAULT_ENABLE([setsid], [yes])]
+)
+UL_BUILD_INIT([setsid])
 AM_CONDITIONAL([BUILD_SETSID], [test "x$build_setsid" = xyes])
 
-UL_BUILD_INIT([readprofile], [check])
+AC_ARG_ENABLE([readprofile],
+  AS_HELP_STRING([--disable-readprofile], [do not build readprofile]),
+  [], [UL_DEFAULT_ENABLE([readprofile], [check])]
+)
+UL_BUILD_INIT([readprofile])
 UL_REQUIRES_LINUX([readprofile])
 AM_CONDITIONAL([BUILD_READPROFILE], [test "x$build_readprofile" = xyes])
 
-UL_BUILD_INIT([dmesg], [check])
+AC_ARG_ENABLE([dmesg],
+  AS_HELP_STRING([--disable-dmesg], [do not build dmesg]),
+  [], [UL_DEFAULT_ENABLE([dmesg], [check])]
+)
+UL_BUILD_INIT([dmesg])
 UL_REQUIRES_LINUX([dmesg])
 AM_CONDITIONAL([BUILD_DMESG], [test "x$build_dmesg" = xyes])
 
-UL_BUILD_INIT([ctrlaltdel], [check])
+AC_ARG_ENABLE([ctrlaltdel],
+  AS_HELP_STRING([--disable-ctrlaltdel], [do not build ctrlaltdel]),
+  [], [UL_DEFAULT_ENABLE([ctrlaltdel], [check])]
+)
+UL_BUILD_INIT([ctrlaltdel])
 UL_REQUIRES_LINUX([ctrlaltdel])
 dnl we assume reboot() to be the 1-argument variant, because even considering
 dnl widely used alternative C libraries like uclibc, dietlibc and musl,
@@ -1794,64 +1904,128 @@ dnl earlier than 2.x.
 UL_REQUIRES_HAVE([ctrlaltdel], [reboot], [reboot function])
 AM_CONDITIONAL([BUILD_CTRLALTDEL], [test "x$build_ctrlaltdel" = xyes])
 
-UL_BUILD_INIT([fincore], [check])
+AC_ARG_ENABLE([fincore],
+  AS_HELP_STRING([--disable-fincore], [do not build fincore]),
+  [], [UL_DEFAULT_ENABLE([fincore], [check])]
+)
+UL_BUILD_INIT([fincore])
 UL_REQUIRES_LINUX([fincore])
 UL_REQUIRES_BUILD([fincore], [libsmartcols])
 AM_CONDITIONAL([BUILD_FINCORE], [test "x$build_fincore" = xyes])
 
-UL_BUILD_INIT([fsfreeze], [check])
+AC_ARG_ENABLE([fsfreeze],
+  AS_HELP_STRING([--disable-fsfreeze], [do not build fsfreeze]),
+  [], [UL_DEFAULT_ENABLE([fsfreeze], [check])]
+)
+UL_BUILD_INIT([fsfreeze])
 UL_REQUIRES_LINUX([fsfreeze])
 AM_CONDITIONAL([BUILD_FSFREEZE], [test "x$build_fsfreeze" = xyes])
 
-UL_BUILD_INIT([blkdiscard], [check])
+AC_ARG_ENABLE([blkdiscard],
+  AS_HELP_STRING([--disable-blkdiscard], [do not build blkdiscard]),
+  [], [UL_DEFAULT_ENABLE([blkdiscard], [check])]
+)
+UL_BUILD_INIT([blkdiscard])
 UL_REQUIRES_LINUX([blkdiscard])
 AM_CONDITIONAL([BUILD_BLKDISCARD], [test "x$build_blkdiscard" = xyes])
 
-UL_BUILD_INIT([blkzone], [check])
+AC_ARG_ENABLE([blkzone],
+  AS_HELP_STRING([--disable-blkzone], [do not build blkzone]),
+  [], [UL_DEFAULT_ENABLE([blkzone], [check])]
+)
+UL_BUILD_INIT([blkzone])
 UL_REQUIRES_LINUX([blkzone])
 UL_REQUIRES_HAVE([blkzone], [linux_blkzoned_h], [linux/blkzoned.h header])
 AM_CONDITIONAL([BUILD_BLKZONE], [test "x$build_blkzone" = xyes])
 
-UL_BUILD_INIT([ldattach], [check])
+AC_ARG_ENABLE([ldattach],
+  AS_HELP_STRING([--disable-ldattach], [do not build ldattach]),
+  [], [UL_DEFAULT_ENABLE([ldattach], [check])]
+)
+UL_BUILD_INIT([ldattach])
 UL_REQUIRES_LINUX([ldattach])
 AM_CONDITIONAL([BUILD_LDATTACH], [test "x$build_ldattach" = xyes])
 
-UL_BUILD_INIT([rtcwake], [check])
+AC_ARG_ENABLE([rtcwake],
+  AS_HELP_STRING([--disable-rtcwake], [do not build rtcwake]),
+  [], [UL_DEFAULT_ENABLE([rtcwake], [check])]
+)
+UL_BUILD_INIT([rtcwake])
 UL_REQUIRES_LINUX([rtcwake])
 AM_CONDITIONAL([BUILD_RTCWAKE], [test "x$build_rtcwake" = xyes])
 
-UL_BUILD_INIT([setarch], [check])
+AC_ARG_ENABLE([setarch],
+  AS_HELP_STRING([--disable-setarch], [do not build setarch]),
+  [], [UL_DEFAULT_ENABLE([setarch], [check])]
+)
+UL_BUILD_INIT([setarch])
 UL_REQUIRES_LINUX([setarch])
 AM_CONDITIONAL([BUILD_SETARCH], [test "x$build_setarch" = xyes])
 
-UL_BUILD_INIT([script], [check])
+AC_ARG_ENABLE([script],
+  AS_HELP_STRING([--disable-script], [do not build script]),
+  [], [UL_DEFAULT_ENABLE([script], [check])]
+)
+UL_BUILD_INIT([script])
 UL_REQUIRES_HAVE([script], [pty])
 AM_CONDITIONAL([BUILD_SCRIPT], [test "x$build_script" = xyes])
 
-UL_BUILD_INIT([scriptreplay], [yes])
+AC_ARG_ENABLE([scriptreplay],
+  AS_HELP_STRING([--disable-scriptreplay], [do not build scriptreplay]),
+  [], [UL_DEFAULT_ENABLE([scriptreplay], [yes])]
+)
+UL_BUILD_INIT([scriptreplay])
 AM_CONDITIONAL([BUILD_SCRIPTREPLAY], [test "x$build_scriptreplay" = xyes])
 
-UL_BUILD_INIT([scriptlive], [check])
+AC_ARG_ENABLE([scriptlive],
+  AS_HELP_STRING([--disable-scriptlive], [do not build scriptlive]),
+  [], [UL_DEFAULT_ENABLE([scriptlive], [check])]
+)
+UL_BUILD_INIT([scriptlive])
 UL_REQUIRES_HAVE([scriptlive], [pty])
 AM_CONDITIONAL([BUILD_SCRIPTLIVE], [test "x$build_scriptlive" = xyes])
 
-UL_BUILD_INIT([col], [yes])
+AC_ARG_ENABLE([col],
+  AS_HELP_STRING([--disable-col], [do not build col]),
+  [], [UL_DEFAULT_ENABLE([col], [yes])]
+)
+UL_BUILD_INIT([col])
 AM_CONDITIONAL([BUILD_COL], [test "x$build_col" = xyes])
 
-UL_BUILD_INIT([colcrt], [yes])
+AC_ARG_ENABLE([colcrt],
+  AS_HELP_STRING([--disable-colcrt], [do not build colcrt]),
+  [], [UL_DEFAULT_ENABLE([colcrt], [yes])]
+)
+UL_BUILD_INIT([colcrt])
 AM_CONDITIONAL([BUILD_COLCRT], [test "x$build_colcrt" = xyes])
 
-UL_BUILD_INIT([colrm], [yes])
+AC_ARG_ENABLE([colrm],
+  AS_HELP_STRING([--disable-colrm], [do not build colrm]),
+  [], [UL_DEFAULT_ENABLE([colrm], [yes])]
+)
+UL_BUILD_INIT([colrm])
 AM_CONDITIONAL([BUILD_COLRM], [test "x$build_colrm" = xyes])
 
-UL_BUILD_INIT([column], [check])
+AC_ARG_ENABLE([column],
+  AS_HELP_STRING([--disable-column], [do not build column]),
+  [], [UL_DEFAULT_ENABLE([column], [check])]
+)
+UL_BUILD_INIT([column])
 UL_REQUIRES_BUILD([column], [libsmartcols])
 AM_CONDITIONAL([BUILD_COLUMN], [test "x$build_column" = xyes])
 
-UL_BUILD_INIT([hexdump], [yes])
+AC_ARG_ENABLE([hexdump],
+  AS_HELP_STRING([--disable-hexdump], [do not build hexdump]),
+  [], [UL_DEFAULT_ENABLE([hexdump], [yes])]
+)
+UL_BUILD_INIT([hexdump])
 AM_CONDITIONAL([BUILD_HEXDUMP], [test "x$build_hexdump" = xyes])
 
-UL_BUILD_INIT([rev], [yes])
+AC_ARG_ENABLE([rev],
+  AS_HELP_STRING([--disable-rev], [do not build rev]),
+  [], [UL_DEFAULT_ENABLE([rev], [yes])]
+)
+UL_BUILD_INIT([rev])
 AM_CONDITIONAL([BUILD_REV], [test "x$build_rev" = xyes])
 
 
diff --git a/disk-utils/cfdisk.c b/disk-utils/cfdisk.c
index 11f8b9a..bacba72 100644
--- a/disk-utils/cfdisk.c
+++ b/disk-utils/cfdisk.c
@@ -22,6 +22,7 @@
 #include <libsmartcols.h>
 #include <sys/ioctl.h>
 #include <libfdisk.h>
+#include <termios.h>
 
 #ifdef HAVE_LIBMOUNT
 # include <libmount.h>	/* keep it optional for non-linux systems */
diff --git a/include/namespace.h b/include/namespace.h
index 2d0a56e..fb2289f 100644
--- a/include/namespace.h
+++ b/include/namespace.h
@@ -7,6 +7,7 @@
  */
 #ifndef UTIL_LINUX_NAMESPACE_H
 # define UTIL_LINUX_NAMESPACE_H
+#ifndef __aero__
 
 # include <sched.h>
 
@@ -53,4 +54,5 @@ static inline int setns(int fd, int nstype)
 }
 # endif
 
+#endif /* !__aero__ */
 #endif	/* UTIL_LINUX_NAMESPACE_H */
diff --git a/include/path.h b/include/path.h
index 2a4f80e..ef85c96 100644
--- a/include/path.h
+++ b/include/path.h
@@ -124,6 +124,7 @@ int ul_path_countf_dirents(struct path_cxt *pc, const char *path, ...)
 FILE *ul_prefix_fopen(const char *prefix, const char *path, const char *mode);
 
 
+#ifndef __aero__
 #ifdef HAVE_CPU_SET_T
 # include "cpuset.h"
 int ul_path_readf_cpuset(struct path_cxt *pc, cpu_set_t **set, int maxcpus, const char *path, ...)
@@ -132,4 +133,5 @@ int ul_path_readf_cpuset(struct path_cxt *pc, cpu_set_t **set, int maxcpus, cons
 int ul_path_readf_cpulist(struct path_cxt *pc, cpu_set_t **set, int maxcpus, const char *path, ...)
 				__attribute__ ((__format__ (__printf__, 4, 5)));
 #endif /* HAVE_CPU_SET_T */
+#endif /* !__aero__ */
 #endif /* UTIL_LINUX_PATH_H */
diff --git a/lib/cpuset.c b/lib/cpuset.c
index 2847db8..4adfa6a 100644
--- a/lib/cpuset.c
+++ b/lib/cpuset.c
@@ -1,3 +1,4 @@
+#ifndef __aero__
 /*
  * Terminology:
  *
@@ -411,3 +412,4 @@ usage_err:
 	exit(EXIT_FAILURE);
 }
 #endif
+#endif
diff --git a/lib/path.c b/lib/path.c
index 75fa853..9f03ec6 100644
--- a/lib/path.c
+++ b/lib/path.c
@@ -977,6 +977,7 @@ FILE *ul_prefix_fopen(const char *prefix, const char *path, const char *mode)
 	return fopen(buf, mode);
 }
 
+#ifndef __aero__
 #ifdef HAVE_CPU_SET_T
 static int ul_path_cpuparse(struct path_cxt *pc, cpu_set_t **set, int maxcpus, int islist, const char *path, va_list ap)
 {
@@ -1044,6 +1045,7 @@ int ul_path_readf_cpulist(struct path_cxt *pc, cpu_set_t **set, int maxcpus, con
 }
 
 #endif /* HAVE_CPU_SET_T */
+#endif /* !__aero__ */
 
 
 #ifdef TEST_PROGRAM_PATH
diff --git a/libblkid/src/topology/ioctl.c b/libblkid/src/topology/ioctl.c
index 3aba09e..76b750e 100644
--- a/libblkid/src/topology/ioctl.c
+++ b/libblkid/src/topology/ioctl.c
@@ -16,6 +16,8 @@
 #include <unistd.h>
 #include <errno.h>
 
+#include <linux/fs.h>
+
 #include "topology.h"
 
 /*
diff --git a/login-utils/logindefs.c b/login-utils/logindefs.c
index 97150dc..35371ec 100644
--- a/login-utils/logindefs.c
+++ b/login-utils/logindefs.c
@@ -26,7 +26,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <sys/syslog.h>
+#include <syslog.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <pwd.h>
diff --git a/login-utils/lslogins.c b/login-utils/lslogins.c
index 773d13a..90e617f 100644
--- a/login-utils/lslogins.c
+++ b/login-utils/lslogins.c
@@ -25,7 +25,7 @@
 #include <getopt.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <sys/syslog.h>
+#include <syslog.h>
 #include <pwd.h>
 #include <grp.h>
 #include <shadow.h>
diff --git a/misc-utils/lsblk.h b/misc-utils/lsblk.h
index 8722127..6ae1ebe 100644
--- a/misc-utils/lsblk.h
+++ b/misc-utils/lsblk.h
@@ -13,6 +13,8 @@
 
 #include <libsmartcols.h>
 
+#include <linux/fs.h>
+
 #include "c.h"
 #include "list.h"
 #include "debug.h"
diff --git a/term-utils/agetty.c b/term-utils/agetty.c
index 191fa29..1595672 100644
--- a/term-utils/agetty.c
+++ b/term-utils/agetty.c
@@ -88,6 +88,14 @@
 #  ifndef DEFAULT_STERM
 #    define DEFAULT_STERM  "vt102"
 #  endif
+#elif defined __aero__
+#  define USE_SYSLOG
+#  ifndef DEFAULT_VCTERM
+#    define DEFAULT_VCTERM "linux"
+#  endif
+#  ifndef DEFAULT_STERM
+#    define DEFAULT_STERM  "vt100"
+#  endif
 #else
 #  ifndef DEFAULT_VCTERM
 #    define DEFAULT_VCTERM "vt100"
-- 
2.38.1

