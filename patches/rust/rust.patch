From be8fa0845294e187d6f41004a6967c8ce299fbbe Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Fri, 17 Feb 2023 18:28:24 +1100
Subject: [PATCH] update to latest nightly

Signed-off-by: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
---
 Cargo.lock                                    |   4 +-
 Cargo.toml                                    |   1 +
 .../rustc_target/src/spec/aero_system_base.rs |  34 +++++
 compiler/rustc_target/src/spec/mod.rs         |   3 +
 .../src/spec/x86_64_unknown_aero_system.rs    |  19 +++
 library/std/Cargo.toml                        |   2 +-
 library/std/build.rs                          |   1 +
 library/std/src/os/aero/fs.rs                 | 144 ++++++++++++++++++
 library/std/src/os/aero/mod.rs                |   6 +
 library/std/src/os/aero/raw.rs                |  66 ++++++++
 library/std/src/os/mod.rs                     |   2 +
 library/std/src/os/unix/mod.rs                |   2 +
 library/std/src/sys/unix/args.rs              |   3 +-
 library/std/src/sys/unix/env.rs               |  11 ++
 library/std/src/sys/unix/fs.rs                |   5 +-
 library/std/src/sys/unix/os.rs                |  34 ++++-
 library/std/src/sys/unix/thread.rs            |   7 +
 library/std/src/sys/unix/thread_local_dtor.rs |   2 +-
 library/unwind/build.rs                       |  18 +++
 src/bootstrap/Cargo.lock                      |  40 ++++-
 src/bootstrap/bootstrap.py                    |   7 +-
 src/bootstrap/builder.rs                      |   6 +-
 22 files changed, 399 insertions(+), 18 deletions(-)
 create mode 100644 compiler/rustc_target/src/spec/aero_system_base.rs
 create mode 100644 compiler/rustc_target/src/spec/x86_64_unknown_aero_system.rs
 create mode 100644 library/std/src/os/aero/fs.rs
 create mode 100644 library/std/src/os/aero/mod.rs
 create mode 100644 library/std/src/os/aero/raw.rs

diff --git a/Cargo.lock b/Cargo.lock
index 15f051d0cff..f3548683f44 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2326,9 +2326,7 @@ checksum = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"
 
 [[package]]
 name = "libc"
-version = "0.2.138"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "db6d7e329c562c5dfab7a46a2afabc8b987ab9a4834c9d1ca04dc54c1546cef8"
+version = "0.2.139"
 dependencies = [
  "rustc-std-workspace-core",
 ]
diff --git a/Cargo.toml b/Cargo.toml
index 15cbb2659c9..098e8227659 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -114,6 +114,7 @@ rustc-workspace-hack = { path = 'src/tools/rustc-workspace-hack' }
 rustc-std-workspace-core = { path = 'library/rustc-std-workspace-core' }
 rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }
 rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }
+libc = { path = '../rust-libc' }
 
 [patch."https://github.com/rust-lang/rust-clippy"]
 clippy_lints = { path = "src/tools/clippy/clippy_lints" }
diff --git a/compiler/rustc_target/src/spec/aero_system_base.rs b/compiler/rustc_target/src/spec/aero_system_base.rs
new file mode 100644
index 00000000000..1237a432e76
--- /dev/null
+++ b/compiler/rustc_target/src/spec/aero_system_base.rs
@@ -0,0 +1,34 @@
+use crate::spec::{cvs, LinkArgs, LinkerFlavor, RelroLevel, TargetOptions, Cc, Lld};
+
+pub fn opts() -> TargetOptions {
+    let mut args = LinkArgs::new();
+    args.insert(
+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),
+        vec![
+            // We want to be able to strip as much executable code as possible
+            // from the linker command line, and this flag indicates to the
+            // linker that it can avoid linking in dynamic libraries that don't
+            // actually satisfy any symbols up to that point (as with many other
+            // resolutions the linker does). This option only applies to all
+            // following libraries so we're sure to pass it as one of the first
+            // arguments.
+            "-Wl,--as-needed".into(),
+            // Always enable NX protection when it is available
+            "-Wl,-z,noexecstack".into(),
+        ],
+    );
+
+    TargetOptions {
+        os: "aero".into(),
+        dynamic_linking: true,
+        executables: true,
+        families: cvs!["unix"],
+        has_rpath: true,
+        pre_link_args: args,
+        position_independent_executables: true,
+        relro_level: RelroLevel::Full,
+        has_thread_local: true,
+        crt_static_respected: true,
+        ..Default::default()
+    }
+}
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index bc1920e3424..d4d049a8631 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -65,6 +65,7 @@
 mod freebsd_base;
 mod fuchsia_base;
 mod haiku_base;
+mod aero_system_base;
 mod hermit_base;
 mod illumos_base;
 mod l4re_base;
@@ -1105,6 +1106,8 @@ fn $module() {
     ("i686-unknown-haiku", i686_unknown_haiku),
     ("x86_64-unknown-haiku", x86_64_unknown_haiku),
 
+    ("x86_64-unknown-aero-system", x86_64_unknown_aero_system),
+
     ("aarch64-apple-darwin", aarch64_apple_darwin),
     ("x86_64-apple-darwin", x86_64_apple_darwin),
     ("i686-apple-darwin", i686_apple_darwin),
diff --git a/compiler/rustc_target/src/spec/x86_64_unknown_aero_system.rs b/compiler/rustc_target/src/spec/x86_64_unknown_aero_system.rs
new file mode 100644
index 00000000000..d4e4097fb4b
--- /dev/null
+++ b/compiler/rustc_target/src/spec/x86_64_unknown_aero_system.rs
@@ -0,0 +1,19 @@
+use crate::spec::{LinkerFlavor, StackProbeType, Target, Cc, Lld};
+
+pub fn target() -> Target {
+    let mut base = super::aero_system_base::opts();
+    base.cpu = "x86-64".into();
+    base.max_atomic_width = Some(64);
+    base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
+    // don't use probe-stack=inline-asm until rust-lang/rust#83139 is resolved.
+    base.stack_probes = StackProbeType::Call;
+
+    Target {
+        llvm_target: "x86_64-unknown-aero-system".into(),
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+            .into(),
+        arch: "x86_64".into(),
+        options: base,
+    }
+}
diff --git a/library/std/Cargo.toml b/library/std/Cargo.toml
index 349cd91c89e..aa84feaec7b 100644
--- a/library/std/Cargo.toml
+++ b/library/std/Cargo.toml
@@ -15,7 +15,7 @@ cfg-if = { version = "1.0", features = ['rustc-dep-of-std'] }
 panic_unwind = { path = "../panic_unwind", optional = true }
 panic_abort = { path = "../panic_abort" }
 core = { path = "../core" }
-libc = { version = "0.2.138", default-features = false, features = ['rustc-dep-of-std'] }
+libc = { path = "../../../rust-libc", default-features = false, features = ['rustc-dep-of-std'] }
 compiler_builtins = { version = "0.1.87" }
 profiler_builtins = { path = "../profiler_builtins", optional = true }
 unwind = { path = "../unwind" }
diff --git a/library/std/build.rs b/library/std/build.rs
index 8b1a06ee750..683976b2a47 100644
--- a/library/std/build.rs
+++ b/library/std/build.rs
@@ -24,6 +24,7 @@ fn main() {
         || target.contains("l4re")
         || target.contains("redox")
         || target.contains("haiku")
+        || target.contains("aero")
         || target.contains("vxworks")
         || target.contains("wasm32")
         || target.contains("wasm64")
diff --git a/library/std/src/os/aero/fs.rs b/library/std/src/os/aero/fs.rs
new file mode 100644
index 00000000000..a3c953ca169
--- /dev/null
+++ b/library/std/src/os/aero/fs.rs
@@ -0,0 +1,144 @@
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+use crate::fs::Metadata;
+use crate::sys_common::AsInner;
+
+#[allow(deprecated)]
+use crate::os::aero::raw;
+
+/// OS-specific extensions to [`fs::Metadata`].
+///
+/// [`fs::Metadata`]: crate::fs::Metadata
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+pub trait MetadataExt {
+    /// Gain a reference to the underlying `stat` structure which contains
+    /// the raw information returned by the OS.
+    ///
+    /// The contents of the returned `stat` are **not** consistent across
+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the
+    /// cross-Unix abstractions contained within the raw stat.
+    #[stable(feature = "metadata_ext", since = "1.1.0")]
+    #[deprecated(since = "1.8.0", note = "other methods of this trait are now preferred")]
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_dev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ino(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mode(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_nlink(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_uid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_gid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_rdev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_size(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blksize(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blocks(&self) -> u64;
+}
+
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+impl MetadataExt for Metadata {
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat {
+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }
+    }
+
+    fn st_dev(&self) -> u64 {
+        self.as_inner().as_inner().st_dev as u64
+    }
+
+    fn st_ino(&self) -> u64 {
+        self.as_inner().as_inner().st_ino as u64
+    }
+
+    fn st_mode(&self) -> u32 {
+        self.as_inner().as_inner().st_mode as u32
+    }
+
+    fn st_nlink(&self) -> u64 {
+        self.as_inner().as_inner().st_nlink as u64
+    }
+
+    fn st_uid(&self) -> u32 {
+        self.as_inner().as_inner().st_uid as u32
+    }
+
+    fn st_gid(&self) -> u32 {
+        self.as_inner().as_inner().st_gid as u32
+    }
+
+    fn st_rdev(&self) -> u64 {
+        self.as_inner().as_inner().st_rdev as u64
+    }
+
+    fn st_size(&self) -> u64 {
+        self.as_inner().as_inner().st_size as u64
+    }
+
+    fn st_atime(&self) -> i64 {
+        self.as_inner().as_inner().st_atime as i64
+    }
+
+    fn st_atime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_atime_nsec as i64
+    }
+
+    fn st_mtime(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime as i64
+    }
+
+    fn st_mtime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime_nsec as i64
+    }
+
+    fn st_ctime(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime as i64
+    }
+
+    fn st_ctime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime_nsec as i64
+    }
+
+    fn st_blksize(&self) -> u64 {
+        self.as_inner().as_inner().st_blksize as u64
+    }
+
+    fn st_blocks(&self) -> u64 {
+        self.as_inner().as_inner().st_blocks as u64
+    }
+}
diff --git a/library/std/src/os/aero/mod.rs b/library/std/src/os/aero/mod.rs
new file mode 100644
index 00000000000..ea3291a2f18
--- /dev/null
+++ b/library/std/src/os/aero/mod.rs
@@ -0,0 +1,6 @@
+//! Aero-specific definitions
+
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+pub mod fs;
+pub mod raw;
diff --git a/library/std/src/os/aero/raw.rs b/library/std/src/os/aero/raw.rs
new file mode 100644
index 00000000000..c5e56b8b7b9
--- /dev/null
+++ b/library/std/src/os/aero/raw.rs
@@ -0,0 +1,66 @@
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+#[stable(feature = "pthread_t", since = "1.8.0")]
+pub type pthread_t = usize; // TODO: This is completely wrong tbh
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type dev_t = libc::dev_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type ino_t = libc::ino_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type mode_t = libc::mode_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type nlink_t = libc::nlink_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type off_t = libc::off_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type time_t = libc::time_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blkcnt_t = libc::blkcnt_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blksize_t = libc::blksize_t;
+
+#[repr(C)]
+#[derive(Clone)]
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub struct stat {
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_dev: libc::dev_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ino: libc::ino_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mode: libc::mode_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_nlink: libc::nlink_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_uid: libc::uid_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_gid: libc::gid_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_rdev: libc::dev_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_size: libc::off_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blksize: libc::blksize_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blocks: libc::blkcnt_t,
+}
diff --git a/library/std/src/os/mod.rs b/library/std/src/os/mod.rs
index 42773805cdb..24158d5da87 100644
--- a/library/std/src/os/mod.rs
+++ b/library/std/src/os/mod.rs
@@ -133,6 +133,8 @@ pub mod windows {}
 pub mod l4re;
 #[cfg(target_os = "macos")]
 pub mod macos;
+#[cfg(target_os = "aero")]
+pub mod aero;
 #[cfg(target_os = "netbsd")]
 pub mod netbsd;
 #[cfg(target_os = "openbsd")]
diff --git a/library/std/src/os/unix/mod.rs b/library/std/src/os/unix/mod.rs
index f97fa0fb06f..9174b0da9a3 100644
--- a/library/std/src/os/unix/mod.rs
+++ b/library/std/src/os/unix/mod.rs
@@ -37,6 +37,8 @@
 
 #[cfg(not(doc))]
 mod platform {
+    #[cfg(target_os = "aero")]
+    pub use crate::os::aero::*;
     #[cfg(target_os = "android")]
     pub use crate::os::android::*;
     #[cfg(target_os = "dragonfly")]
diff --git a/library/std/src/sys/unix/args.rs b/library/std/src/sys/unix/args.rs
index a5ce6d5120d..3dfe759830f 100644
--- a/library/std/src/sys/unix/args.rs
+++ b/library/std/src/sys/unix/args.rs
@@ -69,7 +69,8 @@ fn next_back(&mut self) -> Option<OsString> {
     target_os = "fuchsia",
     target_os = "redox",
     target_os = "vxworks",
-    target_os = "horizon"
+    target_os = "horizon",
+    target_os = "aero"
 ))]
 mod imp {
     use super::Args;
diff --git a/library/std/src/sys/unix/env.rs b/library/std/src/sys/unix/env.rs
index c9ba661c829..5894baf74f2 100644
--- a/library/std/src/sys/unix/env.rs
+++ b/library/std/src/sys/unix/env.rs
@@ -217,3 +217,14 @@ pub mod os {
     pub const EXE_SUFFIX: &str = "";
     pub const EXE_EXTENSION: &str = "";
 }
+
+#[cfg(target_os = "aero")]
+pub mod os {
+    pub const FAMILY: &str = "unix";
+    pub const OS: &str = "aero";
+    pub const DLL_PREFIX: &str = "lib";
+    pub const DLL_SUFFIX: &str = ".so";
+    pub const DLL_EXTENSION: &str = "so";
+    pub const EXE_SUFFIX: &str = "";
+    pub const EXE_EXTENSION: &str = "";
+}
diff --git a/library/std/src/sys/unix/fs.rs b/library/std/src/sys/unix/fs.rs
index 8e1f35d6cc9..18910365f20 100644
--- a/library/std/src/sys/unix/fs.rs
+++ b/library/std/src/sys/unix/fs.rs
@@ -834,7 +834,8 @@ pub fn file_type(&self) -> io::Result<FileType> {
         target_os = "redox",
         target_os = "vxworks",
         target_os = "espidf",
-        target_os = "horizon"
+        target_os = "horizon",
+        target_os = "aero"
     ))]
     pub fn ino(&self) -> u64 {
         self.entry.d_ino as u64
@@ -887,7 +888,7 @@ fn name_bytes(&self) -> &[u8] {
         target_os = "solaris",
         target_os = "illumos",
         target_os = "fuchsia",
-        target_os = "redox"
+        target_os = "redox",
     )))]
     fn name_cstr(&self) -> &CStr {
         unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()) }
diff --git a/library/std/src/sys/unix/os.rs b/library/std/src/sys/unix/os.rs
index 2f2663db607..5a4b2bc6b10 100644
--- a/library/std/src/sys/unix/os.rs
+++ b/library/std/src/sys/unix/os.rs
@@ -41,7 +41,7 @@
 }
 
 extern "C" {
-    #[cfg(not(any(target_os = "dragonfly", target_os = "vxworks")))]
+    #[cfg(not(any(target_os = "dragonfly", target_os = "vxworks", target_os = "aero")))]
     #[cfg_attr(
         any(
             target_os = "linux",
@@ -71,13 +71,13 @@
 }
 
 /// Returns the platform-specific value of errno
-#[cfg(not(any(target_os = "dragonfly", target_os = "vxworks")))]
+#[cfg(not(any(target_os = "dragonfly", target_os = "vxworks", target_os = "aero")))]
 pub fn errno() -> i32 {
     unsafe { (*errno_location()) as i32 }
 }
 
 /// Sets the platform-specific value of errno
-#[cfg(all(not(target_os = "dragonfly"), not(target_os = "vxworks")))] // needed for readdir and syscall!
+#[cfg(all(not(target_os = "dragonfly"), not(target_os = "vxworks"), not(target_os = "aero")))] // needed for readdir and syscall!
 #[allow(dead_code)] // but not all target cfgs actually end up using it
 pub fn set_errno(e: i32) {
     unsafe { *errno_location() = e as c_int }
@@ -111,6 +111,29 @@ pub fn set_errno(e: i32) {
     }
 }
 
+#[cfg(target_os = "aero")]
+pub fn errno() -> i32 {
+    extern "C" {
+        #[thread_local]
+        static __mlibc_errno: c_int;
+    }
+
+    unsafe { __mlibc_errno as i32 }
+}
+
+#[cfg(target_os = "aero")]
+#[allow(dead_code)]
+pub fn set_errno(e: i32) {
+    extern "C" {
+        #[thread_local]
+        static mut __mlibc_errno: c_int;
+    }
+
+    unsafe {
+        __mlibc_errno = e;
+    }
+}
+
 /// Gets a detailed string description for the given error number.
 pub fn error_string(errno: i32) -> String {
     extern "C" {
@@ -471,6 +494,11 @@ pub fn current_exe() -> io::Result<PathBuf> {
     if !path.is_absolute() { getcwd().map(|cwd| cwd.join(path)) } else { Ok(path) }
 }
 
+#[cfg(target_os = "aero")]
+pub fn current_exe() -> io::Result<PathBuf> {
+    unimplemented!()
+}
+
 pub struct Env {
     iter: vec::IntoIter<(OsString, OsString)>,
 }
diff --git a/library/std/src/sys/unix/thread.rs b/library/std/src/sys/unix/thread.rs
index cc0e5929569..b952e199aa2 100644
--- a/library/std/src/sys/unix/thread.rs
+++ b/library/std/src/sys/unix/thread.rs
@@ -160,6 +160,13 @@ pub fn set_name(name: &CStr) {
         }
     }
 
+    #[cfg(target_os = "aero")]
+    pub fn set_name(name: &CStr) {
+        unsafe {
+            libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());
+        }
+    }
+
     #[cfg(target_os = "netbsd")]
     pub fn set_name(name: &CStr) {
         unsafe {
diff --git a/library/std/src/sys/unix/thread_local_dtor.rs b/library/std/src/sys/unix/thread_local_dtor.rs
index 236d2f2ee29..30008fc151d 100644
--- a/library/std/src/sys/unix/thread_local_dtor.rs
+++ b/library/std/src/sys/unix/thread_local_dtor.rs
@@ -11,7 +11,7 @@
 // Note, however, that we run on lots older linuxes, as well as cross
 // compiling from a newer linux to an older linux, so we also have a
 // fallback implementation to use as well.
-#[cfg(any(target_os = "linux", target_os = "fuchsia", target_os = "redox"))]
+#[cfg(any(target_os = "linux", target_os = "fuchsia", target_os = "redox", target_os = "aero"))]
 pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {
     use crate::mem;
     use crate::sys_common::thread_local_dtor::register_dtor_fallback;
diff --git a/library/unwind/build.rs b/library/unwind/build.rs
index 5c3c02fb6ad..9071008e3b9 100644
--- a/library/unwind/build.rs
+++ b/library/unwind/build.rs
@@ -21,5 +21,23 @@ fn main() {
         if has_unwind {
             println!("cargo:rustc-cfg=feature=\"system-llvm-libunwind\"");
         }
+    } else if target.contains("solaris") {
+        println!("cargo:rustc-link-lib=gcc_s");
+    } else if target.contains("illumos") {
+        println!("cargo:rustc-link-lib=gcc_s");
+    } else if target.contains("dragonfly") {
+        println!("cargo:rustc-link-lib=gcc_pic");
+    } else if target.contains("pc-windows-gnu") {
+        // This is handled in the target spec with late_link_args_[static|dynamic]
+    } else if target.contains("uwp-windows-gnu") {
+        println!("cargo:rustc-link-lib=unwind");
+    } else if target.contains("fuchsia") {
+        println!("cargo:rustc-link-lib=unwind");
+    } else if target.contains("haiku") {
+        println!("cargo:rustc-link-lib=gcc_s");
+    } else if target.contains("redox") {
+        // redox is handled in lib.rs
+    } else if target.contains("aero") {
+        println!("cargo:rustc-link-lib=gcc_s");
     }
 }
diff --git a/src/bootstrap/Cargo.lock b/src/bootstrap/Cargo.lock
index 4a0ba592577..d7b4d646308 100644
--- a/src/bootstrap/Cargo.lock
+++ b/src/bootstrap/Cargo.lock
@@ -335,9 +335,7 @@ checksum = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"
 
 [[package]]
 name = "libc"
-version = "0.2.137"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fc7fcc620a3bff7cdd7a365be3376c97191aeaccc2a603e600951e452615bf89"
+version = "0.2.139"
 
 [[package]]
 name = "linux-raw-sys"
@@ -802,3 +800,39 @@ name = "yansi"
 version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
+
+[[patch.unused]]
+name = "glutin"
+version = "0.28.0"
+
+[[patch.unused]]
+name = "libloading"
+version = "0.7.3"
+
+[[patch.unused]]
+name = "mio"
+version = "0.6.23"
+
+[[patch.unused]]
+name = "mio"
+version = "0.8.3"
+
+[[patch.unused]]
+name = "nix"
+version = "0.22.3"
+
+[[patch.unused]]
+name = "num_cpus"
+version = "1.13.0"
+
+[[patch.unused]]
+name = "shared_library"
+version = "0.1.9"
+
+[[patch.unused]]
+name = "users"
+version = "0.11.0"
+
+[[patch.unused]]
+name = "winit"
+version = "0.26.1"
diff --git a/src/bootstrap/bootstrap.py b/src/bootstrap/bootstrap.py
index 013d1ab525b..624c8070fca 100644
--- a/src/bootstrap/bootstrap.py
+++ b/src/bootstrap/bootstrap.py
@@ -717,7 +717,7 @@ class RustBuild(object):
         ... "debug", "bootstrap")
         True
         """
-        return os.path.join(self.build_dir, "bootstrap", "debug", "bootstrap")
+        return os.path.join(self.build_dir, "bootstrap", self.build, "debug", "bootstrap")
 
     def build_bootstrap(self, color, verbose_count):
         """Build bootstrap"""
@@ -726,7 +726,7 @@ class RustBuild(object):
         if self.clean and os.path.exists(build_dir):
             shutil.rmtree(build_dir)
         env = os.environ.copy()
-        # `CARGO_BUILD_TARGET` breaks bootstrap build.
+        # `CARGO_BUILD_TARGET` and 'build.target' break bootstrap build.
         # See also: <https://github.com/rust-lang/rust/issues/70208>.
         if "CARGO_BUILD_TARGET" in env:
             del env["CARGO_BUILD_TARGET"]
@@ -791,6 +791,9 @@ class RustBuild(object):
         elif color == "never":
             args.append("--color=never")
 
+        args.append("--target")
+        args.append(self.build)
+
         # Run this from the source directory so cargo finds .cargo/config
         run(args, env=env, verbose=self.verbose, cwd=self.rust_root)
 
diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs
index b4fc1d4f28d..7ef092488fe 100644
--- a/src/bootstrap/builder.rs
+++ b/src/bootstrap/builder.rs
@@ -1479,6 +1479,8 @@ pub fn cargo(
             self.clear_if_dirty(&out_dir, &self.rustc(compiler));
         }
 
+        let artifact_dir = self.out.join("bootstrap/").join(self.build.build.triple).join("debug/");
+
         // Customize the compiler we're running. Specify the compiler to cargo
         // as our shim and then pass it some various options used to configure
         // how the actual compiler itself is called.
@@ -1491,7 +1493,7 @@ pub fn cargo(
             .env("RUSTC_STAGE", stage.to_string())
             .env("RUSTC_SYSROOT", &sysroot)
             .env("RUSTC_LIBDIR", &libdir)
-            .env("RUSTDOC", self.bootstrap_out.join("rustdoc"))
+            .env("RUSTDOC", artifact_dir.join("rustdoc"))
             .env(
                 "RUSTDOC_REAL",
                 if cmd == "doc" || cmd == "rustdoc" || (cmd == "test" && want_rustdoc) {
@@ -1505,7 +1507,7 @@ pub fn cargo(
         // Clippy support is a hack and uses the default `cargo-clippy` in path.
         // Don't override RUSTC so that the `cargo-clippy` in path will be run.
         if cmd != "clippy" {
-            cargo.env("RUSTC", self.bootstrap_out.join("rustc"));
+            cargo.env("RUSTC", artifact_dir.join("rustc"));
         }
 
         // Dealing with rpath here is a little special, so let's go into some
-- 
2.39.1

