From 8b458716d4a65d2da069678130c32c30395fed89 Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Tue, 28 Mar 2023 17:15:29 +1100
Subject: [PATCH] <xxx>

---
 .gitignore                            |  2 ++
 meson.build                           | 32 ++++++++++++++++-----------
 options/ansi/generic/stdlib-stubs.cpp |  6 +++--
 options/glibc/generic/execinfo.cpp    |  5 +++--
 options/rtdl/generic/linker.cpp       |  2 +-
 sysdeps/aero/generic/sockets.cpp      | 25 +++++++++++++++++++++
 6 files changed, 54 insertions(+), 18 deletions(-)

diff --git a/.gitignore b/.gitignore
index fdd60a0..9f811f4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,5 @@ subprojects
 *.xbstrap
 # editor configs:
 .vscode
+# clangd cache files:
+.cache
diff --git a/meson.build b/meson.build
index 2261926..92b936d 100644
--- a/meson.build
+++ b/meson.build
@@ -315,19 +315,25 @@ subdir('options/bsd')
 rtlib_deps = []
 
 if not headers_only
-	libgcc = meson.get_compiler('c').find_library('gcc', required: false)
-
-	compiler_rt_name = 'libclang_rt.builtins-' + host_machine.cpu_family()
-	compiler_rt = meson.get_compiler('c').find_library(compiler_rt_name, required: false)
-
-	if libgcc.found()
-		rtlib_deps += libgcc
-	elif compiler_rt.found()
-		rtlib_deps += compiler_rt
-	else
-		error('neither libgcc nor ' + compiler_rt_name + ' was found')
-	endif
-
+	# XXX: for Aero and Lyre, we force link mlibc against prebuilt 
+	# libgcc-binaries; the alternative is to build GCC twice (which
+	# is a tedious task).
+	#
+	# TODO: maybe upstream this by having a libgcc path option.
+	
+	# libgcc = meson.get_compiler('c').find_library('gcc', required: false)
+	#
+	# compiler_rt_name = 'libclang_rt.builtins-' + host_machine.cpu_family()
+	# compiler_rt = meson.get_compiler('c').find_library(compiler_rt_name, required: false)
+	#
+	# if libgcc.found()
+	# 	rtlib_deps += libgcc
+	# elif compiler_rt.found()
+	# 	rtlib_deps += compiler_rt
+	# else
+	# 	error('neither libgcc nor ' + compiler_rt_name + ' was found')
+	# endif
+	
 	ld_cpp_args = [
 		'-fvisibility=hidden',
 		'-fno-stack-protector',
diff --git a/options/ansi/generic/stdlib-stubs.cpp b/options/ansi/generic/stdlib-stubs.cpp
index c0e54fe..ddeec8a 100644
--- a/options/ansi/generic/stdlib-stubs.cpp
+++ b/options/ansi/generic/stdlib-stubs.cpp
@@ -391,8 +391,10 @@ int mbtowc(wchar_t *__restrict wc, const char *__restrict mb, size_t max_size) {
 			mlibc::code_seq<wchar_t> wseq{wc, wc + 1};
 			mlibc::code_seq<const char> nseq{mb, mb + max_size};
 			auto e = cc->decode_wtranscode(nseq, wseq, mbtowc_state);
-			if (e != mlibc::charcode_error::null)
-				__ensure(!"decode_wtranscode() errors are not handled");
+			if (e != mlibc::charcode_error::null) {
+				errno = EILSEQ;
+				return -1;
+			}
 
 			return nseq.it - mb;
 		} else {
diff --git a/options/glibc/generic/execinfo.cpp b/options/glibc/generic/execinfo.cpp
index 3474615..10a2109 100644
--- a/options/glibc/generic/execinfo.cpp
+++ b/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/debug.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "backtrace() is unimplemented" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index 6eb9d09..2ab5bc9 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -18,7 +18,7 @@ uintptr_t libraryBase = 0x41000000;
 
 constexpr bool verbose = false;
 constexpr bool stillSlightlyVerbose = false;
-constexpr bool logBaseAddresses = false;
+constexpr bool logBaseAddresses = true;
 constexpr bool logRpath = false;
 constexpr bool eagerBinding = true;
 
diff --git a/sysdeps/aero/generic/sockets.cpp b/sysdeps/aero/generic/sockets.cpp
index c730bff..39cacb4 100644
--- a/sysdeps/aero/generic/sockets.cpp
+++ b/sysdeps/aero/generic/sockets.cpp
@@ -4,7 +4,11 @@
 #include <abi-bits/in.h>
 
 #include <aero/syscall.h>
+
+#include <unistd.h>
 #include <stdint.h>
+#include <net/if.h>
+#include <sys/ioctl.h>
 
 namespace mlibc {
 int sys_socket(int family, int type, int protocol, int *fd) {
@@ -187,4 +191,25 @@ int sys_setsockopt(int fd, int layer, int number, const void *buffer,
         __builtin_unreachable();
     }
 }
+
+int sys_if_nametoindex(const char *name, unsigned int *ret) {
+    int fd = 0;
+
+    // TODO(andypython): is the SOCK_CLOEXEC flag required in this case?
+    int r = sys_socket(AF_INET, SOCK_DGRAM, AF_UNSPEC, &fd);
+    if (r)
+        return r;
+
+    struct ifreq ifr;
+    strncpy(ifr.ifr_name, name, sizeof ifr.ifr_name);
+
+    r = sys_ioctl(fd, SIOCGIFINDEX, &ifr, NULL);
+    close(fd);
+
+    if (r)
+        return r;
+
+    *ret = ifr.ifr_ifindex;
+    return 0;
+}
 } // namespace mlibc
-- 
2.39.2

