From 64a5317fc58a29c4c2cf99b836c9d2d00cec0a8d Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Thu, 6 Apr 2023 14:57:57 +1000
Subject: [PATCH] <xxx>

---
 .gitignore                            |  2 ++
 meson.build                           |  6 +++---
 options/ansi/generic/stdlib-stubs.cpp |  6 ++++--
 options/glibc/generic/execinfo.cpp    |  5 +++--
 options/rtdl/generic/linker.cpp       |  2 +-
 sysdeps/aero/generic/aero.cpp         | 27 +++++++++++++++++++--------
 sysdeps/aero/generic/sockets.cpp      | 25 +++++++++++++++++++++++++
 sysdeps/aero/include/aero/syscall.h   | 10 ++++++++++
 8 files changed, 67 insertions(+), 16 deletions(-)

diff --git a/.gitignore b/.gitignore
index fdd60a0..9f811f4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,5 @@ subprojects
 *.xbstrap
 # editor configs:
 .vscode
+# clangd cache files:
+.cache
diff --git a/meson.build b/meson.build
index 2261926..b7078fb 100644
--- a/meson.build
+++ b/meson.build
@@ -316,10 +316,10 @@ rtlib_deps = []
 
 if not headers_only
 	libgcc = meson.get_compiler('c').find_library('gcc', required: false)
-
+	
 	compiler_rt_name = 'libclang_rt.builtins-' + host_machine.cpu_family()
 	compiler_rt = meson.get_compiler('c').find_library(compiler_rt_name, required: false)
-
+	
 	if libgcc.found()
 		rtlib_deps += libgcc
 	elif compiler_rt.found()
@@ -327,7 +327,7 @@ if not headers_only
 	else
 		error('neither libgcc nor ' + compiler_rt_name + ' was found')
 	endif
-
+	
 	ld_cpp_args = [
 		'-fvisibility=hidden',
 		'-fno-stack-protector',
diff --git a/options/ansi/generic/stdlib-stubs.cpp b/options/ansi/generic/stdlib-stubs.cpp
index c0e54fe..ddeec8a 100644
--- a/options/ansi/generic/stdlib-stubs.cpp
+++ b/options/ansi/generic/stdlib-stubs.cpp
@@ -391,8 +391,10 @@ int mbtowc(wchar_t *__restrict wc, const char *__restrict mb, size_t max_size) {
 			mlibc::code_seq<wchar_t> wseq{wc, wc + 1};
 			mlibc::code_seq<const char> nseq{mb, mb + max_size};
 			auto e = cc->decode_wtranscode(nseq, wseq, mbtowc_state);
-			if (e != mlibc::charcode_error::null)
-				__ensure(!"decode_wtranscode() errors are not handled");
+			if (e != mlibc::charcode_error::null) {
+				errno = EILSEQ;
+				return -1;
+			}
 
 			return nseq.it - mb;
 		} else {
diff --git a/options/glibc/generic/execinfo.cpp b/options/glibc/generic/execinfo.cpp
index 3474615..10a2109 100644
--- a/options/glibc/generic/execinfo.cpp
+++ b/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/debug.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "backtrace() is unimplemented" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index 6eb9d09..2ab5bc9 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -18,7 +18,7 @@ uintptr_t libraryBase = 0x41000000;
 
 constexpr bool verbose = false;
 constexpr bool stillSlightlyVerbose = false;
-constexpr bool logBaseAddresses = false;
+constexpr bool logBaseAddresses = true;
 constexpr bool logRpath = false;
 constexpr bool eagerBinding = true;
 
diff --git a/sysdeps/aero/generic/aero.cpp b/sysdeps/aero/generic/aero.cpp
index 0faf386..e6bd277 100644
--- a/sysdeps/aero/generic/aero.cpp
+++ b/sysdeps/aero/generic/aero.cpp
@@ -176,13 +176,6 @@ int sys_kill(int pid, int sig) {
     return 0;
 }
 
-pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
-    mlibc::infoLogger() << "sys_getpgid() is unimplemented" << frg::endlog;
-    *pgid = 0;
-
-    return 0;
-}
-
 int sys_clock_get(int clock, time_t *secs, long *nanos) {
     struct timespec ts;
     auto result = syscall(SYS_GETTIME, clock, &ts);
@@ -239,6 +232,21 @@ int sys_sleep(time_t *sec, long *nanosec) {
     return 0;
 }
 
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+    auto ret = syscall(SYS_GETPGID, pid);
+    if(int e = sc_error(ret); e)
+        return e;
+    *pgid = ret;
+    return 0;
+}
+
+int sys_setpgid(pid_t pid, pid_t pgid) {
+    auto ret = syscall(SYS_SETPGID, pid, pgid);
+    if(int e = sc_error(ret); e)
+		return e;
+	return 0;
+}
+
 uid_t sys_getuid() {
     mlibc::infoLogger() << "mlibc: sys_setuid is a stub" << frg::endlog;
     return 0;
@@ -250,7 +258,10 @@ uid_t sys_geteuid() {
 }
 
 int sys_setsid(pid_t *sid) {
-    mlibc::infoLogger() << "mlibc: sys_setsid is a stub" << frg::endlog;
+    auto ret = syscall(SYS_SETSID);
+    if(int e = sc_error(ret); e)
+        return e;
+    *sid = ret;
     return 0;
 }
 
diff --git a/sysdeps/aero/generic/sockets.cpp b/sysdeps/aero/generic/sockets.cpp
index c730bff..39cacb4 100644
--- a/sysdeps/aero/generic/sockets.cpp
+++ b/sysdeps/aero/generic/sockets.cpp
@@ -4,7 +4,11 @@
 #include <abi-bits/in.h>
 
 #include <aero/syscall.h>
+
+#include <unistd.h>
 #include <stdint.h>
+#include <net/if.h>
+#include <sys/ioctl.h>
 
 namespace mlibc {
 int sys_socket(int family, int type, int protocol, int *fd) {
@@ -187,4 +191,25 @@ int sys_setsockopt(int fd, int layer, int number, const void *buffer,
         __builtin_unreachable();
     }
 }
+
+int sys_if_nametoindex(const char *name, unsigned int *ret) {
+    int fd = 0;
+
+    // TODO(andypython): is the SOCK_CLOEXEC flag required in this case?
+    int r = sys_socket(AF_INET, SOCK_DGRAM, AF_UNSPEC, &fd);
+    if (r)
+        return r;
+
+    struct ifreq ifr;
+    strncpy(ifr.ifr_name, name, sizeof ifr.ifr_name);
+
+    r = sys_ioctl(fd, SIOCGIFINDEX, &ifr, NULL);
+    close(fd);
+
+    if (r)
+        return r;
+
+    *ret = ifr.ifr_ifindex;
+    return 0;
+}
 } // namespace mlibc
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
index 432bad2..ba56ce9 100644
--- a/sysdeps/aero/include/aero/syscall.h
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -75,6 +75,10 @@
 #define SYS_RENAME 68
 #define SYS_MPROTECT 69
 #define SYS_SOCK_SEND 70
+#define SYS_TRACE 71
+#define SYS_SETPGID 72
+#define SYS_SETSID 73
+#define SYS_GETPGID 74
 
 // Invalid syscall used to trigger a log error in the kernel (as a hint)
 // so, that we can implement the syscall in the kernel.
@@ -217,4 +221,10 @@ __attribute__((always_inline)) static inline long syscall(sc_word_t call,
                                                           T... args) {
     return _syscall(call, sc_cast(args)...);
 }
+
+inline int sc_error(long ret) {
+    if (ret < 0)
+        return -ret;
+    return 0;
+}
 #endif // SYSCALL_H
-- 
2.40.0

