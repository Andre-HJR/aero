From dc0eb6086c635232cf3fee338dbbaa8915938e4e Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Thu, 10 Feb 2022 19:12:25 +1100
Subject: [PATCH] yes

Signed-off-by: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
---
 .gitignore                          |  7 ++++++
 sysdeps/aero/generic/filesystem.cpp | 34 +++++++++++++++++++++++------
 sysdeps/aero/generic/signals.cpp    | 14 ++++++++++--
 sysdeps/aero/include/aero/syscall.h |  6 +++++
 4 files changed, 52 insertions(+), 9 deletions(-)

diff --git a/.gitignore b/.gitignore
index dbb35e8b..384b3395 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,10 @@ subprojects/cxxshim
 subprojects/frigg
 .vscode
 .clang-format
+
+# clangd files
+# 
+# * The compile commands json is usually generated by the build system
+# if not, it can be constructed manually and should be in the root of
+# of the project directory.
+compile_commands.json
diff --git a/sysdeps/aero/generic/filesystem.cpp b/sysdeps/aero/generic/filesystem.cpp
index 6a13f19c..69833ae5 100644
--- a/sysdeps/aero/generic/filesystem.cpp
+++ b/sysdeps/aero/generic/filesystem.cpp
@@ -1,3 +1,4 @@
+#include "mlibc/fsfd_target.hpp"
 #include <aero/syscall.h>
 
 #include <sys/ioctl.h>
@@ -84,9 +85,29 @@ int sys_access(const char *filename, int mode) {
 
 int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
              struct stat *statbuf) {
-    mlibc::infoLogger() << "sys_stat() is unimplemented" << frg::endlog;
+    auto result = 0;
+
+    switch (fsfdt) {
+        case fsfd_target::path: {
+            result = syscall(SYS_STAT, path, strlen(path), statbuf);
+            break;
+        }
+
+        case fsfd_target::fd: {
+            result = syscall(SYS_FSTAT, fd, statbuf);
+            break;
+        }
+
+        default: {
+			mlibc::infoLogger() << "mlibc warning: sys_stat: unsupported fsfd target" << frg::endlog;
+			return EINVAL;
+        }
+    }
+
+    if (result < 0) {
+        return -result;
+    }    
 
-    memset(statbuf, 0, sizeof(struct stat));
     return 0;
 }
 
@@ -192,10 +213,10 @@ int sys_read_entries(int handle, void *buffer, size_t max_size,
     auto entry = (struct aero_dir_entry *)buffer;
 
     struct dirent dirent = {
-        .d_ino = entry->inode,
-        .d_off = entry->offset,
-        .d_reclen = entry->reclen,
-        .d_type = entry->filetyp,
+        .d_ino = static_cast<ino_t>(entry->inode),
+        .d_off = static_cast<off_t>(entry->offset),
+        .d_reclen = static_cast<unsigned short>(entry->reclen),
+        .d_type = static_cast<unsigned char>(entry->filetyp),
     };
 
     // The reclen is the size of the dirent struct, plus the size of the name.
@@ -252,7 +273,6 @@ int sys_pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
                 const struct timespec *timeout, const sigset_t *sigmask,
                 int *num_events) {
     mlibc::infoLogger() << "sys_pselect() is not implemented" << frg::endlog;
-    *num_events = 10;
     return 0;
 }
 
diff --git a/sysdeps/aero/generic/signals.cpp b/sysdeps/aero/generic/signals.cpp
index 3527370c..67f23202 100644
--- a/sysdeps/aero/generic/signals.cpp
+++ b/sysdeps/aero/generic/signals.cpp
@@ -42,8 +42,18 @@ int sys_sigaction(int how, const struct sigaction *__restrict action,
 
 int sys_sigprocmask(int how, const sigset_t *__restrict set,
                     sigset_t *__restrict retrieve) {
-    mlibc::infoLogger() << "sys_sigprocmask() is not implemented"
-                        << frg::endlog;
+	auto old_set = 0;
+
+    if (retrieve) {
+        old_set = reinterpret_cast<sc_word_t>(retrieve);
+    }
+
+    auto result = syscall(SYS_SIGPROCMASK, how, set, old_set);
+
+    if (result < 0) {
+        return -result;
+    }
+
     return 0;
 }
 } // namespace mlibc
\ No newline at end of file
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
index 07b1b51b..f6d7836d 100644
--- a/sysdeps/aero/include/aero/syscall.h
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -49,6 +49,12 @@
 #define SYS_DUP 42
 #define SYS_FCNTL 43
 #define SYS_DUP2 44
+#define SYS_IPC_SEND 45
+#define SYS_IPC_RECV 46
+#define SYS_DISCOVER_ROOT 47
+#define SYS_BECOME_ROOT 48
+#define SYS_STAT 49
+#define SYS_FSTAT 50
 
 // Invalid syscall used to trigger a log error in the kernel (as a hint)
 // so, that we can implement the syscall in the kernel.
-- 
2.25.1

