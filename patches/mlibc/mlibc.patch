From f7b84e6b068490f1cd5516a2fd7e66ec5945beae Mon Sep 17 00:00:00 2001
From: Andy-Python-Programmer <andypythonappdeveloper@gmail.com>
Date: Sat, 17 Dec 2022 15:09:28 +1100
Subject: [PATCH] <xxx>

---
 .gitignore                              |   2 +
 options/ansi/generic/stdlib-stubs.cpp   | 185 +++++++++++++++++++++++-
 options/glibc/generic/execinfo.cpp      |   5 +-
 options/posix/generic/dlfcn-stubs.cpp   |   1 +
 options/posix/generic/termios-stubs.cpp |   5 +-
 options/rtdl/generic/linker.cpp         |   2 +-
 sysdeps/aero/generic/aero.cpp           |  71 +++++----
 sysdeps/aero/generic/filesystem.cpp     |  25 +++-
 sysdeps/aero/generic/sockets.cpp        |  87 ++++++++++-
 sysdeps/aero/generic/time.cpp           |  24 +++
 sysdeps/aero/include/aero/syscall.h     |   8 +
 sysdeps/aero/meson.build                |   1 +
 12 files changed, 371 insertions(+), 45 deletions(-)
 create mode 100644 sysdeps/aero/generic/time.cpp

diff --git a/.gitignore b/.gitignore
index fdd60a0..9f811f4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,5 @@ subprojects
 *.xbstrap
 # editor configs:
 .vscode
+# clangd cache files:
+.cache
diff --git a/options/ansi/generic/stdlib-stubs.cpp b/options/ansi/generic/stdlib-stubs.cpp
index c0e54fe..6d9cc52 100644
--- a/options/ansi/generic/stdlib-stubs.cpp
+++ b/options/ansi/generic/stdlib-stubs.cpp
@@ -319,13 +319,182 @@ void qsort(void *base, size_t count, size_t size,
 	}
 }
 
-void qsort_r(void *, size_t, size_t,
-		int (*compare)(const void *, const void *, void *),
-		void *) {
-	(void) compare;
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+
+// ---------------- QSORT START ----------------
+/*
+ * Adapted from https://github.com/noporpoise/sort_r, original
+ * copyright follows:
+ *
+ * Isaac Turner 29 April 2014 Public Domain
+ */
+#include <stdlib.h>
+#include <string.h>
+
+#define SORT_R_SWAP(a,b,tmp) ((tmp) = (a), (a) = (b), (b) = (tmp))
+
+/* swap a and b */
+/* a and b must not be equal! */
+static void sort_r_swap(char *__restrict a, char *__restrict b,
+			size_t w)
+{
+	char tmp, *end = a+w;
+	for(; a < end; a++, b++) { SORT_R_SWAP(*a, *b, tmp); }
+}
+
+/* swap a, b iff a>b */
+/* a and b must not be equal! */
+/* __restrict is same as restrict but better support on old machines */
+static int sort_r_cmpswap(char *__restrict a,
+			  char *__restrict b, size_t w,
+			  int (*compar)(const void *_a,
+					const void *_b,
+					void *_arg),
+			  void *arg)
+{
+	if(compar(a, b, arg) > 0) {
+		sort_r_swap(a, b, w);
+		return 1;
+	}
+	return 0;
+}
+
+/*
+  Swap consecutive blocks of bytes of size na and nb starting at memory addr ptr,
+  with the smallest swap so that the blocks are in the opposite order. Blocks may
+  be internally re-ordered e.g.
+  12345ab  ->   ab34512
+  123abc   ->   abc123
+  12abcde  ->   deabc12
+*/
+static void sort_r_swap_blocks(char *ptr, size_t na, size_t nb)
+{
+	if(na > 0 && nb > 0) {
+		if(na > nb) { sort_r_swap(ptr, ptr+na, nb); }
+		else { sort_r_swap(ptr, ptr+nb, na); }
+	}
+}
+
+/* Implement recursive quicksort ourselves */
+/* Note: quicksort is not stable, equivalent values may be swapped */
+void qsort_r(void *base, size_t nel, size_t w,
+	     int (*compar)(const void *_a,
+			   const void *_b,
+			   void *_arg),
+	     void *arg)
+{
+	char *b = (char *)base, *end = b + nel*w;
+
+	/* for(size_t i=0; i<nel; i++) {printf("%4i", *(int*)(b + i*sizeof(int)));}
+	   printf("\n"); */
+
+	if(nel < 10) {
+		/* Insertion sort for arbitrarily small inputs */
+		char *pi, *pj;
+		for(pi = b+w; pi < end; pi += w) {
+			for(pj = pi; pj > b && sort_r_cmpswap(pj-w,pj,w,compar,arg); pj -= w) {}
+		}
+	}
+	else
+	{
+		/* nel > 6; Quicksort */
+
+		int cmp;
+		char *pl, *ple, *pr, *pre, *pivot;
+		char *last = b+w*(nel-1), *tmp;
+
+		/*
+		  Use median of second, middle and second-last items as pivot.
+		  First and last may have been swapped with pivot and therefore be extreme
+		*/
+		char *l[3];
+		l[0] = b + w;
+		l[1] = b+w*(nel/2);
+		l[2] = last - w;
+
+		/* printf("pivots: %i, %i, %i\n", *(int*)l[0], *(int*)l[1], *(int*)l[2]); */
+
+		if(compar(l[0],l[1],arg) > 0) { SORT_R_SWAP(l[0], l[1], tmp); }
+		if(compar(l[1],l[2],arg) > 0) {
+			SORT_R_SWAP(l[1], l[2], tmp);
+			if(compar(l[0],l[1],arg) > 0) { SORT_R_SWAP(l[0], l[1], tmp); }
+		}
+
+		/* swap mid value (l[1]), and last element to put pivot as last element */
+		if(l[1] != last) { sort_r_swap(l[1], last, w); }
+
+		/*
+		  pl is the next item on the left to be compared to the pivot
+		  pr is the last item on the right that was compared to the pivot
+		  ple is the left position to put the next item that equals the pivot
+		  ple is the last right position where we put an item that equals the pivot
+		  v- end (beyond the array)
+		  EEEEEELLLLLLLLuuuuuuuuGGGGGGGEEEEEEEE.
+		  ^- b  ^- ple  ^- pl   ^- pr  ^- pre ^- last (where the pivot is)
+		  Pivot comparison key:
+		  E = equal, L = less than, u = unknown, G = greater than, E = equal
+		*/
+		pivot = last;
+		ple = pl = b;
+		pre = pr = last;
+
+		/*
+		  Strategy:
+		  Loop into the list from the left and right at the same time to find:
+		  - an item on the left that is greater than the pivot
+		  - an item on the right that is less than the pivot
+		  Once found, they are swapped and the loop continues.
+		  Meanwhile items that are equal to the pivot are moved to the edges of the
+		  array.
+		*/
+		while(pl < pr) {
+			/* Move left hand items which are equal to the pivot to the far left.
+			   break when we find an item that is greater than the pivot */
+			for(; pl < pr; pl += w) {
+				cmp = compar(pl, pivot, arg);
+				if(cmp > 0) { break; }
+				else if(cmp == 0) {
+					if(ple < pl) { sort_r_swap(ple, pl, w); }
+					ple += w;
+				}
+			}
+			/* break if last batch of left hand items were equal to pivot */
+			if(pl >= pr) { break; }
+			/* Move right hand items which are equal to the pivot to the far right.
+			   break when we find an item that is less than the pivot */
+			for(; pl < pr; ) {
+				pr -= w; /* Move right pointer onto an unprocessed item */
+				cmp = compar(pr, pivot, arg);
+				if(cmp == 0) {
+					pre -= w;
+					if(pr < pre) { sort_r_swap(pr, pre, w); }
+				}
+				else if(cmp < 0) {
+					if(pl < pr) { sort_r_swap(pl, pr, w); }
+					pl += w;
+					break;
+				}
+			}
+		}
+
+		pl = pr; /* pr may have gone below pl */
+
+		/*
+		  Now we need to go from: EEELLLGGGGEEEE
+		  to: LLLEEEEEEEGGGG
+		  Pivot comparison key:
+		  E = equal, L = less than, u = unknown, G = greater than, E = equal
+		*/
+		sort_r_swap_blocks(b, ple-b, pl-ple);
+		sort_r_swap_blocks(pr, pre-pr, end-pre);
+
+		/*for(size_t i=0; i<nel; i++) {printf("%4i", *(int*)(b + i*sizeof(int)));}
+		  printf("\n");*/
+
+		qsort_r(b, (pl-ple)/w, w, compar, arg);
+		qsort_r(end-(pre-pr), (pre-pr)/w, w, compar, arg);
+	}
 }
+// ---------------- QSORT END ----------------
 
 int abs(int num) {
 	return num < 0 ? -num : num;
@@ -392,7 +561,7 @@ int mbtowc(wchar_t *__restrict wc, const char *__restrict mb, size_t max_size) {
 			mlibc::code_seq<const char> nseq{mb, mb + max_size};
 			auto e = cc->decode_wtranscode(nseq, wseq, mbtowc_state);
 			if (e != mlibc::charcode_error::null)
-				__ensure(!"decode_wtranscode() errors are not handled");
+				return -1;
 
 			return nseq.it - mb;
 		} else {
@@ -450,7 +619,7 @@ void free(void *ptr) {
 }
 
 void *malloc(size_t size) {
-	auto nptr = getAllocator().allocate(size);
+	auto nptr = getAllocator().allocate(size + 16);
 	// TODO: Print PID only if POSIX option is enabled.
 	if (mlibc::globalConfig().debugMalloc)
 		mlibc::infoLogger() << "mlibc (PID ?): malloc() returns "
diff --git a/options/glibc/generic/execinfo.cpp b/options/glibc/generic/execinfo.cpp
index 3474615..10a2109 100644
--- a/options/glibc/generic/execinfo.cpp
+++ b/options/glibc/generic/execinfo.cpp
@@ -1,9 +1,10 @@
 #include <execinfo.h>
 #include <bits/ensure.h>
+#include <mlibc/debug.hpp>
 
 int backtrace(void **, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "backtrace() is unimplemented" << frg::endlog;
+	return 0;
 }
 
 char **backtrace_symbols(void *const *, int) {
diff --git a/options/posix/generic/dlfcn-stubs.cpp b/options/posix/generic/dlfcn-stubs.cpp
index fc9fd84..ab57631 100644
--- a/options/posix/generic/dlfcn-stubs.cpp
+++ b/options/posix/generic/dlfcn-stubs.cpp
@@ -27,6 +27,7 @@ char *dlerror(void) {
 
 [[gnu::noinline]]
 void *dlopen(const char *file, int flags) {
+	mlibc::infoLogger() << "mlibc memes: " << file << frg::endlog;
 	auto ra = __builtin_extract_return_addr(__builtin_return_address(0));
 	return __dlapi_open(file, flags, ra);
 }
diff --git a/options/posix/generic/termios-stubs.cpp b/options/posix/generic/termios-stubs.cpp
index 3e621ad..583c1f5 100644
--- a/options/posix/generic/termios-stubs.cpp
+++ b/options/posix/generic/termios-stubs.cpp
@@ -5,6 +5,7 @@
 
 #include <bits/ensure.h>
 #include <mlibc/posix-sysdeps.hpp>
+#include <mlibc/debug.hpp>
 
 speed_t cfgetispeed(const struct termios *tios) {
 	return tios->ibaud;
@@ -50,8 +51,8 @@ int tcflow(int fd, int action) {
 }
 
 int tcflush(int, int) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+	mlibc::infoLogger() << "mlibc::tcflush: is a stub!" << frg::endlog;
+	return 0;
 }
 
 int tcgetattr(int fd, struct termios *attr) {
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index 2e2d3f1..3ff5fef 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -18,7 +18,7 @@ uintptr_t libraryBase = 0x41000000;
 
 constexpr bool verbose = false;
 constexpr bool stillSlightlyVerbose = false;
-constexpr bool logBaseAddresses = false;
+constexpr bool logBaseAddresses = true;
 constexpr bool logRpath = false;
 constexpr bool eagerBinding = true;
 
diff --git a/sysdeps/aero/generic/aero.cpp b/sysdeps/aero/generic/aero.cpp
index 29fb961..ee09678 100644
--- a/sysdeps/aero/generic/aero.cpp
+++ b/sysdeps/aero/generic/aero.cpp
@@ -62,6 +62,16 @@ static frg::vector<Slice, MemoryAllocator> create_slice(char *const arg[]) {
 }
 
 namespace mlibc {
+int sys_uname(struct utsname *buf) {
+    auto result = syscall(SYS_UNAME, buf);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return result;
+}
+
 int sys_futex_tid() {
     // SAFETY: gettid does not return any errors (ie. the call is always
     // successful).
@@ -69,22 +79,22 @@ int sys_futex_tid() {
 }
 
 int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
-    auto result = syscall(SYS_FUTEX_WAIT, pointer, expected, time);
-
-    if (result < 0) {
-        return -result;
-    }
-
+    // auto result = syscall(SYS_FUTEX_WAIT, pointer, expected, time);
+    //
+    // if (result < 0) {
+    //     return -result;
+    // }
+    //
     return 0;
 }
 
 int sys_futex_wake(int *pointer) {
-    auto result = syscall(SYS_FUTEX_WAKE, pointer);
-
-    if (result < 0) {
-        return -result;
-    }
-
+    // auto result = syscall(SYS_FUTEX_WAKE, pointer);
+    //
+    // if (result < 0) {
+    //     return -result;
+    // }
+    //
     return 0;
 }
 
@@ -124,7 +134,9 @@ int sys_anon_free(void *pointer, size_t size) {
 }
 
 void sys_libc_panic() {
-    sys_libc_log("libc panic!");
+    mlibc::infoLogger() << "libc_panic: panicked at 'unknown'" << frg::endlog;
+    __ensure(!syscall(SYS_BACKTRACE));
+
     sys_exit(1);
 }
 
@@ -140,8 +152,15 @@ void sys_exit(int status) {
 
 pid_t sys_getpid() {
     auto result = syscall(SYS_GETPID);
+    __ensure(result >= 0);
+
+    return result;
+}
+
+pid_t sys_getppid() {
+    auto result = syscall(SYS_GETPPID);
+    __ensure(result != 0);
 
-    __ensure(result >= 0); // getpid() cannot fail.
     return result;
 }
 
@@ -162,11 +181,6 @@ pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
     return 0;
 }
 
-pid_t sys_getppid() {
-    mlibc::infoLogger() << "sys_getppid() is unimplemented" << frg::endlog;
-    return 0;
-}
-
 int sys_clock_get(int clock, time_t *secs, long *nanos) {
     struct timespec ts;
     auto result = syscall(SYS_GETTIME, clock, &ts);
@@ -233,7 +247,11 @@ uid_t sys_geteuid() {
     return 0;
 }
 
-int sys_setuid(uid_t uid) UNIMPLEMENTED("sys_setuid")
+int sys_setsid(pid_t *sid) {
+    mlibc::infoLogger() << "mlibc: sys_setsid is a stub" << frg::endlog;
+    return 0;
+}
+
 int sys_seteuid(uid_t euid) UNIMPLEMENTED("sys_seteuid")
 
 gid_t sys_getgid() {
@@ -256,16 +274,19 @@ int sys_setegid(gid_t egid) {
     return 0;
 }
 
-void sys_yield() UNIMPLEMENTED("sys_yield")
+void sys_yield() {
+    mlibc::infoLogger() << "mlibc: sys_yield is a stub" << frg::endlog;
+    __ensure(!syscall(SYS_BACKTRACE));
+}
 
 int sys_clone(void *tcb, pid_t *tid_out, void *stack) {
-    auto tid = syscall(SYS_CLONE, (uintptr_t)__mlibc_start_thread, stack);
+    auto result = syscall(SYS_CLONE, (uintptr_t)__mlibc_start_thread, stack);
 
-    if (tid < 0) {
-        return -tid;
+    if (result < 0) {
+        return -result;
     }
 
-    *tid_out = (pid_t)tid;
+    *tid_out = (pid_t)result;
     return 0;
 }
 
diff --git a/sysdeps/aero/generic/filesystem.cpp b/sysdeps/aero/generic/filesystem.cpp
index a3e2aca..4187059 100644
--- a/sysdeps/aero/generic/filesystem.cpp
+++ b/sysdeps/aero/generic/filesystem.cpp
@@ -158,11 +158,6 @@ int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
     return 0;
 }
 
-int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
-    mlibc::infoLogger() << "sys_poll() is not implemented" << frg::endlog;
-    return 0;
-}
-
 int sys_mkdir(const char *path, mode_t) {
     auto result = syscall(SYS_MKDIR, path, strlen(path));
 
@@ -357,4 +352,24 @@ int sys_eventfd_create(unsigned int initval, int flags, int *fd) {
     *fd = result;
     return 0;
 }
+
+int sys_ppoll(struct pollfd *fds, int nfds, const struct timespec *timeout,
+		const sigset_t *sigmask, int *num_events) {
+    auto result = syscall(SYS_POLL, fds, nfds, timeout, sigmask);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    *num_events = result;
+    return 0;
+}
+
+int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+    struct timespec ts;
+    ts.tv_sec = timeout / 1000;
+    ts.tv_nsec = (timeout % 1000) * 1000000;
+
+    return sys_ppoll(fds, count, &ts, NULL, num_events);
+}
 } // namespace mlibc
diff --git a/sysdeps/aero/generic/sockets.cpp b/sysdeps/aero/generic/sockets.cpp
index b6b18fe..b4635df 100644
--- a/sysdeps/aero/generic/sockets.cpp
+++ b/sysdeps/aero/generic/sockets.cpp
@@ -1,5 +1,6 @@
 #include <mlibc/all-sysdeps.hpp>
 #include <mlibc/thread-entry.hpp>
+#include <mlibc/debug.hpp>
 
 #include <aero/syscall.h>
 #include <stdint.h>
@@ -46,8 +47,8 @@ int sys_listen(int fd, int backlog) {
     return 0;
 }
 
-int sys_accept(int fd, int *newfd) {
-    auto result = syscall(SYS_ACCEPT, fd);
+int sys_accept(int sockfd, int *newfd, struct sockaddr *addr_ptr, socklen_t *addr_length) {
+    auto result = syscall(SYS_ACCEPT, sockfd, addr_ptr, addr_length);
 
     if (result < 0) {
         return -result;
@@ -56,4 +57,86 @@ int sys_accept(int fd, int *newfd) {
     *newfd = result;
     return 0;
 }
+
+
+int sys_msg_recv(int sockfd, struct msghdr *msg_hdr, int flags, ssize_t *length) {
+	auto result = syscall(SYS_SOCK_RECV, sockfd, msg_hdr, flags);
+	
+	if (result < 0) {
+		return -result;
+	}
+
+	*length = result;
+	return 0;
+}
+
+int sys_socketpair(int domain, int type_and_flags, int proto, int *fds) {
+	auto result = syscall(SYS_SOCKET_PAIR, domain, type_and_flags, proto, fds);
+
+	if (result < 0) {
+		return -result;
+	}
+
+	return 0;
+}
+
+int sys_getsockopt(int fd, int layer, int number, void *__restrict buffer, socklen_t *__restrict size) {
+	(void)fd; (void)size;
+	if (layer == SOL_SOCKET && number == SO_PEERCRED) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_PEERCRED is unimplemented\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_SNDBUF) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_SNDBUF is unimplemented\e[39m" << frg::endlog;
+		*(int *)buffer = 4096;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_TYPE) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_TYPE is unimplemented, hardcoding SOCK_STREAM\e[39m" << frg::endlog;
+		*(int *)buffer = SOCK_STREAM;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_ERROR) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_ERROR is unimplemented, hardcoding 0\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	} else if(layer == SOL_SOCKET && number == SO_KEEPALIVE) {
+		mlibc::infoLogger() << "\e[31mmlibc: getsockopt() call with SOL_SOCKET and SO_KEEPALIVE is unimplemented, hardcoding 0\e[39m" << frg::endlog;
+		*(int *)buffer = 0;
+		return 0;
+	} else{
+		mlibc::panicLogger() << "\e[31mmlibc: Unexpected getsockopt() call, layer: " << layer << " number: " << number << "\e[39m" << frg::endlog;
+		__builtin_unreachable();
+	}
+
+	return 0;
+}
+
+int sys_setsockopt(int fd, int layer, int number, const void *buffer, socklen_t size) {
+	(void)fd; (void)buffer; (void)size;
+
+	if (layer == SOL_SOCKET && number == SO_PASSCRED) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_PASSCRED) is not implemented correctly\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_ATTACH_FILTER) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_ATTACH_FILTER) is not implemented correctly\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_RCVBUFFORCE) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt(SO_RCVBUFFORCE) is not implemented correctly\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_SNDBUF) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_SNDBUF is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_KEEPALIVE) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_KEEPALIVE is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == SOL_SOCKET && number == SO_REUSEADDR) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with SOL_SOCKET and SO_REUSEADDR is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else if (layer == AF_NETLINK && number == SO_ACCEPTCONN) {
+		mlibc::infoLogger() << "\e[31mmlibc: setsockopt() call with AF_NETLINK and SO_ACCEPTCONN is unimplemented\e[39m" << frg::endlog;
+		return 0;
+	} else {
+		mlibc::panicLogger() << "\e[31mmlibc: Unexpected setsockopt() call, layer: " << layer << " number: " << number << "\e[39m" << frg::endlog;
+		__builtin_unreachable();
+	}
+}
 } // namespace mlibc
diff --git a/sysdeps/aero/generic/time.cpp b/sysdeps/aero/generic/time.cpp
new file mode 100644
index 0000000..460412d
--- /dev/null
+++ b/sysdeps/aero/generic/time.cpp
@@ -0,0 +1,24 @@
+#include <mlibc/all-sysdeps.hpp>
+#include <aero/syscall.h>
+
+namespace mlibc {
+int sys_setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value) {
+    auto result = syscall(SYS_SETITIMER, which, new_value, old_value);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return 0;
+}
+
+int sys_getitimer(int which, struct itimerval *curr_value) {
+    auto result = syscall(SYS_GETITIMER, which, curr_value);
+
+    if (result < 0) {
+        return -result;
+    }
+
+    return 0;
+}
+}
\ No newline at end of file
diff --git a/sysdeps/aero/include/aero/syscall.h b/sysdeps/aero/include/aero/syscall.h
index 12f8dc6..7fba5dd 100644
--- a/sysdeps/aero/include/aero/syscall.h
+++ b/sysdeps/aero/include/aero/syscall.h
@@ -64,6 +64,14 @@
 #define SYS_FUTEX_WAIT 57
 #define SYS_FUTEX_WAKE 58
 #define SYS_LINK 59
+#define SYS_BACKTRACE 60
+#define SYS_POLL 61
+#define SYS_EXIT_THREAD 62
+#define SYS_SOCK_RECV 63
+#define SYS_SETITIMER 64
+#define SYS_GETITIMER 65
+#define SYS_GETPPID 66
+#define SYS_SOCKET_PAIR 67
 
 // Invalid syscall used to trigger a log error in the kernel (as a hint)
 // so, that we can implement the syscall in the kernel.
diff --git a/sysdeps/aero/meson.build b/sysdeps/aero/meson.build
index a807b37..878c216 100644
--- a/sysdeps/aero/meson.build
+++ b/sysdeps/aero/meson.build
@@ -11,6 +11,7 @@ libc_sources += files(
 	'generic/filesystem.cpp',
 	'generic/sockets.cpp',
 	'generic/signals.cpp',
+	'generic/time.cpp',
 )
 
 if not no_headers
-- 
2.38.1

