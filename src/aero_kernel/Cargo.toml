[package]
name = "aero_kernel"
version = "0.1.0"
authors = ["Anhad Singh <andypythonappdeveloper@gmail.com>"]
edition = "2021"

[features]
round-robin = []
sysroot = []

# `kmemleak` provides a way of detecting possible 
# kernel memory leaks in a way similar to a tracing
# garbage collector.
kmemleak = []

default = ["round-robin"]

[dependencies]
spin = "0.9.2"
bitflags = "1.2.1"
bit_field = "0.10.1"
log = "0.4.14"
raw-cpuid = "10.0.0"
xmas-elf = "0.8.0"
paste = "1.0.5"
hashbrown = "0.11.2"
rustc-demangle = "0.1.20"
lru = "0.6.5"
stivale-boot = "0.2.6"
intrusive-collections = "0.9.2"
aml = "0.15.0"

[dependencies.vte]
git = "https://github.com/Andy-Python-Programmer/vte"
features = ["no_std"]

[dependencies.lazy_static]
version = "1.4.0"
features = ["spin_no_std"]

[dependencies.linked_list_allocator]
version = "0.9.0"
default-features = false
features = ["const_mut_refs"]

[dependencies.aero_syscall]
path = "../aero_syscall/"

[dev-dependencies.aero_test]
path = "../aero_test/"

[build-dependencies]
nasm-rs = { version = "0.2", features = ["parallel"] }
