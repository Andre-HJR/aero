window.SIDEBAR_ITEMS = {"enum":[["Option","The `Option` type. See the module level documentation for more."],["Result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`])."]],"fn":[["drop","Disposes of a value."]],"macro":[["Clone","Derive macro generating an impl of the trait `Clone`."],["Copy","Derive macro generating an impl of the trait `Copy`."],["Debug","Derive macro generating an impl of the trait `Debug`."],["Default","Derive macro generating an impl of the trait `Default`."],["Eq","Derive macro generating an impl of the trait `Eq`."],["Hash","Derive macro generating an impl of the trait `Hash`."],["Ord","Derive macro generating an impl of the trait `Ord`."],["PartialEq","Derive macro generating an impl of the trait `PartialEq`."],["PartialOrd","Derive macro generating an impl of the trait `PartialOrd`."],["asm","Inline assembly."],["assert","Asserts that a boolean expression is `true` at runtime."],["assert_cfg","Asserts that a given configuration is set."],["assert_eq_align","Asserts that types are equal in alignment."],["assert_eq_size","Asserts that types are equal in size."],["assert_eq_size_ptr","Asserts that values pointed to are equal in size."],["assert_eq_size_val","Asserts that values are equal in size."],["assert_fields","Asserts that the type has the given fields."],["assert_impl_all","Asserts that the type implements all of the given traits."],["assert_impl_any","Asserts that the type implements any of the given traits."],["assert_impl_one","Asserts that the type implements exactly one in a set of traits."],["assert_not_impl_all","Asserts that the type does not implement all of the given traits."],["assert_not_impl_any","Asserts that the type does not implement any of the given traits."],["assert_obj_safe","Asserts that the traits support dynamic dispatch (object-safety)."],["assert_trait_sub_all","Asserts that the trait is a child of all of the other traits."],["assert_trait_super_all","Asserts that the trait is a parent of all of the other traits."],["assert_type_eq_all","Asserts that all types in a list are equal to each other."],["assert_type_ne_all","Asserts that all types are not equal to each other."],["bench","Attribute macro applied to a function to turn it into a benchmark test."],["cfg","Evaluates boolean combinations of configuration flags at compile-time."],["cfg_accessible","Keeps the item it’s applied to if the passed path is accessible, and removes it otherwise."],["cfg_eval","Expands all `#[cfg]` and `#[cfg_attr]` attributes in the code fragment it’s applied to."],["column","Expands to the column number at which it was invoked."],["compile_error","Causes compilation to fail with the given error message when encountered."],["concat","Concatenates literals into a static string slice."],["concat_bytes","Concatenates literals into a byte slice."],["concat_idents","Concatenates identifiers into one identifier."],["const_assert","Asserts that constant expressions evaluate to `true`."],["const_assert_eq","Asserts that constants are equal in value."],["const_assert_ne","Asserts that constants are not equal in value."],["derive","Attribute macro used to apply derive macros."],["env","Inspects an environment variable at compile time."],["file","Expands to the file name in which it was invoked."],["format_args","Constructs parameters for the other string-formatting macros."],["format_args_nl","Same as [`format_args`], but adds a newline in the end."],["global_allocator","Attribute macro applied to a static to register it as a global allocator."],["include","Parses a file as an expression or an item according to the context."],["include_bytes","Includes a file as a reference to a byte array."],["include_str","Includes a UTF-8 encoded file as a string."],["line","Expands to the line number on which it was invoked."],["log_syntax","Prints passed tokens into the standard output."],["module_path","Expands to a string that represents the current module path."],["option_env","Optionally inspects an environment variable at compile time."],["stringify","Stringifies its arguments."],["test","Attribute macro applied to a function to turn it into a unit test."],["test_case","An implementation detail of the `#[test]` and `#[bench]` macros."],["trace_macros","Enables or disables tracing functionality used for debugging other macros."]],"mod":[["_core","The Rust Core Library"]],"struct":[["String","A UTF-8–encoded, growable string."]],"trait":[["AsMut","Used to do a cheap mutable-to-mutable reference conversion."],["AsRef","Used to do a cheap reference-to-reference conversion."],["Clone","A common trait for the ability to explicitly duplicate an object."],["Copy","Types whose values can be duplicated simply by copying bits."],["Default","A trait for giving a type a useful default value."],["DoubleEndedIterator","An iterator able to yield elements from both ends."],["Drop","Custom code within the destructor."],["Eq","Trait for equality comparisons which are equivalence relations."],["ExactSizeIterator","An iterator that knows its exact length."],["Extend","Extend a collection with the contents of an iterator."],["Fn","The version of the call operator that takes an immutable receiver."],["FnMut","The version of the call operator that takes a mutable receiver."],["FnOnce","The version of the call operator that takes a by-value receiver."],["From","Used to do value-to-value conversions while consuming the input value. It is the reciprocal of [`Into`]."],["FromIterator","Conversion from an [`Iterator`]."],["Into","A value-to-value conversion that consumes the input value. The opposite of [`From`]."],["IntoIterator","Conversion into an [`Iterator`]."],["Iterator","An interface for dealing with iterators."],["Ord","Trait for types that form a total order."],["PartialEq","Trait for equality comparisons which are partial equivalence relations."],["PartialOrd","Trait for types that form a partial order."],["Send","Types that can be transferred across thread boundaries."],["Sized","Types with a constant size known at compile time."],["Sync","Types for which it is safe to share references between threads."],["TryFrom","Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of [`TryInto`]."],["TryInto","An attempted conversion that consumes `self`, which may or may not be expensive."],["Unpin","Types that can be safely moved after being pinned."]]};