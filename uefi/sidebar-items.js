initSidebarItems({"attr":[["unsafe_guid","`unsafe_guid` attribute macro, implements the `Identify` trait for any type (mostly works like a custom derive, but also supports type aliases)"]],"macro":[["newtype_enum","Interface a C-style enum as an integer newtype."]],"mod":[["alloc","This module implements Rust’s global allocator interface using UEFI’s memory allocation functions."],["data_types","Data type definitions"],["logger","This optional feature adds support for the `log` crate, providing a custom logger implementation which writes to a UEFI text output protocol."],["prelude","This module is used to simplify importing the most common UEFI types."],["proto","Protocol definitions."],["table","Standard UEFI tables."]],"struct":[["CStr16","An UCS-2 null-terminated string"],["CStr8","A Latin-1 null-terminated string"],["Completion","This type is used when an UEFI operation has completed, but some non-fatal problems (UEFI warnings) may have been encountered along the way"],["Guid","A globally unique identifier"],["Status","UEFI uses status codes in order to report successes, errors, and warnings."]],"trait":[["Identify","Several entities in the UEFI specification can be referred to by their GUID, this trait is a building block to interface them in uefi-rs."],["ResultExt","Extension trait for Result which helps dealing with UEFI’s warnings"]],"type":[["Result","Return type of most UEFI functions. Both success and error payloads are optional."]]});