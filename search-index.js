var searchIndex = JSON.parse('{\
"aero":{"doc":"AeroAero is a new modern, unix based operating system. It …","i":[[0,"drivers","aero","",null,null],[0,"keyboard","aero::drivers","",null,null],[17,"LEFT_SHIFT_PRESSED","aero::drivers::keyboard","",null,null],[17,"LEFT_SHIFT_RELEASED","","",null,null],[17,"RIGHT_SHIFT_PRESSED","","",null,null],[17,"RIGHT_SHIFT_RELEASED","","",null,null],[17,"SPACEBAR_PRESSED","","",null,null],[17,"ENTER_PRESSED","","",null,null],[17,"BACKSPACE_PRESSED","","",null,null],[17,"ASCII_TABLE","","",null,null],[7,"IS_LEFT_SHIFT_PRESSED","","",null,null],[7,"IS_RIGHT_SHIFT_PRESSED","","",null,null],[5,"translate_keystroke","","",null,[[]]],[5,"handle","","",null,[[]]],[0,"mouse","aero::drivers","",null,null],[17,"MOUSE_WAIT_TIMEOUT","aero::drivers::mouse","",null,null],[17,"PS2_X_SIGN","","",null,null],[17,"PS2_Y_SIGN","","",null,null],[17,"PS2_X_OVERFLOW","","",null,null],[17,"PS2_Y_OVERFLOW","","",null,null],[7,"MOUSE_CYCLE","","",null,null],[7,"MOUSE_PACKET","","",null,null],[7,"MOUSE_PACKET_READY","","",null,null],[7,"MOUSE_POSITION","","",null,null],[3,"MousePoition","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[11,"new","","Create a new mouse position.",0,[[]]],[5,"mouse_wait","","",null,[[]]],[5,"mouse_wait_input","","",null,[[]]],[5,"mouse_write","","",null,[[]]],[5,"handle","","Handle the mouse interrupt.",null,[[]]],[5,"process_mouse_packet","","Process the mouse packet generated by mouse interrupts.",null,[[]]],[5,"init","","Initialise the PS/2 Mouse.",null,[[]]],[0,"gdt","aero","",null,null],[0,"gdt","aero::gdt","The GDT contains entries telling the CPU about memory …",null,null],[5,"LoadGDT","aero::gdt::gdt","Load the GDT using inline assembly.",null,null],[3,"GDTDescriptor","","The GDT Descriptor containing the size of offset of the …",null,null],[12,"size","","The size of the table subtracted by 1. The size of the …",1,null],[12,"offset","","The linear address of the table.",1,null],[11,"new","","Create a new GDT descriptor.",1,[[]]],[3,"GDTEntry","","",null,null],[12,"limit_low","","",2,null],[12,"base_low","","",2,null],[12,"base_middle","","",2,null],[12,"access_byte","","",2,null],[12,"limit_hi_flags","","The limit high and the flags.",2,null],[12,"base_hi","","",2,null],[11,"new","","Create a new GDT entry.",2,[[]]],[3,"GDT","","The GDT.",null,null],[12,"kernel_null","","The kernel null segment: <code>0x00</code>.",3,null],[12,"kernel_code","","The kernel code segment: <code>0x08</code>.",3,null],[12,"kernel_data","","The kernel data segment: <code>0x10</code>.",3,null],[12,"user_null","","The user null segment.",3,null],[12,"user_code","","The user code segment.",3,null],[12,"user_data","","The user data segment.",3,null],[5,"init","","Initialize the GDT.",null,[[]]],[3,"GLOBAL_DESCRIPTOR_TABLE","","The GDT (Global Descriptor Table).",null,null],[12,"__private_field","","",4,null],[0,"interrupts","aero","",null,null],[0,"exceptions","aero::interrupts","",null,null],[5,"divide_by_zero","aero::interrupts::exceptions","",null,[[]]],[5,"debug","","",null,[[]]],[5,"non_maskable","","",null,[[]]],[5,"breakpoint","","",null,[[]]],[5,"overflow","","",null,[[]]],[5,"bound_range","","",null,[[]]],[5,"invalid_opcode","","",null,[[]]],[5,"device_not_available","","",null,[[]]],[5,"double_fault","","",null,[[]]],[5,"invalid_tss","","",null,[[]]],[5,"page_fault","","",null,[[]]],[0,"idt","aero::interrupts","The IDT is similar to the Global Descriptor Table in …",null,null],[17,"IDT_ENTRIES","aero::interrupts::idt","Declare an IDT of 256 entries. Although not all entries …",null,null],[17,"PIC1_COMMAND","","",null,null],[17,"PIC1_DATA","","",null,null],[17,"PIC2_COMMAND","","",null,null],[17,"PIC2_DATA","","",null,null],[17,"PIC_EOI","","",null,null],[17,"ICW1_INIT","","",null,null],[17,"ICW1_ICW4","","",null,null],[17,"ICW4_8086","","",null,null],[6,"IDTInterruptHandlerFn","","",null,null],[7,"IDT","","",null,null],[3,"IDTFlags","","",null,null],[12,"bits","","",5,null],[18,"PRESENT","","",5,null],[18,"RING_0","","",5,null],[18,"RING_1","","",5,null],[18,"RING_2","","",5,null],[18,"RING_3","","",5,null],[18,"SS","","",5,null],[18,"INTERRUPT","","",5,null],[18,"TRAP","","",5,null],[11,"empty","","Returns an empty set of flags",5,[[],["idtflags",3]]],[11,"all","","Returns the set containing all flags.",5,[[],["idtflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",5,[[],[["option",4],["idtflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",5,[[],["idtflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",5,[[],["idtflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",5,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",5,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",5,[[["idtflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",5,[[["idtflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["idtflags",3]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["idtflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["idtflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",5,[[["idtflags",3]]]],[3,"IDTDescriptor","","",null,null],[12,"size","","",6,null],[12,"offset","","",6,null],[11,"new","","Create a new IDT descriptor.",6,[[]]],[3,"IDTEntry","","",null,null],[12,"offset_low","","",7,null],[12,"selector","","",7,null],[12,"ist","","",7,null],[12,"type_attr","","",7,null],[12,"offset_middle","","",7,null],[12,"offset_hi","","",7,null],[12,"ignore","","",7,null],[11,"null","","Create a new IDT entry with all values defaulted to 0, ie …",7,[[]]],[11,"set_flags","","Set the IDT entry flags.",7,[[["idtflags",3]]]],[11,"set_offset","","Set the IDT entry offset.",7,[[]]],[11,"set_function","","Set the handler function of the IDT entry.",7,[[]]],[5,"init","","Initialize the IDT.",null,[[]]],[5,"load_idt","","Load the IDT using inline assembly.",null,[[]]],[5,"enable_interrupts","","Enable interrupts.",null,[[]]],[5,"halt","","Halt the CPU. Will resume when interrupt is recieved if …",null,[[]]],[5,"end_pic1","","",null,[[]]],[5,"end_pic2","","",null,[[]]],[5,"load_pic","","",null,[[]]],[0,"irq","aero::interrupts","",null,null],[5,"pit","aero::interrupts::irq","",null,[[]]],[5,"keyboard","","",null,[[]]],[5,"mouse","","",null,[[]]],[0,"memory","aero","",null,null],[0,"alloc","aero::memory","",null,null],[17,"HEAP_START","aero::memory::alloc","",null,null],[17,"HEAP_SIZE","","",null,null],[3,"AeroSystemAllocator","","",null,null],[11,"new","","",8,[[]]],[5,"alloc_error_handler","","",null,[[["layout",3]]]],[5,"get_page_range","","",null,[[],["pagerangeinclusive",3]]],[5,"init_heap","","Initialize the heap.",null,[[["offsetpagetable",3]],[["result",4],["maptoerror",4]]]],[0,"paging","aero::memory","",null,null],[3,"BootInfoFrameAllocator","aero::memory::paging","Frame allocator responsible for returning usable frames …",null,null],[12,"memory_map","","",9,null],[12,"next","","",9,null],[11,"init","","",9,[[["memorymap",3]]]],[11,"usable_frames","","Returns an iterator over the usable frames specified in …",9,[[]]],[5,"init","","Initialize paging.",null,[[["bootinfo",3]]]],[5,"init_offset_page_table","","Initialize a new offset page table.",null,[[["virtaddr",3]],["offsetpagetable",3]]],[5,"active_level_4_table","","Get a mutable reference to the active level 4 page table.",null,[[["virtaddr",3]],["pagetable",3]]],[0,"panic","aero","",null,null],[5,"rust_begin_unwind","aero::panic","",null,[[["panicinfo",3]]]],[5,"rust_eh_personality","","",null,[[]]],[5,"_Unwind_Resume","","",null,[[]]],[0,"pit","aero","The PIT (Programmable Interval Timer) chip basically …",null,null],[3,"PITDescriptor","aero::pit","",null,null],[12,"ticks_since_epoch","","CPU ticks since epoch.",10,null],[11,"new","","Create a new PIT descriptor.",10,[[]]],[11,"sleep","","",10,[[["duration",3]]]],[11,"tick","","Increments ticks since epoch. This function is called on …",10,[[]]],[11,"get_ticks_since_epoch","","Get the CPU ticks since epoch.",10,[[]]],[7,"PIT","","The PIT (Programmable Interval Timer)",null,null],[5,"init","","Initialise the PIT chip.",null,[[]]],[0,"tests","aero","",null,null],[0,"utils","","",null,null],[0,"io","aero::utils","Wrapper functions for the hardware IO using respective …",null,null],[5,"outb","aero::utils::io","Wrapper function to the <code>outb</code> assembly instruction used to …",null,[[]]],[5,"inb","","Wrapper function to the <code>inb</code> assembly instruction used to …",null,[[]]],[5,"wait","","This function is called after every <code>outb</code> instruction as …",null,[[]]],[0,"memory","aero::utils","",null,null],[3,"Locked","aero::utils::memory","",null,null],[12,"inner","","",11,null],[11,"new","","",11,[[]]],[11,"lock","","",11,[[],["mutexguard",3]]],[0,"vga","aero","",null,null],[0,"buffer","aero::vga","",null,null],[17,"BUFFER_HEIGHT","aero::vga::buffer","",null,null],[17,"BUFFER_WIDTH","","",null,null],[3,"ScreenChar","","",null,null],[12,"character","","",12,null],[12,"color_code","","",12,null],[3,"Buffer","","",null,null],[12,"chars","","",13,null],[0,"color","aero::vga","",null,null],[4,"Color","aero::vga::color","",null,null],[13,"Black","","",14,null],[13,"Blue","","",14,null],[13,"Green","","",14,null],[13,"Cyan","","",14,null],[13,"Red","","",14,null],[13,"Magenta","","",14,null],[13,"Brown","","",14,null],[13,"LightGray","","",14,null],[13,"DarkGray","","",14,null],[13,"LightBlue","","",14,null],[13,"LightGreen","","",14,null],[13,"LightCyan","","",14,null],[13,"LightRed","","",14,null],[13,"Pink","","",14,null],[13,"Yellow","","",14,null],[13,"White","","",14,null],[3,"ColorCode","","",null,null],[12,"0","","",15,null],[11,"new","","",15,[[["color",4]],["colorcode",3]]],[0,"rendy","aero::vga","",null,null],[3,"RENDERER","aero::vga::rendy","",null,null],[12,"__private_field","","",16,null],[3,"Rendy","","",null,null],[12,"column_position","","",17,null],[12,"color_code","","",17,null],[12,"buffer","","",17,null],[11,"string","","",17,[[]]],[11,"byte","","",17,[[]]],[11,"new_line","","",17,[[]]],[11,"clear_row","","",17,[[]]],[11,"clear_screen","","",17,[[]]],[11,"clear_current","","",17,[[]]],[0,"log","aero","",null,null],[5,"info","aero::log","",null,[[]]],[7,"AERO_SYSTEM_ALLOCATOR","aero","",null,null],[5,"__impl_start","","",null,[[["bootinfo",3]]]],[5,"kernel_main","","",null,[[["bootinfo",3]]]],[14,"print","","",null,null],[14,"println","","",null,null],[11,"from","aero::drivers::mouse","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","aero::gdt::gdt","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","aero::interrupts::idt","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"from","aero::memory::alloc","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","aero::memory::paging","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","aero::pit","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","aero::utils::memory","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","aero::vga::buffer","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","aero::vga::color","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"from","aero::vga::rendy","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"deref","aero::gdt::gdt","",4,[[],["gdt",3]]],[11,"deref","aero::vga::rendy","",16,[[],["mutex",3]]],[11,"fmt","aero::drivers::mouse","",0,[[["formatter",3]],["result",6]]],[11,"fmt","aero::interrupts::idt","",5,[[["formatter",3]],["result",6]]],[11,"fmt","aero::vga::buffer","",12,[[["formatter",3]],["result",6]]],[11,"fmt","aero::vga::color","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"sub","aero::interrupts::idt","Returns the set difference of the two sets of flags.",5,[[["idtflags",3]],["idtflags",3]]],[11,"eq","","",5,[[["idtflags",3]]]],[11,"ne","","",5,[[["idtflags",3]]]],[11,"eq","aero::vga::buffer","",12,[[["screenchar",3]]]],[11,"ne","","",12,[[["screenchar",3]]]],[11,"eq","aero::vga::color","",14,[[["color",4]]]],[11,"eq","","",15,[[["colorcode",3]]]],[11,"ne","","",15,[[["colorcode",3]]]],[11,"cmp","aero::interrupts::idt","",5,[[["idtflags",3]],["ordering",4]]],[11,"partial_cmp","","",5,[[["idtflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["idtflags",3]]]],[11,"le","","",5,[[["idtflags",3]]]],[11,"gt","","",5,[[["idtflags",3]]]],[11,"ge","","",5,[[["idtflags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",5,[[["idtflags",3]]]],[11,"not","","Returns the complement of this set of flags.",5,[[],["idtflags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["idtflags",3]],["idtflags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["idtflags",3]],["idtflags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",5,[[["idtflags",3]],["idtflags",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["idtflags",3]]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["idtflags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["idtflags",3]]]],[11,"hash","","",5,[[]]],[11,"write_str","aero::vga::rendy","",17,[[],["result",6]]],[11,"from_iter","aero::interrupts::idt","",5,[[["intoiterator",8]],["idtflags",3]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"extend","","",5,[[["intoiterator",8]]]],[11,"clone","","",5,[[],["idtflags",3]]],[11,"clone","","",7,[[],["idtentry",3]]],[11,"clone","aero::vga::buffer","",12,[[],["screenchar",3]]],[11,"clone","aero::vga::color","",14,[[],["color",4]]],[11,"clone","","",15,[[],["colorcode",3]]],[11,"alloc","aero::utils::memory","",11,[[["layout",3]]]],[11,"dealloc","","",11,[[["layout",3]]]],[11,"initialize","aero::gdt::gdt","",4,[[]]],[11,"initialize","aero::vga::rendy","",16,[[]]],[11,"allocate_frame","aero::memory::paging","",9,[[],[["physframe",3],["option",4]]]]],"p":[[3,"MousePoition"],[3,"GDTDescriptor"],[3,"GDTEntry"],[3,"GDT"],[3,"GLOBAL_DESCRIPTOR_TABLE"],[3,"IDTFlags"],[3,"IDTDescriptor"],[3,"IDTEntry"],[3,"AeroSystemAllocator"],[3,"BootInfoFrameAllocator"],[3,"PITDescriptor"],[3,"Locked"],[3,"ScreenChar"],[3,"Buffer"],[4,"Color"],[3,"ColorCode"],[3,"RENDERER"],[3,"Rendy"]]},\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","i":[[8,"BitField","bit_field","A generic trait which provides methods for extracting and …",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit field.",0,[[]]],[10,"get_bit","","Obtains the bit at the index <code>bit</code>; note that index 0 is …",0,[[]]],[10,"get_bits","","Obtains the range of bits specified by <code>range</code>; note that …",0,[[["range",3]]]],[10,"set_bit","","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …",0,[[]]],[10,"set_bits","","Sets the range of bits defined by the range <code>range</code> to the …",0,[[["range",3]]]],[8,"BitArray","","",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit array.",1,[[]]],[10,"get_bit","","Obtains the bit at the index <code>bit</code>; note that index 0 is …",1,[[]]],[10,"get_bits","","Obtains the range of bits specified by <code>range</code>; note that …",1,[[["range",3]]]],[10,"set_bit","","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …",1,[[]]],[10,"set_bits","","Sets the range of bits defined by the range <code>range</code> to the …",1,[[["range",3]]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]},\
"bootloader":{"doc":"This library part of the bootloader allows kernels to …","i":[[0,"bootinfo","bootloader","Provides boot information to the kernel.",null,null],[3,"MemoryMap","bootloader::bootinfo","A map of the physical memory regions of the underlying …",null,null],[3,"MemoryRegion","","Represents a region of physical memory.",null,null],[12,"range","","The range of frames that belong to the region.",0,null],[12,"region_type","","The type of the region.",0,null],[3,"FrameRange","","A range of frames with an exclusive upper bound.",null,null],[12,"start_frame_number","","The frame <em>number</em> of the first 4KiB frame in the region.",1,null],[12,"end_frame_number","","The frame <em>number</em> of the first 4KiB frame that does no …",1,null],[4,"MemoryRegionType","","Represents possible types for memory regions.",null,null],[13,"Usable","","Unused memory, can be freely used by the kernel.",2,null],[13,"InUse","","Memory that is already in use.",2,null],[13,"Reserved","","Memory reserved by the hardware. Not usable.",2,null],[13,"AcpiReclaimable","","ACPI reclaimable memory",2,null],[13,"AcpiNvs","","ACPI NVS memory",2,null],[13,"BadMemory","","Area containing bad memory",2,null],[13,"Kernel","","Memory used for loading the kernel.",2,null],[13,"KernelStack","","Memory used for the kernel stack.",2,null],[13,"PageTable","","Memory used for creating page tables.",2,null],[13,"Bootloader","","Memory used by the bootloader.",2,null],[13,"FrameZero","","Frame at address zero.",2,null],[13,"Empty","","An empty region with size 0",2,null],[13,"BootInfo","","Memory used for storing the boot information.",2,null],[13,"Package","","Memory used for storing the supplied package",2,null],[3,"BootInfo","","This structure represents the information that the …",null,null],[12,"memory_map","","A map of the physical memory regions of the underlying …",3,null],[12,"physical_memory_offset","","The offset into the virtual address space where the …",3,null],[11,"tls_template","","Returns information about the thread local storage …",3,[[],[["option",4],["tlstemplate",3]]]],[3,"TlsTemplate","","Information about the thread local storage (TLS) template.",null,null],[12,"start_addr","","The virtual start address of the thread local storage …",4,null],[12,"file_size","","The number of data bytes in the template.",4,null],[12,"mem_size","","The total number of bytes that the TLS segment should …",4,null],[14,"entry_point","bootloader","Defines the entry point function.",null,null],[11,"from","bootloader::bootinfo","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["memoryregion",3]]]],[11,"ne","","",0,[[["memoryregion",3]]]],[11,"eq","","",1,[[["framerange",3]]]],[11,"ne","","",1,[[["framerange",3]]]],[11,"eq","","",2,[[["memoryregiontype",4]]]],[11,"eq","","",4,[[["tlstemplate",3]]]],[11,"ne","","",4,[[["tlstemplate",3]]]],[11,"clone","","",0,[[],["memoryregion",3]]],[11,"clone","","",1,[[],["framerange",3]]],[11,"clone","","",2,[[],["memoryregiontype",4]]],[11,"clone","","",4,[[],["tlstemplate",3]]],[11,"new","","Create a new FrameRange from the passed start_addr and …",1,[[]]],[11,"is_empty","","Returns true if the frame range contains no frames.",1,[[]]],[11,"start_addr","","Returns the physical start address of the memory region.",1,[[]]],[11,"end_addr","","Returns the physical end address of the memory region.",1,[[]]]],"p":[[3,"MemoryRegion"],[3,"FrameRange"],[4,"MemoryRegionType"],[3,"BootInfo"],[3,"TlsTemplate"],[3,"MemoryMap"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","i":[[8,"LazyStatic","lazy_static","Support trait for enabling a few common operation on lazy …",null,null],[5,"initialize","","Takes a shared reference to a lazy static and initializes …",null,[[]]],[14,"lazy_static","","",null,null]],"p":[]},\
"spin":{"doc":"Synchronization primitives based on spinning","i":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard from which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[3,"RwLockUpgradeableGuard","","A guard from which the protected data can be read, and …",null,null],[3,"Once","","A synchronization primitive which can be used to run a …",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"deref","","",1,[[]]],[11,"deref","","",3,[[]]],[11,"deref","","",5,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",1,[[]]],[11,"deref_mut","","",4,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"drop","","The dropping of the MutexGuard will release the lock it …",1,[[]]],[11,"drop","","",3,[[]]],[11,"drop","","",5,[[]]],[11,"drop","","",4,[[]]],[11,"default","","",0,[[],["mutex",3]]],[11,"default","","",2,[[],["rwlock",3]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,[[],["mutex",3]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[]]],[11,"lock","","Locks the spinlock and returns a guard.",0,[[],["mutexguard",3]]],[11,"force_unlock","","Force unlock the spinlock.",0,[[]]],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will …",0,[[],[["option",4],["mutexguard",3]]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",2,[[],["rwlock",3]]],[11,"into_inner","","Consumes this <code>RwLock</code>, returning the underlying data.",2,[[]]],[11,"read","","Locks this rwlock with shared read access, blocking the …",2,[[],["rwlockreadguard",3]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",2,[[],[["option",4],["rwlockreadguard",3]]]],[11,"force_read_decrement","","Force decrement the reader count.",2,[[]]],[11,"force_write_unlock","","Force unlock exclusive write access.",2,[[]]],[11,"write","","Lock this rwlock with exclusive write access, blocking …",2,[[],["rwlockwriteguard",3]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",2,[[],[["option",4],["rwlockwriteguard",3]]]],[11,"upgradeable_read","","Obtain a readable lock guard that can later be upgraded …",2,[[],["rwlockupgradeableguard",3]]],[11,"try_upgradeable_read","","Tries to obtain an upgradeable lock guard.",2,[[],[["option",4],["rwlockupgradeableguard",3]]]],[11,"upgrade","","Upgrades an upgradeable lock guard to a writable lock …",5,[[],["rwlockwriteguard",3]]],[11,"try_upgrade","","Tries to upgrade an upgradeable lock guard to a writable …",5,[[],[["rwlockwriteguard",3],["result",4]]]],[11,"downgrade","","Downgrades the upgradeable lock guard to a readable, …",5,[[],["rwlockreadguard",3]]],[11,"downgrade","","Downgrades the writable lock guard to a readable, shared …",4,[[],["rwlockreadguard",3]]],[18,"INIT","","Initialization constant of <code>Once</code>.",6,null],[11,"new","","Creates a new <code>Once</code> value.",6,[[],["once",3]]],[11,"call_once","","Performs an initialization routine once and only once. …",6,[[]]],[11,"try","","Returns a pointer iff the <code>Once</code> was previously initialized",6,[[],["option",4]]],[11,"wait","","Like try, but will spin if the <code>Once</code> is in the process of …",6,[[],["option",4]]]],"p":[[3,"Mutex"],[3,"MutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradeableGuard"],[3,"Once"]]},\
"volatile":{"doc":"Provides wrapper types <code>Volatile</code>, <code>ReadOnly</code>, <code>WriteOnly</code>, …","i":[[3,"Volatile","volatile","A wrapper type around a volatile variable, which allows …",null,null],[11,"new","","Construct a new volatile instance wrapping the given …",0,[[],["volatile",3]]],[11,"read","","Performs a volatile read of the contained value, …",0,[[]]],[11,"write","","Performs a volatile write, setting the contained value to …",0,[[]]],[11,"update","","Performs a volatile read of the contained value, passes a …",0,[[]]],[3,"ReadOnly","","A volatile wrapper which only allows read operations.",null,null],[11,"new","","Construct a new read-only volatile wrapper wrapping the …",1,[[],["readonly",3]]],[11,"read","","Perform a volatile read of the contained value, returning …",1,[[]]],[3,"WriteOnly","","A volatile wrapper which only allows write operations.",null,null],[11,"new","","Constructs a new write only volatile wrapper around the …",2,[[],["writeonly",3]]],[11,"write","","Performs a volatile write of value <code>value</code> into the …",2,[[]]],[6,"ReadWrite","","A volatile wrapper which allows both read and write …",null,null],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[]]],[11,"clone","","",1,[[],["readonly",3]]],[11,"clone","","",2,[[],["writeonly",3]]],[11,"default","","",0,[[],["volatile",3]]],[11,"default","","",1,[[],["readonly",3]]],[11,"default","","",2,[[],["writeonly",3]]]],"p":[[3,"Volatile"],[3,"ReadOnly"],[3,"WriteOnly"]]},\
"x86_64":{"doc":"This crate provides x86_64 specific functions and data …","i":[[0,"addr","x86_64","Physical and virtual addresses manipulation",null,null],[3,"VirtAddr","x86_64::addr","A canonical 64-bit virtual memory address.",null,null],[3,"PhysAddr","","A 64-bit physical memory address.",null,null],[3,"VirtAddrNotValid","","A passed <code>u64</code> was not a valid virtual address.",null,null],[11,"new","","Creates a new canonical virtual address.",0,[[],["virtaddr",3]]],[11,"try_new","","Tries to create a new canonical virtual address.",0,[[],[["virtaddrnotvalid",3],["result",4],["virtaddr",3]]]],[11,"new_truncate","","Creates a new canonical virtual address, throwing out …",0,[[],["virtaddr",3]]],[11,"new_unsafe","","Creates a new virtual address, without any checks.",0,[[],["virtaddr",3]]],[11,"zero","","Creates a virtual address that points to <code>0</code>.",0,[[],["virtaddr",3]]],[11,"as_u64","","Converts the address to an <code>u64</code>.",0,[[]]],[11,"from_ptr","","Creates a virtual address from the given pointer",0,[[]]],[11,"as_ptr","","Converts the address to a raw pointer.",0,[[]]],[11,"as_mut_ptr","","Converts the address to a mutable raw pointer.",0,[[]]],[11,"is_null","","Convenience method for checking if a virtual address is …",0,[[]]],[11,"align_up","","Aligns the virtual address upwards to the given alignment.",0,[[]]],[11,"align_down","","Aligns the virtual address downwards to the given …",0,[[]]],[11,"is_aligned","","Checks whether the virtual address has the demanded …",0,[[]]],[11,"page_offset","","Returns the 12-bit page offset of this virtual address.",0,[[],["pageoffset",3]]],[11,"p1_index","","Returns the 9-bit level 1 page table index.",0,[[],["pagetableindex",3]]],[11,"p2_index","","Returns the 9-bit level 2 page table index.",0,[[],["pagetableindex",3]]],[11,"p3_index","","Returns the 9-bit level 3 page table index.",0,[[],["pagetableindex",3]]],[11,"p4_index","","Returns the 9-bit level 4 page table index.",0,[[],["pagetableindex",3]]],[3,"PhysAddrNotValid","","A passed <code>u64</code> was not a valid physical address.",null,null],[11,"new","","Creates a new physical address.",1,[[],["physaddr",3]]],[11,"new_truncate","","Creates a new physical address, throwing bits 52..64 away.",1,[[],["physaddr",3]]],[11,"new_unsafe","","Creates a new physical address, without any checks.",1,[[],["physaddr",3]]],[11,"try_new","","Tries to create a new physical address.",1,[[],[["physaddr",3],["physaddrnotvalid",3],["result",4]]]],[11,"zero","","Creates a physical address that points to <code>0</code>.",1,[[],["physaddr",3]]],[11,"as_u64","","Converts the address to an <code>u64</code>.",1,[[]]],[11,"is_null","","Convenience method for checking if a physical address is …",1,[[]]],[11,"align_up","","Aligns the physical address upwards to the given …",1,[[]]],[11,"align_down","","Aligns the physical address downwards to the given …",1,[[]]],[11,"is_aligned","","Checks whether the physical address has the demanded …",1,[[]]],[5,"align_down","","Align address downwards.",null,[[]]],[5,"align_up","","Align address upwards.",null,[[]]],[0,"instructions","x86_64","Special x86_64 instructions.",null,null],[0,"interrupts","x86_64::instructions","Enabling and disabling interrupts",null,null],[5,"are_enabled","x86_64::instructions::interrupts","Returns whether interrupts are enabled.",null,[[]]],[5,"enable","","Enable interrupts.",null,[[]]],[5,"disable","","Disable interrupts.",null,[[]]],[5,"without_interrupts","","Run a closure with disabled interrupts.",null,[[]]],[5,"enable_and_hlt","","Atomically enable interrupts and put the CPU to sleep",null,[[]]],[5,"int3","","Cause a breakpoint exception by invoking the <code>int3</code> …",null,[[]]],[0,"port","x86_64::instructions","Access to I/O ports",null,null],[3,"PortReadOnly","x86_64::instructions::port","A read only I/O port.",null,null],[3,"PortWriteOnly","","A write only I/O port.",null,null],[3,"Port","","An I/O port.",null,null],[11,"new","","Creates a read only I/O port with the given port number.",2,[[],["portreadonly",3]]],[11,"read","","Reads from the port.",2,[[]]],[11,"new","","Creates a write only I/O port with the given port number.",3,[[],["portwriteonly",3]]],[11,"write","","Writes to the port.",3,[[]]],[11,"new","","Creates an I/O port with the given port number.",4,[[],["port",3]]],[11,"read","","Reads from the port.",4,[[]]],[11,"write","","Writes to the port.",4,[[]]],[0,"random","x86_64::instructions","Support for build-in RNGs",null,null],[3,"RdRand","x86_64::instructions::random","Used to obtain random numbers using x86_64\'s RDRAND opcode",null,null],[11,"new","","Creates Some(RdRand) if RDRAND is supported, None …",5,[[],["option",4]]],[11,"get_u64","","Uniformly sampled u64. May fail in rare circumstances or …",5,[[],["option",4]]],[11,"get_u32","","Uniformly sampled u32. May fail in rare circumstances or …",5,[[],["option",4]]],[11,"get_u16","","Uniformly sampled u16. May fail in rare circumstances or …",5,[[],["option",4]]],[0,"segmentation","x86_64::instructions","Provides functions to read and write segment registers.",null,null],[5,"set_cs","x86_64::instructions::segmentation","Reload code segment register.",null,[[["segmentselector",3]]]],[5,"load_ss","","Reload stack segment register.",null,[[["segmentselector",3]]]],[5,"load_ds","","Reload data segment register.",null,[[["segmentselector",3]]]],[5,"load_es","","Reload es segment register.",null,[[["segmentselector",3]]]],[5,"load_fs","","Reload fs segment register.",null,[[["segmentselector",3]]]],[5,"load_gs","","Reload gs segment register.",null,[[["segmentselector",3]]]],[5,"swap_gs","","Swap <code>KernelGsBase</code> MSR and <code>GsBase</code> MSR.",null,[[]]],[5,"cs","","Returns the current value of the code segment register.",null,[[],["segmentselector",3]]],[5,"wrfsbase","","Writes the FS segment base address",null,[[]]],[5,"rdfsbase","","Reads the FS segment base address",null,[[]]],[5,"wrgsbase","","Writes the GS segment base address",null,[[]]],[5,"rdgsbase","","Reads the GS segment base address",null,[[]]],[0,"tables","x86_64::instructions","Functions to load GDT, IDT, and TSS structures.",null,null],[5,"lgdt","x86_64::instructions::tables","Load a GDT.",null,[[["descriptortablepointer",3]]]],[5,"lidt","","Load an IDT.",null,[[["descriptortablepointer",3]]]],[5,"load_tss","","Load the task state register using the <code>ltr</code> instruction.",null,[[["segmentselector",3]]]],[0,"tlb","x86_64::instructions","Functions to flush the translation lookaside buffer (TLB).",null,null],[5,"flush","x86_64::instructions::tlb","Invalidate the given address in the TLB using the <code>invlpg</code> …",null,[[["virtaddr",3]]]],[5,"flush_all","","Invalidate the TLB completely by reloading the CR3 …",null,[[]]],[4,"InvPicdCommand","","The Invalidate PCID Command to execute.",null,null],[13,"Address","","The logical processor invalidates mappings—except …",6,null],[13,"Single","","The logical processor invalidates all mappings—except …",6,null],[13,"All","","The logical processor invalidates all …",6,null],[13,"AllExceptGlobal","","The logical processor invalidates all mappings—except …",6,null],[3,"Pcid","","Structure of a PCID. A PCID has to be <= 4096 for x86_64.",null,null],[11,"new","","Create a new PCID. Will result in a failure if the value …",7,[[],[["pcid",3],["result",4]]]],[11,"value","","Get the value of the current PCID.",7,[[]]],[5,"flush_pcid","","Invalidate the given address in the TLB using the <code>invpcid</code> …",null,[[["invpicdcommand",4]]]],[5,"hlt","x86_64::instructions","Halts the CPU until the next interrupt arrives.",null,[[]]],[5,"nop","","Executes the <code>nop</code> instructions, which performs no …",null,[[]]],[5,"bochs_breakpoint","","Emits a \'magic breakpoint\' instruction for the Bochs CPU …",null,[[]]],[5,"read_rip","","Gets the current instruction pointer. Note that this is …",null,[[],["virtaddr",3]]],[0,"registers","x86_64","Access to various system and model specific registers.",null,null],[0,"control","x86_64::registers","Functions to read and write control registers.",null,null],[3,"Cr0","x86_64::registers::control","Various control flags modifying the basic operation of …",null,null],[3,"Cr0Flags","","Configuration flags of the Cr0 register.",null,null],[18,"PROTECTED_MODE_ENABLE","","Enables protected mode.",8,null],[18,"MONITOR_COPROCESSOR","","Enables monitoring of the coprocessor, typical for x87 …",8,null],[18,"EMULATE_COPROCESSOR","","Force all x87 and MMX instructions to cause an exception.",8,null],[18,"TASK_SWITCHED","","Automatically set to 1 on <em>hardware</em> task switch.",8,null],[18,"NUMERIC_ERROR","","Enables the native error reporting mechanism for x87 FPU …",8,null],[18,"WRITE_PROTECT","","Controls whether supervisor-level writes to read-only …",8,null],[18,"ALIGNMENT_MASK","","Enables automatic alignment checking.",8,null],[18,"NOT_WRITE_THROUGH","","Ignored. Used to control write-back/write-through cache …",8,null],[18,"CACHE_DISABLE","","Disables internal caches (only for some cases).",8,null],[18,"PAGING","","Enables page translation.",8,null],[11,"empty","","Returns an empty set of flags",8,[[],["cr0flags",3]]],[11,"all","","Returns the set containing all flags.",8,[[],["cr0flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",8,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",8,[[],[["cr0flags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",8,[[],["cr0flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",8,[[],["cr0flags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",8,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",8,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",8,[[["cr0flags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",8,[[["cr0flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",8,[[["cr0flags",3]]]],[11,"remove","","Removes the specified flags in-place.",8,[[["cr0flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",8,[[["cr0flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",8,[[["cr0flags",3]]]],[3,"Cr2","","Contains the Page Fault Linear Address (PFLA).",null,null],[3,"Cr3","","Contains the physical address of the level 4 page table.",null,null],[3,"Cr3Flags","","Controls cache settings for the level 4 page table.",null,null],[18,"PAGE_LEVEL_WRITETHROUGH","","Use a writethrough cache policy for the P4 table (else a …",9,null],[18,"PAGE_LEVEL_CACHE_DISABLE","","Disable caching for the P4 table.",9,null],[11,"empty","","Returns an empty set of flags",9,[[],["cr3flags",3]]],[11,"all","","Returns the set containing all flags.",9,[[],["cr3flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",9,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",9,[[],[["option",4],["cr3flags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",9,[[],["cr3flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",9,[[],["cr3flags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",9,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",9,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",9,[[["cr3flags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",9,[[["cr3flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",9,[[["cr3flags",3]]]],[11,"remove","","Removes the specified flags in-place.",9,[[["cr3flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",9,[[["cr3flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",9,[[["cr3flags",3]]]],[3,"Cr4","","Various control flags modifying the basic operation of …",null,null],[3,"Cr4Flags","","Controls cache settings for the level 4 page table.",null,null],[18,"VIRTUAL_8086_MODE_EXTENSIONS","","Enables hardware-supported performance enhancements for …",10,null],[18,"PROTECTED_MODE_VIRTUAL_INTERRUPTS","","Enables support for protected-mode virtual interrupts.",10,null],[18,"TIMESTAMP_DISABLE","","When set, only privilege-level 0 can execute the RDTSC or …",10,null],[18,"DEBUGGING_EXTENSIONS","","Enables I/O breakpoint capability and enforces treatment …",10,null],[18,"PAGE_SIZE_EXTENSION","","Enables the use of 4MB physical frames; ignored in long …",10,null],[18,"PHYSICAL_ADDRESS_EXTENSION","","Enables physical address extension and 2MB physical …",10,null],[18,"MACHINE_CHECK_EXCEPTION","","Enables the machine-check exception mechanism.",10,null],[18,"PAGE_GLOBAL","","Enables the global-page mechanism, which allows to make …",10,null],[18,"PERFORMANCE_MONITOR_COUNTER","","Allows software running at any privilege level to use the …",10,null],[18,"OSFXSR","","Enable the use of legacy SSE instructions; allows using …",10,null],[18,"OSXMMEXCPT_ENABLE","","Enables the SIMD floating-point exception (#XF) for …",10,null],[18,"USER_MODE_INSTRUCTION_PREVENTION","","Prevents the execution of the SGDT, SIDT, SLDT, SMSW, and …",10,null],[18,"L5_PAGING","","Enables 5-level paging on supported CPUs.",10,null],[18,"VIRTUAL_MACHINE_EXTENSIONS","","Enables VMX insturctions.",10,null],[18,"SAFER_MODE_EXTENSIONS","","Enables SMX instructions.",10,null],[18,"FSGSBASE","","Enables software running in 64-bit mode at any privilege …",10,null],[18,"PCID","","Enables process-context identifiers (PCIDs).",10,null],[18,"OSXSAVE","","Enables extendet processor state management instructions, …",10,null],[18,"SUPERVISOR_MODE_EXECUTION_PROTECTION","","Prevents the execution of instructions that reside in …",10,null],[18,"SUPERVISOR_MODE_ACCESS_PREVENTION","","Enables restrictions for supervisor-mode software when …",10,null],[18,"PROTECTION_KEY","","Enables 4-level paging to associate each linear address …",10,null],[11,"empty","","Returns an empty set of flags",10,[[],["cr4flags",3]]],[11,"all","","Returns the set containing all flags.",10,[[],["cr4flags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",10,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",10,[[],[["option",4],["cr4flags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",10,[[],["cr4flags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",10,[[],["cr4flags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",10,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",10,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",10,[[["cr4flags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",10,[[["cr4flags",3]]]],[11,"insert","","Inserts the specified flags in-place.",10,[[["cr4flags",3]]]],[11,"remove","","Removes the specified flags in-place.",10,[[["cr4flags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",10,[[["cr4flags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",10,[[["cr4flags",3]]]],[0,"model_specific","x86_64::registers","Functions to read and write model specific registers.",null,null],[3,"Msr","x86_64::registers::model_specific","A model specific register.",null,null],[11,"new","","Create an instance from a register.",11,[[],["msr",3]]],[3,"Efer","","The Extended Feature Enable Register.",null,null],[3,"FsBase","","FS.Base Model Specific Register.",null,null],[3,"GsBase","","GS.Base Model Specific Register.",null,null],[3,"KernelGsBase","","KernelGsBase Model Specific Register.",null,null],[3,"Star","","Syscall Register: STAR",null,null],[3,"LStar","","Syscall Register: LSTAR",null,null],[3,"SFMask","","Syscall Register: SFMASK",null,null],[18,"MSR","","The underlying model specific register.",12,null],[18,"MSR","","The underlying model specific register.",13,null],[18,"MSR","","The underlying model specific register.",14,null],[18,"MSR","","The underlying model specific register.",15,null],[18,"MSR","","The underlying model specific register.",16,null],[18,"MSR","","The underlying model specific register.",17,null],[18,"MSR","","The underlying model specific register.",18,null],[3,"EferFlags","","Flags of the Extended Feature Enable Register.",null,null],[18,"SYSTEM_CALL_EXTENSIONS","","Enables the <code>syscall</code> and <code>sysret</code> instructions.",19,null],[18,"LONG_MODE_ENABLE","","Activates long mode, requires activating paging.",19,null],[18,"LONG_MODE_ACTIVE","","Indicates that long mode is active.",19,null],[18,"NO_EXECUTE_ENABLE","","Enables the no-execute page-protection feature.",19,null],[18,"SECURE_VIRTUAL_MACHINE_ENABLE","","Enables SVM extensions.",19,null],[18,"LONG_MODE_SEGMENT_LIMIT_ENABLE","","Enable certain limit checks in 64-bit mode.",19,null],[18,"FAST_FXSAVE_FXRSTOR","","Enable the <code>fxsave</code> and <code>fxrstor</code> instructions to execute …",19,null],[18,"TRANSLATION_CACHE_EXTENSION","","Changes how the <code>invlpg</code> instruction operates on TLB …",19,null],[11,"empty","","Returns an empty set of flags",19,[[],["eferflags",3]]],[11,"all","","Returns the set containing all flags.",19,[[],["eferflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",19,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",19,[[],[["option",4],["eferflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",19,[[],["eferflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",19,[[],["eferflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",19,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",19,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",19,[[["eferflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",19,[[["eferflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",19,[[["eferflags",3]]]],[11,"remove","","Removes the specified flags in-place.",19,[[["eferflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",19,[[["eferflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",19,[[["eferflags",3]]]],[0,"rflags","x86_64::registers","Processor state stored in the RFLAGS register.",null,null],[5,"read","x86_64::registers::rflags","Returns the current value of the RFLAGS register.",null,[[],["rflags",3]]],[5,"read_raw","","Returns the raw current value of the RFLAGS register.",null,[[]]],[5,"write","","Writes the RFLAGS register, preserves reserved bits.",null,[[["rflags",3]]]],[5,"write_raw","","Writes the RFLAGS register.",null,[[]]],[3,"RFlags","","The RFLAGS register.",null,null],[18,"ID","","Processor feature identification flag.",20,null],[18,"VIRTUAL_INTERRUPT_PENDING","","Indicates that an external, maskable interrupt is pending.",20,null],[18,"VIRTUAL_INTERRUPT","","Virtual image of the INTERRUPT_FLAG bit.",20,null],[18,"ALIGNMENT_CHECK","","Enable automatic alignment checking if CR0.AM is set. …",20,null],[18,"VIRTUAL_8086_MODE","","Enable the virtual-8086 mode.",20,null],[18,"RESUME_FLAG","","Allows to restart an instruction following an instrucion …",20,null],[18,"NESTED_TASK","","Used by <code>iret</code> in hardware task switch mode to determine if …",20,null],[18,"IOPL_HIGH","","The high bit of the I/O Privilege Level field.",20,null],[18,"IOPL_LOW","","The low bit of the I/O Privilege Level field.",20,null],[18,"OVERFLOW_FLAG","","Set by hardware to indicate that the sign bit of the …",20,null],[18,"DIRECTION_FLAG","","Determines the order in which strings are processed.",20,null],[18,"INTERRUPT_FLAG","","Enable interrupts.",20,null],[18,"TRAP_FLAG","","Enable single-step mode for debugging.",20,null],[18,"SIGN_FLAG","","Set by hardware if last arithmetic operation resulted in …",20,null],[18,"ZERO_FLAG","","Set by hardware if last arithmetic operation resulted in …",20,null],[18,"AUXILIARY_CARRY_FLAG","","Set by hardware if last arithmetic operation generated a …",20,null],[18,"PARITY_FLAG","","Set by hardware if last result has an even number of 1 …",20,null],[18,"CARRY_FLAG","","Set by hardware if last arithmetic operation generated a …",20,null],[11,"empty","","Returns an empty set of flags",20,[[],["rflags",3]]],[11,"all","","Returns the set containing all flags.",20,[[],["rflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",20,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",20,[[],[["option",4],["rflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",20,[[],["rflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",20,[[],["rflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",20,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",20,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",20,[[["rflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",20,[[["rflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",20,[[["rflags",3]]]],[11,"remove","","Removes the specified flags in-place.",20,[[["rflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",20,[[["rflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",20,[[["rflags",3]]]],[0,"structures","x86_64","Representations of various x86 specific structures and …",null,null],[0,"gdt","x86_64::structures","Types for the Global Descriptor Table and segment …",null,null],[3,"SegmentSelector","x86_64::structures::gdt","Specifies which element to load into a segment from …",null,null],[12,"0","","",21,null],[11,"new","","Creates a new SegmentSelector",21,[[["privilegelevel",4]],["segmentselector",3]]],[11,"index","","Returns the GDT index.",21,[[]]],[11,"rpl","","Returns the requested privilege level.",21,[[],["privilegelevel",4]]],[11,"set_rpl","","Set the privilege level for this Segment selector.",21,[[["privilegelevel",4]]]],[3,"GlobalDescriptorTable","","A 64-bit mode global descriptor table (GDT).",null,null],[11,"new","","Creates an empty GDT.",22,[[],["globaldescriptortable",3]]],[11,"from_raw_slice","","Forms a GDT from a slice of <code>u64</code>.",22,[[],["globaldescriptortable",3]]],[11,"as_raw_slice","","Get a reference to the internal table.",22,[[]]],[11,"add_entry","","Adds the given segment descriptor to the GDT, returning …",22,[[["descriptor",4]],["segmentselector",3]]],[11,"load","","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …",22,[[]]],[11,"load_unsafe","","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …",22,[[]]],[4,"Descriptor","","A 64-bit mode segment descriptor.",null,null],[13,"UserSegment","","Descriptor for a code or data segment.",23,null],[13,"SystemSegment","","A system segment descriptor such as a LDT or TSS …",23,null],[3,"DescriptorFlags","","Flags for a GDT descriptor. Not all flags are valid for …",null,null],[18,"ACCESSED","","Set by the processor if this segment has been accessed. …",24,null],[18,"WRITABLE","","For 32-bit data segments, sets the segment as writable. …",24,null],[18,"CONFORMING","","For code segments, sets the segment as “conforming”, …",24,null],[18,"EXECUTABLE","","This flag must be set for code segments and unset for …",24,null],[18,"USER_SEGMENT","","This flag must be set for user segments (in contrast to …",24,null],[18,"DPL_RING_3","","The DPL for this descriptor is Ring 3. In 64-bit mode, …",24,null],[18,"PRESENT","","Must be set for any segment, causes a segment not present …",24,null],[18,"AVAILABLE","","Available for use by the Operating System",24,null],[18,"LONG_MODE","","Must be set for 64-bit code segments, unset otherwise.",24,null],[18,"DEFAULT_SIZE","","Use 32-bit (as opposed to 16-bit) operands. If [<code>LONG_MODE</code>]…",24,null],[18,"GRANULARITY","","Limit field is scaled by 4096 bytes. In 64-bit mode, …",24,null],[18,"LIMIT_0_15","","Bits <code>0..=15</code> of the limit field (ignored in 64-bit mode)",24,null],[18,"LIMIT_16_19","","Bits <code>16..=19</code> of the limit field (ignored in 64-bit mode)",24,null],[18,"BASE_0_23","","Bits <code>0..=23</code> of the base field (ignored in 64-bit mode, …",24,null],[18,"BASE_24_31","","Bits <code>24..=31</code> of the base field (ignored in 64-bit mode, …",24,null],[11,"empty","","Returns an empty set of flags",24,[[],["descriptorflags",3]]],[11,"all","","Returns the set containing all flags.",24,[[],["descriptorflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",24,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",24,[[],[["descriptorflags",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",24,[[],["descriptorflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",24,[[],["descriptorflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",24,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",24,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",24,[[["descriptorflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",24,[[["descriptorflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",24,[[["descriptorflags",3]]]],[11,"remove","","Removes the specified flags in-place.",24,[[["descriptorflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",24,[[["descriptorflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",24,[[["descriptorflags",3]]]],[18,"KERNEL_DATA","","A kernel data segment (64-bit or flat 32-bit)",24,null],[18,"KERNEL_CODE32","","A flat 32-bit kernel code segment",24,null],[18,"KERNEL_CODE64","","A 64-bit kernel code segment",24,null],[18,"USER_DATA","","A user data segment (64-bit or flat 32-bit)",24,null],[18,"USER_CODE32","","A flat 32-bit user code segment",24,null],[18,"USER_CODE64","","A 64-bit user code segment",24,null],[11,"kernel_code_segment","","Creates a segment descriptor for a 64-bit kernel code …",23,[[],["descriptor",4]]],[11,"kernel_data_segment","","Creates a segment descriptor for a kernel data segment …",23,[[],["descriptor",4]]],[11,"user_data_segment","","Creates a segment descriptor for a ring 3 data segment …",23,[[],["descriptor",4]]],[11,"user_code_segment","","Creates a segment descriptor for a 64-bit ring 3 code …",23,[[],["descriptor",4]]],[11,"tss_segment","","Creates a TSS system descriptor for the given TSS.",23,[[["taskstatesegment",3]],["descriptor",4]]],[0,"idt","x86_64::structures","Provides types for the Interrupt Descriptor Table and its …",null,null],[3,"InterruptDescriptorTable","x86_64::structures::idt","An Interrupt Descriptor Table with 256 entries.",null,null],[12,"divide_error","","A divide error (<code>#DE</code>) occurs when the denominator of a DIV …",25,null],[12,"debug","","When the debug-exception mechanism is enabled, a <code>#DB</code> …",25,null],[12,"non_maskable_interrupt","","An non maskable interrupt exception (NMI) occurs as a …",25,null],[12,"breakpoint","","A breakpoint (<code>#BP</code>) exception occurs when an <code>INT3</code> …",25,null],[12,"overflow","","An overflow exception (<code>#OF</code>) occurs as a result of …",25,null],[12,"bound_range_exceeded","","A bound-range exception (<code>#BR</code>) exception can occur as a …",25,null],[12,"invalid_opcode","","An invalid opcode exception (<code>#UD</code>) occurs when an attempt …",25,null],[12,"device_not_available","","A device not available exception (<code>#NM</code>) occurs under any …",25,null],[12,"double_fault","","A double fault (<code>#DF</code>) exception can occur when a second …",25,null],[12,"invalid_tss","","An invalid TSS exception (<code>#TS</code>) occurs only as a result of …",25,null],[12,"segment_not_present","","An segment-not-present exception (<code>#NP</code>) occurs when an …",25,null],[12,"stack_segment_fault","","An stack segment exception (<code>#SS</code>) can occur in the …",25,null],[12,"general_protection_fault","","A general protection fault (<code>#GP</code>) can occur in various …",25,null],[12,"page_fault","","A page fault (<code>#PF</code>) can occur during a memory access in …",25,null],[12,"x87_floating_point","","The x87 Floating-Point Exception-Pending exception (<code>#MF</code>) …",25,null],[12,"alignment_check","","An alignment check exception (<code>#AC</code>) occurs when an …",25,null],[12,"machine_check","","The machine check exception (<code>#MC</code>) is model specific. …",25,null],[12,"simd_floating_point","","The SIMD Floating-Point Exception (<code>#XF</code>) is used to handle …",25,null],[12,"virtualization","","vector nr. 20",25,null],[12,"security_exception","","The Security Exception (<code>#SX</code>) signals security-sensitive …",25,null],[11,"new","","Creates a new IDT filled with non-present entries.",25,[[],["interruptdescriptortable",3]]],[11,"reset","","Resets all entries of this IDT in place.",25,[[]]],[11,"load","","Loads the IDT in the CPU using the <code>lidt</code> command.",25,[[]]],[11,"load_unsafe","","Loads the IDT in the CPU using the <code>lidt</code> command.",25,[[]]],[11,"slice","","Returns slice of IDT entries with the specified range.",25,[[]]],[11,"slice_mut","","Returns a mutable slice of IDT entries with the specified …",25,[[]]],[3,"Entry","","An Interrupt Descriptor Table entry.",null,null],[6,"HandlerFunc","","A handler function for an interrupt or an exception …",null,null],[6,"HandlerFuncWithErrCode","","A handler function for an exception that pushes an error …",null,null],[6,"PageFaultHandlerFunc","","A page fault handler function that pushes a page fault …",null,null],[6,"DivergingHandlerFunc","","A handler function that must not return, e.g. for a …",null,null],[6,"DivergingHandlerFuncWithErrCode","","A handler function with an error code that must not …",null,null],[11,"missing","","Creates a non-present IDT entry (but sets the must-be-one …",26,[[]]],[11,"set_handler_fn","","Set the handler function for the IDT entry and sets the …",26,[[["handlerfunc",6]],["entryoptions",3]]],[11,"set_handler_fn","","Set the handler function for the IDT entry and sets the …",26,[[["handlerfuncwitherrcode",6]],["entryoptions",3]]],[11,"set_handler_fn","","Set the handler function for the IDT entry and sets the …",26,[[["pagefaulthandlerfunc",6]],["entryoptions",3]]],[11,"set_handler_fn","","Set the handler function for the IDT entry and sets the …",26,[[["diverginghandlerfunc",6]],["entryoptions",3]]],[11,"set_handler_fn","","Set the handler function for the IDT entry and sets the …",26,[[["diverginghandlerfuncwitherrcode",6]],["entryoptions",3]]],[3,"EntryOptions","","Represents the options field of an IDT entry.",null,null],[11,"set_present","","Set or reset the preset bit.",27,[[]]],[11,"disable_interrupts","","Let the CPU disable hardware interrupts when the handler …",27,[[]]],[11,"set_privilege_level","","Set the required privilege level (DPL) for invoking the …",27,[[["privilegelevel",4]]]],[11,"set_stack_index","","Assigns a Interrupt Stack Table (IST) stack to this …",27,[[]]],[3,"InterruptStackFrame","","Wrapper type for the interrupt stack frame pushed by the …",null,null],[11,"as_mut","","Gives mutable access to the contents of the interrupt …",28,[[],["interruptstackframevalue",3]]],[3,"InterruptStackFrameValue","","Represents the interrupt stack frame pushed by the CPU on …",null,null],[12,"instruction_pointer","","This value points to the instruction that should be …",29,null],[12,"code_segment","","The code segment selector, padded with zeros.",29,null],[12,"cpu_flags","","The flags register before the interrupt handler was …",29,null],[12,"stack_pointer","","The stack pointer at the time of the interrupt.",29,null],[12,"stack_segment","","The stack segment descriptor at the time of the interrupt …",29,null],[3,"PageFaultErrorCode","","Describes an page fault error code.",null,null],[18,"PROTECTION_VIOLATION","","If this flag is set, the page fault was caused by a …",30,null],[18,"CAUSED_BY_WRITE","","If this flag is set, the memory access that caused the …",30,null],[18,"USER_MODE","","If this flag is set, an access in user mode (CPL=3) …",30,null],[18,"MALFORMED_TABLE","","If this flag is set, the page fault is a result of the …",30,null],[18,"INSTRUCTION_FETCH","","If this flag is set, it indicates that the access that …",30,null],[11,"empty","","Returns an empty set of flags",30,[[],["pagefaulterrorcode",3]]],[11,"all","","Returns the set containing all flags.",30,[[],["pagefaulterrorcode",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",30,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",30,[[],[["option",4],["pagefaulterrorcode",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",30,[[],["pagefaulterrorcode",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",30,[[],["pagefaulterrorcode",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",30,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",30,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",30,[[["pagefaulterrorcode",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",30,[[["pagefaulterrorcode",3]]]],[11,"insert","","Inserts the specified flags in-place.",30,[[["pagefaulterrorcode",3]]]],[11,"remove","","Removes the specified flags in-place.",30,[[["pagefaulterrorcode",3]]]],[11,"toggle","","Toggles the specified flags in-place.",30,[[["pagefaulterrorcode",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",30,[[["pagefaulterrorcode",3]]]],[0,"paging","x86_64::structures","Abstractions for page tables and other paging related …",null,null],[0,"frame","x86_64::structures::paging","Abstractions for default-sized and huge physical memory …",null,null],[3,"PhysFrame","x86_64::structures::paging::frame","A physical memory frame.",null,null],[11,"from_start_address","","Returns the frame that starts at the given virtual …",31,[[["physaddr",3]],[["addressnotaligned",3],["result",4]]]],[11,"from_start_address_unchecked","","Returns the frame that starts at the given virtual …",31,[[["physaddr",3]]]],[11,"containing_address","","Returns the frame that contains the given physical …",31,[[["physaddr",3]]]],[11,"start_address","","Returns the start address of the frame.",31,[[],["physaddr",3]]],[11,"size","","Returns the size the frame (4KB, 2MB or 1GB).",31,[[]]],[11,"range","","Returns a range of frames, exclusive <code>end</code>.",31,[[["physframe",3]],["physframerange",3]]],[11,"range_inclusive","","Returns a range of frames, inclusive <code>end</code>.",31,[[["physframe",3]],["physframerangeinclusive",3]]],[3,"PhysFrameRange","","An range of physical memory frames, exclusive the upper …",null,null],[12,"start","","The start of the range, inclusive.",32,null],[12,"end","","The end of the range, exclusive.",32,null],[11,"is_empty","","Returns whether the range contains no frames.",32,[[]]],[3,"PhysFrameRangeInclusive","","An range of physical memory frames, inclusive the upper …",null,null],[12,"start","","The start of the range, inclusive.",33,null],[12,"end","","The start of the range, inclusive.",33,null],[11,"is_empty","","Returns whether the range contains no frames.",33,[[]]],[0,"mapper","x86_64::structures::paging","Abstractions for reading and modifying the mapping of …",null,null],[3,"MappedPageTable","x86_64::structures::paging::mapper","A Mapper implementation that relies on a PhysAddr to …",null,null],[8,"PageTableFrameMapping","","Provides a virtual address mapping for physical page …",null,null],[10,"frame_to_pointer","","Translate the given physical frame to a virtual page …",34,[[["physframe",3]]]],[3,"OffsetPageTable","","A Mapper implementation that requires that the complete …",null,null],[4,"InvalidPageTable","","The given page table was not suitable to create a …",null,null],[13,"NotRecursive","","The given page table was not at an recursive address.",35,null],[13,"NotActive","","The given page table was not active on the CPU.",35,null],[3,"RecursivePageTable","","A recursive page table is a last level page table with an …",null,null],[8,"MapperAllSizes","","An empty convencience trait that requires the <code>Mapper</code> …",null,null],[8,"Translate","","Provides methods for translating virtual addresses.",null,null],[10,"translate","","Return the frame that the given virtual address is mapped …",36,[[["virtaddr",3]],["translateresult",4]]],[11,"translate_addr","","Translates the given virtual address to the physical …",36,[[["virtaddr",3]],[["physaddr",3],["option",4]]]],[4,"TranslateResult","","The return value of the [<code>Translate::translate</code>] function.",null,null],[13,"Mapped","","The virtual address is mapped to a physical frame.",37,null],[12,"frame","x86_64::structures::paging::mapper::TranslateResult","The mapped frame.",38,null],[12,"offset","","The offset whithin the mapped frame.",38,null],[12,"flags","","The entry flags in the lowest-level page table.",38,null],[13,"NotMapped","x86_64::structures::paging::mapper","The given virtual address is not mapped to a physical …",37,null],[13,"InvalidFrameAddress","","The page table entry for the given virtual address points …",37,null],[4,"MappedFrame","","Represents a physical frame mapped in a page table.",null,null],[13,"Size4KiB","","The virtual address is mapped to a 4KiB frame.",39,null],[13,"Size2MiB","","The virtual address is mapped to a \\\"large\\\" 2MiB frame.",39,null],[13,"Size1GiB","","The virtual address is mapped to a \\\"huge\\\" 1GiB frame.",39,null],[11,"start_address","","Returns the start address of the frame.",39,[[],["physaddr",3]]],[11,"size","","Returns the size the frame (4KB, 2MB or 1GB).",39,[[]]],[8,"Mapper","","A trait for common page table operations on pages of size …",null,null],[11,"map_to","","Creates a new mapping in the page table.",40,[[["physframe",3],["pagetableflags",3],["page",3]],[["mapperflush",3],["maptoerror",4],["result",4]]]],[10,"map_to_with_table_flags","","Creates a new mapping in the page table.",40,[[["page",3],["physframe",3],["pagetableflags",3]],[["mapperflush",3],["maptoerror",4],["result",4]]]],[10,"unmap","","Removes a mapping from the page table and returns the …",40,[[["page",3]],[["result",4],["unmaperror",4]]]],[10,"update_flags","","Updates the flags of an existing mapping.",40,[[["pagetableflags",3],["page",3]],[["mapperflush",3],["result",4],["flagupdateerror",4]]]],[10,"set_flags_p4_entry","","Set the flags of an existing page level 4 table entry",40,[[["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[10,"set_flags_p3_entry","","Set the flags of an existing page table level 3 entry",40,[[["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[10,"set_flags_p2_entry","","Set the flags of an existing page table level 2 entry",40,[[["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[10,"translate_page","","Return the frame that the specified page is mapped to.",40,[[["page",3]],[["physframe",3],["result",4],["translateerror",4]]]],[11,"identity_map","","Maps the given frame to the virtual page with the same …",40,[[["physframe",3],["pagetableflags",3]],[["mapperflush",3],["maptoerror",4],["result",4]]]],[3,"MapperFlush","","This type represents a page whose mapping has changed in …",null,null],[11,"flush","","Flush the page from the TLB to ensure that the newest …",41,[[]]],[11,"ignore","","Don\'t flush the TLB and silence the “must be used” …",41,[[]]],[3,"MapperFlushAll","","This type represents a change of a page table requiring a …",null,null],[11,"flush_all","","Flush all pages from the TLB to ensure that the newest …",42,[[]]],[11,"ignore","","Don\'t flush the TLB and silence the “must be used” …",42,[[]]],[4,"MapToError","","This error is returned from <code>map_to</code> and similar methods.",null,null],[13,"FrameAllocationFailed","","An additional frame was needed for the mapping process, …",43,null],[13,"ParentEntryHugePage","","An upper level page table entry has the <code>HUGE_PAGE</code> flag …",43,null],[13,"PageAlreadyMapped","","The given page is already mapped to a physical frame.",43,null],[4,"UnmapError","","An error indicating that an <code>unmap</code> call failed.",null,null],[13,"ParentEntryHugePage","","An upper level page table entry has the <code>HUGE_PAGE</code> flag …",44,null],[13,"PageNotMapped","","The given page is not mapped to a physical frame.",44,null],[13,"InvalidFrameAddress","","The page table entry for the given page points to an …",44,null],[4,"FlagUpdateError","","An error indicating that an <code>update_flags</code> call failed.",null,null],[13,"PageNotMapped","","The given page is not mapped to a physical frame.",45,null],[13,"ParentEntryHugePage","","An upper level page table entry has the <code>HUGE_PAGE</code> flag …",45,null],[4,"TranslateError","","An error indicating that an <code>translate</code> call failed.",null,null],[13,"PageNotMapped","","The given page is not mapped to a physical frame.",46,null],[13,"ParentEntryHugePage","","An upper level page table entry has the <code>HUGE_PAGE</code> flag …",46,null],[13,"InvalidFrameAddress","","The page table entry for the given page points to an …",46,null],[0,"page","x86_64::structures::paging","Abstractions for default-sized and huge virtual memory …",null,null],[8,"PageSize","x86_64::structures::paging::page","Trait for abstracting over the three possible page sizes …",null,null],[18,"SIZE","","The page size in bytes.",47,null],[18,"SIZE_AS_DEBUG_STR","","A string representation of the page size for debug output.",47,null],[8,"NotGiantPageSize","","This trait is implemented for 4KiB and 2MiB pages, but …",null,null],[4,"Size4KiB","","A standard 4KiB page.",null,null],[4,"Size2MiB","","A “huge” 2MiB page.",null,null],[4,"Size1GiB","","A “giant” 1GiB page.",null,null],[3,"Page","","A virtual memory page.",null,null],[18,"SIZE","","The page size in bytes.",48,null],[11,"from_start_address","","Returns the page that starts at the given virtual address.",48,[[["virtaddr",3]],[["addressnotaligned",3],["result",4]]]],[11,"from_start_address_unchecked","","Returns the page that starts at the given virtual address.",48,[[["virtaddr",3]]]],[11,"containing_address","","Returns the page that contains the given virtual address.",48,[[["virtaddr",3]]]],[11,"start_address","","Returns the start address of the page.",48,[[],["virtaddr",3]]],[11,"size","","Returns the size the page (4KB, 2MB or 1GB).",48,[[]]],[11,"p4_index","","Returns the level 4 page table index of this page.",48,[[],["pagetableindex",3]]],[11,"p3_index","","Returns the level 3 page table index of this page.",48,[[],["pagetableindex",3]]],[11,"range","","Returns a range of pages, exclusive <code>end</code>.",48,[[],["pagerange",3]]],[11,"range_inclusive","","Returns a range of pages, inclusive <code>end</code>.",48,[[],["pagerangeinclusive",3]]],[11,"p2_index","","Returns the level 2 page table index of this page.",48,[[],["pagetableindex",3]]],[11,"from_page_table_indices_1gib","","Returns the 1GiB memory page with the specified page …",48,[[["pagetableindex",3]]]],[11,"from_page_table_indices_2mib","","Returns the 2MiB memory page with the specified page …",48,[[["pagetableindex",3]]]],[11,"from_page_table_indices","","Returns the 4KiB memory page with the specified page …",48,[[["pagetableindex",3]]]],[11,"p1_index","","Returns the level 1 page table index of this page.",48,[[],["pagetableindex",3]]],[3,"PageRange","","A range of pages with exclusive upper bound.",null,null],[12,"start","","The start of the range, inclusive.",49,null],[12,"end","","The end of the range, exclusive.",49,null],[11,"is_empty","","Returns wether this range contains no pages.",49,[[]]],[11,"as_4kib_page_range","","Converts the range of 2MiB pages to a range of 4KiB pages.",49,[[],[["pagerange",3],["size4kib",4]]]],[3,"PageRangeInclusive","","A range of pages with inclusive upper bound.",null,null],[12,"start","","The start of the range, inclusive.",50,null],[12,"end","","The end of the range, inclusive.",50,null],[11,"is_empty","","Returns wether this range contains no pages.",50,[[]]],[3,"AddressNotAligned","","The given address was not sufficiently aligned.",null,null],[0,"page_table","x86_64::structures::paging","Abstractions for page tables and page table entries.",null,null],[4,"FrameError","x86_64::structures::paging::page_table","The error returned by the <code>PageTableEntry::frame</code> method.",null,null],[13,"FrameNotPresent","","The entry does not have the <code>PRESENT</code> flag set, so it isn\'t …",51,null],[13,"HugeFrame","","The entry does have the <code>HUGE_PAGE</code> flag set. The <code>frame</code> …",51,null],[3,"PageTableEntry","","A 64-bit page table entry.",null,null],[11,"new","","Creates an unused page table entry.",52,[[]]],[11,"is_unused","","Returns whether this entry is zero.",52,[[]]],[11,"set_unused","","Sets this entry to zero.",52,[[]]],[11,"flags","","Returns the flags of this entry.",52,[[],["pagetableflags",3]]],[11,"addr","","Returns the physical address mapped by this entry, might …",52,[[],["physaddr",3]]],[11,"frame","","Returns the physical frame mapped by this entry.",52,[[],[["result",4],["physframe",3],["frameerror",4]]]],[11,"set_addr","","Map the entry to the specified physical address with the …",52,[[["physaddr",3],["pagetableflags",3]]]],[11,"set_frame","","Map the entry to the specified physical frame with the …",52,[[["pagetableflags",3],["physframe",3]]]],[11,"set_flags","","Sets the flags of this entry.",52,[[["pagetableflags",3]]]],[3,"PageTableFlags","","Possible flags for a page table entry.",null,null],[18,"PRESENT","","Specifies whether the mapped frame or page table is …",53,null],[18,"WRITABLE","","Controls whether writes to the mapped frames are allowed.",53,null],[18,"USER_ACCESSIBLE","","Controls whether accesses from userspace (i.e. ring 3) …",53,null],[18,"WRITE_THROUGH","","If this bit is set, a “write-through” policy is used …",53,null],[18,"NO_CACHE","","Disables caching for the pointed entry is cacheable.",53,null],[18,"ACCESSED","","Set by the CPU when the mapped frame or page table is …",53,null],[18,"DIRTY","","Set by the CPU on a write to the mapped frame.",53,null],[18,"HUGE_PAGE","","Specifies that the entry maps a huge frame instead of a …",53,null],[18,"GLOBAL","","Indicates that the mapping is present in all address …",53,null],[18,"BIT_9","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_10","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_11","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_52","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_53","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_54","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_55","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_56","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_57","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_58","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_59","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_60","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_61","","Available to the OS, can be used to store additional …",53,null],[18,"BIT_62","","Available to the OS, can be used to store additional …",53,null],[18,"NO_EXECUTE","","Forbid code execution from the mapped frames.",53,null],[11,"empty","","Returns an empty set of flags",53,[[],["pagetableflags",3]]],[11,"all","","Returns the set containing all flags.",53,[[],["pagetableflags",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",53,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that …",53,[[],[["option",4],["pagetableflags",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any …",53,[[],["pagetableflags",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",53,[[],["pagetableflags",3]]],[11,"is_empty","","Returns <code>true</code> if no flags are currently stored.",53,[[]]],[11,"is_all","","Returns <code>true</code> if all flags are currently set.",53,[[]]],[11,"intersects","","Returns <code>true</code> if there are flags common to both <code>self</code> and …",53,[[["pagetableflags",3]]]],[11,"contains","","Returns <code>true</code> all of the flags in <code>other</code> are contained …",53,[[["pagetableflags",3]]]],[11,"insert","","Inserts the specified flags in-place.",53,[[["pagetableflags",3]]]],[11,"remove","","Removes the specified flags in-place.",53,[[["pagetableflags",3]]]],[11,"toggle","","Toggles the specified flags in-place.",53,[[["pagetableflags",3]]]],[11,"set","","Inserts or removes the specified flags depending on the …",53,[[["pagetableflags",3]]]],[3,"PageTable","","Represents a page table.",null,null],[11,"new","","Creates an empty page table.",54,[[]]],[11,"zero","","Clears all entries.",54,[[]]],[11,"iter","","Returns an iterator over the entries of the page table.",54,[[]]],[11,"iter_mut","","Returns an iterator that allows modifying the entries of …",54,[[]]],[3,"PageTableIndex","","A 9-bit index into a page table.",null,null],[11,"new","","Creates a new index from the given <code>u16</code>. Panics if the …",55,[[]]],[11,"new_truncate","","Creates a new index from the given <code>u16</code>. Throws away bits …",55,[[]]],[3,"PageOffset","","A 12-bit offset into a 4KiB Page.",null,null],[11,"new","","Creates a new offset from the given <code>u16</code>. Panics if the …",56,[[]]],[11,"new_truncate","","Creates a new offset from the given <code>u16</code>. Throws away bits …",56,[[]]],[8,"FrameAllocator","x86_64::structures::paging","A trait for types that can allocate a frame of memory.",null,null],[10,"allocate_frame","","Allocate a frame of the appropriate size and return it if …",57,[[],[["physframe",3],["option",4]]]],[8,"FrameDeallocator","","A trait for types that can deallocate a frame of memory.",null,null],[10,"deallocate_frame","","Deallocate the given unused frame.",58,[[["physframe",3]]]],[0,"port","x86_64::structures","Traits for accessing I/O ports.",null,null],[8,"PortRead","x86_64::structures::port","A helper trait that implements the read port operation.",null,null],[10,"read_from_port","","Reads a <code>Self</code> value from the given port.",59,[[]]],[8,"PortWrite","","A helper trait that implements the write port operation.",null,null],[10,"write_to_port","","Writes a <code>Self</code> value to the given port.",60,[[]]],[0,"tss","x86_64::structures","Provides a type for the task state segment structure.",null,null],[3,"TaskStateSegment","x86_64::structures::tss","In 64-bit mode the TSS holds information that is not …",null,null],[12,"privilege_stack_table","","The full 64-bit canonical forms of the stack pointers …",61,null],[12,"interrupt_stack_table","","The full 64-bit canonical forms of the interrupt stack …",61,null],[12,"iomap_base","","The 16-bit offset to the I/O permission bit map from the …",61,null],[11,"new","","Creates a new TSS with zeroed privilege and interrupt …",61,[[],["taskstatesegment",3]]],[3,"DescriptorTablePointer","x86_64::structures","A struct describing a pointer to a descriptor table (GDT …",null,null],[12,"limit","","Size of the DT.",62,null],[12,"base","","Pointer to the memory region containing the DT.",62,null],[4,"PrivilegeLevel","x86_64","Represents a protection ring level.",null,null],[13,"Ring0","","Privilege-level 0 (most privilege): This level is used by …",63,null],[13,"Ring1","","Privilege-level 1 (moderate privilege): This level is …",63,null],[13,"Ring2","","Privilege-level 2 (moderate privilege): Like level 1, …",63,null],[13,"Ring3","","Privilege-level 3 (least privilege): This level is used …",63,null],[11,"from_u16","","Creates a <code>PrivilegeLevel</code> from a numeric value. The value …",63,[[],["privilegelevel",4]]],[14,"software_interrupt","","Generate a software interrupt by invoking the <code>int</code> …",null,null],[11,"from","x86_64::addr","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"into","","",64,[[]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"into","","",65,[[]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","x86_64::instructions::port","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","x86_64::instructions::random","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","x86_64::instructions::tlb","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","x86_64::registers::control","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"into","","",66,[[]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"into","","",67,[[]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"into","","",68,[[]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"into","","",69,[[]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","x86_64::registers::model_specific","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"into","","",11,[[]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","x86_64::registers::rflags","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","x86_64::structures::gdt","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","x86_64::structures::idt","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","x86_64::structures::paging::frame","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"into_iter","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"into_iter","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","x86_64::structures::paging::mapper","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"into","","",70,[[]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"into","","",71,[[]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"into","","",72,[[]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","x86_64::structures::paging::page","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"into","","",73,[[]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"into","","",74,[[]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"into","","",75,[[]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"into_iter","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"into_iter","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"into","","",76,[[]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","x86_64::structures::paging::page_table","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","x86_64::structures::tss","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","x86_64::structures","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","x86_64","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"into","","",63,[[]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"translate","x86_64::structures::paging::mapper","",70,[[["virtaddr",3]],["translateresult",4]]],[11,"translate","","",71,[[["virtaddr",3]],["translateresult",4]]],[11,"translate","","",72,[[["virtaddr",3]],["translateresult",4]]],[11,"map_to_with_table_flags","","",70,[[["page",3],["pagetableflags",3],["size1gib",4],["physframe",3]],[["mapperflush",3],["result",4],["maptoerror",4]]]],[11,"unmap","","",70,[[["page",3],["size1gib",4]],[["result",4],["unmaperror",4]]]],[11,"update_flags","","",70,[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflush",3],["result",4],["flagupdateerror",4]]]],[11,"set_flags_p4_entry","","",70,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",70,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",70,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",70,[[["page",3],["size1gib",4]],[["result",4],["translateerror",4],["physframe",3]]]],[11,"map_to_with_table_flags","","",70,[[["physframe",3],["page",3],["size2mib",4],["pagetableflags",3]],[["result",4],["maptoerror",4],["mapperflush",3]]]],[11,"unmap","","",70,[[["page",3],["size2mib",4]],[["unmaperror",4],["result",4]]]],[11,"update_flags","","",70,[[["page",3],["size2mib",4],["pagetableflags",3]],[["result",4],["flagupdateerror",4],["mapperflush",3]]]],[11,"set_flags_p4_entry","","",70,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",70,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",70,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",70,[[["page",3],["size2mib",4]],[["translateerror",4],["physframe",3],["result",4]]]],[11,"map_to_with_table_flags","","",70,[[["size4kib",4],["page",3],["pagetableflags",3],["physframe",3]],[["mapperflush",3],["maptoerror",4],["result",4]]]],[11,"unmap","","",70,[[["page",3],["size4kib",4]],[["unmaperror",4],["result",4]]]],[11,"update_flags","","",70,[[["page",3],["pagetableflags",3],["size4kib",4]],[["result",4],["mapperflush",3],["flagupdateerror",4]]]],[11,"set_flags_p4_entry","","",70,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",70,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",70,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",70,[[["page",3],["size4kib",4]],[["result",4],["translateerror",4],["physframe",3]]]],[11,"map_to_with_table_flags","","",71,[[["page",3],["pagetableflags",3],["size1gib",4],["physframe",3]],[["mapperflush",3],["result",4],["maptoerror",4]]]],[11,"unmap","","",71,[[["page",3],["size1gib",4]],[["result",4],["unmaperror",4]]]],[11,"update_flags","","",71,[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflush",3],["result",4],["flagupdateerror",4]]]],[11,"set_flags_p4_entry","","",71,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",71,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",71,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",71,[[["page",3],["size1gib",4]],[["result",4],["translateerror",4],["physframe",3]]]],[11,"map_to_with_table_flags","","",71,[[["physframe",3],["page",3],["size2mib",4],["pagetableflags",3]],[["result",4],["maptoerror",4],["mapperflush",3]]]],[11,"unmap","","",71,[[["page",3],["size2mib",4]],[["unmaperror",4],["result",4]]]],[11,"update_flags","","",71,[[["page",3],["size2mib",4],["pagetableflags",3]],[["result",4],["flagupdateerror",4],["mapperflush",3]]]],[11,"set_flags_p4_entry","","",71,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",71,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",71,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",71,[[["page",3],["size2mib",4]],[["translateerror",4],["physframe",3],["result",4]]]],[11,"map_to_with_table_flags","","",71,[[["size4kib",4],["page",3],["pagetableflags",3],["physframe",3]],[["mapperflush",3],["maptoerror",4],["result",4]]]],[11,"unmap","","",71,[[["page",3],["size4kib",4]],[["unmaperror",4],["result",4]]]],[11,"update_flags","","",71,[[["page",3],["pagetableflags",3],["size4kib",4]],[["result",4],["mapperflush",3],["flagupdateerror",4]]]],[11,"set_flags_p4_entry","","",71,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",71,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",71,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",71,[[["page",3],["size4kib",4]],[["result",4],["translateerror",4],["physframe",3]]]],[11,"map_to_with_table_flags","","",72,[[["page",3],["pagetableflags",3],["size1gib",4],["physframe",3]],[["mapperflush",3],["result",4],["maptoerror",4]]]],[11,"unmap","","",72,[[["page",3],["size1gib",4]],[["result",4],["unmaperror",4]]]],[11,"update_flags","","",72,[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflush",3],["result",4],["flagupdateerror",4]]]],[11,"set_flags_p4_entry","","",72,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",72,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",72,[[["pagetableflags",3],["page",3],["size1gib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",72,[[["page",3],["size1gib",4]],[["result",4],["translateerror",4],["physframe",3]]]],[11,"map_to_with_table_flags","","",72,[[["physframe",3],["page",3],["size2mib",4],["pagetableflags",3]],[["result",4],["maptoerror",4],["mapperflush",3]]]],[11,"unmap","","",72,[[["page",3],["size2mib",4]],[["unmaperror",4],["result",4]]]],[11,"update_flags","","",72,[[["page",3],["size2mib",4],["pagetableflags",3]],[["result",4],["flagupdateerror",4],["mapperflush",3]]]],[11,"set_flags_p4_entry","","",72,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",72,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",72,[[["page",3],["size2mib",4],["pagetableflags",3]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",72,[[["page",3],["size2mib",4]],[["translateerror",4],["physframe",3],["result",4]]]],[11,"map_to_with_table_flags","","",72,[[["size4kib",4],["page",3],["pagetableflags",3],["physframe",3]],[["mapperflush",3],["maptoerror",4],["result",4]]]],[11,"unmap","","",72,[[["page",3],["size4kib",4]],[["unmaperror",4],["result",4]]]],[11,"update_flags","","",72,[[["page",3],["pagetableflags",3],["size4kib",4]],[["result",4],["mapperflush",3],["flagupdateerror",4]]]],[11,"set_flags_p4_entry","","",72,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p3_entry","","",72,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"set_flags_p2_entry","","",72,[[["page",3],["pagetableflags",3],["size4kib",4]],[["flagupdateerror",4],["result",4],["mapperflushall",3]]]],[11,"translate_page","","",72,[[["page",3],["size4kib",4]],[["result",4],["translateerror",4],["physframe",3]]]],[11,"deref","x86_64::structures::idt","",28,[[]]],[11,"fmt","x86_64::addr","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::instructions::port","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::instructions::random","",5,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::instructions::tlb","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::control","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::model_specific","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::rflags","",20,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::gdt","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::idt","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::frame","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::mapper","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page_table","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::tss","",61,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures","",62,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64","",63,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::mapper","",35,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page","",76,[[["formatter",3]],["result",6]]],[11,"sub","x86_64::addr","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["virtaddr",3]]]],[11,"sub","","",1,[[]]],[11,"sub","","",1,[[]]],[11,"sub","","",1,[[["physaddr",3]]]],[11,"sub","x86_64::registers::control","Returns the set difference of the two sets of flags.",8,[[["cr0flags",3]],["cr0flags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",9,[[["cr3flags",3]],["cr3flags",3]]],[11,"sub","","Returns the set difference of the two sets of flags.",10,[[["cr4flags",3]],["cr4flags",3]]],[11,"sub","x86_64::registers::model_specific","Returns the set difference of the two sets of flags.",19,[[["eferflags",3]],["eferflags",3]]],[11,"sub","x86_64::registers::rflags","Returns the set difference of the two sets of flags.",20,[[["rflags",3]],["rflags",3]]],[11,"sub","x86_64::structures::gdt","Returns the set difference of the two sets of flags.",24,[[["descriptorflags",3]],["descriptorflags",3]]],[11,"sub","x86_64::structures::idt","Returns the set difference of the two sets of flags.",30,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]]],[11,"sub","x86_64::structures::paging::frame","",31,[[]]],[11,"sub","","",31,[[["physframe",3]]]],[11,"sub","x86_64::structures::paging::page","",48,[[]]],[11,"sub","","",48,[[]]],[11,"sub","x86_64::structures::paging::page_table","Returns the set difference of the two sets of flags.",53,[[["pagetableflags",3]],["pagetableflags",3]]],[11,"eq","x86_64::addr","",0,[[["virtaddr",3]]]],[11,"ne","","",0,[[["virtaddr",3]]]],[11,"eq","","",1,[[["physaddr",3]]]],[11,"ne","","",1,[[["physaddr",3]]]],[11,"eq","x86_64::instructions::port","",2,[[["portreadonly",3]]]],[11,"ne","","",2,[[["portreadonly",3]]]],[11,"eq","","",3,[[["portwriteonly",3]]]],[11,"ne","","",3,[[["portwriteonly",3]]]],[11,"eq","","",4,[[["port",3]]]],[11,"ne","","",4,[[["port",3]]]],[11,"eq","x86_64::registers::control","",8,[[["cr0flags",3]]]],[11,"ne","","",8,[[["cr0flags",3]]]],[11,"eq","","",9,[[["cr3flags",3]]]],[11,"ne","","",9,[[["cr3flags",3]]]],[11,"eq","","",10,[[["cr4flags",3]]]],[11,"ne","","",10,[[["cr4flags",3]]]],[11,"eq","x86_64::registers::model_specific","",19,[[["eferflags",3]]]],[11,"ne","","",19,[[["eferflags",3]]]],[11,"eq","x86_64::registers::rflags","",20,[[["rflags",3]]]],[11,"ne","","",20,[[["rflags",3]]]],[11,"eq","x86_64::structures::gdt","",21,[[["segmentselector",3]]]],[11,"ne","","",21,[[["segmentselector",3]]]],[11,"eq","","",24,[[["descriptorflags",3]]]],[11,"ne","","",24,[[["descriptorflags",3]]]],[11,"eq","x86_64::structures::idt","",26,[[["entry",3]]]],[11,"ne","","",26,[[["entry",3]]]],[11,"eq","","",27,[[["entryoptions",3]]]],[11,"ne","","",27,[[["entryoptions",3]]]],[11,"eq","","",30,[[["pagefaulterrorcode",3]]]],[11,"ne","","",30,[[["pagefaulterrorcode",3]]]],[11,"eq","x86_64::structures::paging::frame","",31,[[["physframe",3]]]],[11,"ne","","",31,[[["physframe",3]]]],[11,"eq","","",32,[[["physframerange",3]]]],[11,"ne","","",32,[[["physframerange",3]]]],[11,"eq","","",33,[[["physframerangeinclusive",3]]]],[11,"ne","","",33,[[["physframerangeinclusive",3]]]],[11,"eq","x86_64::structures::paging::page","",73,[[["size4kib",4]]]],[11,"eq","","",74,[[["size2mib",4]]]],[11,"eq","","",75,[[["size1gib",4]]]],[11,"eq","","",48,[[["page",3]]]],[11,"ne","","",48,[[["page",3]]]],[11,"eq","","",49,[[["pagerange",3]]]],[11,"ne","","",49,[[["pagerange",3]]]],[11,"eq","","",50,[[["pagerangeinclusive",3]]]],[11,"ne","","",50,[[["pagerangeinclusive",3]]]],[11,"eq","x86_64::structures::paging::page_table","",51,[[["frameerror",4]]]],[11,"eq","","",53,[[["pagetableflags",3]]]],[11,"ne","","",53,[[["pagetableflags",3]]]],[11,"eq","","",55,[[["pagetableindex",3]]]],[11,"ne","","",55,[[["pagetableindex",3]]]],[11,"eq","","",56,[[["pageoffset",3]]]],[11,"ne","","",56,[[["pageoffset",3]]]],[11,"eq","x86_64","",63,[[["privilegelevel",4]]]],[11,"cmp","x86_64::addr","",0,[[["virtaddr",3]],["ordering",4]]],[11,"cmp","","",1,[[["physaddr",3]],["ordering",4]]],[11,"cmp","x86_64::registers::control","",8,[[["cr0flags",3]],["ordering",4]]],[11,"cmp","","",9,[[["cr3flags",3]],["ordering",4]]],[11,"cmp","","",10,[[["cr4flags",3]],["ordering",4]]],[11,"cmp","x86_64::registers::model_specific","",19,[[["eferflags",3]],["ordering",4]]],[11,"cmp","x86_64::registers::rflags","",20,[[["rflags",3]],["ordering",4]]],[11,"cmp","x86_64::structures::gdt","",24,[[["descriptorflags",3]],["ordering",4]]],[11,"cmp","x86_64::structures::idt","",30,[[["pagefaulterrorcode",3]],["ordering",4]]],[11,"cmp","x86_64::structures::paging::frame","",31,[[["physframe",3]],["ordering",4]]],[11,"cmp","x86_64::structures::paging::page","",73,[[["size4kib",4]],["ordering",4]]],[11,"cmp","","",74,[[["size2mib",4]],["ordering",4]]],[11,"cmp","","",75,[[["size1gib",4]],["ordering",4]]],[11,"cmp","","",48,[[["page",3]],["ordering",4]]],[11,"cmp","x86_64::structures::paging::page_table","",53,[[["pagetableflags",3]],["ordering",4]]],[11,"cmp","","",55,[[["pagetableindex",3]],["ordering",4]]],[11,"cmp","","",56,[[["pageoffset",3]],["ordering",4]]],[11,"partial_cmp","x86_64::addr","",0,[[["virtaddr",3]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["virtaddr",3]]]],[11,"le","","",0,[[["virtaddr",3]]]],[11,"gt","","",0,[[["virtaddr",3]]]],[11,"ge","","",0,[[["virtaddr",3]]]],[11,"partial_cmp","","",1,[[["physaddr",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["physaddr",3]]]],[11,"le","","",1,[[["physaddr",3]]]],[11,"gt","","",1,[[["physaddr",3]]]],[11,"ge","","",1,[[["physaddr",3]]]],[11,"partial_cmp","x86_64::registers::control","",8,[[["cr0flags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",8,[[["cr0flags",3]]]],[11,"le","","",8,[[["cr0flags",3]]]],[11,"gt","","",8,[[["cr0flags",3]]]],[11,"ge","","",8,[[["cr0flags",3]]]],[11,"partial_cmp","","",9,[[["cr3flags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["cr3flags",3]]]],[11,"le","","",9,[[["cr3flags",3]]]],[11,"gt","","",9,[[["cr3flags",3]]]],[11,"ge","","",9,[[["cr3flags",3]]]],[11,"partial_cmp","","",10,[[["cr4flags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["cr4flags",3]]]],[11,"le","","",10,[[["cr4flags",3]]]],[11,"gt","","",10,[[["cr4flags",3]]]],[11,"ge","","",10,[[["cr4flags",3]]]],[11,"partial_cmp","x86_64::registers::model_specific","",19,[[["eferflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",19,[[["eferflags",3]]]],[11,"le","","",19,[[["eferflags",3]]]],[11,"gt","","",19,[[["eferflags",3]]]],[11,"ge","","",19,[[["eferflags",3]]]],[11,"partial_cmp","x86_64::registers::rflags","",20,[[["rflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",20,[[["rflags",3]]]],[11,"le","","",20,[[["rflags",3]]]],[11,"gt","","",20,[[["rflags",3]]]],[11,"ge","","",20,[[["rflags",3]]]],[11,"partial_cmp","x86_64::structures::gdt","",24,[[["descriptorflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",24,[[["descriptorflags",3]]]],[11,"le","","",24,[[["descriptorflags",3]]]],[11,"gt","","",24,[[["descriptorflags",3]]]],[11,"ge","","",24,[[["descriptorflags",3]]]],[11,"partial_cmp","x86_64::structures::idt","",30,[[["pagefaulterrorcode",3]],[["ordering",4],["option",4]]]],[11,"lt","","",30,[[["pagefaulterrorcode",3]]]],[11,"le","","",30,[[["pagefaulterrorcode",3]]]],[11,"gt","","",30,[[["pagefaulterrorcode",3]]]],[11,"ge","","",30,[[["pagefaulterrorcode",3]]]],[11,"partial_cmp","x86_64::structures::paging::frame","",31,[[["physframe",3]],[["ordering",4],["option",4]]]],[11,"lt","","",31,[[["physframe",3]]]],[11,"le","","",31,[[["physframe",3]]]],[11,"gt","","",31,[[["physframe",3]]]],[11,"ge","","",31,[[["physframe",3]]]],[11,"partial_cmp","x86_64::structures::paging::page","",73,[[["size4kib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",74,[[["size2mib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",75,[[["size1gib",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",48,[[["page",3]],[["ordering",4],["option",4]]]],[11,"lt","","",48,[[["page",3]]]],[11,"le","","",48,[[["page",3]]]],[11,"gt","","",48,[[["page",3]]]],[11,"ge","","",48,[[["page",3]]]],[11,"partial_cmp","x86_64::structures::paging::page_table","",53,[[["pagetableflags",3]],[["ordering",4],["option",4]]]],[11,"lt","","",53,[[["pagetableflags",3]]]],[11,"le","","",53,[[["pagetableflags",3]]]],[11,"gt","","",53,[[["pagetableflags",3]]]],[11,"ge","","",53,[[["pagetableflags",3]]]],[11,"partial_cmp","","",55,[[["pagetableindex",3]],[["ordering",4],["option",4]]]],[11,"lt","","",55,[[["pagetableindex",3]]]],[11,"le","","",55,[[["pagetableindex",3]]]],[11,"gt","","",55,[[["pagetableindex",3]]]],[11,"ge","","",55,[[["pagetableindex",3]]]],[11,"partial_cmp","","",56,[[["pageoffset",3]],[["ordering",4],["option",4]]]],[11,"lt","","",56,[[["pageoffset",3]]]],[11,"le","","",56,[[["pageoffset",3]]]],[11,"gt","","",56,[[["pageoffset",3]]]],[11,"ge","","",56,[[["pageoffset",3]]]],[11,"add","x86_64::addr","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",1,[[]]],[11,"add","","",1,[[]]],[11,"add","x86_64::structures::paging::frame","",31,[[]]],[11,"add","x86_64::structures::paging::page","",48,[[]]],[11,"add_assign","x86_64::addr","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","x86_64::structures::paging::frame","",31,[[]]],[11,"add_assign","x86_64::structures::paging::page","",48,[[]]],[11,"sub_assign","x86_64::addr","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","x86_64::registers::control","Disables all flags enabled in the set.",8,[[["cr0flags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",9,[[["cr3flags",3]]]],[11,"sub_assign","","Disables all flags enabled in the set.",10,[[["cr4flags",3]]]],[11,"sub_assign","x86_64::registers::model_specific","Disables all flags enabled in the set.",19,[[["eferflags",3]]]],[11,"sub_assign","x86_64::registers::rflags","Disables all flags enabled in the set.",20,[[["rflags",3]]]],[11,"sub_assign","x86_64::structures::gdt","Disables all flags enabled in the set.",24,[[["descriptorflags",3]]]],[11,"sub_assign","x86_64::structures::idt","Disables all flags enabled in the set.",30,[[["pagefaulterrorcode",3]]]],[11,"sub_assign","x86_64::structures::paging::frame","",31,[[]]],[11,"sub_assign","x86_64::structures::paging::page","",48,[[]]],[11,"sub_assign","x86_64::structures::paging::page_table","Disables all flags enabled in the set.",53,[[["pagetableflags",3]]]],[11,"not","x86_64::registers::control","Returns the complement of this set of flags.",8,[[],["cr0flags",3]]],[11,"not","","Returns the complement of this set of flags.",9,[[],["cr3flags",3]]],[11,"not","","Returns the complement of this set of flags.",10,[[],["cr4flags",3]]],[11,"not","x86_64::registers::model_specific","Returns the complement of this set of flags.",19,[[],["eferflags",3]]],[11,"not","x86_64::registers::rflags","Returns the complement of this set of flags.",20,[[],["rflags",3]]],[11,"not","x86_64::structures::gdt","Returns the complement of this set of flags.",24,[[],["descriptorflags",3]]],[11,"not","x86_64::structures::idt","Returns the complement of this set of flags.",30,[[],["pagefaulterrorcode",3]]],[11,"not","x86_64::structures::paging::page_table","Returns the complement of this set of flags.",53,[[],["pagetableflags",3]]],[11,"bitand","x86_64::registers::control","Returns the intersection between the two sets of flags.",8,[[["cr0flags",3]],["cr0flags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",9,[[["cr3flags",3]],["cr3flags",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",10,[[["cr4flags",3]],["cr4flags",3]]],[11,"bitand","x86_64::registers::model_specific","Returns the intersection between the two sets of flags.",19,[[["eferflags",3]],["eferflags",3]]],[11,"bitand","x86_64::registers::rflags","Returns the intersection between the two sets of flags.",20,[[["rflags",3]],["rflags",3]]],[11,"bitand","x86_64::structures::gdt","Returns the intersection between the two sets of flags.",24,[[["descriptorflags",3]],["descriptorflags",3]]],[11,"bitand","x86_64::structures::idt","Returns the intersection between the two sets of flags.",30,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]]],[11,"bitand","x86_64::structures::paging::page_table","Returns the intersection between the two sets of flags.",53,[[["pagetableflags",3]],["pagetableflags",3]]],[11,"bitor","x86_64::registers::control","Returns the union of the two sets of flags.",8,[[["cr0flags",3]],["cr0flags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",9,[[["cr3flags",3]],["cr3flags",3]]],[11,"bitor","","Returns the union of the two sets of flags.",10,[[["cr4flags",3]],["cr4flags",3]]],[11,"bitor","x86_64::registers::model_specific","Returns the union of the two sets of flags.",19,[[["eferflags",3]],["eferflags",3]]],[11,"bitor","x86_64::registers::rflags","Returns the union of the two sets of flags.",20,[[["rflags",3]],["rflags",3]]],[11,"bitor","x86_64::structures::gdt","Returns the union of the two sets of flags.",24,[[["descriptorflags",3]],["descriptorflags",3]]],[11,"bitor","x86_64::structures::idt","Returns the union of the two sets of flags.",30,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]]],[11,"bitor","x86_64::structures::paging::page_table","Returns the union of the two sets of flags.",53,[[["pagetableflags",3]],["pagetableflags",3]]],[11,"bitxor","x86_64::registers::control","Returns the left flags, but with all the right flags …",8,[[["cr0flags",3]],["cr0flags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",9,[[["cr3flags",3]],["cr3flags",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags …",10,[[["cr4flags",3]],["cr4flags",3]]],[11,"bitxor","x86_64::registers::model_specific","Returns the left flags, but with all the right flags …",19,[[["eferflags",3]],["eferflags",3]]],[11,"bitxor","x86_64::registers::rflags","Returns the left flags, but with all the right flags …",20,[[["rflags",3]],["rflags",3]]],[11,"bitxor","x86_64::structures::gdt","Returns the left flags, but with all the right flags …",24,[[["descriptorflags",3]],["descriptorflags",3]]],[11,"bitxor","x86_64::structures::idt","Returns the left flags, but with all the right flags …",30,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]]],[11,"bitxor","x86_64::structures::paging::page_table","Returns the left flags, but with all the right flags …",53,[[["pagetableflags",3]],["pagetableflags",3]]],[11,"bitand_assign","x86_64::registers::control","Disables all flags disabled in the set.",8,[[["cr0flags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",9,[[["cr3flags",3]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",10,[[["cr4flags",3]]]],[11,"bitand_assign","x86_64::registers::model_specific","Disables all flags disabled in the set.",19,[[["eferflags",3]]]],[11,"bitand_assign","x86_64::registers::rflags","Disables all flags disabled in the set.",20,[[["rflags",3]]]],[11,"bitand_assign","x86_64::structures::gdt","Disables all flags disabled in the set.",24,[[["descriptorflags",3]]]],[11,"bitand_assign","x86_64::structures::idt","Disables all flags disabled in the set.",30,[[["pagefaulterrorcode",3]]]],[11,"bitand_assign","x86_64::structures::paging::page_table","Disables all flags disabled in the set.",53,[[["pagetableflags",3]]]],[11,"bitor_assign","x86_64::registers::control","Adds the set of flags.",8,[[["cr0flags",3]]]],[11,"bitor_assign","","Adds the set of flags.",9,[[["cr3flags",3]]]],[11,"bitor_assign","","Adds the set of flags.",10,[[["cr4flags",3]]]],[11,"bitor_assign","x86_64::registers::model_specific","Adds the set of flags.",19,[[["eferflags",3]]]],[11,"bitor_assign","x86_64::registers::rflags","Adds the set of flags.",20,[[["rflags",3]]]],[11,"bitor_assign","x86_64::structures::gdt","Adds the set of flags.",24,[[["descriptorflags",3]]]],[11,"bitor_assign","x86_64::structures::idt","Adds the set of flags.",30,[[["pagefaulterrorcode",3]]]],[11,"bitor_assign","x86_64::structures::paging::page_table","Adds the set of flags.",53,[[["pagetableflags",3]]]],[11,"bitxor_assign","x86_64::registers::control","Toggles the set of flags.",8,[[["cr0flags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",9,[[["cr3flags",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",10,[[["cr4flags",3]]]],[11,"bitxor_assign","x86_64::registers::model_specific","Toggles the set of flags.",19,[[["eferflags",3]]]],[11,"bitxor_assign","x86_64::registers::rflags","Toggles the set of flags.",20,[[["rflags",3]]]],[11,"bitxor_assign","x86_64::structures::gdt","Toggles the set of flags.",24,[[["descriptorflags",3]]]],[11,"bitxor_assign","x86_64::structures::idt","Toggles the set of flags.",30,[[["pagefaulterrorcode",3]]]],[11,"bitxor_assign","x86_64::structures::paging::page_table","Toggles the set of flags.",53,[[["pagetableflags",3]]]],[11,"index","x86_64::structures::idt","Returns the IDT entry with the specified index.",25,[[]]],[11,"index","x86_64::structures::paging::page_table","",54,[[]]],[11,"index","","",54,[[["pagetableindex",3]]]],[11,"index_mut","x86_64::structures::idt","Returns a mutable reference to the IDT entry with the …",25,[[]]],[11,"index_mut","x86_64::structures::paging::page_table","",54,[[]]],[11,"index_mut","","",54,[[["pagetableindex",3]]]],[11,"hash","x86_64::registers::control","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","x86_64::registers::model_specific","",19,[[]]],[11,"hash","x86_64::registers::rflags","",20,[[]]],[11,"hash","x86_64::structures::gdt","",24,[[]]],[11,"hash","x86_64::structures::idt","",30,[[]]],[11,"hash","x86_64::structures::paging::page_table","",53,[[]]],[11,"from_iter","x86_64::registers::control","",8,[[["intoiterator",8]],["cr0flags",3]]],[11,"from_iter","","",9,[[["intoiterator",8]],["cr3flags",3]]],[11,"from_iter","","",10,[[["intoiterator",8]],["cr4flags",3]]],[11,"from_iter","x86_64::registers::model_specific","",19,[[["intoiterator",8]],["eferflags",3]]],[11,"from_iter","x86_64::registers::rflags","",20,[[["intoiterator",8]],["rflags",3]]],[11,"from_iter","x86_64::structures::gdt","",24,[[["intoiterator",8]],["descriptorflags",3]]],[11,"from_iter","x86_64::structures::idt","",30,[[["intoiterator",8]],["pagefaulterrorcode",3]]],[11,"from_iter","x86_64::structures::paging::page_table","",53,[[["intoiterator",8]],["pagetableflags",3]]],[11,"fmt","x86_64::addr","",1,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::control","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::model_specific","",19,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::rflags","",20,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::gdt","",24,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::idt","",30,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page_table","",53,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::addr","",1,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::control","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::model_specific","",19,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::rflags","",20,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::gdt","",24,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::idt","",30,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page_table","",53,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::addr","",1,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::control","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::model_specific","",19,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::rflags","",20,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::gdt","",24,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::idt","",30,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page_table","",53,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::addr","",1,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::control","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::model_specific","",19,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::registers::rflags","",20,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::gdt","",24,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::idt","",30,[[["formatter",3]],["result",6]]],[11,"fmt","x86_64::structures::paging::page_table","",53,[[["formatter",3]],["result",6]]],[11,"next","x86_64::structures::paging::frame","",32,[[],["option",4]]],[11,"next","","",33,[[],["option",4]]],[11,"next","x86_64::structures::paging::page","",49,[[],["option",4]]],[11,"next","","",50,[[],["option",4]]],[11,"extend","x86_64::registers::control","",8,[[["intoiterator",8]]]],[11,"extend","","",9,[[["intoiterator",8]]]],[11,"extend","","",10,[[["intoiterator",8]]]],[11,"extend","x86_64::registers::model_specific","",19,[[["intoiterator",8]]]],[11,"extend","x86_64::registers::rflags","",20,[[["intoiterator",8]]]],[11,"extend","x86_64::structures::gdt","",24,[[["intoiterator",8]]]],[11,"extend","x86_64::structures::idt","",30,[[["intoiterator",8]]]],[11,"extend","x86_64::structures::paging::page_table","",53,[[["intoiterator",8]]]],[11,"clone","x86_64::addr","",0,[[],["virtaddr",3]]],[11,"clone","","",1,[[],["physaddr",3]]],[11,"clone","x86_64::instructions::port","",2,[[],["portreadonly",3]]],[11,"clone","","",3,[[],["portwriteonly",3]]],[11,"clone","","",4,[[],["port",3]]],[11,"clone","x86_64::instructions::random","",5,[[],["rdrand",3]]],[11,"clone","x86_64::registers::control","",8,[[],["cr0flags",3]]],[11,"clone","","",9,[[],["cr3flags",3]]],[11,"clone","","",10,[[],["cr4flags",3]]],[11,"clone","x86_64::registers::model_specific","",19,[[],["eferflags",3]]],[11,"clone","x86_64::registers::rflags","",20,[[],["rflags",3]]],[11,"clone","x86_64::structures::gdt","",21,[[],["segmentselector",3]]],[11,"clone","","",22,[[],["globaldescriptortable",3]]],[11,"clone","","",23,[[],["descriptor",4]]],[11,"clone","","",24,[[],["descriptorflags",3]]],[11,"clone","x86_64::structures::idt","",25,[[],["interruptdescriptortable",3]]],[11,"clone","","",26,[[],["entry",3]]],[11,"clone","","",27,[[],["entryoptions",3]]],[11,"clone","","",29,[[],["interruptstackframevalue",3]]],[11,"clone","","",30,[[],["pagefaulterrorcode",3]]],[11,"clone","x86_64::structures::paging::frame","",31,[[],["physframe",3]]],[11,"clone","","",32,[[],["physframerange",3]]],[11,"clone","","",33,[[],["physframerangeinclusive",3]]],[11,"clone","x86_64::structures::paging::page","",73,[[],["size4kib",4]]],[11,"clone","","",74,[[],["size2mib",4]]],[11,"clone","","",75,[[],["size1gib",4]]],[11,"clone","","",48,[[],["page",3]]],[11,"clone","","",49,[[],["pagerange",3]]],[11,"clone","","",50,[[],["pagerangeinclusive",3]]],[11,"clone","x86_64::structures::paging::page_table","",51,[[],["frameerror",4]]],[11,"clone","","",52,[[],["pagetableentry",3]]],[11,"clone","","",53,[[],["pagetableflags",3]]],[11,"clone","","",54,[[],["pagetable",3]]],[11,"clone","","",55,[[],["pagetableindex",3]]],[11,"clone","","",56,[[],["pageoffset",3]]],[11,"clone","x86_64::structures::tss","",61,[[],["taskstatesegment",3]]],[11,"clone","x86_64::structures","",62,[[],["descriptortablepointer",3]]],[11,"clone","x86_64","",63,[[],["privilegelevel",4]]],[11,"default","x86_64::structures::paging::page_table","",54,[[]]],[11,"read","x86_64::registers::control","Read the current set of CR0 flags.",66,[[],["cr0flags",3]]],[11,"read_raw","","Read the current raw CR0 value.",66,[[]]],[11,"write","","Write CR0 flags.",66,[[["cr0flags",3]]]],[11,"write_raw","","Write raw CR0 flags.",66,[[]]],[11,"update","","Updates CR0 flags.",66,[[]]],[11,"read","","Read the current page fault linear address from the CR2 …",67,[[],["virtaddr",3]]],[11,"read","","Read the current P4 table address from the CR3 register.",68,[[]]],[11,"read_raw","","Read the current P4 table address from the CR3 register",68,[[]]],[11,"read_pcid","","Read the current P4 table address from the CR3 register …",68,[[]]],[11,"write","","Write a new P4 table address into the CR3 register.",68,[[["cr3flags",3],["physframe",3]]]],[11,"write_pcid","","Write a new P4 table address into the CR3 register.",68,[[["physframe",3],["pcid",3]]]],[11,"read","","Read the current set of CR4 flags.",69,[[],["cr4flags",3]]],[11,"read_raw","","Read the current raw CR4 value.",69,[[]]],[11,"write","","Write CR4 flags.",69,[[["cr4flags",3]]]],[11,"write_raw","","Write raw CR4 flags.",69,[[]]],[11,"update","","Updates CR4 flags.",69,[[]]],[11,"read","x86_64::registers::model_specific","Read 64 bits msr register.",11,[[]]],[11,"write","","Write 64 bits to msr register.",11,[[]]],[11,"read","","Read the current EFER flags.",12,[[],["eferflags",3]]],[11,"read_raw","","Read the current raw EFER flags.",12,[[]]],[11,"write","","Write the EFER flags, preserving reserved values.",12,[[["eferflags",3]]]],[11,"write_raw","","Write the EFER flags.",12,[[]]],[11,"update","","Update EFER flags.",12,[[]]],[11,"read","","Read the current FsBase register.",13,[[],["virtaddr",3]]],[11,"write","","Write a given virtual address to the FS.Base register.",13,[[["virtaddr",3]]]],[11,"read","","Read the current GsBase register.",14,[[],["virtaddr",3]]],[11,"write","","Write a given virtual address to the GS.Base register.",14,[[["virtaddr",3]]]],[11,"read","","Read the current KernelGsBase register.",15,[[],["virtaddr",3]]],[11,"write","","Write a given virtual address to the KernelGsBase …",15,[[["virtaddr",3]]]],[11,"read_raw","","Read the Ring 0 and Ring 3 segment bases. The remaining …",16,[[]]],[11,"read","","Read the Ring 0 and Ring 3 segment bases. Returns",16,[[]]],[11,"write_raw","","Write the Ring 0 and Ring 3 segment bases. The remaining …",16,[[]]],[11,"write","","Write the Ring 0 and Ring 3 segment bases. The remaining …",16,[[["segmentselector",3]],["result",4]]],[11,"read","","Read the current LStar register. This holds the target …",17,[[],["virtaddr",3]]],[11,"write","","Write a given virtual address to the LStar register. This …",17,[[["virtaddr",3]]]],[11,"read","","Read to the SFMask register. The SFMASK register is used …",18,[[],["rflags",3]]],[11,"write","","Write to the SFMask register. The SFMASK register is used …",18,[[["rflags",3]]]],[11,"new","x86_64::structures::paging::mapper","Creates a new <code>MappedPageTable</code> that uses the passed …",70,[[["pagetable",3]]]],[11,"level_4_table","","Returns a mutable reference to the wrapped level 4 …",70,[[],["pagetable",3]]],[11,"new","","Creates a new <code>OffsetPageTable</code> that uses the given offset …",71,[[["virtaddr",3],["pagetable",3]]]],[11,"level_4_table","","Returns a mutable reference to the wrapped level 4 …",71,[[],["pagetable",3]]],[11,"new","","Creates a new RecursivePageTable from the passed level 4 …",72,[[["pagetable",3]],[["invalidpagetable",4],["result",4]]]],[11,"new_unchecked","","Creates a new RecursivePageTable without performing any …",72,[[["pagetableindex",3],["pagetable",3]]]],[11,"level_4_table","","Returns a mutable reference to the wrapped level 4 …",72,[[],["pagetable",3]]]],"p":[[3,"VirtAddr"],[3,"PhysAddr"],[3,"PortReadOnly"],[3,"PortWriteOnly"],[3,"Port"],[3,"RdRand"],[4,"InvPicdCommand"],[3,"Pcid"],[3,"Cr0Flags"],[3,"Cr3Flags"],[3,"Cr4Flags"],[3,"Msr"],[3,"Efer"],[3,"FsBase"],[3,"GsBase"],[3,"KernelGsBase"],[3,"Star"],[3,"LStar"],[3,"SFMask"],[3,"EferFlags"],[3,"RFlags"],[3,"SegmentSelector"],[3,"GlobalDescriptorTable"],[4,"Descriptor"],[3,"DescriptorFlags"],[3,"InterruptDescriptorTable"],[3,"Entry"],[3,"EntryOptions"],[3,"InterruptStackFrame"],[3,"InterruptStackFrameValue"],[3,"PageFaultErrorCode"],[3,"PhysFrame"],[3,"PhysFrameRange"],[3,"PhysFrameRangeInclusive"],[8,"PageTableFrameMapping"],[4,"InvalidPageTable"],[8,"Translate"],[4,"TranslateResult"],[13,"Mapped"],[4,"MappedFrame"],[8,"Mapper"],[3,"MapperFlush"],[3,"MapperFlushAll"],[4,"MapToError"],[4,"UnmapError"],[4,"FlagUpdateError"],[4,"TranslateError"],[8,"PageSize"],[3,"Page"],[3,"PageRange"],[3,"PageRangeInclusive"],[4,"FrameError"],[3,"PageTableEntry"],[3,"PageTableFlags"],[3,"PageTable"],[3,"PageTableIndex"],[3,"PageOffset"],[8,"FrameAllocator"],[8,"FrameDeallocator"],[8,"PortRead"],[8,"PortWrite"],[3,"TaskStateSegment"],[3,"DescriptorTablePointer"],[4,"PrivilegeLevel"],[3,"VirtAddrNotValid"],[3,"PhysAddrNotValid"],[3,"Cr0"],[3,"Cr2"],[3,"Cr3"],[3,"Cr4"],[3,"MappedPageTable"],[3,"OffsetPageTable"],[3,"RecursivePageTable"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"],[3,"AddressNotAligned"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);