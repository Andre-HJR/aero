var searchIndex = JSON.parse('{\
"aero_kernel":{"doc":"Aero","t":"HRHFFFFAFFAAAAFAAOAAAAAAAAAHEDDNNMMMAMMLLLLLLLLALLLLFMAFOLLLLAALLAALLLLLLLLLLHINELLKKLFFLKLLLDRMMMLLMMMMMMMMMMLMMMMMMLMMMMMMMMMMMMMMMMMMLLLMMDRMLLMLMMMLMLMMLLLDHHNNDNDEDDDRMLLLLLLLLLLLLLLMLLMMMMMLLLLLLLMMMMMMLLLLLLLLLMMMLMMMLMMLLLLLLLLLLLLLLLLLLLLLLDHDRMLLLLMLLLFMLLLFMMMMLLLLLLDDDNEIINMKLLLLLLLLMMLLMFLLLLMLLLLMLLLLMMMMMMMKLLMMLLLLLLLLLLLLFFMDLLLMMMLLLLLLMMMMMLMLLLAHHHHHHHHHAFAFFAFAAAAAAAFREHHHHDNRRNRRRRRRRRRRNMMLLLLLLLLLLLLLFFLFFLLLFFFFFFFLFFLLLLLLLLLLLLLLLLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDDDLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDLLSSLLSSIIIIIIIIIIIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFHRSHRDDDDDSSSDLLSSLLSSSSSSLLSSSSLLSSLLSSLLSSLLSSENHSDLLSSLLSSSSSDIIIIMLLMMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLFFLLLLLLLLLLLLLLLMLLLLMMMFFFFFFFFLLLLLMLLLLMMMMMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLDDRRRRHDDHHHRRRRDRDMMMFFFFFFFLLLLLLLLLLLLLLLLFFLLLALLLLLLFLFALLLLLLFLLLMLLFLLLLLLLLLLLLLLLLLLLRRFFFFFFFFOFFFFFFFFFFFFNNHDRLLSSHDDDDDESNLLSSDLLSSLLSSLLSSLLSSLLSSDLLSSIILLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLHLLLLLLLLLLLMLLLMFLLMMMMLMMMMMMMMMMMMMMMLMMMMMMLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLDRRRRRRRRRRRIMLLLLFLFFLFLFFFKKFLLLLLFLFRRDLLLMLLLFLMMFFLLLRRRRFFFFFFDNNNNNEHDRRRRHMLFLLLLLLLLLMMMLLLLLFFMLLLMLLMLLLFFLLMMMMMMMLLFLLLLLLLLLLLMFFFFHRRHHHFFFFFFFRHDDGLLLLMMMMFMLLMFFFLLMLLLLLLMDHLLLFLLFFMFMMLLLAAAAAAAAACAAAALLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSNDDDDDENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSHLLSSLLSSNDEDRRLLSSLLSSLLSSLLSSLLSSLLSSDELLSSLLSSLLSSLLSSLLSSLLSSDDDDDDDDDDDEDDEDDLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSNNLLSSLLSSLLSSLLSSNLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSNNNLLSSNNLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSNLLSSLLSSLLSSLLSSLLSSIIIIIIIIIIIIIIIIIIHMMMMMMMMMFLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMLMMMLMMMLMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLMLLLLLLLLLLMLLMMMMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLMMMMLMLLLLLLLLLLLMLLLMMLMLMLLLLLLLLLLLLLLMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMHRRDDDHLLLLLLLAMMMLLLFLMFLLLLLLLLAMLLLLLLLLLLLLDDDDMMMMLLLLLLLLMMMMLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLSSLLSSRRRRRRRRLLSSRRRDDLLSSDDDDLLSSRDDLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDDLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSIIIIIIIIIIIILLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSRREDEDDDNDEDLLSSLLNSSDNNDNNDIIHMMLMMLLLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLALLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLMFLLLLLMLLLMLLLMFLMALLLMMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLRRRRRRRNELLSSTDEDDNDNDNDNEDDDDNDLLSSNDNNNNIIMMMMMLMMMMMMMMMMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMMMLLMMMMMMMMMMMMMMMMLLLLLLLLLLLMMMMMMMMLMMLMMLMMMMMMMLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLMMLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMDSDHDDIDQLLLLLLLLLLLFMMLMLLLLLLMMLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLDDDHDIDDDILLLLLLLLLLLLLLLLLLLLMMMKMLLKMMFFLMMMMLLLKKKMLLLKMLLLLLLLKLLLLMMMLMLLLLLLLLLLLLLFFMMKMKLMMLLLLLLLKLLLLMMMMMMMAMMMMMMMLLLLLLLLLLLLLLLLLLLLLLDHLLLLLLLLLFLLLLLLLLSSLLLLSSSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSNDLLSSHLLSSLLSSDDLLSSLLSSDLLLLSSSSDNEDNLLLLSSSSNNDLLSSLLSSLLSSLLSSLLLLSSSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSNNLLSSLLLLSSSSLLSSLLSSDNLLSSLLSSLLSSLLLLSSSSLLSSLLSSLLSSLLSSRRNENNNNNDLLSSLLSSLLLLSSSSLLSSLLSSNDNDLLSSLLSSLLSSLLSSRRNNNNNNDLLSSNLLSSLLLLSSSSIIIIIIIIIIIIHMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLMLLLLSSLLSSDLLSSLLSSLLSSDHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEDIHLLSSHDLLSSLLSSIIHMFFLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLKLLLFLFMLFLMMLLLLLLLLLLLLLLLLLLLLLLMDDHLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLSSRRHLLSSLLSSDDDHDLLSSLLSSLLSSLLSSLLSSIIMFFLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLFLLMLLMLLLFLLLLLLLLLLLLLLLLLLLLLLMMMNNNNNNENNNEDNNNNLLSSNEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNDNNNNNNNNNNNNNNNNNNNRRHLLSSLLSSNDIDNDNNNNNNNNNDNNNNNNLLSSLLSSNNNNNNNNNNNNNNNNNNNNENNNNIIMMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLMFMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMLLLFLLLLLKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMHDDHHDDDDDHMFFLLLLLLLLLLLLLLLMLLMLLLMLLLLLLLMMMLMLLLLLLLLLLLMLLLLLLLLLFLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLMMLLRRRRDNRRNHHRERRRRRRDDDDDNHMMFFFFLMLMMLLLLLLLLLLLLLLMLMLMLLMLLLFLLLLLLLMFLLLLLLLLLLMMMLLLLMLLMLMMMMLLLLLLLLLLLLLLLLLLLLLLLHLLSSLLSSDDLLSSLLSSLLSSLLSSDIIIILLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNIENNNNHEDGDDNNNNNDHHGNNMFFLALLLLLLLLLLLLALLLLLAALLAAAMLLLLLLLLLLLFALLLLLLFFFLLLMLAAAFLMLLLLLLLLLLLLLLLLLHDIIDDHDGGDMFFKLLLLLLLLLLLLMLLLLLLMLMMLLMLLLLLLAMLFLLLLLLFLLLMLLLLMMMMLKLLKLLMKLMLLLLLLLLLLLLLLLLLKLLKLLRRRRDDDDSMMMMLLLLLLLLMLLMMMMLMMLMMLLLLLLMMLLLLLMMLMMLMMMMLLMMLLLLLLLLLMLLLLMDDIDDIDIDHGIGGHGGGGKLLLLLLLLLLLLLMKLLFFLLLLFLLLLLLKLLLLLLLLLLFMFLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMLMMMHHHDHHHDDDDDDIHMFFFLLLLLLLLLLLLLLLKLLLLKLLLLMLLLLLLLFKLLLLFFLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLDSLLLMLLLLLLLLLDLLMLLLLLLLLMLDDDSLLLMMLLLLLLLLALLLLMLAMMMLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLMMLMLLLLLLLLLLLLLLRRNNDNNNEDDSENNINDNNLLLMMMLMMLLLLLLLLLLLLMLLLLLLLLLLMMMMMMMLMMLMLLMMMMMLMMMMMLLLLLMMMMMMLLLLLLMMMMMMMMMMMLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLMMMLLLLLLLLLLLLLLLLLMLLLLLLMMMMMDDLLLMLLLLMLMLLLLLMLLLLMLLLLLLNENDDNLLLLLLLLLLLLMMLLLLLLMLLLLLLMLLLLLLLLLLLLLNHNNDDNLLSSNEELLSSIDNLLSSDDNNNNIILLLLLLLLLMLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLLLLLLLLFLMMLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLMLLMLMLLLLMHHNNEDNHDDLLLLLLLLLMMLLLMMLLLLFFMFLLLLLLLLLLMMMFLLMMLLLLLLLLLLLLLDDDLLLLLLLLMMLLMMLLLMLLLLLLLLLLLLLLLLMMLMLLLMMLLLLLLLLLLLLLLLDRHHHLLLFLFLFFLLOFLLLDAFLLLMLLLLLAAALLLLLADDFLLFLLLLLLLLFLLLLLLLLLLLMLLSSHLLSSCLLSSCLLSSDLLSSIIFALLLLLLMLLLLLLLLLLLLLLLLLLALLLLLLLFLLLLLLFALAALLLLLLLLLLLLNNDDEDLLLLLLLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRDDEDDDEDNNNHDMLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLMMLLLLLMLLLLLLLMLLLLLLLLLLLLFLLFMLLLLLLLLLLLMMLLLLLLFFLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMENNIINNNENEDNNIIDNNDNNNNEIEDNNNNDNNNIEEEKLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLKLLLLLLLLLLMLMMMLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLMMMDIDDIDDDSSEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSSSLLSSRRSENLLSSLLSSNLLSSLLSSLLSSDDDDDLLSSLLSSLLSSIILLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFRRDSDDLLLLLLLLLLMLLLLLLLLLMLMLLLLLLLLLSHRRRDDDDMLLLLLLLLLLLLLMLLLLLLLFFLLLLMLMLLLLLLMMMLLLLLLLLLLLLLNDENHHLLLLLLLLLLFMLLLLLLLMLLIHHCSCDDIDIIIIIIDMFKLMALLLLLLLLLLALLLLLLFLLLMLALLLLLLFLLKLMFLLLLAMKLMKMLLMFKKLLLKKKLLLLLLLLLLLLLLLLLALHDDLLLLLLFLFLLLMLLLLLLLLDLLFFFMLLFFLMMMLLMLSSDDNDELLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLRSDDDENLLLLLLLLLLLLLLLLMLLLMLLLLLLMMLLLLLMLLMLMLLLMLLLLLLLLMLLLLMRRHDDIFFLLLLLLLFMLMLLLLMKMLLLLLLLAIIIOIOOIOIIIONQQIIIIIIIOIQIQQINNEIOQIOIOEIINDIIIILLLLLOLLLKLLLKLLLOOOOOOOOOOOOOOOOOOOLLLLLKKKLOOOLLLKLLLLLKLLLLLOOOOOOOOLLLKLLLOOLLFKLOKLLLLLLLKLLLLLLLLLLLLLLLLOLLLLLLLLLLOOKLLLLLLLKLLLLLLLLLLLLLLLLLLOLLLOOOLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLOLLLLLLKKLLLOKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLOOLLLOLLLLLKLKLLLLLOLLMLLLLAAAAAOOAOAAAOAAAOOOOOOAOOOAOAAAAOAOOAAAAAAAAOOOAAAOOAOAOAAAAOAOAAAAAAAAAOAAAOOOAAAAAAOOAOODIIDGDLMLKLKLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLIDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLFFMLLLKLLFFLLOOADRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFFRRRRRRGGRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGRRRRRFFFFFFRRRRRRRRRRRRRRRRRRRRRRRRFFFDDDDDDDDDDDDGGGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDLLMLLLLLLLLLLLMLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLFLLLLDLLLLMFLLLLLLLLMLLLLLLOOIDQLLLLLLFLMKLLLLLLLIIKKDDDDDDDDDDLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMDDDDDDRDRDDDRLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIOKLIONNNIOEIOIODLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLFLFFFLFFLKLLLLLLLLLLLLLLIIQQIIEIIIKKLLLLLLLLLKLLLLLFKLLLLLKLKLLIOFKIDLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRARRRRRRRRRRRRRRRRRRRDDDGGGGGGGGGGGDDMMLLLLLLLLLLLLLLLLGGGGGGGGGGGGGGGGELLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLMMLLLLLLLMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLEDINIODDDDDIDDNIIIIGNIIILMLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLMLMLLLLLLLMKKKKKKKKKLLLLLMMMMLLLLLLLLLLMMMLMMLLLLLLLLLLLLLMLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLKLLIIQQQDDDMLLLLLLLLLLMLLLLLLLLLKLLLLOFKLLLFFLLLLLLLLLLLIDIOIQDLLLLKLLLLLLLLKLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLFFFFRRRRRRRRRRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFLLLLOOLLLRRDDDDDDIDDIIDDDDDIDIDDDQIQQIDDDDDIDDDDDDIDDIDDIIDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMFLLLKLLMMMMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFKLLMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMLMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFMLLLLLLLMLMMMMKLLMFFMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLKMFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLIOIQIIDDIIIIIIIIIKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDIDSDTSSSLFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFFLLLLLLLLFFLLLLLLLLLLLLLLMFFFLLLFMFFFLLLLLLLFFLLLLLFFLLLLLLLLLLLLLLMLFMMMFLLLFLDNSNNEDDESSNNNNEDDSSNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSNENENSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSNNDDDDDDDDDDDDNDDNDNDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIIIIIENINNEIIIIIINIIIIIENIIIIIIIQQQQQQQQQQQQQQQDIDDDDDIIIQQIIIIIIQIQNDQNKKLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLKLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLKKKLMMMMKLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLKLLLLLLKKKLLLLKKKKLLLLMMMKLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDIILLLLLLLLLMLLLMLLLLLLMLLLLLLLLLLLLLLLMLMLMLLMLLLLLLLLLLLLLLLFFFFFFFFDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLAAAAAIIIOIOOIOIIIONIIIIIIOIQIQQINNEIOQIOIOEIINIILLLOLLKKOOLKKKOOOLLKLLKLLLLOOOOOLLLKOOFKLOKLLKLLOLLLLLLLLOOKLLLOLLOOOLLLKKLLLLLLLLLOOLLLLLLLLLLLLOLLKKLLLOKLLLLLLLLLLLLLLLLLOLLLOOOLLLLLLOLLIIIOIOOIOIIIONIIIIIIOIQIQQINNEIOQIOIOEIINIILLLOLLKKOOLKKKOOOLLKLLKLLLLOOOOOLLLKOOFKLOKLLKLLOLLLLLLLLOOKLLLOLLOOOLLLKKLLLLLLLLLOOLLLLLLLLLLLLOLLKKLLLOKLLLLLLLLLLLLLLLLLOLLLOOOLLLLLLOLLIIIOIOOIOIIIONQQIIIIIIIOIQIQQINNEIOQIOIOEIINIIIILLLOLLKKOOLKKKOOOLLKLLKLLLLOOOOOLLLKOOFKLOKLLKLLOLLLLLLLLOOKKLLLOLLOOOLLLKKLLLLLLLLLOOLLLLLLLLLLLLOLLKKLLLOKLLLLLLLLLLLLLLLLLOLLLOOOLLLLKKLLOLLIIIOIOOIOIIIONQQIIIIIIIOIQIQQINNEIOQIOIOEIINIIIILLLOLLKKOOLKKKOOOLLKLLKLLLLOOOOOLLLKOOFKLOKLLKLLOLLLLLLLLOOKKLLLOLLOOOLLLKKLLLLLLLLLOOLLLLLLLLLLLLOLLKKLLLOKLLLLLLLLLLLLLLLLLOLLLOOOLLLLKKLLOLLIIIOIOOIOIIIONIIIIIIOIQIQQINNEIOQIOIOEIINIILLLOLLKKOOLKKKOOOLLKLLKLLLLOOOOOLLLKOOFKLOKLLKLLOLLLLLLLLOOKLLLOLLOOOLLLKKLLLLLLLLLOOLLLLLLLLLLLLOLLKKLLLOKLLLLLLLLLLLLLLLLLOLLLOOOLLLLLLOLLCCCCCCCCCCCCCCCCCDDSQDILOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLFFLLLLLLLLLLLLFFFFLFFLLLLFLLLLLLFFLLLLFLLLLFFLLLLMMFFFFLFLFFFLLLLLLLLLLLLLLLMLFFFFNDDDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSQQNSSSDDQQQQIQQQNDIIIIIIIIIIIEKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLGGGGGGGGGGGGGGGGGLLLLLLLKLLKLLKLLKLLLLLKLLKLLLLLKLLKLLKLLGGGLGGGGGGGGGGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKKLLLLLLLLLLKKKLLLLLLLLLLLLKKKLLLLLLLLLLLLKKLLLLLLLLLLKKKLLLLLLLLLLLLKKKLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKKLLLLLLLLLLKLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLKLLLLLLLKLLLLLLLLLLLLLLGGGGGGGGGGGGGGGGGGGGDDDDDDDDDDDQDDQDDDDDDDDIIDDDDDDDMMMMMMLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFKKKKFKKMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLMMFMMMMMMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMFFDLLLLLLFLMFFFMLLLLDDDDQDDDIDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKFFFFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLALLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMLMDDDDDNININIEIQDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLKLLLLLLMMLLLLLLLKLLLMMKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDALLLLLLLLLLLMLLLLLLLLRRRRRRRRRRRNNDDDDDDDDDDDDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMDNEDDDNDMMLLLLLLLLLLLLLLLLLLLMLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLMLMLMLMMLDSSSSSDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLRRRRRRRRRRFFRAFFRRNDDDHRRRRRDHRRRDREDNDRNMFLMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLMMMMMLFLLLLLLLLLLMMMOFLLLLLLMLLLLLLFLLLLLLLLLLLFLLFFFFMMMMMMMMMFLLLLLLLLFLLMLLLMMMMFMMLLOOLMMLMMMMFMLFLFLFFFFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMMNENLLLLLLLALLLLANNDDEMLLLLLLLLLLLLLLMMMLLLLLLLLLMLLLLLLLMMLLLLLLMLLLMDNNNDDDDELMMLLLLLLLLLLLLLMLLMLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLMLMLLLLLLLLLLLLLLLLLLMMLLDDLLMLLLLLFLLLLAAFMLLAMALALLMLALLLLLLRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFHDLLLFFLMLLFLLFFLLLLFLFLHDDFMLLLLMFFFFFLLMFLLLMFFFFFFLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFRRHFFFFFFFFFFFFFHHDFLLLLMLFFFFLLLFFAAAAAENHRHDINDKLLLLLLLLLLKLLKLLLLLLFFKMLLLFLLLKKLLLAFKMLLLLLLLLLLKDDLMLLLLMLMMMLLLMLLLLLLMFLLLLMLMLLLLFLLLLLLLNDRNNRDEGDENLMLLLLLLLLLLFFLLLLLLLLLLALLLMMLLMLLLLLLLLLMLLLLLLLLLLLMLLLMLLLLLMLMLLLLLLLLLLLLLLLLLLLEHNNFLLLLLLFLFFFLLLLNDSSHNDDDDENDLLLLMLLLMLLLLLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLMLLMMLLMLLMLLLLLLLMLLLMLMLLMMLLLALLLLLLMLLMMMLMLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMDHDDDMFFLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLDIKLLMLMLLLLLLLLLLMLRRRDENNNNNNDDDNNNDDNEDDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLFMMMMMMMMLLMLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMFFFLMMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIDDDLKLALLLLLLAKOMALLLLLLLLLLLLLLLMLLFALLLLLLLLLLFFFFFFMLLLRDMLLFLLLLLLLLLLLLDDLLLLLLMLLLLLLLLLMLLMLLLLLLLLDDGLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLMLLLLMMLLLLLMLMLLLLLLLLLLLLLLLLLLM","n":["AERO_SYSTEM_ALLOCATOR","IO_VIRTUAL_BASE","PHYSICAL_MEMORY_OFFSET","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_realloc","acpi","aero_ap_main","aero_main","arch","cmdline","drivers","fs","kernel_main_thread","logger","mem","module_init","modules","net","prelude","rendy","socket","syscall","unwind","userland","utils","ACPI_TABLE","AcpiHeader","AcpiTable","GenericAddressStructure","Rsdt","Xsdt","access_size","address","address_space","aml","bit_offset","bit_width","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fadt","fmt","from","from","from","get_acpi_table","header","hpet","init","init_table","into","into","into","lookup_entry","madt","mcfg","new","revision","rsdp","sdt","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AML_SUBSYSTEM","AmlSubsystem","S5","SleepState","borrow","borrow_mut","enable_acpi","enter_state","from","get_subsystem","init","into","pci_route_pin","try_from","try_into","type_id","Fadt","SIGNATURE","acpi_disable","acpi_enable","boot_architecture_flags","borrow","borrow_mut","c_state_control","century","day_alarm","dsdt","duty_offset","duty_width","firmware_ctrl","flags","flush_size","flush_stride","from","gpe0_block","gpe0_ength","gpe1_base","gpe1_block","gpe1_length","header","into","month_alarm","pm1_control_length","pm1_event_length","pm1a_control_block","pm1a_event_block","pm1b_control_block","pm1b_event_block","pm2_control_block","pm2_control_length","pm_timer_block","pm_timer_length","preferred_power_management","pstate_control","reserved","reserved2","s4_bios_req","sci_interrupt","smi_command_port","try_from","try_into","type_id","worst_c2_latency","worst_c3_latency","Hpet","SIGNATURE","base_address","borrow","borrow_mut","comparator_descriptor","from","header","hpet_number","hw_rev_id","into","min_periodic_clk_tick","new","oem_attribute","pci_vendor_id","try_from","try_into","type_id","EntryHeader","IO_APICS","ISOS","IntSrcOverride","IoApic","IoApicHeader","LocalApic","Madt","MadtEntry","MadtIntSrcOverride","MadtIterator","MadtLocalApic","SIGNATURE","apic_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","clone","clone_into","current","entry_type","flags","flags","flags","from","from","from","from","from","from","from","global_system_interrupt","global_system_interrupt_base","header","header","header","header","init","into","into","into","into","into","into","into","into_iter","io_apic_address","io_apic_id","irq","iter","length","limit","local_apic_address","next","processor_id","reserved","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DeviceConfig","MCFG","Mcfg","SIGNATURE","base_address","borrow","borrow","borrow_mut","borrow_mut","end_bus","entry_count","from","from","get_mcfg_table","header","init","into","into","is_available","pci_seg_group","reserved","reserved","start_bus","try_from","try_from","try_into","try_into","type_id","type_id","Rsdp10","Rsdp20","Rsdt","Rsdt","RsdtAddress","RsdtHeader","RsdtTyp","Xsdt","_phantom","as_usize","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","checksum","entries_count","entries_count","extended_checksum","find_rsdt_address","from","from","from","from","header","into","into","into","into","length","lookup_entry","lookup_entry","new","new","oemid","oemid","reserved","revision","revision","rsdt_address","rsdt_address","signature","signature","signature","signature","signature","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate_checksum","validate_rsdt_checksum","xsdt_address","Sdt","as_ref","borrow","borrow_mut","checksum","creator_id","creator_revision","data_address","data_len","from","from_address","into","is_valid","length","oem_id","oem_revision","oem_table_id","revision","signature","signature","try_from","try_into","type_id","x86_64","BOOT_TIME","FRAMEBUFFER","HHDM","KERNEL_FILE","MEMMAP","MODULES","RSDP","SMP","STACK","apic","arch_aero_main","controlregs","enable_acpi","enable_xsave","gdt","init_cpu","interrupts","io","signals","syscall","task","time","tls","x86_64_aero_ap_main","APIC_SPURIOUS_VECTOR","ApicType","BSP_APIC_ID","BSP_READY","CPU_COUNT","LOCAL_APIC","LocalApic","None","SAMPLES","X2APIC_BASE_MSR","X2apic","XAPIC_EOI","XAPIC_ESR","XAPIC_ID","XAPIC_LVT_ERROR","XAPIC_LVT_TIMER","XAPIC_SVR","XAPIC_TIMER_CURRENT_COUNT","XAPIC_TIMER_DIV_CONF","XAPIC_TIMER_INIT_COUNT","XAPIC_TPR","Xapic","address","apic_type","borrow","borrow","borrow_mut","borrow_mut","bsp_id","clone","clone_into","eoi","eq","fmt","from","from","from","get_bsp_id","get_cpu_count","get_esr","get_local_apic","init","init","into","into","io_apic_from_redirect","io_apic_get_max_redirect","io_apic_read","io_apic_set_redirect","io_apic_setup_legacy_irq","io_apic_write","is_bsp_ready","is_none","lapic_error_handler","mark_bsp_ready","new","read","register_to_x2apic_msr","register_to_xapic_addr","timer_calibrate","timer_oneshot","timer_stop","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","ALIGNMENT_CHECK","ALIGNMENT_CHECK","ALIGNMENT_CHECK","ALIGNMENT_CHECK","ALIGNMENT_MASK","ALIGNMENT_MASK","ALIGNMENT_MASK","ALIGNMENT_MASK","AUXILIARY_CARRY_FLAG","AUXILIARY_CARRY_FLAG","AUXILIARY_CARRY_FLAG","AUXILIARY_CARRY_FLAG","AVX","AVX","AVX","AVX","BNDCSR","BNDCSR","BNDCSR","BNDCSR","BNDREG","BNDREG","BNDREG","BNDREG","CACHE_DISABLE","CACHE_DISABLE","CACHE_DISABLE","CACHE_DISABLE","CARRY_FLAG","CARRY_FLAG","CARRY_FLAG","CARRY_FLAG","Cr0Flags","Cr3Flags","Cr4Flags","DEBUGGING_EXTENSIONS","DEBUGGING_EXTENSIONS","DEBUGGING_EXTENSIONS","DEBUGGING_EXTENSIONS","DENORMAL","DENORMAL","DENORMAL","DENORMAL","DENORMALS_ARE_ZEROS","DENORMALS_ARE_ZEROS","DENORMALS_ARE_ZEROS","DENORMALS_ARE_ZEROS","DENORMAL_MASK","DENORMAL_MASK","DENORMAL_MASK","DENORMAL_MASK","DIRECTION_FLAG","DIRECTION_FLAG","DIRECTION_FLAG","DIRECTION_FLAG","DIVIDE_BY_ZERO","DIVIDE_BY_ZERO","DIVIDE_BY_ZERO","DIVIDE_BY_ZERO","DIVIDE_BY_ZERO_MASK","DIVIDE_BY_ZERO_MASK","DIVIDE_BY_ZERO_MASK","DIVIDE_BY_ZERO_MASK","EMULATE_COPROCESSOR","EMULATE_COPROCESSOR","EMULATE_COPROCESSOR","EMULATE_COPROCESSOR","EXTENSION_TYPE","EXTENSION_TYPE","EXTENSION_TYPE","EXTENSION_TYPE","FLUSH_TO_ZERO","FLUSH_TO_ZERO","FLUSH_TO_ZERO","FLUSH_TO_ZERO","FSGSBASE","FSGSBASE","FSGSBASE","FSGSBASE","HI16_ZMM","HI16_ZMM","HI16_ZMM","HI16_ZMM","ID","ID","ID","ID","INTERRUPT_FLAG","INTERRUPT_FLAG","INTERRUPT_FLAG","INTERRUPT_FLAG","INVALID_OPERATION","INVALID_OPERATION","INVALID_OPERATION","INVALID_OPERATION","INVALID_OPERATION_MASK","INVALID_OPERATION_MASK","INVALID_OPERATION_MASK","INVALID_OPERATION_MASK","IOPL_HIGH","IOPL_HIGH","IOPL_HIGH","IOPL_HIGH","IOPL_LOW","IOPL_LOW","IOPL_LOW","IOPL_LOW","L5_PAGING","L5_PAGING","L5_PAGING","L5_PAGING","LWP","LWP","LWP","LWP","MACHINE_CHECK_EXCEPTION","MACHINE_CHECK_EXCEPTION","MACHINE_CHECK_EXCEPTION","MACHINE_CHECK_EXCEPTION","MONITOR_COPROCESSOR","MONITOR_COPROCESSOR","MONITOR_COPROCESSOR","MONITOR_COPROCESSOR","MPK","MPK","MPK","MPK","MxCsr","NESTED_TASK","NESTED_TASK","NESTED_TASK","NESTED_TASK","NOT_WRITE_THROUGH","NOT_WRITE_THROUGH","NOT_WRITE_THROUGH","NOT_WRITE_THROUGH","NUMERIC_ERROR","NUMERIC_ERROR","NUMERIC_ERROR","NUMERIC_ERROR","OPMASK","OPMASK","OPMASK","OPMASK","OSFXSR","OSFXSR","OSFXSR","OSFXSR","OSXMMEXCPT_ENABLE","OSXMMEXCPT_ENABLE","OSXMMEXCPT_ENABLE","OSXMMEXCPT_ENABLE","OSXSAVE","OSXSAVE","OSXSAVE","OSXSAVE","OVERFLOW","OVERFLOW","OVERFLOW","OVERFLOW","OVERFLOW_FLAG","OVERFLOW_FLAG","OVERFLOW_FLAG","OVERFLOW_FLAG","OVERFLOW_MASK","OVERFLOW_MASK","OVERFLOW_MASK","OVERFLOW_MASK","PAGE_GLOBAL","PAGE_GLOBAL","PAGE_GLOBAL","PAGE_GLOBAL","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_WRITETHROUGH","PAGE_LEVEL_WRITETHROUGH","PAGE_LEVEL_WRITETHROUGH","PAGE_LEVEL_WRITETHROUGH","PAGE_SIZE_EXTENSION","PAGE_SIZE_EXTENSION","PAGE_SIZE_EXTENSION","PAGE_SIZE_EXTENSION","PAGING","PAGING","PAGING","PAGING","PARITY_FLAG","PARITY_FLAG","PARITY_FLAG","PARITY_FLAG","PCID","PCID","PCID","PCID","PERFORMANCE_MONITOR_COUNTER","PERFORMANCE_MONITOR_COUNTER","PERFORMANCE_MONITOR_COUNTER","PERFORMANCE_MONITOR_COUNTER","PHYSICAL_ADDRESS_EXTENSION","PHYSICAL_ADDRESS_EXTENSION","PHYSICAL_ADDRESS_EXTENSION","PHYSICAL_ADDRESS_EXTENSION","PRECISION","PRECISION","PRECISION","PRECISION","PRECISION_MASK","PRECISION_MASK","PRECISION_MASK","PRECISION_MASK","PROTECTED_MODE_ENABLE","PROTECTED_MODE_ENABLE","PROTECTED_MODE_ENABLE","PROTECTED_MODE_ENABLE","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTION_KEY","PROTECTION_KEY","PROTECTION_KEY","PROTECTION_KEY","RESUME_FLAG","RESUME_FLAG","RESUME_FLAG","RESUME_FLAG","RFlags","ROUNDING_CONTROL_NEGATIVE","ROUNDING_CONTROL_NEGATIVE","ROUNDING_CONTROL_NEGATIVE","ROUNDING_CONTROL_NEGATIVE","ROUNDING_CONTROL_POSITIVE","ROUNDING_CONTROL_POSITIVE","ROUNDING_CONTROL_POSITIVE","ROUNDING_CONTROL_POSITIVE","ROUNDING_CONTROL_ZERO","ROUNDING_CONTROL_ZERO","ROUNDING_CONTROL_ZERO","ROUNDING_CONTROL_ZERO","SAFER_MODE_EXTENSIONS","SAFER_MODE_EXTENSIONS","SAFER_MODE_EXTENSIONS","SAFER_MODE_EXTENSIONS","SIGN_FLAG","SIGN_FLAG","SIGN_FLAG","SIGN_FLAG","SSE","SSE","SSE","SSE","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","TASK_SWITCHED","TASK_SWITCHED","TASK_SWITCHED","TASK_SWITCHED","TIMESTAMP_DISABLE","TIMESTAMP_DISABLE","TIMESTAMP_DISABLE","TIMESTAMP_DISABLE","TRAP_FLAG","TRAP_FLAG","TRAP_FLAG","TRAP_FLAG","UNDERFLOW","UNDERFLOW","UNDERFLOW","UNDERFLOW","UNDERFLOW_MASK","UNDERFLOW_MASK","UNDERFLOW_MASK","UNDERFLOW_MASK","USER_MODE_INSTRUCTION_PREVENTION","USER_MODE_INSTRUCTION_PREVENTION","USER_MODE_INSTRUCTION_PREVENTION","USER_MODE_INSTRUCTION_PREVENTION","VIRTUAL_8086_MODE","VIRTUAL_8086_MODE","VIRTUAL_8086_MODE","VIRTUAL_8086_MODE","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT_PENDING","VIRTUAL_INTERRUPT_PENDING","VIRTUAL_INTERRUPT_PENDING","VIRTUAL_INTERRUPT_PENDING","VIRTUAL_MACHINE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","WRITE_PROTECT","WRITE_PROTECT","WRITE_PROTECT","WRITE_PROTECT","X87","X87","X87","X87","XCr0Flags","ZERO_FLAG","ZERO_FLAG","ZERO_FLAG","ZERO_FLAG","ZMM_HI256","ZMM_HI256","ZMM_HI256","ZMM_HI256","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","all","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read_cr0","read_cr2","read_cr3","read_cr3_raw","read_cr4","read_mxcsr","read_rflags","read_xcr0","remove","remove","remove","remove","remove","remove","set","set","set","set","set","set","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","write_cr0","write_cr4","write_mxcsr","write_xcr0","BOOT_GDT","BOOT_GDT_ENTRY_COUNT","EXECUTABLE","GDT","GDT_ENTRY_COUNT","GdtAccessFlags","GdtDescriptor","GdtEntry","GdtEntryFlags","GdtEntryType","KERNEL_CODE","KERNEL_DATA","KERNEL_TLS","Kpcr","LONG_MODE","LONG_MODE","LONG_MODE","LONG_MODE","NULL","NULL","NULL","NULL","NULL","NULL","PRESENT","PRIVILEGE","PROTECTED_MODE","PROTECTED_MODE","PROTECTED_MODE","PROTECTED_MODE","RING_0","RING_3","RPL_0","RPL_0","RPL_0","RPL_0","RPL_1","RPL_1","RPL_1","RPL_1","RPL_2","RPL_2","RPL_2","RPL_2","RPL_3","RPL_3","RPL_3","RPL_3","Ring","Ring0","STK","SYSTEM","SegmentSelector","TI_GDT","TI_GDT","TI_GDT","TI_GDT","TI_LDT","TI_LDT","TI_LDT","TI_LDT","TSS","TSS_AVAIL","TSS_HI","Tss","__BitFlags","__BitFlags","__BitFlags","__BitFlags","access_byte","all","all","base_hi","base_low","base_middle","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","cpu_local","difference","difference","empty","empty","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_hash","get_hash","get_kpcr","get_task_state_segment","hash","hash","init","init_boot","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","iomap_base","is_all","is_all","is_empty","is_empty","ist","limit_hi_flags","limit_low","load_cs","load_ds","load_es","load_fs","load_gdt","load_gs","load_ss","load_tss","new","new","new","not","not","offset","partial_cmp","partial_cmp","remove","remove","reserved","reserved2","reserved3","reserved4","rsp","set","set","set_limit","set_offset","set_raw","size","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tss","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","APIC_CONTROLLER","ApicController","ICW1_ICW4","ICW1_INIT","ICW1_READ_ISR","ICW4_8086","IDT_FREE_VECTOR","INTERRUPT_CONTROLLER","InterruptController","LAZY","LAZY","LAZY","PIC1_COMMAND","PIC1_DATA","PIC2_COMMAND","PIC2_DATA","PIC_CONTROLLER","PIC_EOI","PicController","__private_field","__private_field","__private_field","__stability","__stability","__stability","__static_ref_initialize","__static_ref_initialize","__static_ref_initialize","allocate_vector","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","disable","disable_interrupts","enable_interrupts","eoi","eoi","eoi","exceptions","from","from","from","from","from","from","generic_interrupt_handler","get_irq_register","halt","idt","into","into","into","into","into","into","is_enabled","is_master_active","is_slave_active","method","method","new","new","register_handler","switch_to_apic","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","LOG_PF_PTABLE","SYSENTER_OPCODE","alignment_check","bound_range","breakpoint","debug","device_not_available","divide_by_zero","double_fault","fpu_fault","interrupt_exception","invalid_opcode","invalid_tss","machine_check","non_maskable","overflow","page_fault","protection","security","segment_not_present","simd","stack_segment","virtualization","ErrorHandler","Handler","IDT","IDTFlags","IDT_ENTRIES","INTERRUPT","INTERRUPT","INTERRUPT","INTERRUPT","INTERRUPT_HANDLERS","IdtDescriptor","IdtEntry","InterruptErrorStack","InterruptStack","IretRegisters","IrqHandler","NULL","None","PRESENT","PRESENT","PRESENT","PRESENT","PreservedRegisters","RING_0","RING_0","RING_0","RING_0","RING_1","RING_1","RING_1","RING_1","RING_2","RING_2","RING_2","RING_2","RING_3","RING_3","RING_3","RING_3","SS","SS","SS","SS","ScratchRegisters","TRAP","TRAP","TRAP","TRAP","__BitFlags","__BitFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","code","complement","contains","cs","default","default","default","default","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hash","hash","ignore","init","insert","interrupt_handlers","intersection","intersects","into","into","into","into","into","into","into","into","into","iret","is_all","is_empty","is_user","ist","load_idt","new","not","offset","offset_hi","offset_low","offset_middle","partial_cmp","preserved","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","remove","rflags","rip","rsi","rsp","scratch","selector","set","set_flags","set_function","set_offset","size","ss","stack","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_attr","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","BasedPort","IA32_APIC_BASE","IA32_EFER","IA32_FMASK","IA32_FS_BASE","IA32_GS_BASE","IA32_KERNEL_GSBASE","IA32_LSTAR","IA32_STAR","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","InOut","base","borrow","borrow_mut","clone","clone_into","delay","from","inb","inl","into","inw","new","outb","outl","outw","port_in","port_out","rdmsr","read_offset","to_owned","try_from","try_into","type_id","wait","write_offset","wrmsr","REDZONE_SIZE","SYSCALL_INSTRUCTION_SIZE","SignalFrame","borrow","borrow_mut","fmt","frame","from","from_interrupt","from_syscall","interrupt_check_signals","into","restart_syscall","sigmask","sigreturn","syscall_check_signals","try_from","try_into","type_id","ARCH_GET_FS","ARCH_GET_GS","ARCH_SET_FS","ARCH_SET_GS","arch_prctl","init","x86_64_check_sysenter","x86_64_do_syscall","x86_64_syscall_handler","x86_64_sysenter_handler","ArchTask","AtEntry","AtNull","AtPhEnt","AtPhNum","AtPhdr","AuxvType","CACHED","Context","DEFAULT_FPU_CWORD","USERLAND_STACK_BOTTOM","USERLAND_STACK_SIZE","USERLAND_STACK_TOP","XSAVE_SIZE","address_space","alloc_switch_stack","arch_task_spinup","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_process","context","context_switch_rsp","cr3","dealloc","default","exec","fmt","fork","fork_init","fork_init","fpu_storage","from","from","from","fs_base","get_fs_base","get_gs_base","gs_base","into","into","into","iretq_init","jump_userland_exec","new_idle","new_kernel","r12","r13","r14","r15","rbp","rbx","rip","set_fs_base","set_gs_base","task_spinup","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unref_pt","user","userland_last_address","xrstor","xsave","xsave_size","EPOCH","PIT_DIVIDEND","PIT_FREQUENCY_HZ","REALTIME_CLOCK","UPTIME_RAW","UPTIME_SEC","get_current_count","get_realtime_clock","get_uptime_ticks","init","pit_irq_handler","set_frequency","set_reload_value","CPU_FEATURES","CPU_INFO","CpuInfo","PerCpuData","ProcFsCpuFeature","borrow","borrow","borrow_mut","borrow_mut","brand","cpuid","cpuid","features","for_cpu_info_cached","fpu","from","from","gdt","get_cpuid","get_percpu","init","into","into","lapic_timer_frequency","try_from","try_from","try_into","try_into","type_id","type_id","vendor","CommandLine","RAW_CMDLINE_STR","borrow","borrow_mut","from","get_raw_cmdline","into","new","parse","parse_number","rendy_debug","resolve_module","term_background","theme_background","try_from","try_into","type_id","block","drm","e1000","keyboard","lai","mouse","pci","pty","tty","uart","uart_16550","ahci","ide","nvme","A","A","A","A","AE","AE","AE","AE","ALPE","ALPE","ALPE","ALPE","APST","APST","APST","APST","APSTE","APSTE","APSTE","APSTE","ASP","ASP","ASP","ASP","ATAPI","ATAPI","ATAPI","ATAPI","ATTR_ALHD","ATTR_ALHD","ATTR_ALHD","ATTR_ALHD","ATTR_PM","ATTR_PM","ATTR_PM","ATTR_PM","ATTR_SMB","ATTR_SMB","ATTR_SMB","ATTR_SMB","ATTR_XMT","ATTR_XMT","ATTR_XMT","ATTR_XMT","Active","AhciCommand","AhciDriver","AhciPort","AhciPortProtected","AhciProtected","AtaCommand","AtaCommandDataSetManagement","AtaCommandDeviceReset","AtaCommandFlushCache","AtaCommandFlushCacheExt","AtaCommandGetMediaStatus","AtaCommandIdentifyDevice","AtaCommandIdentifyPacketDevice","AtaCommandMediaEject","AtaCommandNop","AtaCommandNopNopAutopoll","AtaCommandPacket","AtaCommandReadDma","AtaCommandReadDmaExt","AtaCommandReadDmaQueued","AtaCommandReadDmaQueuedExt","AtaCommandReadMultiple","AtaCommandReadMultipleExt","AtaCommandReadSectors","AtaCommandReadSectorsExt","AtaCommandService","AtaCommandSetFeatures","AtaCommandSetFeaturesDisableReleaseInt","AtaCommandSetFeaturesDisableServiceInt","AtaCommandSetFeaturesEnableReleaseInt","AtaCommandSetFeaturesEnableServiceInt","AtaCommandWriteDma","AtaCommandWriteDmaExt","AtaCommandWriteDmaQueued","AtaCommandWriteDmaQueuedExt","AtaCommandWriteMultiple","AtaCommandWriteMultipleExt","AtaCommandWriteSectors","AtaCommandWriteSectorsExt","B","B","B","B","BB","BB","BB","BB","BOH","BOH","BOH","BOH","BOS","BOS","BOS","BOS","C","C","C","C","CCCS","CCCS","CCCS","CCCS","CLO","CLO","CLO","CLO","CPD","CPD","CPD","CPD","CPDE","CPDE","CPDE","CPDE","CPDS","CPDS","CPDS","CPDS","CPS","CPS","CPS","CPS","CR","CR","CR","CR","CTL_RST","CTL_RST","CTL_RST","CTL_RST","CTL_TM","CTL_TM","CTL_TM","CTL_TM","DESO","DESO","DESO","DESO","DHRE","DHRE","DHRE","DHRE","DHRS","DHRS","DHRS","DHRS","DLAE","DLAE","DLAE","DLAE","DMPE","DMPE","DMPE","DMPE","DMPS","DMPS","DMPS","DMPS","DPE","DPE","DPE","DPE","DPS","DPS","DPS","DPS","DRIVER","DSE","DSE","DSE","DSE","DSS","DSS","DSS","DSS","DevSleep","DmaBuffer","DmaCommand","DmaRequest","EMPTY","EMPTY","EMS","EMS","EMS","EMS","ESP","ESP","ESP","ESP","FBSCP","FBSCP","FBSCP","FBSCP","FBSS","FBSS","FBSS","FBSS","FR","FR","FR","FR","FRE","FRE","FRE","FRE","FisRegH2D","FisType","HBDE","HBDE","HBDE","HBDE","HBDS","HBDS","HBDS","HBDS","HBFE","HBFE","HBFE","HBFE","HBFS","HBFS","HBFS","HBFS","HPCP","HPCP","HPCP","HPCP","HR","HR","HR","HR","HbaBohc","HbaCapabilities","HbaCapabilities2","HbaCmdHeader","HbaCmdHeaderFlags","HbaCmdTbl","HbaEnclosureCtrl","HbaHostCont","HbaMemory","HbaPort","HbaPortCmd","HbaPortDd","HbaPortIE","HbaPortIS","HbaPortIpm","HbaPrdtEntry","HbaSataStatus","IE","IE","IE","IE","IFE","IFE","IFE","IFE","IFS","IFS","IFS","IFS","INFE","INFE","INFE","INFE","INFS","INFS","INFS","INFS","IPME","IPME","IPME","IPME","IPMS","IPMS","IPMS","IPMS","MPSS","MPSS","MPSS","MPSS","MRSM","MRSM","MRSM","MRSM","MSPC","MSPC","MSPC","MSPC","NVMP","NVMP","NVMP","NVMP","None","None","OFE","OFE","OFE","OFE","OFS","OFS","OFS","OFS","OOC","OOC","OOC","OOC","OOS","OOS","OOS","OOS","Offline","P","P","P","P","PCE","PCE","PCE","PCE","PCS","PCS","PCS","PCS","PMA","PMA","PMA","PMA","PMD","PMD","PMD","PMD","POD","POD","POD","POD","PRCE","PRCE","PRCE","PRCE","PRCS","PRCS","PRCS","PRCS","PSC","PSC","PSC","PSC","PSE","PSE","PSE","PSE","PSS","PSS","PSS","PSS","Partial","PresentAndE","PresentNotE","R","R","R","R","Read","RegH2D","S64A","S64A","S64A","S64A","SADM","SADM","SADM","SADM","SAL","SAL","SAL","SAL","SALP","SALP","SALP","SALP","SAM","SAM","SAM","SAM","SCLO","SCLO","SCLO","SCLO","SDBE","SDBE","SDBE","SDBE","SDBS","SDBS","SDBS","SDBS","SDS","SDS","SDS","SDS","SMPS","SMPS","SMPS","SMPS","SNCQ","SNCQ","SNCQ","SNCQ","SOOE","SOOE","SOOE","SOOE","SPM","SPM","SPM","SPM","SSC","SSC","SSC","SSC","SSNTF","SSNTF","SSNTF","SSNTF","SSS","SSS","SSS","SSS","ST","ST","ST","ST","STS_MR","STS_MR","STS_MR","STS_MR","SUD","SUD","SUD","SUD","SUPP_LED","SUPP_LED","SUPP_LED","SUPP_LED","SUPP_SAFTE","SUPP_SAFTE","SUPP_SAFTE","SUPP_SAFTE","SUPP_SES2","SUPP_SES2","SUPP_SES2","SUPP_SES2","SUPP_SGPIO","SUPP_SGPIO","SUPP_SGPIO","SUPP_SGPIO","SXS","SXS","SXS","SXS","Slumber","TFEE","TFEE","TFEE","TFEE","TFES","TFES","TFES","TFES","UFE","UFE","UFE","UFE","UFS","UFS","UFS","UFS","W","W","W","W","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__MODULE_INIT","_reserved","_reserved","_reserved","_reserved","_reserved","_reserved","_reserved_1","acmd","address","ahci_init","all","all","all","all","all","all","all","all","all","at_offset","bios_handoff_ctrl_sts","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","ccc_control","ccc_ports","cfis","cfis_as_h2d_mut","ci","clb","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","cmd_header_at","cmds","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","command","command","complement","complement","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","contains","contains","control","copy_into","count","count","ctb","data_size","data_size","dba","device","device_detection","devslp","difference","difference","difference","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","empty","empty","empty","enable_interrupts","enclosure_management_control","enclosure_management_location","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","fb","fbs","featureh","featurel","fis_type","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_cmds","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","get_ahci","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","global_host_control","handles","hash","hash","hash","hash","hash","hash","hash","hash","hash","hba","hba_mem","hba_port","host_capabilities_extended","host_capability","icc","ie","inner","inner","insert","insert","insert","insert","insert","insert","insert","insert","insert","interface_power_management","interrupt_status","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_command","is","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_lba48","is_write","lba0","lba1","lba2","lba3","lba4","lba5","new","new","not","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","port_mut","ports","ports_implemented","prdbc","prdt_entry","prdt_entry_mut","prdtl","probe","read","remove","remove","remove","remove","remove","remove","remove","remove","remove","request","run_command","run_request","run_request","sact","sctl","sector","sector","sectors","serr","set","set","set","set","set","set","set","set","set","set_command","set_command_fis_size","set_data_byte_count","set_interrupt_on_completion","set_lba","sig","sntf","ssts","start","start","start","start","start_cmd","start_driver","start_hba","stop_cmd","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tfd","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","union","union","union","vendor","vendor","version","DRIVER","EMPTY_CHANNELS","EMPTY_DRIVE","Ide","IdeDevice","IdeDrive","__MODULE_INIT","block_size","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel","channel","channels","device","from","from","from","get_device","handles","ide_devs","init","into","into","into","launch","new","new","read_block","read_dma","registers","slave","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_block","write_dma","IdeChannel","IdeChannelData","PrdEntry","PrdTable","active_cmd","addr","base","bmide","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cnt","ctrl","data","data","detect","detect","enable_interrupts","entry_at","from","from","from","from","get_prdt","init","init","interrupt_nr","into","into","into","into","load_dma","new","new","new","prdt_addr","run_ata_command","run_request","run_request","set_addr","set_byte_count","set_last_entry","setup_prdt","software_reset","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ABRT","ABRT","ABRT","ABRT","AMNF","AMNF","AMNF","AMNF","BASE_COMMAND","BASE_DRIVE_SEL","BASE_FEATURE","BASE_LBA_HI","BASE_LBA_LO","BASE_LBA_MID","BASE_SECTOR_COUNT","BASE_STATUS","BBK","BBK","BBK","BBK","BMIDE_COMMAND","BMIDE_PRDT","BMIDE_STATUS","BMIdeCmd","BMIdeStatus","BSY","BSY","BSY","BSY","BaseDriveSelReg","BaseErrorReg","BaseStatusReg","BusMasterReg","CORR","CORR","CORR","CORR","CTRL_DEV_CTRL","CtrlDevCtrlReg","CtrlDriveAddrReg","DF","DF","DF","DF","DISK_IRQ","DISK_IRQ","DISK_IRQ","DISK_IRQ","DMA_ACTIVE","DMA_ACTIVE","DMA_ACTIVE","DMA_ACTIVE","DMA_FAILED","DMA_FAILED","DMA_FAILED","DMA_FAILED","DMA_READ","DMA_READ","DMA_READ","DMA_READ","DMA_START","DMA_START","DMA_START","DMA_START","DRQ","DRQ","DRQ","DRQ","DS0","DS0","DS0","DS0","DS1","DS1","DS1","DS1","DevBaseReg","DevCtrlReg","ERR","ERR","ERR","ERR","HOB","HOB","HOB","HOB","IDNF","IDNF","IDNF","IDNF","IDX","IDX","IDX","IDX","MASTER_DMA_CAPABLE","MASTER_DMA_CAPABLE","MASTER_DMA_CAPABLE","MASTER_DMA_CAPABLE","MC","MC","MC","MC","MCR","MCR","MCR","MCR","NIEN","NIEN","NIEN","NIEN","NO_DMA_SHARING","NO_DMA_SHARING","NO_DMA_SHARING","NO_DMA_SHARING","RDY","RDY","RDY","RDY","SLAVE_DMA_CAPABLE","SLAVE_DMA_CAPABLE","SLAVE_DMA_CAPABLE","SLAVE_DMA_CAPABLE","SRST","SRST","SRST","SRST","SRV","SRV","SRV","SRV","TKZNF","TKZNF","TKZNF","TKZNF","UNC","UNC","UNC","UNC","WTG","WTG","WTG","WTG","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","ack_interrupt","all","all","all","all","all","all","base","base","base","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_features","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","enable_interrupts","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","lba_hi","lba_mid","load_prdt","new","new","new","new","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","remove","remove","set","set","set","set","set","set","set_block_num","set_command","set_drive_select","set_lba","set_sector_count","set_sector_count_lba28","set_sector_count_lba48","set_sector_num","set_sector_num_lba28","set_sector_num_lba48","set_slave","software_reset","start_dma","status","status","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_status","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","val","ADMIN","ADMIN","ADMIN","ADMIN","ASSERT","ASSERT","ArbitrationMechanism","Capability","CommandSet","CommandSetsSupported","Controller","ControllerConfig","ControllerFatal","ControllerStatus","Error","Handler","IO","IO","IO","IO","NVM","NVM","NVM","NVM","NVM","Namespace","NotMsixCapable","NotSupported","Registers","RoundRobin","UnknownBar","Version","__BitFlags","__BitFlags","__MODULE_INIT","acq","admin","all","aqa","asq","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","block_size","block_size","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capability","cc","clone","clone","clone_into","clone_into","cmp","command","complement","contains","controller","controller_status","controllers","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_cfs","get_css","get_doorbell_stride","get_hash","handles","hash","identity","insert","intersection","intersects","intmc","intms","into","into","into","into","into","into","into","into","into","into","into","into","io_queue","irq_handler","is_all","is_empty","is_enabled","is_ready","major","max_prps","max_queue_entries","minor","mpsmin","namespaces","new","new","not","nsid","nvme_init","partial_cmp","prps","queue","read_block","read_dma","remove","rsvd1","rsvd2","rw_command","set","set_ams","set_css","set_enable","set_enable","set_iocqes","set_iosqes","size","start","sub","sub_assign","symmetric_difference","tertiary","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","version","write_block","write_dma","ASSERT","ASSERT","ASSERT","ASSERT","ASSERT","ASSERT","ASSERT","ActivateList","AdminOpcode","CQ_IRQ_ENABLED","CQ_IRQ_ENABLED","CQ_IRQ_ENABLED","CQ_IRQ_ENABLED","Command","CommandFlags","CommandOpcode","CommonCommand","CompletionEntry","Controller","CreateCQCommand","CreateCq","CreateSQCommand","CreateSq","DataPointer","Identify","IdentifyCns","IdentifyCommand","IdentifyController","IdentifyNamespace","LbaFormat","Namespace","PowerState","QUEUE_PHYS_CONTIG","QUEUE_PHYS_CONTIG","QUEUE_PHYS_CONTIG","QUEUE_PHYS_CONTIG","Read","ReadWriteCommand","Unknown","Unknown","Unknown","Write","__BitFlags","__BitFlags","acl","active_power","active_work_scale","acwu","aerl","all","anacap","anagrpid","anagrpmax","anatt","app_mask","app_tag","apsta","avscc","awun","awupf","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cctemp","cdw10","cdw11","cdw12","cdw13","cdw14","cdw15","cdw2","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmic","cmp","cns","cntlid","command_id","command_id","command_id","command_id","command_id","command_id","common","complement","contains","control","controller_id","cq_flags","cqes","cqid","cqid","crdt1","crdt2","crdt3","create_cq","create_sq","ctratt","ctrattr","data_ptr","data_ptr","data_ptr","default","default","default","default","default","default","default","default","default","default","difference","dlfeat","dpc","dps","ds","ds_mgmt","dsto","edstt","elpe","empty","endgid","entry_lat","eq","eui64","exit_lat","extend","flags","flags","flags","flags","flags","flags","flbas","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fna","fpi","fr","frmw","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","fuses","fwug","get_hash","hash","hctma","hmmaxd","hmmin","hmminds","hmpre","icdoff","identify","idle_power","idle_scale","ieee","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ioccsz","iorcsz","irq_vector","is_all","is_empty","kas","lbaf","length","lpa","max_power","maxcmd","mc","mdts","metadata","metadata","mn","mnan","mntmt","ms","msdbd","mtfa","mxtmt","nabo","nabsn","nabspf","nacwu","namespace_id","nanagrpid","nawun","nawupf","ncap","nguid","nlbaf","nmic","nn","noiob","not","nows","npda","npdg","npss","npwa","npwg","nsattr","nsfeat","nsid","nsid","nsze","nuse","nvmcap","nvmsetid","nvscc","nwpc","oacs","oaes","oncs","opcode","opcode","opcode","opcode","opcode","partial_cmp","prp1","prp1","prp1","prp2","prp2","prp2","psd","q_size","q_size","rab","read_lat","read_tput","ref_tag","remove","rescap","reserved","reserved1","reserved1","reserved100","reserved1024","reserved11","reserved134","reserved1804","reserved192","reserved2","reserved2","reserved2","reserved2","reserved3","reserved338","reserved352","reserved534","reserved544","reserved74","reserved96","result","rp","rpmbs","rsvd1","rsvd2","rsvd3","rtd3e","rtd3r","rw","sanicap","set","sgls","sn","sq_flags","sq_head","sq_id","sqes","sqid","ssvid","start_lba","status","sub","sub_assign","subnqn","symmetric_difference","tnvmcap","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unvmcap","ver","vid","vs","vs","vwc","wctemp","write_lat","write_tput","Completion","DOORBELL_OFFSET","DoorBell","QUEUE_PAIR_ID","Queue","QueuePair","QueueType","Submission","Type","addr","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_doorbell_offset","cid","completion","completion_addr","doorbell","from","from","from","from","from","id","id","index","into","into","into","into","into","len","new","new","next_cmd_result","phase","queue","size","submission","submission_addr","submit_command","submit_command","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BufferObject","Connector","Crtc","DRM_CARD_ID","Drm","DrmDevice","Encoder","Framebuffer","IdAllocator","ModeObject","alloc","allocate_object_id","as_connector","as_crtc","as_encoder","as_framebuffer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_alloc","buffer_obj","buffers","can_dumb_create","card_id","clone","clone_into","commit","connector_typ","connectors","copy_field","copy_mode_obj_id","create_handle","crtcs","current_crtc","current_encoder","device","device_marker","device_name","downcast_arc","driver_info","driver_version","dumb_create","encoders","find_handle","find_object","fmt","framebuffer_create","framebuffers","from","from","from","from","from","from","from","id","id","id","id","id","id_alloc","index","index","inode","inode","install_connector","install_crtc","install_encoder","install_framebuffer","install_object","into","into","into","into","into","into","into","ioctl","make_dmt_modes","make_mode_info","mapping","mapping_alloc","max_dim","memory","min_dim","mmap","mode_objs","modes","new","new","new","new","new","new","new","object","object","object","object","object","object_id","object_id","object_id","object_id","possible_clones","possible_crtcs","possible_encoders","rawfb","size","sref","sref","sref","sref","sref","status","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","RawFramebuffer","__MODULE_INIT","borrow","borrow_mut","can_dumb_create","commit","driver_info","driver_version","dumb_create","framebuffer_create","from","init","into","max_dim","min_dim","try_from","try_into","type_id","ACK","ACK","ACK","ACK","ASDE","ASDE","ASDE","ASDE","ASDE","ASDE","ASDE","ASDE","BAM","BAM","BAM","BAM","BSIZE_1024","BSIZE_1024","BSIZE_1024","BSIZE_1024","BSIZE_16384","BSIZE_16384","BSIZE_16384","BSIZE_16384","BSIZE_2048","BSIZE_2048","BSIZE_2048","BSIZE_2048","BSIZE_256","BSIZE_256","BSIZE_256","BSIZE_256","BSIZE_4096","BSIZE_4096","BSIZE_4096","BSIZE_4096","BSIZE_512","BSIZE_512","BSIZE_512","BSIZE_512","BSIZE_8192","BSIZE_8192","BSIZE_8192","BSIZE_8192","CFI","CFI","CFI","CFI","CFIEN","CFIEN","CFIEN","CFIEN","Control","ControlFlags","DD","DD","DD","DD","DEVICE","DPF","DPF","DPF","DPF","DSW","DSW","DSW","DSW","Device","E1000","EC","EC","EC","EC","ECCER","ECCER","ECCER","ECCER","ECtl","EN","EN","EN","EN","EN","EN","EN","EN","Eeprom","Eeprom","Error","Handler","ICause","ILOS","ILOS","ILOS","ILOS","ILOS","ILOS","ILOS","ILOS","IMask","IRate","InterruptFlags","LBM_NONE","LBM_NONE","LBM_NONE","LBM_NONE","LBM_PHY","LBM_PHY","LBM_PHY","LBM_PHY","LC","LC","LC","LC","LPE","LPE","LPE","LPE","LRST","LRST","LRST","LRST","LRST","LRST","LRST","LRST","LSC","LSC","LSC","LSC","LSECPN","LSECPN","LSECPN","LSECPN","MDAC","MDAC","MDAC","MDAC","MO_32","MO_32","MO_32","MO_32","MO_34","MO_34","MO_34","MO_34","MO_35","MO_35","MO_35","MO_35","MO_36","MO_36","MO_36","MO_36","MPE","MPE","MPE","MPE","NoEeprom","OutOfMemory","PHYINT","PHYINT","PHYINT","PHYINT","PHY_RST","PHY_RST","PHY_RST","PHY_RST","PHY_RST","PHY_RST","PHY_RST","PHY_RST","PMCF","PMCF","PMCF","PMCF","PSP","PSP","PSP","PSP","RCtl","RCtrl","RDMTS_EIGHTH","RDMTS_EIGHTH","RDMTS_EIGHTH","RDMTS_EIGHTH","RDMTS_HALF","RDMTS_HALF","RDMTS_HALF","RDMTS_HALF","RDMTS_QUARTER","RDMTS_QUARTER","RDMTS_QUARTER","RDMTS_QUARTER","RST","RST","RST","RST","RST","RST","RST","RST","RTLC","RTLC","RTLC","RTLC","RXDMT0","RXDMT0","RXDMT0","RXDMT0","RXO","RXO","RXO","RXO","RXT0","RXT0","RXT0","RXT0","RX_DESC_NUM","RX_DESC_SIZE","ReadErr","Register","RxDescHead","RxDescHi","RxDescLen","RxDescLo","RxDescTail","RxDescriptor","SBP","SBP","SBP","SBP","SECRC","SECRC","SECRC","SECRC","SLU","SLU","SLU","SLU","SLU","SLU","SLU","SLU","SRPD","SRPD","SRPD","SRPD","SWXOFF","SWXOFF","SWXOFF","SWXOFF","Status","TCtl","TCtrl","TStatus","TU","TU","TU","TU","TXDW","TXDW","TXDW","TXDW","TXD_LOW","TXD_LOW","TXD_LOW","TXD_LOW","TXQE","TXQE","TXQE","TXQE","TX_DESC_NUM","TX_DESC_SIZE","Tipg","TxDesHi","TxDesLo","TxDescHead","TxDescLen","TxDescTail","TxDescriptor","UPE","UPE","UPE","UPE","UnknownBar","VFE","VFE","VFE","VFE","VME","VME","VME","VME","VME","VME","VME","VME","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__BitFlags","__MODULE_INIT","addr","addr","all","all","all","all","all","all","base","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","cso","css","default","default","default","detect_eeprom","difference","difference","difference","difference","difference","difference","e1000","e1000","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","errors","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","handle_irq","handle_irq","handles","hash","hash","hash","hash","hash","hash","init","init_rx","init_tx","insert","insert","insert","insert","insert","insert","insert_flags","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","irq_handler","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","length","length","link_up","mac","mac","new","new","new","new","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read","read_raw","recv","recv","recv_end","recv_end","remove","remove","remove","remove","remove","remove","remove_flags","reset","rx_cur","rx_ring","rx_ring","send","send","set","set","set","set","set","set","set_collision_distance","set_collision_threshold","special","special","start","status","status","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_cur","tx_ring","tx_ring","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","wq","write","write_raw","CONFIG_RESERVED_3","CONFIG_RESERVED_3","CONFIG_RESERVED_3","CONFIG_RESERVED_3","CONFIG_RESERVED_7","CONFIG_RESERVED_7","CONFIG_RESERVED_7","CONFIG_RESERVED_7","ConfigFlags","FIRST_DISABLED","FIRST_DISABLED","FIRST_DISABLED","FIRST_DISABLED","FIRST_INTERRUPT","FIRST_INTERRUPT","FIRST_INTERRUPT","FIRST_INTERRUPT","FIRST_TRANSLATE","FIRST_TRANSLATE","FIRST_TRANSLATE","FIRST_TRANSLATE","KEYBOARD","KEYBOARD_LISTENER","KEY_0","KEY_1","KEY_2","KEY_3","KEY_4","KEY_5","KEY_6","KEY_7","KEY_8","KEY_9","KEY_A","KEY_APOSTROPHE","KEY_B","KEY_BACKSLASH","KEY_BACKSPACE","KEY_C","KEY_CAPSLOCK","KEY_COMMA","KEY_COMPOSE","KEY_D","KEY_DELETE","KEY_DOT","KEY_DOWN","KEY_E","KEY_END","KEY_ENTER","KEY_EQUAL","KEY_ESC","KEY_F","KEY_F1","KEY_F10","KEY_F11","KEY_F12","KEY_F2","KEY_F3","KEY_F4","KEY_F5","KEY_F6","KEY_F7","KEY_F8","KEY_F9","KEY_G","KEY_GRAVE","KEY_H","KEY_HOME","KEY_I","KEY_INSERT","KEY_J","KEY_K","KEY_KP0","KEY_KP1","KEY_KP2","KEY_KP3","KEY_KP4","KEY_KP5","KEY_KP6","KEY_KP7","KEY_KP8","KEY_KP9","KEY_KPASTERISK","KEY_KPDOT","KEY_KPENTER","KEY_KPMINUS","KEY_KPPLUS","KEY_KPSLASH","KEY_L","KEY_LEFT","KEY_LEFTALT","KEY_LEFTBRACE","KEY_LEFTCTRL","KEY_LEFTMETA","KEY_LEFTSHIFT","KEY_M","KEY_MINUS","KEY_N","KEY_NUMLOCK","KEY_O","KEY_P","KEY_PAGEDOWN","KEY_PAGEUP","KEY_Q","KEY_R","KEY_RESERVED","KEY_RIGHT","KEY_RIGHTALT","KEY_RIGHTBRACE","KEY_RIGHTCTRL","KEY_RIGHTMETA","KEY_RIGHTSHIFT","KEY_S","KEY_SCROLLLOCK","KEY_SEMICOLON","KEY_SLASH","KEY_SPACE","KEY_T","KEY_TAB","KEY_U","KEY_UP","KEY_V","KEY_W","KEY_X","KEY_Y","KEY_Z","KeyCode","KeyboardDevice","KeyboardListener","LAZY","POST_PASSED","POST_PASSED","POST_PASSED","POST_PASSED","PS2_KEYBOARD_STATE","Ps2KeyboardState","SECOND_DISABLED","SECOND_DISABLED","SECOND_DISABLED","SECOND_DISABLED","SECOND_INTERRUPT","SECOND_INTERRUPT","SECOND_INTERRUPT","SECOND_INTERRUPT","__BitFlags","__BitFlags","__MODULE_INIT","__private_field","__stability","__static_ref_initialize","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone","clone_into","clone_into","cmp","complement","contains","deref","device_marker","device_name","difference","empty","eq","eq","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hash","hash","inode","insert","intersection","intersects","into","into","into","into","into","is_all","is_empty","keyboard_irq_handler","marker","new","new","not","on_key","on_key","partial_cmp","poll","ps2_keyboard_init","read_at","register_keyboard_listener","released","remove","remove_keyboard_listener","set","special","sref","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","wq","LaiHost","LaiSubsystem","__MODULE_INIT","borrow","borrow","borrow_mut","borrow_mut","enable_acpi","enter_state","from","from","inb","ind","init_lai","into","into","inw","map","outb","outd","outw","pci_readb","pci_readd","pci_readw","pci_route_pin","scan","sleep","try_from","try_from","try_into","try_into","type_id","type_id","ALWAYS_ONE","ALWAYS_ONE","ALWAYS_ONE","ALWAYS_ONE","CMD_PORT","DATA_PORT","LAZY","LEFT_BUTTON","LEFT_BUTTON","LEFT_BUTTON","LEFT_BUTTON","MIDDLE_BUTTON","MIDDLE_BUTTON","MIDDLE_BUTTON","MIDDLE_BUTTON","MOUSE","Mouse","MouseFlags","PACKETS","Packet","RIGHT_BUTTON","RIGHT_BUTTON","RIGHT_BUTTON","RIGHT_BUTTON","X_OVERFLOW","X_OVERFLOW","X_OVERFLOW","X_OVERFLOW","X_SIGN","X_SIGN","X_SIGN","X_SIGN","Y_OVERFLOW","Y_OVERFLOW","Y_OVERFLOW","Y_OVERFLOW","Y_SIGN","Y_SIGN","Y_SIGN","Y_SIGN","__BitFlags","__BitFlags","__private_field","__stability","__static_ref_initialize","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","default","deref","device_marker","device_name","difference","empty","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hash","hash","inode","insert","intersection","intersects","into","into","into","into","irq_handler","is_all","is_empty","marker","new","not","packet","partial_cmp","poll","process_packet","ps2_mouse_init","read_at","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","wq","x","y","AMD","AccessBusController","AtaController","AtmController","AudioDevice","AudioSatelliteCommunicationsController","Bar","BluetoothController","BroadbandController","CanBusController","Capability","CapabilityIter","CardBusBridge","CoProcessor","CommunicationsSynchronizationController","ConsumerIrController","DMA_CAPABLE","DMA_CAPABLE","DMA_CAPABLE","DMA_CAPABLE","DataSatelliteCommunicationsController","DeliveryMode","DeviceType","Digitizer","DmaController","DpioModule","EisaBridge","EntertainmentCryptionController","Ethernet24GHzController","Ethernet5GHzController","EthernetController","FddiController","FibreChannelController","FirewireController","Fixed","FlashController","FloppyController","GameportController","GenericDockingStation","GenericPciHotPlugController","GpibController","HostBridge","IO","IdeController","InfiniBandController","InfinibandPciHostBridge","Intel","IntelligentIoController","InterruptController","IpiBusController","IpmiController","IrdaController","IsaBridge","IsdnController","KeyboardController","LegacyNotVgaCompatible","LegacyVgaCompatible","ManagementCard","McaBridge","Memory32","Memory64","Message","Modem","MouseController","Msi","Msix","Msix","MultiportSerialController","NVIDIA","NetworkCryptionController","NuBusBridge","NvmeController","OtherBridgeDevice","OtherCommunicationsDevice","OtherCryptionController","OtherDisplayController","OtherDockingStation","OtherInputController","OtherMassStorageController","OtherMemoryController","OtherMultimediaDevice","OtherNetworkController","OtherSignalProcessingController","OtherSystemPeripheral","OtherWirelessController","PCI_CONFIG_ADDRESS_PORT","PCI_CONFIG_DATA_PORT","PCI_TABLE","PRIMARY_CAN_SWITCH","PRIMARY_CAN_SWITCH","PRIMARY_CAN_SWITCH","PRIMARY_CAN_SWITCH","PRIMARY_PCI_NATIVE","PRIMARY_PCI_NATIVE","PRIMARY_PCI_NATIVE","PRIMARY_PCI_NATIVE","ParallelPort","PciDevice","PciDeviceHandle","PciHeader","PciPciBridge","PciTable","PcmciaBridge","PerformanceCounter","PicmgController","Processor386","Processor486","ProcessorAlpha","ProcessorMips","ProcessorPentium","ProcessorPowerPc","ProgramInterface","Qemu","RacewayBridge","RaidController","RamController","RfController","RtcController","SECONDARY_CAN_SWITCH","SECONDARY_CAN_SWITCH","SECONDARY_CAN_SWITCH","SECONDARY_CAN_SWITCH","SECONDARY_PCI_NATIVE","SECONDARY_PCI_NATIVE","SECONDARY_PCI_NATIVE","SECONDARY_PCI_NATIVE","SasController","SataController","ScannerController","ScsiBusController","SdHostController","SemiTransparentPciPciBridge","SercosController","SerialController","SmBusController","SmartCard","SsaBusController","SystemTimer","TelephonyDevice","ThreeDController","TokenRingController","TvSatelliteCommunicationsController","Unknown","Unknown","Unknown","UsbController","Vendor","VgaCompatibleController","VideoDevice","VoiceSatelliteCommunicationsController","XgaController","__BitFlags","__BitFlags","addr_lower","addr_upper","all","base_address0","base_address1","base_address2","base_address3","base_address4","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","capabilities","clone","clone","clone_into","clone_into","cmp","complement","contains","data","device","difference","disable_legacy_irq","empty","enable_bus_mastering","enable_mmio","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","function","get_bar","get_device","get_hash","get_header_type","get_vendor","handle","handles","has_multiple_functions","hash","header","init","inner","insert","interrupt_pin","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","is_masked","is_valid","mask","messages","msix","new","new","new","new","new","new","next","not","offset","partial_cmp","program_interface","read","register_device_driver","remove","set","set","set","set_masked","start","sub","sub_assign","symmetric_difference","table","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","write","address","address","prefetchable","prefetchable","size","size","LAZY","Master","PTMX","PTS_FS","PTY_ID","Ptmx","PtsFs","PtsINode","Slave","SlaveInner","__MODULE_INIT","__private_field","__stability","__static_ref_initialize","attach","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","default","deref","device_id","device_marker","device_name","dirent","discipline","from","from","from","from","from","from","from","fs","id","inner","inode","inode","insert_slave","into","into","into","into","into","into","into","ioctl","ioctl","lookup","master","metadata","metadata","new","new","new","new","open","poll","poll","pty_init","read_at","read_at","root_dir","root_dir","slaves","stat","stat","termios","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weak_filesystem","window_size","wq","write_at","write_at","ALTGR_MAP","ALT_MAP","ANSI_BRIGHT_COLORS","ANSI_COLORS","AnsiEscape","Background","CTRL_ALT_MAP","CTRL_MAP","Foreground","LAZY","LAZY","PLAIN_MAP","ParsedColor","SGR_BACKGROUND_OFFSET_1","SGR_BACKGROUND_OFFSET_2","SGR_FOREGROUND_OFFSET_1","SGR_FOREGROUND_OFFSET_2","SHIFT_CTRL_MAP","SHIFT_MAP","StdinBuffer","TERMIOS","TTY","Tty","TtyState","Unknown","__MODULE_INIT","__private_field","__private_field","__stability","__stability","__static_ref_initialize","__static_ref_initialize","advance_cursor","altgr","attach","back_buffer","block_queue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caps","close","connected","csi_dispatch","cursor","deref","deref","device_id","device_marker","device_name","execute","fixed_to_rgb","from","from","from","from","from","from","from","front_buffer","init_tty","inode","into","into","into","into","into","into","into","ioctl","is_complete","lalt","lctrl","lshift","new","new","on_key","open","parser","poll","print","rctrl","read_at","rshift","sref","state","stdin","swap_buffer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_at","COM_1","ERRORED","ERRORED","ERRORED","ERRORED","INPUT_FULL","INPUT_FULL","INPUT_FULL","INPUT_FULL","InterruptEnable","LineStatus","OUTPUT_EMPTY","OUTPUT_EMPTY","OUTPUT_EMPTY","OUTPUT_EMPTY","RECEIVED","RECEIVED","RECEIVED","RECEIVED","SENT","SENT","SENT","SENT","STATUS_CHANGE","STATUS_CHANGE","STATUS_CHANGE","STATUS_CHANGE","SerialPort","__BitFlags","__BitFlags","__BitFlags","__BitFlags","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_hash","get_hash","hash","hash","init","init","insert","insert","intersection","intersection","intersects","intersects","into","into","into","is_all","is_all","is_empty","is_empty","line_status","new","not","not","partial_cmp","partial_cmp","remove","remove","send_byte","serial_print","serial_println","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","wait_for_line_status","write_str","Busy","ConnectionRefused","Create","EntryExists","EntryNotFound","FileSystem","FileSystemError","Interrupted","InvalidPath","IsDir","IsPipe","LAZY","LookupMode","MOUNT_MANAGER","MountKey","MountManager","MountPoint","None","NotConnected","NotDirectory","NotSocket","NotSupported","Path","ROOT_DIR","ROOT_FS","Result","TooSmall","WouldBlock","__private_field","__stability","__static_ref_initialize","as_str","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","clone","clone_into","components","container","deref","devfs","epoll","eq","eq","eventfd","ext2","file_table","filesystem","find_mount","fmt","fmt","fmt","from","from","from","from","from","from","from","init","inode","into","into","into","into","into","is_absolute","lookup_path","lookup_path_with","lookup_path_with_mode","mount","new","new","origin_entry","parent_and_basename","pipe","procfs","ramfs","root_dir","root_dir","root_entry","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BLOCK_DEVS","BlockDevice","BlockDeviceInterface","CachedAccess","CachedPage","DirtyRef","LAZY","PAGE_CACHE","PageCacheItem","PageCacheKey","PartitionBlockDevice","__private_field","__stability","__static_ref_initialize","block_size","block_size","block_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache_key","data_addr","data_mut","deref","deref","deref_mut","dev","device","device","device","device_marker","device_name","dirty","drop","from","from","from","from","from","gpt","id","inode","install_block_device","into","into","into","into","into","is_dirty","launch","make_key","mark_dirty","name","name","new","new","new","new","offset","offset","page","ptr","read","read_block","read_block","read_block","read_dma","read_dma","read_dma","size","sref","sref","sref","sync","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write_block","write_block","write_block","write_dma","write_dma","write_dma","ASSERT","ASSERT","ASSERT","GPT_TABLE_SIGNATURE","Gpt","GptEntry","GptGuid","GptTableHeader","NULL","a","attr_flags","b","backup_lba","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone_into","current_lba","d","disk_guid","e","entries","entries","entry_size","eq","first_lba","first_lba","fmt","fmt","from","from","from","from","header_checksum","header_size","into","into","into","into","is_used","last_lba","last_lba","new","num_entries","padding","partition_name","partition_name","reserved_zero","revision","signature","size","start_lba","starting_lba","table_checksum","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_guid","type_id","type_id","type_id","type_id","unique_guid","Cache","CacheArc","CacheDropper","CacheIndex","CacheItem","CacheKey","CacheWeak","Cacheable","CachedINode","DIR_CACHE","DirCache","DirCacheImpl","DirCacheItem","DirCacheKey","INODE_CACHE","INodeCache","INodeCacheItem","INodeCacheKey","INodeCacheWeakItem","absolute_path_str","absolute_path_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache_key","cache_key","clear","clear_dir_cache","clear_inode_cache","clone","clone","clone_into","clone_into","dcache","default","deref","deref","deref","downgrade","drop","drop_this","drop_this","from","from","from","from","from","from","from","get","get_page","icache","index","init","inner","into","into","into","into","into","into","is_used","log","make_item_cached","make_item_no_cache","make_key","mark_item_unused","new","new","new","new","new","rehash","remove","self_ref","set_used","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unused","upgrade","used","used","value","DEVICES","DEVICE_MARKER","DEV_FB","DEV_FILESYSTEM","DEV_KMSG","DEV_NULL","DEV_URANDOM","DevFb","DevFs","DevINode","DevKmsg","DevNull","DevUrandom","Device","LAZY","__private_field","__stability","__static_ref_initialize","alloc_device_marker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","device_marker","device_marker","device_marker","device_marker","device_marker","device_name","device_name","device_name","device_name","device_name","finfo","from","from","from","from","from","from","from","init","inode","inode","inode","inode","inode","install_device","install_device_at","into","into","into","into","into","into","into","ioctl","ioctl","marker","mmap","mmap","new","new","new","new","new","new","open","poll","poll","read_at","read_at","read_at","read_at","root_dir","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vinfo","write_at","write_at","write_at","write_at","EPoll","PRIVATE_BITS","add_event","borrow","borrow_mut","events","from","into","new","remove_event","try_from","try_into","type_id","update_event","wait","EventFd","borrow","borrow_mut","count","from","into","new","poll","read_at","try_from","try_into","type_id","wq","write_at","DirEntryIter","Ext2","INode","ROOT_INODE_ID","accept","append_block","as_unix_socket","bgdt","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","dirent","disk","find_inode","from","from","from","fs","get_block","group_desc","id","inode","inode","into","into","into","into_iter","link","listen","lookup","make_dirent","make_disk_dirent","make_inode","make_local_socket_inode","metadata","mkdir","mmap","new","new","new","next","offset","poll","proxy","read","read_at","read_mut","recv","rename","resolve_link","root_dir","send","sref","sref","sref","stat","superblock","touch","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","weak_filesystem","write","write_at","ASSERT","ASSERT","BlockDev","CharDev","DirEntry","Directory","Fifo","File","FileType","GroupDescriptor","INode","MAGIC","Revision","Revision0","Revision1","Revsion","Socket","SuperBlock","Symlink","Unknown","bgdt_block","bgdt_len","bits","block_bitmap","block_count","block_group_nr","block_size","blocks_count","blocks_per_group","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checkinterval","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compression_info","creation_time","creator_os","data_ptr","def_gid","def_hash_version","def_resuid","default","default_mount_opts","deletion_time","entries_per_block","entry_size","eq","eq","errors","ext_attr_block","feature_compat","feature_incompat","feature_ro_compat","file_type","file_type","first_data_block","first_ino","first_meta_bg","flags","fmt","fmt","fmt","fmt","fmt","fragment_address","frags_per_group","free_blocks_count","free_blocks_count","free_inodes_count","free_inodes_count","from","from","from","from","from","from","gen_number","group_desc_size","group_id","hash_seed","hl_count","inode","inode_bitmap","inode_size","inode_table","inodes_count","inodes_per_group","into","into","into","into","into","into","jnl_backup_type","jnl_blocks","journal_dev","journal_inum","journal_uuid","last_access","last_modification","last_mounted","last_orphan","lastcheck","log_block_size","log_frag_size","magic","max_mnt_count","minor_rev_level","mkfs_time","mnt_count","mtime","name_size","os_specific","os_specific2","pad","prealloc_blocks","prealloc_dir_blocks","r_blocks_count","reserved","reserved_gdt_blocks","rev_level","revision","set_file_type","set_name","set_permissions","set_size","size","size_lower","size_or_acl","state","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_and_perm","type_id","type_id","type_id","type_id","type_id","type_id","used_dirs_count","user_id","uuid","volume_name","wtime","Bitmap","GroupDescriptors","alloc","alloc_block_ptr","alloc_inode","bitmap","borrow","borrow","borrow_mut","borrow_mut","descriptors","drop","ext2","find_free_block","find_free_inode","find_inode","from","from","fs","into","into","new","new","offset","try_from","try_from","try_into","try_into","type_id","type_id","Any","DuplicateHint","Exact","FileHandle","FileTable","GreatorOrEqual","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","close_file","close_on_exec","deep_clone","dirnode","duplicate","duplicate","fd","flags","from","from","from","get_dents","get_handle","inode","inode","into","into","into","log","new","new","offset","open_file","read","seek","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","Content","DIR_CACHE_MARKER","Device","Device","DirEntry","DirProtectedData","Directory","ERR","ERR","ERR","ERR","File","FileContents","FileType","IN","IN","IN","IN","INodeInterface","Metadata","None","OUT","OUT","OUT","OUT","PollFlags","PollTable","Socket","Socket","StaticContent","Symlink","__BitFlags","__BitFlags","accept","all","as_unix_socket","bind","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_marker","children_len","clone","clone","clone","clone_into","clone_into","clone_into","close","cmp","complement","connect","contains","data","default","default","default","difference","dirent","downcast_arc","drop","drop_from_cache","empty","eq","eq","extend","fetch_dir_entry","file_type","file_type","filesystem","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_inode","from_iter","from_socket_inode","get_hash","hash","id","id","inode","inode","insert","insert","intersection","intersects","into","into","into","into","into","into","into","ioctl","is_all","is_directory","is_empty","is_file","is_socket","is_symlink","link","listen","lookup","make_dev_inode","make_local_socket_inode","make_ramfs_inode","metadata","mkdir","mmap","name","name","new","new_root","not","open","parent","parent","partial_cmp","poll","queues","read_at","recv","remove","rename","resolve_link","rmdir","send","set","set_name","set_parent","size","stat","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","touch","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unlink","weak_filesystem","write_at","Pipe","active_writers","borrow","borrow_mut","close","from","handle","into","new","num_writers","open","poll","queue","read_at","readers","try_from","try_into","type_id","write_at","writers","CACHED","CACHED","CmdLine","CpuInfo","FileContents","LockedProcINode","None","PROC_FS","ProcFs","ProcINode","allocate_inode","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","contents","default","default","dirent","file_type","filesystem","from","from","from","from","get_cmdline_cached","get_cpuinfo_cached","id","init","init","into","into","into","into","lookup","make_inode","metadata","new","new","next_id","node","parent","push_string_if_some","read_at","root_dir","root_dir","root_inode","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","weak_filesystem","LockedRamINode","RamFs","RamINode","allocate_inode","as_unix_socket","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","contents","default","dirent","file_type","filesystem","from","from","from","id","init","into","into","into","ioctl","link","lookup","make_dev_inode","make_inode","make_local_socket_inode","make_ramfs_inode","metadata","mkdir","mmap","new","new","next_id","node","open","parent","poll","read_at","root_dir","root_dir","root_inode","stat","touch","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlink","weak_filesystem","write_at","AeroLogger","DEFAULT_LOG_RING_BUFFER_SIZE","LOGGER","LOG_RING_BUFFER","RENDY_DEBUG","borrow","borrow_mut","enabled","enabled_rendy_debug","flush","force_unlock","from","get_log_buffer","init","into","log","log_ln","set_rendy_debug","try_from","try_into","type_id","AddressSpace","alloc","alloc_boxed_buffer","borrow","borrow_mut","cr3","cr3","from","into","new","offset_page_table","page_table","paging","pti","slab","switch","this","try_from","try_into","type_id","vmalloc","Allocator","LockedHeap","__rg_oom","alloc","alloc","alloc_error_handler","borrow","borrow","borrow_mut","borrow_mut","dealloc","dealloc","from","from","init_heap","into","into","new","new_uninit","realloc","try_from","try_from","try_into","try_into","type_id","type_id","zones","CAUSED_BY_WRITE","CAUSED_BY_WRITE","CAUSED_BY_WRITE","CAUSED_BY_WRITE","FRAME_ALLOCATOR","INSTRUCTION_FETCH","INSTRUCTION_FETCH","INSTRUCTION_FETCH","INSTRUCTION_FETCH","LockedFrameAllocator","MALFORMED_TABLE","MALFORMED_TABLE","MALFORMED_TABLE","MALFORMED_TABLE","MapperFlush","PROTECTION_VIOLATION","PROTECTION_VIOLATION","PROTECTION_VIOLATION","PROTECTION_VIOLATION","PageFaultErrorCode","USER_MODE","USER_MODE","USER_MODE","USER_MODE","__BitFlags","__BitFlags","active_level_4_table","addr","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","frame","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hash","hash","init","insert","intersection","intersects","into","is_all","is_empty","level_5_paging_enabled","mapper","not","page","page_table","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","NotAligned","Null","PhysAddr","PhysAddrNotValid","ReadErr","VirtAddr","add","add","add","add","add_assign","add_assign","add_assign","add_assign","align_down","align_down","align_down","align_up","align_up","align_up","as_bytes_mut","as_hhdm_phys","as_hhdm_virt","as_mut_ptr","as_ptr","as_u64","as_u64","as_vm_frame","backward_checked","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","const_sub_u64","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","from","from","from","from","get_hash","hash","into","into","into","into","is_aligned","is_aligned","is_aligned","new","new","new_unchecked","p1_index","p2_index","p3_index","p4_index","p5_index","page_offset","partial_cmp","partial_cmp","read_mut","steps_between","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate_read","zero","zero","BUDDY_SIZE","BootAlloc","BootAllocRef","BuddyOrdering","GlobalFrameAllocator","LockedFrameAllocator","MemoryRange","MemoryRangeType","RangeMemoryIter","Size4KiB","Size8KiB","Usable","VM_FRAMES","VmFrame","addr","alloc","alloc_zeroed","allocate","allocate_frame","allocate_frame","allocate_frame_inner","allocate_inner","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buddies","clear_bit","clone","clone_into","cursor_base","cursor_end","deallocate","deallocate_frame","deallocate_frame","deallocate_frame_inner","dec_ref_count","end","eq","find_free","find_order","fmt","fmt","fmt","frame_count","free","from","from","from","from","from","from","from","from","from","get_bit_idx","get_buddy","get_inner","get_vm_frames","inc_ref_count","init","init_vm_frames","inner","insert_range","into","into","into","into","into","into","into","into","into","into_iter","iter","memory_ranges","new","new","new","new","new_uninit","next","order_from_size","pmm_alloc","ref_count","ref_count","set_bit","size","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typee","FlagUpdateError","FrameAllocationFailed","FrameAllocationFailed","FrameAllocator","FrameDeallocator","InvalidFrameAddress","InvalidFrameAddress","InvalidFrameAddress","MapToError","Mapped","MappedFrame","MappedPageTable","MappedToHugePage","MappedToHugePage","Mapper","MapperAllSizes","MapperFlush","NotMapped","NotMapped","OffsetPageTable","PageAlreadyMapped","PageNotMapped","PageNotMapped","PageNotMapped","PageTableCreateError","PageTableFrameMapping","PageTableWalkError","PageTableWalker","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","PhysOffset","Size1GiB","Size2MiB","Size4KiB","Translate","TranslateError","TranslateResult","UnmapError","allocate_frame","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_next_table","deallocate_frame","deallocate_frame","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","frame_to_pointer","frame_to_pointer","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","identity_map","ignore","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","level_5_paging_enabled","map_to","map_to_2mib","map_to_4kib","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","new","new","new","new","next_table","next_table_mut","offset","page_table","page_table","page_table_frame_mapping","page_table_walker","size","start_address","translate","translate","translate","translate_addr","translate_page","translate_page","translate_page","translate_page","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap_range","update_flags","update_flags","update_flags","update_flags","update_flags","flags","frame","offset","AddressNotAligned","NotGiantPageSize","Page","PageRange","PageSize","PhysFrame","PhysFrameRange","PhysFrameRangeInclusive","SIZE","SIZE_AS_DEBUG_STR","Size1GiB","Size2MiB","Size4KiB","add","add","add_assign","add_assign","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","containing_address","containing_address","end","end","end","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_start_address","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","next","next","next","p1_index","p2_index","p3_index","p4_index","p5_index","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","size","size","start","start","start","start_address","start_address","start_address","start_address","sub","sub","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACCESSED","ACCESSED","ACCESSED","ACCESSED","ADDRESS_MASK","BIT_10","BIT_10","BIT_10","BIT_10","BIT_11","BIT_11","BIT_11","BIT_11","BIT_52","BIT_52","BIT_52","BIT_52","BIT_53","BIT_53","BIT_53","BIT_53","BIT_54","BIT_54","BIT_54","BIT_54","BIT_55","BIT_55","BIT_55","BIT_55","BIT_56","BIT_56","BIT_56","BIT_56","BIT_57","BIT_57","BIT_57","BIT_57","BIT_58","BIT_58","BIT_58","BIT_58","BIT_59","BIT_59","BIT_59","BIT_59","BIT_60","BIT_60","BIT_60","BIT_60","BIT_61","BIT_61","BIT_61","BIT_61","BIT_62","BIT_62","BIT_62","BIT_62","BIT_9","BIT_9","BIT_9","BIT_9","COUNTER_MASK","COUNTER_SHIFT","DIRTY","DIRTY","DIRTY","DIRTY","EMPTY","ENTRY_COUNT","FLAGS_MASK","FrameError","FrameNotPresent","GLOBAL","GLOBAL","GLOBAL","GLOBAL","HUGE_PAGE","HUGE_PAGE","HUGE_PAGE","HUGE_PAGE","HugeFrame","NO_CACHE","NO_CACHE","NO_CACHE","NO_CACHE","NO_EXECUTE","NO_EXECUTE","NO_EXECUTE","NO_EXECUTE","PRESENT","PRESENT","PRESENT","PRESENT","PageOffset","PageTable","PageTableEntry","PageTableFlags","PageTableIndex","USER_ACCESSIBLE","USER_ACCESSIBLE","USER_ACCESSIBLE","USER_ACCESSIBLE","WRITABLE","WRITABLE","WRITABLE","WRITABLE","WRITE_THROUGH","WRITE_THROUGH","WRITE_THROUGH","WRITE_THROUGH","__BitFlags","__BitFlags","addr","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","contains","default","difference","empty","entries","entry","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_entry","for_entries_mut","frame","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_entry_count","get_hash","hash","inc_entry_count","index","index","index_mut","index_mut","insert","intersection","intersects","into","into","into","into","into","into","is_all","is_empty","is_unused","new","new","new","new","new_truncate","new_truncate","not","partial_cmp","partial_cmp","partial_cmp","ref_vm_frame","remove","set","set_addr","set_entry_count","set_flags","set_frame","set_unused","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unref_vm_frame","zero","map_pti","switch_pti_stack","unmap_pti","ASSERT","ASSERT","BufCtl","NULL","SlabHeader","SmallSlab","alloc","as_slab","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dealloc","expand","first_free","from","from","from","from_object","from_ptr","into","into","into","new","ptr","size","size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","NEW","VMALLOC","VMALLOC_END","VMALLOC_MAX_SIZE","VMALLOC_START","Vmalloc","VmallocArea","VmallocAreaAdaptor","VmallocAreaProtected","addr","alloc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dealloc","default","free_list","from","from","from","from","get_key","get_link","get_value","get_vmalloc","init","into","into","into","into","link","link_ops","link_ops","link_ops_mut","new","new","new","new","pointer_ops","pointer_ops","protected","size","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Block","Module","ModuleType","Other","__kernel_modules_end","__kernel_modules_start","borrow","borrow","borrow_mut","borrow_mut","cmp","eq","fmt","fmt","from","from","init","init","into","into","partial_cmp","try_from","try_from","try_into","try_into","ty","type_id","type_id","ConstPacketKind","DEFAULT_DEVICE","DEVICES","Eth","HSIZE","MacAddr","Metadata","NetworkDevice","NetworkDriver","Packet","PacketBaseTrait","PacketDownHierarchy","PacketHeader","PacketKind","PacketTrait","PacketUpHierarchy","RecvPacket","_phantom","add_device","addr","addr","addr","arp","as_slice","as_slice_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum","clone","clone_into","create","create","create","default","default_device","deref","downcast_arc","downgrade","driver","drop","ethernet","fmt","fmt","from","from","from","from","has_default_device","header","header_mut","header_size","header_size","id","init","into","into","into","into","ip","ip","len","len","len","mac","metadata","new","new","packet","packet_processor_thread","recv","recv","recv","recv","recv","recv_end","send","send","send","send","send","set_ip","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","udp","upgrade","CACHE","Cache","Entry","borrow","borrow","borrow_mut","borrow_mut","from","from","get","get","init","insert","into","into","mac","new","new","try_from","try_from","try_into","try_into","type_id","type_id","PseudoHeader","borrow","borrow_mut","calculate","calculate_checksum","calculate_with_len","dst_ip","from","into","make","make_combine","new","reserved","size","src_ip","try_from","try_into","ty","type_id","ADDR_SIZE","BROADCAST","Eth","Header","Ip","MacAddr","Type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","dest_mac","eq","fmt","fmt","from","from","from","from","get_hash","hash","into","into","into","into","partial_cmp","src_mac","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","ADDR_SIZE","BROADCAST","Header","Ipv4","Ipv4Addr","Type","Udp","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","dest_ip","eq","fmt","fmt","frag_offset","from","from","from","from","get_hash","hash","hcrc","ident","into","into","into","into","length","length","new","partial_cmp","protocol","set_length","src_ip","to_owned","to_owned","to_owned","tos","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","type_id","type_id","type_id","type_id","v","EPHEMERAL_END","EPHEMERAL_START","HANDLERS","Header","Udp","UdpHandler","alloc_ephemeral_port","bind","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_checksum","connect","crc","dst_port","dst_port","from","from","into","into","len","recv","src_port","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","rust_2021","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","Error","Error","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","FromIterator","Hash","Into","IntoIter","IntoIterator","Item","Item","Iterator","None","Ok","Option","Ord","Ord","Output","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","Send","Sized","Some","String","Sync","TryFrom","TryInto","Unpin","add","add_assign","advance_back_by","advance_by","all","alloc_error_handler","any","array_chunks","as_bytes","as_mut","as_mut","as_mut_str","as_mut_vec","as_ref","as_ref","as_ref","as_str","asm","assert","assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","bench","borrow","borrow","borrow_mut","borrow_mut","by_ref","call","call_mut","call_once","capacity","cfg","cfg_accessible","cfg_eval","chain","clamp","clear","clone","clone","clone_from","clone_from","clone_into","cloned","cmp","cmp","cmp","cmp_by","collect","collect_into","column","compile_error","concat","concat_bytes","concat_idents","const_assert","const_assert_eq","const_assert_ne","copied","count","cycle","default","default","deref","deref_mut","derive","derive_const","deserialize","drain","drop","drop","enumerate","env","eq","eq","eq","eq","eq","eq","eq","eq_by","extend","extend","extend","extend","extend","extend","extend","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","file","filter","filter_map","find","find_map","flat_map","flatten","fmt","fmt","fold","for_each","format_args","format_args_nl","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","fuse","ge","ge","get_hash","get_hash","global_allocator","gt","gt","hash","include","include_bytes","include_str","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","inspect","intersperse","intersperse_with","into","into","into_boxed_str","into_bytes","into_deserializer","into_iter","into_raw_parts","into_searcher","is_contained_in","is_empty","is_empty","is_partitioned","is_prefix_of","is_sorted","is_sorted_by","is_sorted_by_key","is_suffix_of","last","le","le","leak","len","len","line","log_syntax","lt","lt","map","map_while","max","max","max_by","max_by_key","min","min","min_by","min_by_key","module_path","ne","ne","ne","ne","ne","new","next","next_back","next_chunk","nth","nth_back","option_env","partial_cmp","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","pop","position","product","push","push_str","reduce","remove","remove_matches","replace_range","reserve","reserve_exact","retain","rev","rfind","rfold","rposition","scan","serialize","shrink_to","shrink_to_fit","size_hint","skip","skip_while","split_off","step_by","stringify","strip_prefix_of","strip_suffix_of","sum","take","take_while","test","test_case","to_owned","to_string","to_string","trace_macros","truncate","try_collect","try_find","try_fold","try_for_each","try_from","try_from","try_into","try_into","try_reduce","try_reserve","try_reserve_exact","try_rfold","type_ascribe","type_id","unzip","vec","with_capacity","write_char","write_str","zip","alloc","any","arch","array","ascii","assert","assert_eq","assert_matches","assert_ne","async_iter","borrow","cell","cfg","char","clone","cmp","column","compile_error","concat","concat_bytes","concat_idents","const_format_args","convert","debug_assert","debug_assert_eq","debug_assert_ne","default","env","error","f32","f64","ffi","file","fmt","format_args","format_args_nl","future","hash","hint","i128","i16","i32","i64","i8","include","include_bytes","include_str","intrinsics","isize","iter","line","log_syntax","marker","matches","mem","module_path","net","num","ops","option","option_env","panic","panic","panicking","pin","prelude","primitive","ptr","result","simd","slice","str","stringify","sync","task","time","todo","trace_macros","try","u128","u16","u32","u64","u8","unicode","unimplemented","unreachable","usize","write","writeln","AllocError","Allocator","GlobalAlloc","Layout","LayoutErr","LayoutError","align","align","align_to","alloc","alloc_zeroed","allocate","allocate_zeroed","array","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone","clone","clone_into","clone_into","clone_into","dangling","dealloc","deallocate","eq","eq","eq","extend","extend_packed","fmt","fmt","fmt","fmt","fmt","for_value","for_value_raw","from","from","from","from_size_align","from_size_align_unchecked","get_hash","grow","grow_zeroed","hash","into","into","into","new","pad_to_align","padding_needed_for","provide","provide","realloc","repeat","repeat_packed","shrink","size","size","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Any","Demand","Provider","TypeId","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","downcast_mut","downcast_mut","downcast_mut","downcast_mut_unchecked","downcast_mut_unchecked","downcast_mut_unchecked","downcast_ref","downcast_ref","downcast_ref","downcast_ref_unchecked","downcast_ref_unchecked","downcast_ref_unchecked","eq","fmt","fmt","fmt","fmt","fmt","from","get_hash","hash","into","is","is","is","of","partial_cmp","provide","provide_ref","provide_ref_with","provide_value","provide_value_with","request_ref","request_value","t","to_owned","try_from","try_into","type_id","type_id","type_id","type_name","type_name_of_val","would_be_satisfied_by_ref_of","would_be_satisfied_by_value_of","asm","global_asm","x86_64","CpuidResult","_CMP_EQ_OQ","_CMP_EQ_OS","_CMP_EQ_UQ","_CMP_EQ_US","_CMP_FALSE_OQ","_CMP_FALSE_OS","_CMP_GE_OQ","_CMP_GE_OS","_CMP_GT_OQ","_CMP_GT_OS","_CMP_LE_OQ","_CMP_LE_OS","_CMP_LT_OQ","_CMP_LT_OS","_CMP_NEQ_OQ","_CMP_NEQ_OS","_CMP_NEQ_UQ","_CMP_NEQ_US","_CMP_NGE_UQ","_CMP_NGE_US","_CMP_NGT_UQ","_CMP_NGT_US","_CMP_NLE_UQ","_CMP_NLE_US","_CMP_NLT_UQ","_CMP_NLT_US","_CMP_ORD_Q","_CMP_ORD_S","_CMP_TRUE_UQ","_CMP_TRUE_US","_CMP_UNORD_Q","_CMP_UNORD_S","_MM_CMPINT_ENUM","_MM_CMPINT_EQ","_MM_CMPINT_FALSE","_MM_CMPINT_LE","_MM_CMPINT_LT","_MM_CMPINT_NE","_MM_CMPINT_NLE","_MM_CMPINT_NLT","_MM_CMPINT_TRUE","_MM_EXCEPT_DENORM","_MM_EXCEPT_DIV_ZERO","_MM_EXCEPT_INEXACT","_MM_EXCEPT_INVALID","_MM_EXCEPT_MASK","_MM_EXCEPT_OVERFLOW","_MM_EXCEPT_UNDERFLOW","_MM_FLUSH_ZERO_MASK","_MM_FLUSH_ZERO_OFF","_MM_FLUSH_ZERO_ON","_MM_FROUND_CEIL","_MM_FROUND_CUR_DIRECTION","_MM_FROUND_FLOOR","_MM_FROUND_NEARBYINT","_MM_FROUND_NINT","_MM_FROUND_NO_EXC","_MM_FROUND_RAISE_EXC","_MM_FROUND_RINT","_MM_FROUND_TO_NEAREST_INT","_MM_FROUND_TO_NEG_INF","_MM_FROUND_TO_POS_INF","_MM_FROUND_TO_ZERO","_MM_FROUND_TRUNC","_MM_GET_EXCEPTION_MASK","_MM_GET_EXCEPTION_STATE","_MM_GET_FLUSH_ZERO_MODE","_MM_GET_ROUNDING_MODE","_MM_HINT_ET0","_MM_HINT_ET1","_MM_HINT_NTA","_MM_HINT_T0","_MM_HINT_T1","_MM_HINT_T2","_MM_MANTISSA_NORM_ENUM","_MM_MANTISSA_SIGN_ENUM","_MM_MANT_NORM_1_2","_MM_MANT_NORM_P5_1","_MM_MANT_NORM_P5_2","_MM_MANT_NORM_P75_1P5","_MM_MANT_SIGN_NAN","_MM_MANT_SIGN_SRC","_MM_MANT_SIGN_ZERO","_MM_MASK_DENORM","_MM_MASK_DIV_ZERO","_MM_MASK_INEXACT","_MM_MASK_INVALID","_MM_MASK_MASK","_MM_MASK_OVERFLOW","_MM_MASK_UNDERFLOW","_MM_PERM_AAAA","_MM_PERM_AAAB","_MM_PERM_AAAC","_MM_PERM_AAAD","_MM_PERM_AABA","_MM_PERM_AABB","_MM_PERM_AABC","_MM_PERM_AABD","_MM_PERM_AACA","_MM_PERM_AACB","_MM_PERM_AACC","_MM_PERM_AACD","_MM_PERM_AADA","_MM_PERM_AADB","_MM_PERM_AADC","_MM_PERM_AADD","_MM_PERM_ABAA","_MM_PERM_ABAB","_MM_PERM_ABAC","_MM_PERM_ABAD","_MM_PERM_ABBA","_MM_PERM_ABBB","_MM_PERM_ABBC","_MM_PERM_ABBD","_MM_PERM_ABCA","_MM_PERM_ABCB","_MM_PERM_ABCC","_MM_PERM_ABCD","_MM_PERM_ABDA","_MM_PERM_ABDB","_MM_PERM_ABDC","_MM_PERM_ABDD","_MM_PERM_ACAA","_MM_PERM_ACAB","_MM_PERM_ACAC","_MM_PERM_ACAD","_MM_PERM_ACBA","_MM_PERM_ACBB","_MM_PERM_ACBC","_MM_PERM_ACBD","_MM_PERM_ACCA","_MM_PERM_ACCB","_MM_PERM_ACCC","_MM_PERM_ACCD","_MM_PERM_ACDA","_MM_PERM_ACDB","_MM_PERM_ACDC","_MM_PERM_ACDD","_MM_PERM_ADAA","_MM_PERM_ADAB","_MM_PERM_ADAC","_MM_PERM_ADAD","_MM_PERM_ADBA","_MM_PERM_ADBB","_MM_PERM_ADBC","_MM_PERM_ADBD","_MM_PERM_ADCA","_MM_PERM_ADCB","_MM_PERM_ADCC","_MM_PERM_ADCD","_MM_PERM_ADDA","_MM_PERM_ADDB","_MM_PERM_ADDC","_MM_PERM_ADDD","_MM_PERM_BAAA","_MM_PERM_BAAB","_MM_PERM_BAAC","_MM_PERM_BAAD","_MM_PERM_BABA","_MM_PERM_BABB","_MM_PERM_BABC","_MM_PERM_BABD","_MM_PERM_BACA","_MM_PERM_BACB","_MM_PERM_BACC","_MM_PERM_BACD","_MM_PERM_BADA","_MM_PERM_BADB","_MM_PERM_BADC","_MM_PERM_BADD","_MM_PERM_BBAA","_MM_PERM_BBAB","_MM_PERM_BBAC","_MM_PERM_BBAD","_MM_PERM_BBBA","_MM_PERM_BBBB","_MM_PERM_BBBC","_MM_PERM_BBBD","_MM_PERM_BBCA","_MM_PERM_BBCB","_MM_PERM_BBCC","_MM_PERM_BBCD","_MM_PERM_BBDA","_MM_PERM_BBDB","_MM_PERM_BBDC","_MM_PERM_BBDD","_MM_PERM_BCAA","_MM_PERM_BCAB","_MM_PERM_BCAC","_MM_PERM_BCAD","_MM_PERM_BCBA","_MM_PERM_BCBB","_MM_PERM_BCBC","_MM_PERM_BCBD","_MM_PERM_BCCA","_MM_PERM_BCCB","_MM_PERM_BCCC","_MM_PERM_BCCD","_MM_PERM_BCDA","_MM_PERM_BCDB","_MM_PERM_BCDC","_MM_PERM_BCDD","_MM_PERM_BDAA","_MM_PERM_BDAB","_MM_PERM_BDAC","_MM_PERM_BDAD","_MM_PERM_BDBA","_MM_PERM_BDBB","_MM_PERM_BDBC","_MM_PERM_BDBD","_MM_PERM_BDCA","_MM_PERM_BDCB","_MM_PERM_BDCC","_MM_PERM_BDCD","_MM_PERM_BDDA","_MM_PERM_BDDB","_MM_PERM_BDDC","_MM_PERM_BDDD","_MM_PERM_CAAA","_MM_PERM_CAAB","_MM_PERM_CAAC","_MM_PERM_CAAD","_MM_PERM_CABA","_MM_PERM_CABB","_MM_PERM_CABC","_MM_PERM_CABD","_MM_PERM_CACA","_MM_PERM_CACB","_MM_PERM_CACC","_MM_PERM_CACD","_MM_PERM_CADA","_MM_PERM_CADB","_MM_PERM_CADC","_MM_PERM_CADD","_MM_PERM_CBAA","_MM_PERM_CBAB","_MM_PERM_CBAC","_MM_PERM_CBAD","_MM_PERM_CBBA","_MM_PERM_CBBB","_MM_PERM_CBBC","_MM_PERM_CBBD","_MM_PERM_CBCA","_MM_PERM_CBCB","_MM_PERM_CBCC","_MM_PERM_CBCD","_MM_PERM_CBDA","_MM_PERM_CBDB","_MM_PERM_CBDC","_MM_PERM_CBDD","_MM_PERM_CCAA","_MM_PERM_CCAB","_MM_PERM_CCAC","_MM_PERM_CCAD","_MM_PERM_CCBA","_MM_PERM_CCBB","_MM_PERM_CCBC","_MM_PERM_CCBD","_MM_PERM_CCCA","_MM_PERM_CCCB","_MM_PERM_CCCC","_MM_PERM_CCCD","_MM_PERM_CCDA","_MM_PERM_CCDB","_MM_PERM_CCDC","_MM_PERM_CCDD","_MM_PERM_CDAA","_MM_PERM_CDAB","_MM_PERM_CDAC","_MM_PERM_CDAD","_MM_PERM_CDBA","_MM_PERM_CDBB","_MM_PERM_CDBC","_MM_PERM_CDBD","_MM_PERM_CDCA","_MM_PERM_CDCB","_MM_PERM_CDCC","_MM_PERM_CDCD","_MM_PERM_CDDA","_MM_PERM_CDDB","_MM_PERM_CDDC","_MM_PERM_CDDD","_MM_PERM_DAAA","_MM_PERM_DAAB","_MM_PERM_DAAC","_MM_PERM_DAAD","_MM_PERM_DABA","_MM_PERM_DABB","_MM_PERM_DABC","_MM_PERM_DABD","_MM_PERM_DACA","_MM_PERM_DACB","_MM_PERM_DACC","_MM_PERM_DACD","_MM_PERM_DADA","_MM_PERM_DADB","_MM_PERM_DADC","_MM_PERM_DADD","_MM_PERM_DBAA","_MM_PERM_DBAB","_MM_PERM_DBAC","_MM_PERM_DBAD","_MM_PERM_DBBA","_MM_PERM_DBBB","_MM_PERM_DBBC","_MM_PERM_DBBD","_MM_PERM_DBCA","_MM_PERM_DBCB","_MM_PERM_DBCC","_MM_PERM_DBCD","_MM_PERM_DBDA","_MM_PERM_DBDB","_MM_PERM_DBDC","_MM_PERM_DBDD","_MM_PERM_DCAA","_MM_PERM_DCAB","_MM_PERM_DCAC","_MM_PERM_DCAD","_MM_PERM_DCBA","_MM_PERM_DCBB","_MM_PERM_DCBC","_MM_PERM_DCBD","_MM_PERM_DCCA","_MM_PERM_DCCB","_MM_PERM_DCCC","_MM_PERM_DCCD","_MM_PERM_DCDA","_MM_PERM_DCDB","_MM_PERM_DCDC","_MM_PERM_DCDD","_MM_PERM_DDAA","_MM_PERM_DDAB","_MM_PERM_DDAC","_MM_PERM_DDAD","_MM_PERM_DDBA","_MM_PERM_DDBB","_MM_PERM_DDBC","_MM_PERM_DDBD","_MM_PERM_DDCA","_MM_PERM_DDCB","_MM_PERM_DDCC","_MM_PERM_DDCD","_MM_PERM_DDDA","_MM_PERM_DDDB","_MM_PERM_DDDC","_MM_PERM_DDDD","_MM_PERM_ENUM","_MM_ROUND_DOWN","_MM_ROUND_MASK","_MM_ROUND_NEAREST","_MM_ROUND_TOWARD_ZERO","_MM_ROUND_UP","_MM_SET_EXCEPTION_MASK","_MM_SET_EXCEPTION_STATE","_MM_SET_FLUSH_ZERO_MODE","_MM_SET_ROUNDING_MODE","_MM_SHUFFLE","_MM_TRANSPOSE4_PS","_SIDD_BIT_MASK","_SIDD_CMP_EQUAL_ANY","_SIDD_CMP_EQUAL_EACH","_SIDD_CMP_EQUAL_ORDERED","_SIDD_CMP_RANGES","_SIDD_LEAST_SIGNIFICANT","_SIDD_MASKED_NEGATIVE_POLARITY","_SIDD_MASKED_POSITIVE_POLARITY","_SIDD_MOST_SIGNIFICANT","_SIDD_NEGATIVE_POLARITY","_SIDD_POSITIVE_POLARITY","_SIDD_SBYTE_OPS","_SIDD_SWORD_OPS","_SIDD_UBYTE_OPS","_SIDD_UNIT_MASK","_SIDD_UWORD_OPS","_XABORT_CAPACITY","_XABORT_CONFLICT","_XABORT_DEBUG","_XABORT_EXPLICIT","_XABORT_NESTED","_XABORT_RETRY","_XBEGIN_STARTED","_XCR_XFEATURE_ENABLED_MASK","__cpuid","__cpuid_count","__get_cpuid_max","__m128","__m128bh","__m128d","__m128i","__m256","__m256bh","__m256d","__m256i","__m512","__m512bh","__m512d","__m512i","__mmask16","__mmask32","__mmask64","__mmask8","__rdtscp","_addcarry_u32","_addcarry_u64","_addcarryx_u32","_addcarryx_u64","_andn_u32","_andn_u64","_bextr2_u32","_bextr2_u64","_bextr_u32","_bextr_u64","_bittest","_bittest64","_bittestandcomplement","_bittestandcomplement64","_bittestandreset","_bittestandreset64","_bittestandset","_bittestandset64","_blcfill_u32","_blcfill_u64","_blci_u32","_blci_u64","_blcic_u32","_blcic_u64","_blcmsk_u32","_blcmsk_u64","_blcs_u32","_blcs_u64","_blsfill_u32","_blsfill_u64","_blsi_u32","_blsi_u64","_blsic_u32","_blsic_u64","_blsmsk_u32","_blsmsk_u64","_blsr_u32","_blsr_u64","_bswap","_bswap64","_bzhi_u32","_bzhi_u64","_fxrstor","_fxrstor64","_fxsave","_fxsave64","_kadd_mask32","_kadd_mask64","_kand_mask16","_kand_mask32","_kand_mask64","_kandn_mask16","_kandn_mask32","_kandn_mask64","_knot_mask16","_knot_mask32","_knot_mask64","_kor_mask16","_kor_mask32","_kor_mask64","_kxnor_mask16","_kxnor_mask32","_kxnor_mask64","_kxor_mask16","_kxor_mask32","_kxor_mask64","_load_mask32","_load_mask64","_lzcnt_u32","_lzcnt_u64","_mm256_abs_epi16","_mm256_abs_epi32","_mm256_abs_epi64","_mm256_abs_epi8","_mm256_add_epi16","_mm256_add_epi32","_mm256_add_epi64","_mm256_add_epi8","_mm256_add_pd","_mm256_add_ps","_mm256_adds_epi16","_mm256_adds_epi8","_mm256_adds_epu16","_mm256_adds_epu8","_mm256_addsub_pd","_mm256_addsub_ps","_mm256_aesdec_epi128","_mm256_aesdeclast_epi128","_mm256_aesenc_epi128","_mm256_aesenclast_epi128","_mm256_alignr_epi32","_mm256_alignr_epi64","_mm256_alignr_epi8","_mm256_and_pd","_mm256_and_ps","_mm256_and_si256","_mm256_andnot_pd","_mm256_andnot_ps","_mm256_andnot_si256","_mm256_avg_epu16","_mm256_avg_epu8","_mm256_bitshuffle_epi64_mask","_mm256_blend_epi16","_mm256_blend_epi32","_mm256_blend_pd","_mm256_blend_ps","_mm256_blendv_epi8","_mm256_blendv_pd","_mm256_blendv_ps","_mm256_broadcast_f32x4","_mm256_broadcast_i32x4","_mm256_broadcast_pd","_mm256_broadcast_ps","_mm256_broadcast_sd","_mm256_broadcast_ss","_mm256_broadcastb_epi8","_mm256_broadcastd_epi32","_mm256_broadcastmb_epi64","_mm256_broadcastmw_epi32","_mm256_broadcastq_epi64","_mm256_broadcastsd_pd","_mm256_broadcastsi128_si256","_mm256_broadcastss_ps","_mm256_broadcastw_epi16","_mm256_bslli_epi128","_mm256_bsrli_epi128","_mm256_castpd128_pd256","_mm256_castpd256_pd128","_mm256_castpd_ps","_mm256_castpd_si256","_mm256_castps128_ps256","_mm256_castps256_ps128","_mm256_castps_pd","_mm256_castps_si256","_mm256_castsi128_si256","_mm256_castsi256_pd","_mm256_castsi256_ps","_mm256_castsi256_si128","_mm256_ceil_pd","_mm256_ceil_ps","_mm256_clmulepi64_epi128","_mm256_cmp_epi16_mask","_mm256_cmp_epi32_mask","_mm256_cmp_epi64_mask","_mm256_cmp_epi8_mask","_mm256_cmp_epu16_mask","_mm256_cmp_epu32_mask","_mm256_cmp_epu64_mask","_mm256_cmp_epu8_mask","_mm256_cmp_pd","_mm256_cmp_pd_mask","_mm256_cmp_ps","_mm256_cmp_ps_mask","_mm256_cmpeq_epi16","_mm256_cmpeq_epi16_mask","_mm256_cmpeq_epi32","_mm256_cmpeq_epi32_mask","_mm256_cmpeq_epi64","_mm256_cmpeq_epi64_mask","_mm256_cmpeq_epi8","_mm256_cmpeq_epi8_mask","_mm256_cmpeq_epu16_mask","_mm256_cmpeq_epu32_mask","_mm256_cmpeq_epu64_mask","_mm256_cmpeq_epu8_mask","_mm256_cmpge_epi16_mask","_mm256_cmpge_epi32_mask","_mm256_cmpge_epi64_mask","_mm256_cmpge_epi8_mask","_mm256_cmpge_epu16_mask","_mm256_cmpge_epu32_mask","_mm256_cmpge_epu64_mask","_mm256_cmpge_epu8_mask","_mm256_cmpgt_epi16","_mm256_cmpgt_epi16_mask","_mm256_cmpgt_epi32","_mm256_cmpgt_epi32_mask","_mm256_cmpgt_epi64","_mm256_cmpgt_epi64_mask","_mm256_cmpgt_epi8","_mm256_cmpgt_epi8_mask","_mm256_cmpgt_epu16_mask","_mm256_cmpgt_epu32_mask","_mm256_cmpgt_epu64_mask","_mm256_cmpgt_epu8_mask","_mm256_cmple_epi16_mask","_mm256_cmple_epi32_mask","_mm256_cmple_epi64_mask","_mm256_cmple_epi8_mask","_mm256_cmple_epu16_mask","_mm256_cmple_epu32_mask","_mm256_cmple_epu64_mask","_mm256_cmple_epu8_mask","_mm256_cmplt_epi16_mask","_mm256_cmplt_epi32_mask","_mm256_cmplt_epi64_mask","_mm256_cmplt_epi8_mask","_mm256_cmplt_epu16_mask","_mm256_cmplt_epu32_mask","_mm256_cmplt_epu64_mask","_mm256_cmplt_epu8_mask","_mm256_cmpneq_epi16_mask","_mm256_cmpneq_epi32_mask","_mm256_cmpneq_epi64_mask","_mm256_cmpneq_epi8_mask","_mm256_cmpneq_epu16_mask","_mm256_cmpneq_epu32_mask","_mm256_cmpneq_epu64_mask","_mm256_cmpneq_epu8_mask","_mm256_conflict_epi32","_mm256_conflict_epi64","_mm256_cvtepi16_epi32","_mm256_cvtepi16_epi64","_mm256_cvtepi16_epi8","_mm256_cvtepi32_epi16","_mm256_cvtepi32_epi64","_mm256_cvtepi32_epi8","_mm256_cvtepi32_pd","_mm256_cvtepi32_ps","_mm256_cvtepi64_epi16","_mm256_cvtepi64_epi32","_mm256_cvtepi64_epi8","_mm256_cvtepi8_epi16","_mm256_cvtepi8_epi32","_mm256_cvtepi8_epi64","_mm256_cvtepu16_epi32","_mm256_cvtepu16_epi64","_mm256_cvtepu32_epi64","_mm256_cvtepu32_pd","_mm256_cvtepu8_epi16","_mm256_cvtepu8_epi32","_mm256_cvtepu8_epi64","_mm256_cvtne2ps_pbh","_mm256_cvtneps_pbh","_mm256_cvtpd_epi32","_mm256_cvtpd_epu32","_mm256_cvtpd_ps","_mm256_cvtph_ps","_mm256_cvtps_epi32","_mm256_cvtps_epu32","_mm256_cvtps_pd","_mm256_cvtps_ph","_mm256_cvtsd_f64","_mm256_cvtsepi16_epi8","_mm256_cvtsepi32_epi16","_mm256_cvtsepi32_epi8","_mm256_cvtsepi64_epi16","_mm256_cvtsepi64_epi32","_mm256_cvtsepi64_epi8","_mm256_cvtsi256_si32","_mm256_cvtss_f32","_mm256_cvttpd_epi32","_mm256_cvttpd_epu32","_mm256_cvttps_epi32","_mm256_cvttps_epu32","_mm256_cvtusepi16_epi8","_mm256_cvtusepi32_epi16","_mm256_cvtusepi32_epi8","_mm256_cvtusepi64_epi16","_mm256_cvtusepi64_epi32","_mm256_cvtusepi64_epi8","_mm256_dbsad_epu8","_mm256_div_pd","_mm256_div_ps","_mm256_dp_ps","_mm256_dpbf16_ps","_mm256_dpbusd_epi32","_mm256_dpbusds_epi32","_mm256_dpwssd_epi32","_mm256_dpwssds_epi32","_mm256_extract_epi16","_mm256_extract_epi32","_mm256_extract_epi64","_mm256_extract_epi8","_mm256_extractf128_pd","_mm256_extractf128_ps","_mm256_extractf128_si256","_mm256_extractf32x4_ps","_mm256_extracti128_si256","_mm256_extracti32x4_epi32","_mm256_fixupimm_pd","_mm256_fixupimm_ps","_mm256_floor_pd","_mm256_floor_ps","_mm256_fmadd_pd","_mm256_fmadd_ps","_mm256_fmaddsub_pd","_mm256_fmaddsub_ps","_mm256_fmsub_pd","_mm256_fmsub_ps","_mm256_fmsubadd_pd","_mm256_fmsubadd_ps","_mm256_fnmadd_pd","_mm256_fnmadd_ps","_mm256_fnmsub_pd","_mm256_fnmsub_ps","_mm256_getexp_pd","_mm256_getexp_ps","_mm256_getmant_pd","_mm256_getmant_ps","_mm256_gf2p8affine_epi64_epi8","_mm256_gf2p8affineinv_epi64_epi8","_mm256_gf2p8mul_epi8","_mm256_hadd_epi16","_mm256_hadd_epi32","_mm256_hadd_pd","_mm256_hadd_ps","_mm256_hadds_epi16","_mm256_hsub_epi16","_mm256_hsub_epi32","_mm256_hsub_pd","_mm256_hsub_ps","_mm256_hsubs_epi16","_mm256_i32gather_epi32","_mm256_i32gather_epi64","_mm256_i32gather_pd","_mm256_i32gather_ps","_mm256_i64gather_epi32","_mm256_i64gather_epi64","_mm256_i64gather_pd","_mm256_i64gather_ps","_mm256_insert_epi16","_mm256_insert_epi32","_mm256_insert_epi64","_mm256_insert_epi8","_mm256_insertf128_pd","_mm256_insertf128_ps","_mm256_insertf128_si256","_mm256_insertf32x4","_mm256_inserti128_si256","_mm256_inserti32x4","_mm256_lddqu_si256","_mm256_load_epi32","_mm256_load_epi64","_mm256_load_pd","_mm256_load_ps","_mm256_load_si256","_mm256_loadu2_m128","_mm256_loadu2_m128d","_mm256_loadu2_m128i","_mm256_loadu_epi16","_mm256_loadu_epi32","_mm256_loadu_epi64","_mm256_loadu_epi8","_mm256_loadu_pd","_mm256_loadu_ps","_mm256_loadu_si256","_mm256_lzcnt_epi32","_mm256_lzcnt_epi64","_mm256_madd52hi_epu64","_mm256_madd52lo_epu64","_mm256_madd_epi16","_mm256_maddubs_epi16","_mm256_mask2_permutex2var_epi16","_mm256_mask2_permutex2var_epi32","_mm256_mask2_permutex2var_epi64","_mm256_mask2_permutex2var_epi8","_mm256_mask2_permutex2var_pd","_mm256_mask2_permutex2var_ps","_mm256_mask3_fmadd_pd","_mm256_mask3_fmadd_ps","_mm256_mask3_fmaddsub_pd","_mm256_mask3_fmaddsub_ps","_mm256_mask3_fmsub_pd","_mm256_mask3_fmsub_ps","_mm256_mask3_fmsubadd_pd","_mm256_mask3_fmsubadd_ps","_mm256_mask3_fnmadd_pd","_mm256_mask3_fnmadd_ps","_mm256_mask3_fnmsub_pd","_mm256_mask3_fnmsub_ps","_mm256_mask_abs_epi16","_mm256_mask_abs_epi32","_mm256_mask_abs_epi64","_mm256_mask_abs_epi8","_mm256_mask_add_epi16","_mm256_mask_add_epi32","_mm256_mask_add_epi64","_mm256_mask_add_epi8","_mm256_mask_add_pd","_mm256_mask_add_ps","_mm256_mask_adds_epi16","_mm256_mask_adds_epi8","_mm256_mask_adds_epu16","_mm256_mask_adds_epu8","_mm256_mask_alignr_epi32","_mm256_mask_alignr_epi64","_mm256_mask_alignr_epi8","_mm256_mask_and_epi32","_mm256_mask_and_epi64","_mm256_mask_andnot_epi32","_mm256_mask_andnot_epi64","_mm256_mask_avg_epu16","_mm256_mask_avg_epu8","_mm256_mask_bitshuffle_epi64_mask","_mm256_mask_blend_epi16","_mm256_mask_blend_epi32","_mm256_mask_blend_epi64","_mm256_mask_blend_epi8","_mm256_mask_blend_pd","_mm256_mask_blend_ps","_mm256_mask_broadcast_f32x4","_mm256_mask_broadcast_i32x4","_mm256_mask_broadcastb_epi8","_mm256_mask_broadcastd_epi32","_mm256_mask_broadcastq_epi64","_mm256_mask_broadcastsd_pd","_mm256_mask_broadcastss_ps","_mm256_mask_broadcastw_epi16","_mm256_mask_cmp_epi16_mask","_mm256_mask_cmp_epi32_mask","_mm256_mask_cmp_epi64_mask","_mm256_mask_cmp_epi8_mask","_mm256_mask_cmp_epu16_mask","_mm256_mask_cmp_epu32_mask","_mm256_mask_cmp_epu64_mask","_mm256_mask_cmp_epu8_mask","_mm256_mask_cmp_pd_mask","_mm256_mask_cmp_ps_mask","_mm256_mask_cmpeq_epi16_mask","_mm256_mask_cmpeq_epi32_mask","_mm256_mask_cmpeq_epi64_mask","_mm256_mask_cmpeq_epi8_mask","_mm256_mask_cmpeq_epu16_mask","_mm256_mask_cmpeq_epu32_mask","_mm256_mask_cmpeq_epu64_mask","_mm256_mask_cmpeq_epu8_mask","_mm256_mask_cmpge_epi16_mask","_mm256_mask_cmpge_epi32_mask","_mm256_mask_cmpge_epi64_mask","_mm256_mask_cmpge_epi8_mask","_mm256_mask_cmpge_epu16_mask","_mm256_mask_cmpge_epu32_mask","_mm256_mask_cmpge_epu64_mask","_mm256_mask_cmpge_epu8_mask","_mm256_mask_cmpgt_epi16_mask","_mm256_mask_cmpgt_epi32_mask","_mm256_mask_cmpgt_epi64_mask","_mm256_mask_cmpgt_epi8_mask","_mm256_mask_cmpgt_epu16_mask","_mm256_mask_cmpgt_epu32_mask","_mm256_mask_cmpgt_epu64_mask","_mm256_mask_cmpgt_epu8_mask","_mm256_mask_cmple_epi16_mask","_mm256_mask_cmple_epi32_mask","_mm256_mask_cmple_epi64_mask","_mm256_mask_cmple_epi8_mask","_mm256_mask_cmple_epu16_mask","_mm256_mask_cmple_epu32_mask","_mm256_mask_cmple_epu64_mask","_mm256_mask_cmple_epu8_mask","_mm256_mask_cmplt_epi16_mask","_mm256_mask_cmplt_epi32_mask","_mm256_mask_cmplt_epi64_mask","_mm256_mask_cmplt_epi8_mask","_mm256_mask_cmplt_epu16_mask","_mm256_mask_cmplt_epu32_mask","_mm256_mask_cmplt_epu64_mask","_mm256_mask_cmplt_epu8_mask","_mm256_mask_cmpneq_epi16_mask","_mm256_mask_cmpneq_epi32_mask","_mm256_mask_cmpneq_epi64_mask","_mm256_mask_cmpneq_epi8_mask","_mm256_mask_cmpneq_epu16_mask","_mm256_mask_cmpneq_epu32_mask","_mm256_mask_cmpneq_epu64_mask","_mm256_mask_cmpneq_epu8_mask","_mm256_mask_compress_epi16","_mm256_mask_compress_epi32","_mm256_mask_compress_epi64","_mm256_mask_compress_epi8","_mm256_mask_compress_pd","_mm256_mask_compress_ps","_mm256_mask_compressstoreu_epi16","_mm256_mask_compressstoreu_epi32","_mm256_mask_compressstoreu_epi64","_mm256_mask_compressstoreu_epi8","_mm256_mask_compressstoreu_pd","_mm256_mask_compressstoreu_ps","_mm256_mask_conflict_epi32","_mm256_mask_conflict_epi64","_mm256_mask_cvt_roundps_ph","_mm256_mask_cvtepi16_epi32","_mm256_mask_cvtepi16_epi64","_mm256_mask_cvtepi16_epi8","_mm256_mask_cvtepi16_storeu_epi8","_mm256_mask_cvtepi32_epi16","_mm256_mask_cvtepi32_epi64","_mm256_mask_cvtepi32_epi8","_mm256_mask_cvtepi32_pd","_mm256_mask_cvtepi32_ps","_mm256_mask_cvtepi32_storeu_epi16","_mm256_mask_cvtepi32_storeu_epi8","_mm256_mask_cvtepi64_epi16","_mm256_mask_cvtepi64_epi32","_mm256_mask_cvtepi64_epi8","_mm256_mask_cvtepi64_storeu_epi16","_mm256_mask_cvtepi64_storeu_epi32","_mm256_mask_cvtepi64_storeu_epi8","_mm256_mask_cvtepi8_epi16","_mm256_mask_cvtepi8_epi32","_mm256_mask_cvtepi8_epi64","_mm256_mask_cvtepu16_epi32","_mm256_mask_cvtepu16_epi64","_mm256_mask_cvtepu32_epi64","_mm256_mask_cvtepu32_pd","_mm256_mask_cvtepu8_epi16","_mm256_mask_cvtepu8_epi32","_mm256_mask_cvtepu8_epi64","_mm256_mask_cvtne2ps_pbh","_mm256_mask_cvtneps_pbh","_mm256_mask_cvtpd_epi32","_mm256_mask_cvtpd_epu32","_mm256_mask_cvtpd_ps","_mm256_mask_cvtph_ps","_mm256_mask_cvtps_epi32","_mm256_mask_cvtps_epu32","_mm256_mask_cvtps_ph","_mm256_mask_cvtsepi16_epi8","_mm256_mask_cvtsepi16_storeu_epi8","_mm256_mask_cvtsepi32_epi16","_mm256_mask_cvtsepi32_epi8","_mm256_mask_cvtsepi32_storeu_epi16","_mm256_mask_cvtsepi32_storeu_epi8","_mm256_mask_cvtsepi64_epi16","_mm256_mask_cvtsepi64_epi32","_mm256_mask_cvtsepi64_epi8","_mm256_mask_cvtsepi64_storeu_epi16","_mm256_mask_cvtsepi64_storeu_epi32","_mm256_mask_cvtsepi64_storeu_epi8","_mm256_mask_cvttpd_epi32","_mm256_mask_cvttpd_epu32","_mm256_mask_cvttps_epi32","_mm256_mask_cvttps_epu32","_mm256_mask_cvtusepi16_epi8","_mm256_mask_cvtusepi16_storeu_epi8","_mm256_mask_cvtusepi32_epi16","_mm256_mask_cvtusepi32_epi8","_mm256_mask_cvtusepi32_storeu_epi16","_mm256_mask_cvtusepi32_storeu_epi8","_mm256_mask_cvtusepi64_epi16","_mm256_mask_cvtusepi64_epi32","_mm256_mask_cvtusepi64_epi8","_mm256_mask_cvtusepi64_storeu_epi16","_mm256_mask_cvtusepi64_storeu_epi32","_mm256_mask_cvtusepi64_storeu_epi8","_mm256_mask_dbsad_epu8","_mm256_mask_div_pd","_mm256_mask_div_ps","_mm256_mask_dpbf16_ps","_mm256_mask_dpbusd_epi32","_mm256_mask_dpbusds_epi32","_mm256_mask_dpwssd_epi32","_mm256_mask_dpwssds_epi32","_mm256_mask_expand_epi16","_mm256_mask_expand_epi32","_mm256_mask_expand_epi64","_mm256_mask_expand_epi8","_mm256_mask_expand_pd","_mm256_mask_expand_ps","_mm256_mask_expandloadu_epi16","_mm256_mask_expandloadu_epi32","_mm256_mask_expandloadu_epi64","_mm256_mask_expandloadu_epi8","_mm256_mask_expandloadu_pd","_mm256_mask_expandloadu_ps","_mm256_mask_extractf32x4_ps","_mm256_mask_extracti32x4_epi32","_mm256_mask_fixupimm_pd","_mm256_mask_fixupimm_ps","_mm256_mask_fmadd_pd","_mm256_mask_fmadd_ps","_mm256_mask_fmaddsub_pd","_mm256_mask_fmaddsub_ps","_mm256_mask_fmsub_pd","_mm256_mask_fmsub_ps","_mm256_mask_fmsubadd_pd","_mm256_mask_fmsubadd_ps","_mm256_mask_fnmadd_pd","_mm256_mask_fnmadd_ps","_mm256_mask_fnmsub_pd","_mm256_mask_fnmsub_ps","_mm256_mask_getexp_pd","_mm256_mask_getexp_ps","_mm256_mask_getmant_pd","_mm256_mask_getmant_ps","_mm256_mask_gf2p8affine_epi64_epi8","_mm256_mask_gf2p8affineinv_epi64_epi8","_mm256_mask_gf2p8mul_epi8","_mm256_mask_i32gather_epi32","_mm256_mask_i32gather_epi64","_mm256_mask_i32gather_pd","_mm256_mask_i32gather_ps","_mm256_mask_i64gather_epi32","_mm256_mask_i64gather_epi64","_mm256_mask_i64gather_pd","_mm256_mask_i64gather_ps","_mm256_mask_insertf32x4","_mm256_mask_inserti32x4","_mm256_mask_load_epi32","_mm256_mask_load_epi64","_mm256_mask_load_pd","_mm256_mask_load_ps","_mm256_mask_loadu_epi16","_mm256_mask_loadu_epi32","_mm256_mask_loadu_epi64","_mm256_mask_loadu_epi8","_mm256_mask_loadu_pd","_mm256_mask_loadu_ps","_mm256_mask_lzcnt_epi32","_mm256_mask_lzcnt_epi64","_mm256_mask_madd_epi16","_mm256_mask_maddubs_epi16","_mm256_mask_max_epi16","_mm256_mask_max_epi32","_mm256_mask_max_epi64","_mm256_mask_max_epi8","_mm256_mask_max_epu16","_mm256_mask_max_epu32","_mm256_mask_max_epu64","_mm256_mask_max_epu8","_mm256_mask_max_pd","_mm256_mask_max_ps","_mm256_mask_min_epi16","_mm256_mask_min_epi32","_mm256_mask_min_epi64","_mm256_mask_min_epi8","_mm256_mask_min_epu16","_mm256_mask_min_epu32","_mm256_mask_min_epu64","_mm256_mask_min_epu8","_mm256_mask_min_pd","_mm256_mask_min_ps","_mm256_mask_mov_epi16","_mm256_mask_mov_epi32","_mm256_mask_mov_epi64","_mm256_mask_mov_epi8","_mm256_mask_mov_pd","_mm256_mask_mov_ps","_mm256_mask_movedup_pd","_mm256_mask_movehdup_ps","_mm256_mask_moveldup_ps","_mm256_mask_mul_epi32","_mm256_mask_mul_epu32","_mm256_mask_mul_pd","_mm256_mask_mul_ps","_mm256_mask_mulhi_epi16","_mm256_mask_mulhi_epu16","_mm256_mask_mulhrs_epi16","_mm256_mask_mullo_epi16","_mm256_mask_mullo_epi32","_mm256_mask_multishift_epi64_epi8","_mm256_mask_or_epi32","_mm256_mask_or_epi64","_mm256_mask_packs_epi16","_mm256_mask_packs_epi32","_mm256_mask_packus_epi16","_mm256_mask_packus_epi32","_mm256_mask_permute_pd","_mm256_mask_permute_ps","_mm256_mask_permutevar_pd","_mm256_mask_permutevar_ps","_mm256_mask_permutex2var_epi16","_mm256_mask_permutex2var_epi32","_mm256_mask_permutex2var_epi64","_mm256_mask_permutex2var_epi8","_mm256_mask_permutex2var_pd","_mm256_mask_permutex2var_ps","_mm256_mask_permutex_epi64","_mm256_mask_permutex_pd","_mm256_mask_permutexvar_epi16","_mm256_mask_permutexvar_epi32","_mm256_mask_permutexvar_epi64","_mm256_mask_permutexvar_epi8","_mm256_mask_permutexvar_pd","_mm256_mask_permutexvar_ps","_mm256_mask_popcnt_epi16","_mm256_mask_popcnt_epi32","_mm256_mask_popcnt_epi64","_mm256_mask_popcnt_epi8","_mm256_mask_rcp14_pd","_mm256_mask_rcp14_ps","_mm256_mask_rol_epi32","_mm256_mask_rol_epi64","_mm256_mask_rolv_epi32","_mm256_mask_rolv_epi64","_mm256_mask_ror_epi32","_mm256_mask_ror_epi64","_mm256_mask_rorv_epi32","_mm256_mask_rorv_epi64","_mm256_mask_roundscale_pd","_mm256_mask_roundscale_ps","_mm256_mask_rsqrt14_pd","_mm256_mask_rsqrt14_ps","_mm256_mask_scalef_pd","_mm256_mask_scalef_ps","_mm256_mask_set1_epi16","_mm256_mask_set1_epi32","_mm256_mask_set1_epi64","_mm256_mask_set1_epi8","_mm256_mask_shldi_epi16","_mm256_mask_shldi_epi32","_mm256_mask_shldi_epi64","_mm256_mask_shldv_epi16","_mm256_mask_shldv_epi32","_mm256_mask_shldv_epi64","_mm256_mask_shrdi_epi16","_mm256_mask_shrdi_epi32","_mm256_mask_shrdi_epi64","_mm256_mask_shrdv_epi16","_mm256_mask_shrdv_epi32","_mm256_mask_shrdv_epi64","_mm256_mask_shuffle_epi32","_mm256_mask_shuffle_epi8","_mm256_mask_shuffle_f32x4","_mm256_mask_shuffle_f64x2","_mm256_mask_shuffle_i32x4","_mm256_mask_shuffle_i64x2","_mm256_mask_shuffle_pd","_mm256_mask_shuffle_ps","_mm256_mask_shufflehi_epi16","_mm256_mask_shufflelo_epi16","_mm256_mask_sll_epi16","_mm256_mask_sll_epi32","_mm256_mask_sll_epi64","_mm256_mask_slli_epi16","_mm256_mask_slli_epi32","_mm256_mask_slli_epi64","_mm256_mask_sllv_epi16","_mm256_mask_sllv_epi32","_mm256_mask_sllv_epi64","_mm256_mask_sqrt_pd","_mm256_mask_sqrt_ps","_mm256_mask_sra_epi16","_mm256_mask_sra_epi32","_mm256_mask_sra_epi64","_mm256_mask_srai_epi16","_mm256_mask_srai_epi32","_mm256_mask_srai_epi64","_mm256_mask_srav_epi16","_mm256_mask_srav_epi32","_mm256_mask_srav_epi64","_mm256_mask_srl_epi16","_mm256_mask_srl_epi32","_mm256_mask_srl_epi64","_mm256_mask_srli_epi16","_mm256_mask_srli_epi32","_mm256_mask_srli_epi64","_mm256_mask_srlv_epi16","_mm256_mask_srlv_epi32","_mm256_mask_srlv_epi64","_mm256_mask_store_epi32","_mm256_mask_store_epi64","_mm256_mask_store_pd","_mm256_mask_store_ps","_mm256_mask_storeu_epi16","_mm256_mask_storeu_epi32","_mm256_mask_storeu_epi64","_mm256_mask_storeu_epi8","_mm256_mask_storeu_pd","_mm256_mask_storeu_ps","_mm256_mask_sub_epi16","_mm256_mask_sub_epi32","_mm256_mask_sub_epi64","_mm256_mask_sub_epi8","_mm256_mask_sub_pd","_mm256_mask_sub_ps","_mm256_mask_subs_epi16","_mm256_mask_subs_epi8","_mm256_mask_subs_epu16","_mm256_mask_subs_epu8","_mm256_mask_ternarylogic_epi32","_mm256_mask_ternarylogic_epi64","_mm256_mask_test_epi16_mask","_mm256_mask_test_epi32_mask","_mm256_mask_test_epi64_mask","_mm256_mask_test_epi8_mask","_mm256_mask_testn_epi16_mask","_mm256_mask_testn_epi32_mask","_mm256_mask_testn_epi64_mask","_mm256_mask_testn_epi8_mask","_mm256_mask_unpackhi_epi16","_mm256_mask_unpackhi_epi32","_mm256_mask_unpackhi_epi64","_mm256_mask_unpackhi_epi8","_mm256_mask_unpackhi_pd","_mm256_mask_unpackhi_ps","_mm256_mask_unpacklo_epi16","_mm256_mask_unpacklo_epi32","_mm256_mask_unpacklo_epi64","_mm256_mask_unpacklo_epi8","_mm256_mask_unpacklo_pd","_mm256_mask_unpacklo_ps","_mm256_mask_xor_epi32","_mm256_mask_xor_epi64","_mm256_maskload_epi32","_mm256_maskload_epi64","_mm256_maskload_pd","_mm256_maskload_ps","_mm256_maskstore_epi32","_mm256_maskstore_epi64","_mm256_maskstore_pd","_mm256_maskstore_ps","_mm256_maskz_abs_epi16","_mm256_maskz_abs_epi32","_mm256_maskz_abs_epi64","_mm256_maskz_abs_epi8","_mm256_maskz_add_epi16","_mm256_maskz_add_epi32","_mm256_maskz_add_epi64","_mm256_maskz_add_epi8","_mm256_maskz_add_pd","_mm256_maskz_add_ps","_mm256_maskz_adds_epi16","_mm256_maskz_adds_epi8","_mm256_maskz_adds_epu16","_mm256_maskz_adds_epu8","_mm256_maskz_alignr_epi32","_mm256_maskz_alignr_epi64","_mm256_maskz_alignr_epi8","_mm256_maskz_and_epi32","_mm256_maskz_and_epi64","_mm256_maskz_andnot_epi32","_mm256_maskz_andnot_epi64","_mm256_maskz_avg_epu16","_mm256_maskz_avg_epu8","_mm256_maskz_broadcast_f32x4","_mm256_maskz_broadcast_i32x4","_mm256_maskz_broadcastb_epi8","_mm256_maskz_broadcastd_epi32","_mm256_maskz_broadcastq_epi64","_mm256_maskz_broadcastsd_pd","_mm256_maskz_broadcastss_ps","_mm256_maskz_broadcastw_epi16","_mm256_maskz_compress_epi16","_mm256_maskz_compress_epi32","_mm256_maskz_compress_epi64","_mm256_maskz_compress_epi8","_mm256_maskz_compress_pd","_mm256_maskz_compress_ps","_mm256_maskz_conflict_epi32","_mm256_maskz_conflict_epi64","_mm256_maskz_cvt_roundps_ph","_mm256_maskz_cvtepi16_epi32","_mm256_maskz_cvtepi16_epi64","_mm256_maskz_cvtepi16_epi8","_mm256_maskz_cvtepi32_epi16","_mm256_maskz_cvtepi32_epi64","_mm256_maskz_cvtepi32_epi8","_mm256_maskz_cvtepi32_pd","_mm256_maskz_cvtepi32_ps","_mm256_maskz_cvtepi64_epi16","_mm256_maskz_cvtepi64_epi32","_mm256_maskz_cvtepi64_epi8","_mm256_maskz_cvtepi8_epi16","_mm256_maskz_cvtepi8_epi32","_mm256_maskz_cvtepi8_epi64","_mm256_maskz_cvtepu16_epi32","_mm256_maskz_cvtepu16_epi64","_mm256_maskz_cvtepu32_epi64","_mm256_maskz_cvtepu32_pd","_mm256_maskz_cvtepu8_epi16","_mm256_maskz_cvtepu8_epi32","_mm256_maskz_cvtepu8_epi64","_mm256_maskz_cvtne2ps_pbh","_mm256_maskz_cvtneps_pbh","_mm256_maskz_cvtpd_epi32","_mm256_maskz_cvtpd_epu32","_mm256_maskz_cvtpd_ps","_mm256_maskz_cvtph_ps","_mm256_maskz_cvtps_epi32","_mm256_maskz_cvtps_epu32","_mm256_maskz_cvtps_ph","_mm256_maskz_cvtsepi16_epi8","_mm256_maskz_cvtsepi32_epi16","_mm256_maskz_cvtsepi32_epi8","_mm256_maskz_cvtsepi64_epi16","_mm256_maskz_cvtsepi64_epi32","_mm256_maskz_cvtsepi64_epi8","_mm256_maskz_cvttpd_epi32","_mm256_maskz_cvttpd_epu32","_mm256_maskz_cvttps_epi32","_mm256_maskz_cvttps_epu32","_mm256_maskz_cvtusepi16_epi8","_mm256_maskz_cvtusepi32_epi16","_mm256_maskz_cvtusepi32_epi8","_mm256_maskz_cvtusepi64_epi16","_mm256_maskz_cvtusepi64_epi32","_mm256_maskz_cvtusepi64_epi8","_mm256_maskz_dbsad_epu8","_mm256_maskz_div_pd","_mm256_maskz_div_ps","_mm256_maskz_dpbf16_ps","_mm256_maskz_dpbusd_epi32","_mm256_maskz_dpbusds_epi32","_mm256_maskz_dpwssd_epi32","_mm256_maskz_dpwssds_epi32","_mm256_maskz_expand_epi16","_mm256_maskz_expand_epi32","_mm256_maskz_expand_epi64","_mm256_maskz_expand_epi8","_mm256_maskz_expand_pd","_mm256_maskz_expand_ps","_mm256_maskz_expandloadu_epi16","_mm256_maskz_expandloadu_epi32","_mm256_maskz_expandloadu_epi64","_mm256_maskz_expandloadu_epi8","_mm256_maskz_expandloadu_pd","_mm256_maskz_expandloadu_ps","_mm256_maskz_extractf32x4_ps","_mm256_maskz_extracti32x4_epi32","_mm256_maskz_fixupimm_pd","_mm256_maskz_fixupimm_ps","_mm256_maskz_fmadd_pd","_mm256_maskz_fmadd_ps","_mm256_maskz_fmaddsub_pd","_mm256_maskz_fmaddsub_ps","_mm256_maskz_fmsub_pd","_mm256_maskz_fmsub_ps","_mm256_maskz_fmsubadd_pd","_mm256_maskz_fmsubadd_ps","_mm256_maskz_fnmadd_pd","_mm256_maskz_fnmadd_ps","_mm256_maskz_fnmsub_pd","_mm256_maskz_fnmsub_ps","_mm256_maskz_getexp_pd","_mm256_maskz_getexp_ps","_mm256_maskz_getmant_pd","_mm256_maskz_getmant_ps","_mm256_maskz_gf2p8affine_epi64_epi8","_mm256_maskz_gf2p8affineinv_epi64_epi8","_mm256_maskz_gf2p8mul_epi8","_mm256_maskz_insertf32x4","_mm256_maskz_inserti32x4","_mm256_maskz_load_epi32","_mm256_maskz_load_epi64","_mm256_maskz_load_pd","_mm256_maskz_load_ps","_mm256_maskz_loadu_epi16","_mm256_maskz_loadu_epi32","_mm256_maskz_loadu_epi64","_mm256_maskz_loadu_epi8","_mm256_maskz_loadu_pd","_mm256_maskz_loadu_ps","_mm256_maskz_lzcnt_epi32","_mm256_maskz_lzcnt_epi64","_mm256_maskz_madd_epi16","_mm256_maskz_maddubs_epi16","_mm256_maskz_max_epi16","_mm256_maskz_max_epi32","_mm256_maskz_max_epi64","_mm256_maskz_max_epi8","_mm256_maskz_max_epu16","_mm256_maskz_max_epu32","_mm256_maskz_max_epu64","_mm256_maskz_max_epu8","_mm256_maskz_max_pd","_mm256_maskz_max_ps","_mm256_maskz_min_epi16","_mm256_maskz_min_epi32","_mm256_maskz_min_epi64","_mm256_maskz_min_epi8","_mm256_maskz_min_epu16","_mm256_maskz_min_epu32","_mm256_maskz_min_epu64","_mm256_maskz_min_epu8","_mm256_maskz_min_pd","_mm256_maskz_min_ps","_mm256_maskz_mov_epi16","_mm256_maskz_mov_epi32","_mm256_maskz_mov_epi64","_mm256_maskz_mov_epi8","_mm256_maskz_mov_pd","_mm256_maskz_mov_ps","_mm256_maskz_movedup_pd","_mm256_maskz_movehdup_ps","_mm256_maskz_moveldup_ps","_mm256_maskz_mul_epi32","_mm256_maskz_mul_epu32","_mm256_maskz_mul_pd","_mm256_maskz_mul_ps","_mm256_maskz_mulhi_epi16","_mm256_maskz_mulhi_epu16","_mm256_maskz_mulhrs_epi16","_mm256_maskz_mullo_epi16","_mm256_maskz_mullo_epi32","_mm256_maskz_multishift_epi64_epi8","_mm256_maskz_or_epi32","_mm256_maskz_or_epi64","_mm256_maskz_packs_epi16","_mm256_maskz_packs_epi32","_mm256_maskz_packus_epi16","_mm256_maskz_packus_epi32","_mm256_maskz_permute_pd","_mm256_maskz_permute_ps","_mm256_maskz_permutevar_pd","_mm256_maskz_permutevar_ps","_mm256_maskz_permutex2var_epi16","_mm256_maskz_permutex2var_epi32","_mm256_maskz_permutex2var_epi64","_mm256_maskz_permutex2var_epi8","_mm256_maskz_permutex2var_pd","_mm256_maskz_permutex2var_ps","_mm256_maskz_permutex_epi64","_mm256_maskz_permutex_pd","_mm256_maskz_permutexvar_epi16","_mm256_maskz_permutexvar_epi32","_mm256_maskz_permutexvar_epi64","_mm256_maskz_permutexvar_epi8","_mm256_maskz_permutexvar_pd","_mm256_maskz_permutexvar_ps","_mm256_maskz_popcnt_epi16","_mm256_maskz_popcnt_epi32","_mm256_maskz_popcnt_epi64","_mm256_maskz_popcnt_epi8","_mm256_maskz_rcp14_pd","_mm256_maskz_rcp14_ps","_mm256_maskz_rol_epi32","_mm256_maskz_rol_epi64","_mm256_maskz_rolv_epi32","_mm256_maskz_rolv_epi64","_mm256_maskz_ror_epi32","_mm256_maskz_ror_epi64","_mm256_maskz_rorv_epi32","_mm256_maskz_rorv_epi64","_mm256_maskz_roundscale_pd","_mm256_maskz_roundscale_ps","_mm256_maskz_rsqrt14_pd","_mm256_maskz_rsqrt14_ps","_mm256_maskz_scalef_pd","_mm256_maskz_scalef_ps","_mm256_maskz_set1_epi16","_mm256_maskz_set1_epi32","_mm256_maskz_set1_epi64","_mm256_maskz_set1_epi8","_mm256_maskz_shldi_epi16","_mm256_maskz_shldi_epi32","_mm256_maskz_shldi_epi64","_mm256_maskz_shldv_epi16","_mm256_maskz_shldv_epi32","_mm256_maskz_shldv_epi64","_mm256_maskz_shrdi_epi16","_mm256_maskz_shrdi_epi32","_mm256_maskz_shrdi_epi64","_mm256_maskz_shrdv_epi16","_mm256_maskz_shrdv_epi32","_mm256_maskz_shrdv_epi64","_mm256_maskz_shuffle_epi32","_mm256_maskz_shuffle_epi8","_mm256_maskz_shuffle_f32x4","_mm256_maskz_shuffle_f64x2","_mm256_maskz_shuffle_i32x4","_mm256_maskz_shuffle_i64x2","_mm256_maskz_shuffle_pd","_mm256_maskz_shuffle_ps","_mm256_maskz_shufflehi_epi16","_mm256_maskz_shufflelo_epi16","_mm256_maskz_sll_epi16","_mm256_maskz_sll_epi32","_mm256_maskz_sll_epi64","_mm256_maskz_slli_epi16","_mm256_maskz_slli_epi32","_mm256_maskz_slli_epi64","_mm256_maskz_sllv_epi16","_mm256_maskz_sllv_epi32","_mm256_maskz_sllv_epi64","_mm256_maskz_sqrt_pd","_mm256_maskz_sqrt_ps","_mm256_maskz_sra_epi16","_mm256_maskz_sra_epi32","_mm256_maskz_sra_epi64","_mm256_maskz_srai_epi16","_mm256_maskz_srai_epi32","_mm256_maskz_srai_epi64","_mm256_maskz_srav_epi16","_mm256_maskz_srav_epi32","_mm256_maskz_srav_epi64","_mm256_maskz_srl_epi16","_mm256_maskz_srl_epi32","_mm256_maskz_srl_epi64","_mm256_maskz_srli_epi16","_mm256_maskz_srli_epi32","_mm256_maskz_srli_epi64","_mm256_maskz_srlv_epi16","_mm256_maskz_srlv_epi32","_mm256_maskz_srlv_epi64","_mm256_maskz_sub_epi16","_mm256_maskz_sub_epi32","_mm256_maskz_sub_epi64","_mm256_maskz_sub_epi8","_mm256_maskz_sub_pd","_mm256_maskz_sub_ps","_mm256_maskz_subs_epi16","_mm256_maskz_subs_epi8","_mm256_maskz_subs_epu16","_mm256_maskz_subs_epu8","_mm256_maskz_ternarylogic_epi32","_mm256_maskz_ternarylogic_epi64","_mm256_maskz_unpackhi_epi16","_mm256_maskz_unpackhi_epi32","_mm256_maskz_unpackhi_epi64","_mm256_maskz_unpackhi_epi8","_mm256_maskz_unpackhi_pd","_mm256_maskz_unpackhi_ps","_mm256_maskz_unpacklo_epi16","_mm256_maskz_unpacklo_epi32","_mm256_maskz_unpacklo_epi64","_mm256_maskz_unpacklo_epi8","_mm256_maskz_unpacklo_pd","_mm256_maskz_unpacklo_ps","_mm256_maskz_xor_epi32","_mm256_maskz_xor_epi64","_mm256_max_epi16","_mm256_max_epi32","_mm256_max_epi64","_mm256_max_epi8","_mm256_max_epu16","_mm256_max_epu32","_mm256_max_epu64","_mm256_max_epu8","_mm256_max_pd","_mm256_max_ps","_mm256_min_epi16","_mm256_min_epi32","_mm256_min_epi64","_mm256_min_epi8","_mm256_min_epu16","_mm256_min_epu32","_mm256_min_epu64","_mm256_min_epu8","_mm256_min_pd","_mm256_min_ps","_mm256_movedup_pd","_mm256_movehdup_ps","_mm256_moveldup_ps","_mm256_movemask_epi8","_mm256_movemask_pd","_mm256_movemask_ps","_mm256_movepi16_mask","_mm256_movepi8_mask","_mm256_movm_epi16","_mm256_movm_epi8","_mm256_mpsadbw_epu8","_mm256_mul_epi32","_mm256_mul_epu32","_mm256_mul_pd","_mm256_mul_ps","_mm256_mulhi_epi16","_mm256_mulhi_epu16","_mm256_mulhrs_epi16","_mm256_mullo_epi16","_mm256_mullo_epi32","_mm256_multishift_epi64_epi8","_mm256_or_epi32","_mm256_or_epi64","_mm256_or_pd","_mm256_or_ps","_mm256_or_si256","_mm256_packs_epi16","_mm256_packs_epi32","_mm256_packus_epi16","_mm256_packus_epi32","_mm256_permute2f128_pd","_mm256_permute2f128_ps","_mm256_permute2f128_si256","_mm256_permute2x128_si256","_mm256_permute4x64_epi64","_mm256_permute4x64_pd","_mm256_permute_pd","_mm256_permute_ps","_mm256_permutevar8x32_epi32","_mm256_permutevar8x32_ps","_mm256_permutevar_pd","_mm256_permutevar_ps","_mm256_permutex2var_epi16","_mm256_permutex2var_epi32","_mm256_permutex2var_epi64","_mm256_permutex2var_epi8","_mm256_permutex2var_pd","_mm256_permutex2var_ps","_mm256_permutex_epi64","_mm256_permutex_pd","_mm256_permutexvar_epi16","_mm256_permutexvar_epi32","_mm256_permutexvar_epi64","_mm256_permutexvar_epi8","_mm256_permutexvar_pd","_mm256_permutexvar_ps","_mm256_popcnt_epi16","_mm256_popcnt_epi32","_mm256_popcnt_epi64","_mm256_popcnt_epi8","_mm256_rcp14_pd","_mm256_rcp14_ps","_mm256_rcp_ps","_mm256_rol_epi32","_mm256_rol_epi64","_mm256_rolv_epi32","_mm256_rolv_epi64","_mm256_ror_epi32","_mm256_ror_epi64","_mm256_rorv_epi32","_mm256_rorv_epi64","_mm256_round_pd","_mm256_round_ps","_mm256_roundscale_pd","_mm256_roundscale_ps","_mm256_rsqrt_ps","_mm256_sad_epu8","_mm256_scalef_pd","_mm256_scalef_ps","_mm256_set1_epi16","_mm256_set1_epi32","_mm256_set1_epi64x","_mm256_set1_epi8","_mm256_set1_pd","_mm256_set1_ps","_mm256_set_epi16","_mm256_set_epi32","_mm256_set_epi64x","_mm256_set_epi8","_mm256_set_m128","_mm256_set_m128d","_mm256_set_m128i","_mm256_set_pd","_mm256_set_ps","_mm256_setr_epi16","_mm256_setr_epi32","_mm256_setr_epi64x","_mm256_setr_epi8","_mm256_setr_m128","_mm256_setr_m128d","_mm256_setr_m128i","_mm256_setr_pd","_mm256_setr_ps","_mm256_setzero_pd","_mm256_setzero_ps","_mm256_setzero_si256","_mm256_shldi_epi16","_mm256_shldi_epi32","_mm256_shldi_epi64","_mm256_shldv_epi16","_mm256_shldv_epi32","_mm256_shldv_epi64","_mm256_shrdi_epi16","_mm256_shrdi_epi32","_mm256_shrdi_epi64","_mm256_shrdv_epi16","_mm256_shrdv_epi32","_mm256_shrdv_epi64","_mm256_shuffle_epi32","_mm256_shuffle_epi8","_mm256_shuffle_f32x4","_mm256_shuffle_f64x2","_mm256_shuffle_i32x4","_mm256_shuffle_i64x2","_mm256_shuffle_pd","_mm256_shuffle_ps","_mm256_shufflehi_epi16","_mm256_shufflelo_epi16","_mm256_sign_epi16","_mm256_sign_epi32","_mm256_sign_epi8","_mm256_sll_epi16","_mm256_sll_epi32","_mm256_sll_epi64","_mm256_slli_epi16","_mm256_slli_epi32","_mm256_slli_epi64","_mm256_slli_si256","_mm256_sllv_epi16","_mm256_sllv_epi32","_mm256_sllv_epi64","_mm256_sqrt_pd","_mm256_sqrt_ps","_mm256_sra_epi16","_mm256_sra_epi32","_mm256_sra_epi64","_mm256_srai_epi16","_mm256_srai_epi32","_mm256_srai_epi64","_mm256_srav_epi16","_mm256_srav_epi32","_mm256_srav_epi64","_mm256_srl_epi16","_mm256_srl_epi32","_mm256_srl_epi64","_mm256_srli_epi16","_mm256_srli_epi32","_mm256_srli_epi64","_mm256_srli_si256","_mm256_srlv_epi16","_mm256_srlv_epi32","_mm256_srlv_epi64","_mm256_store_epi32","_mm256_store_epi64","_mm256_store_pd","_mm256_store_ps","_mm256_store_si256","_mm256_storeu2_m128","_mm256_storeu2_m128d","_mm256_storeu2_m128i","_mm256_storeu_epi16","_mm256_storeu_epi32","_mm256_storeu_epi64","_mm256_storeu_epi8","_mm256_storeu_pd","_mm256_storeu_ps","_mm256_storeu_si256","_mm256_stream_pd","_mm256_stream_ps","_mm256_stream_si256","_mm256_sub_epi16","_mm256_sub_epi32","_mm256_sub_epi64","_mm256_sub_epi8","_mm256_sub_pd","_mm256_sub_ps","_mm256_subs_epi16","_mm256_subs_epi8","_mm256_subs_epu16","_mm256_subs_epu8","_mm256_ternarylogic_epi32","_mm256_ternarylogic_epi64","_mm256_test_epi16_mask","_mm256_test_epi32_mask","_mm256_test_epi64_mask","_mm256_test_epi8_mask","_mm256_testc_pd","_mm256_testc_ps","_mm256_testc_si256","_mm256_testn_epi16_mask","_mm256_testn_epi32_mask","_mm256_testn_epi64_mask","_mm256_testn_epi8_mask","_mm256_testnzc_pd","_mm256_testnzc_ps","_mm256_testnzc_si256","_mm256_testz_pd","_mm256_testz_ps","_mm256_testz_si256","_mm256_undefined_pd","_mm256_undefined_ps","_mm256_undefined_si256","_mm256_unpackhi_epi16","_mm256_unpackhi_epi32","_mm256_unpackhi_epi64","_mm256_unpackhi_epi8","_mm256_unpackhi_pd","_mm256_unpackhi_ps","_mm256_unpacklo_epi16","_mm256_unpacklo_epi32","_mm256_unpacklo_epi64","_mm256_unpacklo_epi8","_mm256_unpacklo_pd","_mm256_unpacklo_ps","_mm256_xor_epi32","_mm256_xor_epi64","_mm256_xor_pd","_mm256_xor_ps","_mm256_xor_si256","_mm256_zeroall","_mm256_zeroupper","_mm256_zextpd128_pd256","_mm256_zextps128_ps256","_mm256_zextsi128_si256","_mm512_abs_epi16","_mm512_abs_epi32","_mm512_abs_epi64","_mm512_abs_epi8","_mm512_abs_pd","_mm512_abs_ps","_mm512_add_epi16","_mm512_add_epi32","_mm512_add_epi64","_mm512_add_epi8","_mm512_add_pd","_mm512_add_ps","_mm512_add_round_pd","_mm512_add_round_ps","_mm512_adds_epi16","_mm512_adds_epi8","_mm512_adds_epu16","_mm512_adds_epu8","_mm512_aesdec_epi128","_mm512_aesdeclast_epi128","_mm512_aesenc_epi128","_mm512_aesenclast_epi128","_mm512_alignr_epi32","_mm512_alignr_epi64","_mm512_alignr_epi8","_mm512_and_epi32","_mm512_and_epi64","_mm512_and_si512","_mm512_andnot_epi32","_mm512_andnot_epi64","_mm512_andnot_si512","_mm512_avg_epu16","_mm512_avg_epu8","_mm512_bitshuffle_epi64_mask","_mm512_broadcast_f32x4","_mm512_broadcast_f64x4","_mm512_broadcast_i32x4","_mm512_broadcast_i64x4","_mm512_broadcastb_epi8","_mm512_broadcastd_epi32","_mm512_broadcastmb_epi64","_mm512_broadcastmw_epi32","_mm512_broadcastq_epi64","_mm512_broadcastsd_pd","_mm512_broadcastss_ps","_mm512_broadcastw_epi16","_mm512_bslli_epi128","_mm512_bsrli_epi128","_mm512_castpd128_pd512","_mm512_castpd256_pd512","_mm512_castpd512_pd128","_mm512_castpd512_pd256","_mm512_castpd_ps","_mm512_castpd_si512","_mm512_castps128_ps512","_mm512_castps256_ps512","_mm512_castps512_ps128","_mm512_castps512_ps256","_mm512_castps_pd","_mm512_castps_si512","_mm512_castsi128_si512","_mm512_castsi256_si512","_mm512_castsi512_pd","_mm512_castsi512_ps","_mm512_castsi512_si128","_mm512_castsi512_si256","_mm512_clmulepi64_epi128","_mm512_cmp_epi16_mask","_mm512_cmp_epi32_mask","_mm512_cmp_epi64_mask","_mm512_cmp_epi8_mask","_mm512_cmp_epu16_mask","_mm512_cmp_epu32_mask","_mm512_cmp_epu64_mask","_mm512_cmp_epu8_mask","_mm512_cmp_pd_mask","_mm512_cmp_ps_mask","_mm512_cmp_round_pd_mask","_mm512_cmp_round_ps_mask","_mm512_cmpeq_epi16_mask","_mm512_cmpeq_epi32_mask","_mm512_cmpeq_epi64_mask","_mm512_cmpeq_epi8_mask","_mm512_cmpeq_epu16_mask","_mm512_cmpeq_epu32_mask","_mm512_cmpeq_epu64_mask","_mm512_cmpeq_epu8_mask","_mm512_cmpeq_pd_mask","_mm512_cmpeq_ps_mask","_mm512_cmpge_epi16_mask","_mm512_cmpge_epi32_mask","_mm512_cmpge_epi64_mask","_mm512_cmpge_epi8_mask","_mm512_cmpge_epu16_mask","_mm512_cmpge_epu32_mask","_mm512_cmpge_epu64_mask","_mm512_cmpge_epu8_mask","_mm512_cmpgt_epi16_mask","_mm512_cmpgt_epi32_mask","_mm512_cmpgt_epi64_mask","_mm512_cmpgt_epi8_mask","_mm512_cmpgt_epu16_mask","_mm512_cmpgt_epu32_mask","_mm512_cmpgt_epu64_mask","_mm512_cmpgt_epu8_mask","_mm512_cmple_epi16_mask","_mm512_cmple_epi32_mask","_mm512_cmple_epi64_mask","_mm512_cmple_epi8_mask","_mm512_cmple_epu16_mask","_mm512_cmple_epu32_mask","_mm512_cmple_epu64_mask","_mm512_cmple_epu8_mask","_mm512_cmple_pd_mask","_mm512_cmple_ps_mask","_mm512_cmplt_epi16_mask","_mm512_cmplt_epi32_mask","_mm512_cmplt_epi64_mask","_mm512_cmplt_epi8_mask","_mm512_cmplt_epu16_mask","_mm512_cmplt_epu32_mask","_mm512_cmplt_epu64_mask","_mm512_cmplt_epu8_mask","_mm512_cmplt_pd_mask","_mm512_cmplt_ps_mask","_mm512_cmpneq_epi16_mask","_mm512_cmpneq_epi32_mask","_mm512_cmpneq_epi64_mask","_mm512_cmpneq_epi8_mask","_mm512_cmpneq_epu16_mask","_mm512_cmpneq_epu32_mask","_mm512_cmpneq_epu64_mask","_mm512_cmpneq_epu8_mask","_mm512_cmpneq_pd_mask","_mm512_cmpneq_ps_mask","_mm512_cmpnle_pd_mask","_mm512_cmpnle_ps_mask","_mm512_cmpnlt_pd_mask","_mm512_cmpnlt_ps_mask","_mm512_cmpord_pd_mask","_mm512_cmpord_ps_mask","_mm512_cmpunord_pd_mask","_mm512_cmpunord_ps_mask","_mm512_conflict_epi32","_mm512_conflict_epi64","_mm512_cvt_roundepi32_ps","_mm512_cvt_roundepu32_ps","_mm512_cvt_roundpd_epi32","_mm512_cvt_roundpd_epu32","_mm512_cvt_roundpd_ps","_mm512_cvt_roundph_ps","_mm512_cvt_roundps_epi32","_mm512_cvt_roundps_epu32","_mm512_cvt_roundps_pd","_mm512_cvt_roundps_ph","_mm512_cvtepi16_epi32","_mm512_cvtepi16_epi64","_mm512_cvtepi16_epi8","_mm512_cvtepi32_epi16","_mm512_cvtepi32_epi64","_mm512_cvtepi32_epi8","_mm512_cvtepi32_pd","_mm512_cvtepi32_ps","_mm512_cvtepi32lo_pd","_mm512_cvtepi64_epi16","_mm512_cvtepi64_epi32","_mm512_cvtepi64_epi8","_mm512_cvtepi8_epi16","_mm512_cvtepi8_epi32","_mm512_cvtepi8_epi64","_mm512_cvtepu16_epi32","_mm512_cvtepu16_epi64","_mm512_cvtepu32_epi64","_mm512_cvtepu32_pd","_mm512_cvtepu32_ps","_mm512_cvtepu32lo_pd","_mm512_cvtepu8_epi16","_mm512_cvtepu8_epi32","_mm512_cvtepu8_epi64","_mm512_cvtne2ps_pbh","_mm512_cvtneps_pbh","_mm512_cvtpd_epi32","_mm512_cvtpd_epu32","_mm512_cvtpd_ps","_mm512_cvtpd_pslo","_mm512_cvtph_ps","_mm512_cvtps_epi32","_mm512_cvtps_epu32","_mm512_cvtps_pd","_mm512_cvtps_ph","_mm512_cvtpslo_pd","_mm512_cvtsepi16_epi8","_mm512_cvtsepi32_epi16","_mm512_cvtsepi32_epi8","_mm512_cvtsepi64_epi16","_mm512_cvtsepi64_epi32","_mm512_cvtsepi64_epi8","_mm512_cvtsi512_si32","_mm512_cvtt_roundpd_epi32","_mm512_cvtt_roundpd_epu32","_mm512_cvtt_roundps_epi32","_mm512_cvtt_roundps_epu32","_mm512_cvttpd_epi32","_mm512_cvttpd_epu32","_mm512_cvttps_epi32","_mm512_cvttps_epu32","_mm512_cvtusepi16_epi8","_mm512_cvtusepi32_epi16","_mm512_cvtusepi32_epi8","_mm512_cvtusepi64_epi16","_mm512_cvtusepi64_epi32","_mm512_cvtusepi64_epi8","_mm512_dbsad_epu8","_mm512_div_pd","_mm512_div_ps","_mm512_div_round_pd","_mm512_div_round_ps","_mm512_dpbf16_ps","_mm512_dpbusd_epi32","_mm512_dpbusds_epi32","_mm512_dpwssd_epi32","_mm512_dpwssds_epi32","_mm512_extractf32x4_ps","_mm512_extractf64x4_pd","_mm512_extracti32x4_epi32","_mm512_extracti64x4_epi64","_mm512_fixupimm_pd","_mm512_fixupimm_ps","_mm512_fixupimm_round_pd","_mm512_fixupimm_round_ps","_mm512_fmadd_pd","_mm512_fmadd_ps","_mm512_fmadd_round_pd","_mm512_fmadd_round_ps","_mm512_fmaddsub_pd","_mm512_fmaddsub_ps","_mm512_fmaddsub_round_pd","_mm512_fmaddsub_round_ps","_mm512_fmsub_pd","_mm512_fmsub_ps","_mm512_fmsub_round_pd","_mm512_fmsub_round_ps","_mm512_fmsubadd_pd","_mm512_fmsubadd_ps","_mm512_fmsubadd_round_pd","_mm512_fmsubadd_round_ps","_mm512_fnmadd_pd","_mm512_fnmadd_ps","_mm512_fnmadd_round_pd","_mm512_fnmadd_round_ps","_mm512_fnmsub_pd","_mm512_fnmsub_ps","_mm512_fnmsub_round_pd","_mm512_fnmsub_round_ps","_mm512_getexp_pd","_mm512_getexp_ps","_mm512_getexp_round_pd","_mm512_getexp_round_ps","_mm512_getmant_pd","_mm512_getmant_ps","_mm512_getmant_round_pd","_mm512_getmant_round_ps","_mm512_gf2p8affine_epi64_epi8","_mm512_gf2p8affineinv_epi64_epi8","_mm512_gf2p8mul_epi8","_mm512_i32gather_epi32","_mm512_i32gather_epi64","_mm512_i32gather_pd","_mm512_i32gather_ps","_mm512_i32scatter_epi32","_mm512_i32scatter_epi64","_mm512_i32scatter_pd","_mm512_i32scatter_ps","_mm512_i64gather_epi32","_mm512_i64gather_epi64","_mm512_i64gather_pd","_mm512_i64gather_ps","_mm512_i64scatter_epi32","_mm512_i64scatter_epi64","_mm512_i64scatter_pd","_mm512_i64scatter_ps","_mm512_insertf32x4","_mm512_insertf64x4","_mm512_inserti32x4","_mm512_inserti64x4","_mm512_int2mask","_mm512_kand","_mm512_kandn","_mm512_kmov","_mm512_knot","_mm512_kor","_mm512_kortestc","_mm512_kunpackb","_mm512_kxnor","_mm512_kxor","_mm512_load_epi32","_mm512_load_epi64","_mm512_load_pd","_mm512_load_ps","_mm512_load_si512","_mm512_loadu_epi16","_mm512_loadu_epi32","_mm512_loadu_epi64","_mm512_loadu_epi8","_mm512_loadu_pd","_mm512_loadu_ps","_mm512_loadu_si512","_mm512_lzcnt_epi32","_mm512_lzcnt_epi64","_mm512_madd52hi_epu64","_mm512_madd52lo_epu64","_mm512_madd_epi16","_mm512_maddubs_epi16","_mm512_mask2_permutex2var_epi16","_mm512_mask2_permutex2var_epi32","_mm512_mask2_permutex2var_epi64","_mm512_mask2_permutex2var_epi8","_mm512_mask2_permutex2var_pd","_mm512_mask2_permutex2var_ps","_mm512_mask2int","_mm512_mask3_fmadd_pd","_mm512_mask3_fmadd_ps","_mm512_mask3_fmadd_round_pd","_mm512_mask3_fmadd_round_ps","_mm512_mask3_fmaddsub_pd","_mm512_mask3_fmaddsub_ps","_mm512_mask3_fmaddsub_round_pd","_mm512_mask3_fmaddsub_round_ps","_mm512_mask3_fmsub_pd","_mm512_mask3_fmsub_ps","_mm512_mask3_fmsub_round_pd","_mm512_mask3_fmsub_round_ps","_mm512_mask3_fmsubadd_pd","_mm512_mask3_fmsubadd_ps","_mm512_mask3_fmsubadd_round_pd","_mm512_mask3_fmsubadd_round_ps","_mm512_mask3_fnmadd_pd","_mm512_mask3_fnmadd_ps","_mm512_mask3_fnmadd_round_pd","_mm512_mask3_fnmadd_round_ps","_mm512_mask3_fnmsub_pd","_mm512_mask3_fnmsub_ps","_mm512_mask3_fnmsub_round_pd","_mm512_mask3_fnmsub_round_ps","_mm512_mask_abs_epi16","_mm512_mask_abs_epi32","_mm512_mask_abs_epi64","_mm512_mask_abs_epi8","_mm512_mask_abs_pd","_mm512_mask_abs_ps","_mm512_mask_add_epi16","_mm512_mask_add_epi32","_mm512_mask_add_epi64","_mm512_mask_add_epi8","_mm512_mask_add_pd","_mm512_mask_add_ps","_mm512_mask_add_round_pd","_mm512_mask_add_round_ps","_mm512_mask_adds_epi16","_mm512_mask_adds_epi8","_mm512_mask_adds_epu16","_mm512_mask_adds_epu8","_mm512_mask_alignr_epi32","_mm512_mask_alignr_epi64","_mm512_mask_alignr_epi8","_mm512_mask_and_epi32","_mm512_mask_and_epi64","_mm512_mask_andnot_epi32","_mm512_mask_andnot_epi64","_mm512_mask_avg_epu16","_mm512_mask_avg_epu8","_mm512_mask_bitshuffle_epi64_mask","_mm512_mask_blend_epi16","_mm512_mask_blend_epi32","_mm512_mask_blend_epi64","_mm512_mask_blend_epi8","_mm512_mask_blend_pd","_mm512_mask_blend_ps","_mm512_mask_broadcast_f32x4","_mm512_mask_broadcast_f64x4","_mm512_mask_broadcast_i32x4","_mm512_mask_broadcast_i64x4","_mm512_mask_broadcastb_epi8","_mm512_mask_broadcastd_epi32","_mm512_mask_broadcastq_epi64","_mm512_mask_broadcastsd_pd","_mm512_mask_broadcastss_ps","_mm512_mask_broadcastw_epi16","_mm512_mask_cmp_epi16_mask","_mm512_mask_cmp_epi32_mask","_mm512_mask_cmp_epi64_mask","_mm512_mask_cmp_epi8_mask","_mm512_mask_cmp_epu16_mask","_mm512_mask_cmp_epu32_mask","_mm512_mask_cmp_epu64_mask","_mm512_mask_cmp_epu8_mask","_mm512_mask_cmp_pd_mask","_mm512_mask_cmp_ps_mask","_mm512_mask_cmp_round_pd_mask","_mm512_mask_cmp_round_ps_mask","_mm512_mask_cmpeq_epi16_mask","_mm512_mask_cmpeq_epi32_mask","_mm512_mask_cmpeq_epi64_mask","_mm512_mask_cmpeq_epi8_mask","_mm512_mask_cmpeq_epu16_mask","_mm512_mask_cmpeq_epu32_mask","_mm512_mask_cmpeq_epu64_mask","_mm512_mask_cmpeq_epu8_mask","_mm512_mask_cmpeq_pd_mask","_mm512_mask_cmpeq_ps_mask","_mm512_mask_cmpge_epi16_mask","_mm512_mask_cmpge_epi32_mask","_mm512_mask_cmpge_epi64_mask","_mm512_mask_cmpge_epi8_mask","_mm512_mask_cmpge_epu16_mask","_mm512_mask_cmpge_epu32_mask","_mm512_mask_cmpge_epu64_mask","_mm512_mask_cmpge_epu8_mask","_mm512_mask_cmpgt_epi16_mask","_mm512_mask_cmpgt_epi32_mask","_mm512_mask_cmpgt_epi64_mask","_mm512_mask_cmpgt_epi8_mask","_mm512_mask_cmpgt_epu16_mask","_mm512_mask_cmpgt_epu32_mask","_mm512_mask_cmpgt_epu64_mask","_mm512_mask_cmpgt_epu8_mask","_mm512_mask_cmple_epi16_mask","_mm512_mask_cmple_epi32_mask","_mm512_mask_cmple_epi64_mask","_mm512_mask_cmple_epi8_mask","_mm512_mask_cmple_epu16_mask","_mm512_mask_cmple_epu32_mask","_mm512_mask_cmple_epu64_mask","_mm512_mask_cmple_epu8_mask","_mm512_mask_cmple_pd_mask","_mm512_mask_cmple_ps_mask","_mm512_mask_cmplt_epi16_mask","_mm512_mask_cmplt_epi32_mask","_mm512_mask_cmplt_epi64_mask","_mm512_mask_cmplt_epi8_mask","_mm512_mask_cmplt_epu16_mask","_mm512_mask_cmplt_epu32_mask","_mm512_mask_cmplt_epu64_mask","_mm512_mask_cmplt_epu8_mask","_mm512_mask_cmplt_pd_mask","_mm512_mask_cmplt_ps_mask","_mm512_mask_cmpneq_epi16_mask","_mm512_mask_cmpneq_epi32_mask","_mm512_mask_cmpneq_epi64_mask","_mm512_mask_cmpneq_epi8_mask","_mm512_mask_cmpneq_epu16_mask","_mm512_mask_cmpneq_epu32_mask","_mm512_mask_cmpneq_epu64_mask","_mm512_mask_cmpneq_epu8_mask","_mm512_mask_cmpneq_pd_mask","_mm512_mask_cmpneq_ps_mask","_mm512_mask_cmpnle_pd_mask","_mm512_mask_cmpnle_ps_mask","_mm512_mask_cmpnlt_pd_mask","_mm512_mask_cmpnlt_ps_mask","_mm512_mask_cmpord_pd_mask","_mm512_mask_cmpord_ps_mask","_mm512_mask_cmpunord_pd_mask","_mm512_mask_cmpunord_ps_mask","_mm512_mask_compress_epi16","_mm512_mask_compress_epi32","_mm512_mask_compress_epi64","_mm512_mask_compress_epi8","_mm512_mask_compress_pd","_mm512_mask_compress_ps","_mm512_mask_compressstoreu_epi16","_mm512_mask_compressstoreu_epi32","_mm512_mask_compressstoreu_epi64","_mm512_mask_compressstoreu_epi8","_mm512_mask_compressstoreu_pd","_mm512_mask_compressstoreu_ps","_mm512_mask_conflict_epi32","_mm512_mask_conflict_epi64","_mm512_mask_cvt_roundepi32_ps","_mm512_mask_cvt_roundepu32_ps","_mm512_mask_cvt_roundpd_epi32","_mm512_mask_cvt_roundpd_epu32","_mm512_mask_cvt_roundpd_ps","_mm512_mask_cvt_roundph_ps","_mm512_mask_cvt_roundps_epi32","_mm512_mask_cvt_roundps_epu32","_mm512_mask_cvt_roundps_pd","_mm512_mask_cvt_roundps_ph","_mm512_mask_cvtepi16_epi32","_mm512_mask_cvtepi16_epi64","_mm512_mask_cvtepi16_epi8","_mm512_mask_cvtepi16_storeu_epi8","_mm512_mask_cvtepi32_epi16","_mm512_mask_cvtepi32_epi64","_mm512_mask_cvtepi32_epi8","_mm512_mask_cvtepi32_pd","_mm512_mask_cvtepi32_ps","_mm512_mask_cvtepi32_storeu_epi16","_mm512_mask_cvtepi32_storeu_epi8","_mm512_mask_cvtepi32lo_pd","_mm512_mask_cvtepi64_epi16","_mm512_mask_cvtepi64_epi32","_mm512_mask_cvtepi64_epi8","_mm512_mask_cvtepi64_storeu_epi16","_mm512_mask_cvtepi64_storeu_epi32","_mm512_mask_cvtepi64_storeu_epi8","_mm512_mask_cvtepi8_epi16","_mm512_mask_cvtepi8_epi32","_mm512_mask_cvtepi8_epi64","_mm512_mask_cvtepu16_epi32","_mm512_mask_cvtepu16_epi64","_mm512_mask_cvtepu32_epi64","_mm512_mask_cvtepu32_pd","_mm512_mask_cvtepu32_ps","_mm512_mask_cvtepu32lo_pd","_mm512_mask_cvtepu8_epi16","_mm512_mask_cvtepu8_epi32","_mm512_mask_cvtepu8_epi64","_mm512_mask_cvtne2ps_pbh","_mm512_mask_cvtneps_pbh","_mm512_mask_cvtpd_epi32","_mm512_mask_cvtpd_epu32","_mm512_mask_cvtpd_ps","_mm512_mask_cvtpd_pslo","_mm512_mask_cvtph_ps","_mm512_mask_cvtps_epi32","_mm512_mask_cvtps_epu32","_mm512_mask_cvtps_pd","_mm512_mask_cvtps_ph","_mm512_mask_cvtpslo_pd","_mm512_mask_cvtsepi16_epi8","_mm512_mask_cvtsepi16_storeu_epi8","_mm512_mask_cvtsepi32_epi16","_mm512_mask_cvtsepi32_epi8","_mm512_mask_cvtsepi32_storeu_epi16","_mm512_mask_cvtsepi32_storeu_epi8","_mm512_mask_cvtsepi64_epi16","_mm512_mask_cvtsepi64_epi32","_mm512_mask_cvtsepi64_epi8","_mm512_mask_cvtsepi64_storeu_epi16","_mm512_mask_cvtsepi64_storeu_epi32","_mm512_mask_cvtsepi64_storeu_epi8","_mm512_mask_cvtt_roundpd_epi32","_mm512_mask_cvtt_roundpd_epu32","_mm512_mask_cvtt_roundps_epi32","_mm512_mask_cvtt_roundps_epu32","_mm512_mask_cvttpd_epi32","_mm512_mask_cvttpd_epu32","_mm512_mask_cvttps_epi32","_mm512_mask_cvttps_epu32","_mm512_mask_cvtusepi16_epi8","_mm512_mask_cvtusepi16_storeu_epi8","_mm512_mask_cvtusepi32_epi16","_mm512_mask_cvtusepi32_epi8","_mm512_mask_cvtusepi32_storeu_epi16","_mm512_mask_cvtusepi32_storeu_epi8","_mm512_mask_cvtusepi64_epi16","_mm512_mask_cvtusepi64_epi32","_mm512_mask_cvtusepi64_epi8","_mm512_mask_cvtusepi64_storeu_epi16","_mm512_mask_cvtusepi64_storeu_epi32","_mm512_mask_cvtusepi64_storeu_epi8","_mm512_mask_dbsad_epu8","_mm512_mask_div_pd","_mm512_mask_div_ps","_mm512_mask_div_round_pd","_mm512_mask_div_round_ps","_mm512_mask_dpbf16_ps","_mm512_mask_dpbusd_epi32","_mm512_mask_dpbusds_epi32","_mm512_mask_dpwssd_epi32","_mm512_mask_dpwssds_epi32","_mm512_mask_expand_epi16","_mm512_mask_expand_epi32","_mm512_mask_expand_epi64","_mm512_mask_expand_epi8","_mm512_mask_expand_pd","_mm512_mask_expand_ps","_mm512_mask_expandloadu_epi16","_mm512_mask_expandloadu_epi32","_mm512_mask_expandloadu_epi64","_mm512_mask_expandloadu_epi8","_mm512_mask_expandloadu_pd","_mm512_mask_expandloadu_ps","_mm512_mask_extractf32x4_ps","_mm512_mask_extractf64x4_pd","_mm512_mask_extracti32x4_epi32","_mm512_mask_extracti64x4_epi64","_mm512_mask_fixupimm_pd","_mm512_mask_fixupimm_ps","_mm512_mask_fixupimm_round_pd","_mm512_mask_fixupimm_round_ps","_mm512_mask_fmadd_pd","_mm512_mask_fmadd_ps","_mm512_mask_fmadd_round_pd","_mm512_mask_fmadd_round_ps","_mm512_mask_fmaddsub_pd","_mm512_mask_fmaddsub_ps","_mm512_mask_fmaddsub_round_pd","_mm512_mask_fmaddsub_round_ps","_mm512_mask_fmsub_pd","_mm512_mask_fmsub_ps","_mm512_mask_fmsub_round_pd","_mm512_mask_fmsub_round_ps","_mm512_mask_fmsubadd_pd","_mm512_mask_fmsubadd_ps","_mm512_mask_fmsubadd_round_pd","_mm512_mask_fmsubadd_round_ps","_mm512_mask_fnmadd_pd","_mm512_mask_fnmadd_ps","_mm512_mask_fnmadd_round_pd","_mm512_mask_fnmadd_round_ps","_mm512_mask_fnmsub_pd","_mm512_mask_fnmsub_ps","_mm512_mask_fnmsub_round_pd","_mm512_mask_fnmsub_round_ps","_mm512_mask_getexp_pd","_mm512_mask_getexp_ps","_mm512_mask_getexp_round_pd","_mm512_mask_getexp_round_ps","_mm512_mask_getmant_pd","_mm512_mask_getmant_ps","_mm512_mask_getmant_round_pd","_mm512_mask_getmant_round_ps","_mm512_mask_gf2p8affine_epi64_epi8","_mm512_mask_gf2p8affineinv_epi64_epi8","_mm512_mask_gf2p8mul_epi8","_mm512_mask_i32gather_epi32","_mm512_mask_i32gather_epi64","_mm512_mask_i32gather_pd","_mm512_mask_i32gather_ps","_mm512_mask_i32scatter_epi32","_mm512_mask_i32scatter_epi64","_mm512_mask_i32scatter_pd","_mm512_mask_i32scatter_ps","_mm512_mask_i64gather_epi32","_mm512_mask_i64gather_epi64","_mm512_mask_i64gather_pd","_mm512_mask_i64gather_ps","_mm512_mask_i64scatter_epi32","_mm512_mask_i64scatter_epi64","_mm512_mask_i64scatter_pd","_mm512_mask_i64scatter_ps","_mm512_mask_insertf32x4","_mm512_mask_insertf64x4","_mm512_mask_inserti32x4","_mm512_mask_inserti64x4","_mm512_mask_load_epi32","_mm512_mask_load_epi64","_mm512_mask_load_pd","_mm512_mask_load_ps","_mm512_mask_loadu_epi16","_mm512_mask_loadu_epi32","_mm512_mask_loadu_epi64","_mm512_mask_loadu_epi8","_mm512_mask_loadu_pd","_mm512_mask_loadu_ps","_mm512_mask_lzcnt_epi32","_mm512_mask_lzcnt_epi64","_mm512_mask_madd_epi16","_mm512_mask_maddubs_epi16","_mm512_mask_max_epi16","_mm512_mask_max_epi32","_mm512_mask_max_epi64","_mm512_mask_max_epi8","_mm512_mask_max_epu16","_mm512_mask_max_epu32","_mm512_mask_max_epu64","_mm512_mask_max_epu8","_mm512_mask_max_pd","_mm512_mask_max_ps","_mm512_mask_max_round_pd","_mm512_mask_max_round_ps","_mm512_mask_min_epi16","_mm512_mask_min_epi32","_mm512_mask_min_epi64","_mm512_mask_min_epi8","_mm512_mask_min_epu16","_mm512_mask_min_epu32","_mm512_mask_min_epu64","_mm512_mask_min_epu8","_mm512_mask_min_pd","_mm512_mask_min_ps","_mm512_mask_min_round_pd","_mm512_mask_min_round_ps","_mm512_mask_mov_epi16","_mm512_mask_mov_epi32","_mm512_mask_mov_epi64","_mm512_mask_mov_epi8","_mm512_mask_mov_pd","_mm512_mask_mov_ps","_mm512_mask_movedup_pd","_mm512_mask_movehdup_ps","_mm512_mask_moveldup_ps","_mm512_mask_mul_epi32","_mm512_mask_mul_epu32","_mm512_mask_mul_pd","_mm512_mask_mul_ps","_mm512_mask_mul_round_pd","_mm512_mask_mul_round_ps","_mm512_mask_mulhi_epi16","_mm512_mask_mulhi_epu16","_mm512_mask_mulhrs_epi16","_mm512_mask_mullo_epi16","_mm512_mask_mullo_epi32","_mm512_mask_mullox_epi64","_mm512_mask_multishift_epi64_epi8","_mm512_mask_or_epi32","_mm512_mask_or_epi64","_mm512_mask_packs_epi16","_mm512_mask_packs_epi32","_mm512_mask_packus_epi16","_mm512_mask_packus_epi32","_mm512_mask_permute_pd","_mm512_mask_permute_ps","_mm512_mask_permutevar_epi32","_mm512_mask_permutevar_pd","_mm512_mask_permutevar_ps","_mm512_mask_permutex2var_epi16","_mm512_mask_permutex2var_epi32","_mm512_mask_permutex2var_epi64","_mm512_mask_permutex2var_epi8","_mm512_mask_permutex2var_pd","_mm512_mask_permutex2var_ps","_mm512_mask_permutex_epi64","_mm512_mask_permutex_pd","_mm512_mask_permutexvar_epi16","_mm512_mask_permutexvar_epi32","_mm512_mask_permutexvar_epi64","_mm512_mask_permutexvar_epi8","_mm512_mask_permutexvar_pd","_mm512_mask_permutexvar_ps","_mm512_mask_popcnt_epi16","_mm512_mask_popcnt_epi32","_mm512_mask_popcnt_epi64","_mm512_mask_popcnt_epi8","_mm512_mask_rcp14_pd","_mm512_mask_rcp14_ps","_mm512_mask_reduce_add_epi32","_mm512_mask_reduce_add_epi64","_mm512_mask_reduce_add_pd","_mm512_mask_reduce_add_ps","_mm512_mask_reduce_and_epi32","_mm512_mask_reduce_and_epi64","_mm512_mask_reduce_max_epi32","_mm512_mask_reduce_max_epi64","_mm512_mask_reduce_max_epu32","_mm512_mask_reduce_max_epu64","_mm512_mask_reduce_max_pd","_mm512_mask_reduce_max_ps","_mm512_mask_reduce_min_epi32","_mm512_mask_reduce_min_epi64","_mm512_mask_reduce_min_epu32","_mm512_mask_reduce_min_epu64","_mm512_mask_reduce_min_pd","_mm512_mask_reduce_min_ps","_mm512_mask_reduce_mul_epi32","_mm512_mask_reduce_mul_epi64","_mm512_mask_reduce_mul_pd","_mm512_mask_reduce_mul_ps","_mm512_mask_reduce_or_epi32","_mm512_mask_reduce_or_epi64","_mm512_mask_rol_epi32","_mm512_mask_rol_epi64","_mm512_mask_rolv_epi32","_mm512_mask_rolv_epi64","_mm512_mask_ror_epi32","_mm512_mask_ror_epi64","_mm512_mask_rorv_epi32","_mm512_mask_rorv_epi64","_mm512_mask_roundscale_pd","_mm512_mask_roundscale_ps","_mm512_mask_roundscale_round_pd","_mm512_mask_roundscale_round_ps","_mm512_mask_rsqrt14_pd","_mm512_mask_rsqrt14_ps","_mm512_mask_scalef_pd","_mm512_mask_scalef_ps","_mm512_mask_scalef_round_pd","_mm512_mask_scalef_round_ps","_mm512_mask_set1_epi16","_mm512_mask_set1_epi32","_mm512_mask_set1_epi64","_mm512_mask_set1_epi8","_mm512_mask_shldi_epi16","_mm512_mask_shldi_epi32","_mm512_mask_shldi_epi64","_mm512_mask_shldv_epi16","_mm512_mask_shldv_epi32","_mm512_mask_shldv_epi64","_mm512_mask_shrdi_epi16","_mm512_mask_shrdi_epi32","_mm512_mask_shrdi_epi64","_mm512_mask_shrdv_epi16","_mm512_mask_shrdv_epi32","_mm512_mask_shrdv_epi64","_mm512_mask_shuffle_epi32","_mm512_mask_shuffle_epi8","_mm512_mask_shuffle_f32x4","_mm512_mask_shuffle_f64x2","_mm512_mask_shuffle_i32x4","_mm512_mask_shuffle_i64x2","_mm512_mask_shuffle_pd","_mm512_mask_shuffle_ps","_mm512_mask_shufflehi_epi16","_mm512_mask_shufflelo_epi16","_mm512_mask_sll_epi16","_mm512_mask_sll_epi32","_mm512_mask_sll_epi64","_mm512_mask_slli_epi16","_mm512_mask_slli_epi32","_mm512_mask_slli_epi64","_mm512_mask_sllv_epi16","_mm512_mask_sllv_epi32","_mm512_mask_sllv_epi64","_mm512_mask_sqrt_pd","_mm512_mask_sqrt_ps","_mm512_mask_sqrt_round_pd","_mm512_mask_sqrt_round_ps","_mm512_mask_sra_epi16","_mm512_mask_sra_epi32","_mm512_mask_sra_epi64","_mm512_mask_srai_epi16","_mm512_mask_srai_epi32","_mm512_mask_srai_epi64","_mm512_mask_srav_epi16","_mm512_mask_srav_epi32","_mm512_mask_srav_epi64","_mm512_mask_srl_epi16","_mm512_mask_srl_epi32","_mm512_mask_srl_epi64","_mm512_mask_srli_epi16","_mm512_mask_srli_epi32","_mm512_mask_srli_epi64","_mm512_mask_srlv_epi16","_mm512_mask_srlv_epi32","_mm512_mask_srlv_epi64","_mm512_mask_store_epi32","_mm512_mask_store_epi64","_mm512_mask_store_pd","_mm512_mask_store_ps","_mm512_mask_storeu_epi16","_mm512_mask_storeu_epi32","_mm512_mask_storeu_epi64","_mm512_mask_storeu_epi8","_mm512_mask_storeu_pd","_mm512_mask_storeu_ps","_mm512_mask_sub_epi16","_mm512_mask_sub_epi32","_mm512_mask_sub_epi64","_mm512_mask_sub_epi8","_mm512_mask_sub_pd","_mm512_mask_sub_ps","_mm512_mask_sub_round_pd","_mm512_mask_sub_round_ps","_mm512_mask_subs_epi16","_mm512_mask_subs_epi8","_mm512_mask_subs_epu16","_mm512_mask_subs_epu8","_mm512_mask_ternarylogic_epi32","_mm512_mask_ternarylogic_epi64","_mm512_mask_test_epi16_mask","_mm512_mask_test_epi32_mask","_mm512_mask_test_epi64_mask","_mm512_mask_test_epi8_mask","_mm512_mask_testn_epi16_mask","_mm512_mask_testn_epi32_mask","_mm512_mask_testn_epi64_mask","_mm512_mask_testn_epi8_mask","_mm512_mask_unpackhi_epi16","_mm512_mask_unpackhi_epi32","_mm512_mask_unpackhi_epi64","_mm512_mask_unpackhi_epi8","_mm512_mask_unpackhi_pd","_mm512_mask_unpackhi_ps","_mm512_mask_unpacklo_epi16","_mm512_mask_unpacklo_epi32","_mm512_mask_unpacklo_epi64","_mm512_mask_unpacklo_epi8","_mm512_mask_unpacklo_pd","_mm512_mask_unpacklo_ps","_mm512_mask_xor_epi32","_mm512_mask_xor_epi64","_mm512_maskz_abs_epi16","_mm512_maskz_abs_epi32","_mm512_maskz_abs_epi64","_mm512_maskz_abs_epi8","_mm512_maskz_add_epi16","_mm512_maskz_add_epi32","_mm512_maskz_add_epi64","_mm512_maskz_add_epi8","_mm512_maskz_add_pd","_mm512_maskz_add_ps","_mm512_maskz_add_round_pd","_mm512_maskz_add_round_ps","_mm512_maskz_adds_epi16","_mm512_maskz_adds_epi8","_mm512_maskz_adds_epu16","_mm512_maskz_adds_epu8","_mm512_maskz_alignr_epi32","_mm512_maskz_alignr_epi64","_mm512_maskz_alignr_epi8","_mm512_maskz_and_epi32","_mm512_maskz_and_epi64","_mm512_maskz_andnot_epi32","_mm512_maskz_andnot_epi64","_mm512_maskz_avg_epu16","_mm512_maskz_avg_epu8","_mm512_maskz_broadcast_f32x4","_mm512_maskz_broadcast_f64x4","_mm512_maskz_broadcast_i32x4","_mm512_maskz_broadcast_i64x4","_mm512_maskz_broadcastb_epi8","_mm512_maskz_broadcastd_epi32","_mm512_maskz_broadcastq_epi64","_mm512_maskz_broadcastsd_pd","_mm512_maskz_broadcastss_ps","_mm512_maskz_broadcastw_epi16","_mm512_maskz_compress_epi16","_mm512_maskz_compress_epi32","_mm512_maskz_compress_epi64","_mm512_maskz_compress_epi8","_mm512_maskz_compress_pd","_mm512_maskz_compress_ps","_mm512_maskz_conflict_epi32","_mm512_maskz_conflict_epi64","_mm512_maskz_cvt_roundepi32_ps","_mm512_maskz_cvt_roundepu32_ps","_mm512_maskz_cvt_roundpd_epi32","_mm512_maskz_cvt_roundpd_epu32","_mm512_maskz_cvt_roundpd_ps","_mm512_maskz_cvt_roundph_ps","_mm512_maskz_cvt_roundps_epi32","_mm512_maskz_cvt_roundps_epu32","_mm512_maskz_cvt_roundps_pd","_mm512_maskz_cvt_roundps_ph","_mm512_maskz_cvtepi16_epi32","_mm512_maskz_cvtepi16_epi64","_mm512_maskz_cvtepi16_epi8","_mm512_maskz_cvtepi32_epi16","_mm512_maskz_cvtepi32_epi64","_mm512_maskz_cvtepi32_epi8","_mm512_maskz_cvtepi32_pd","_mm512_maskz_cvtepi32_ps","_mm512_maskz_cvtepi64_epi16","_mm512_maskz_cvtepi64_epi32","_mm512_maskz_cvtepi64_epi8","_mm512_maskz_cvtepi8_epi16","_mm512_maskz_cvtepi8_epi32","_mm512_maskz_cvtepi8_epi64","_mm512_maskz_cvtepu16_epi32","_mm512_maskz_cvtepu16_epi64","_mm512_maskz_cvtepu32_epi64","_mm512_maskz_cvtepu32_pd","_mm512_maskz_cvtepu32_ps","_mm512_maskz_cvtepu8_epi16","_mm512_maskz_cvtepu8_epi32","_mm512_maskz_cvtepu8_epi64","_mm512_maskz_cvtne2ps_pbh","_mm512_maskz_cvtneps_pbh","_mm512_maskz_cvtpd_epi32","_mm512_maskz_cvtpd_epu32","_mm512_maskz_cvtpd_ps","_mm512_maskz_cvtph_ps","_mm512_maskz_cvtps_epi32","_mm512_maskz_cvtps_epu32","_mm512_maskz_cvtps_pd","_mm512_maskz_cvtps_ph","_mm512_maskz_cvtsepi16_epi8","_mm512_maskz_cvtsepi32_epi16","_mm512_maskz_cvtsepi32_epi8","_mm512_maskz_cvtsepi64_epi16","_mm512_maskz_cvtsepi64_epi32","_mm512_maskz_cvtsepi64_epi8","_mm512_maskz_cvtt_roundpd_epi32","_mm512_maskz_cvtt_roundpd_epu32","_mm512_maskz_cvtt_roundps_epi32","_mm512_maskz_cvtt_roundps_epu32","_mm512_maskz_cvttpd_epi32","_mm512_maskz_cvttpd_epu32","_mm512_maskz_cvttps_epi32","_mm512_maskz_cvttps_epu32","_mm512_maskz_cvtusepi16_epi8","_mm512_maskz_cvtusepi32_epi16","_mm512_maskz_cvtusepi32_epi8","_mm512_maskz_cvtusepi64_epi16","_mm512_maskz_cvtusepi64_epi32","_mm512_maskz_cvtusepi64_epi8","_mm512_maskz_dbsad_epu8","_mm512_maskz_div_pd","_mm512_maskz_div_ps","_mm512_maskz_div_round_pd","_mm512_maskz_div_round_ps","_mm512_maskz_dpbf16_ps","_mm512_maskz_dpbusd_epi32","_mm512_maskz_dpbusds_epi32","_mm512_maskz_dpwssd_epi32","_mm512_maskz_dpwssds_epi32","_mm512_maskz_expand_epi16","_mm512_maskz_expand_epi32","_mm512_maskz_expand_epi64","_mm512_maskz_expand_epi8","_mm512_maskz_expand_pd","_mm512_maskz_expand_ps","_mm512_maskz_expandloadu_epi16","_mm512_maskz_expandloadu_epi32","_mm512_maskz_expandloadu_epi64","_mm512_maskz_expandloadu_epi8","_mm512_maskz_expandloadu_pd","_mm512_maskz_expandloadu_ps","_mm512_maskz_extractf32x4_ps","_mm512_maskz_extractf64x4_pd","_mm512_maskz_extracti32x4_epi32","_mm512_maskz_extracti64x4_epi64","_mm512_maskz_fixupimm_pd","_mm512_maskz_fixupimm_ps","_mm512_maskz_fixupimm_round_pd","_mm512_maskz_fixupimm_round_ps","_mm512_maskz_fmadd_pd","_mm512_maskz_fmadd_ps","_mm512_maskz_fmadd_round_pd","_mm512_maskz_fmadd_round_ps","_mm512_maskz_fmaddsub_pd","_mm512_maskz_fmaddsub_ps","_mm512_maskz_fmaddsub_round_pd","_mm512_maskz_fmaddsub_round_ps","_mm512_maskz_fmsub_pd","_mm512_maskz_fmsub_ps","_mm512_maskz_fmsub_round_pd","_mm512_maskz_fmsub_round_ps","_mm512_maskz_fmsubadd_pd","_mm512_maskz_fmsubadd_ps","_mm512_maskz_fmsubadd_round_pd","_mm512_maskz_fmsubadd_round_ps","_mm512_maskz_fnmadd_pd","_mm512_maskz_fnmadd_ps","_mm512_maskz_fnmadd_round_pd","_mm512_maskz_fnmadd_round_ps","_mm512_maskz_fnmsub_pd","_mm512_maskz_fnmsub_ps","_mm512_maskz_fnmsub_round_pd","_mm512_maskz_fnmsub_round_ps","_mm512_maskz_getexp_pd","_mm512_maskz_getexp_ps","_mm512_maskz_getexp_round_pd","_mm512_maskz_getexp_round_ps","_mm512_maskz_getmant_pd","_mm512_maskz_getmant_ps","_mm512_maskz_getmant_round_pd","_mm512_maskz_getmant_round_ps","_mm512_maskz_gf2p8affine_epi64_epi8","_mm512_maskz_gf2p8affineinv_epi64_epi8","_mm512_maskz_gf2p8mul_epi8","_mm512_maskz_insertf32x4","_mm512_maskz_insertf64x4","_mm512_maskz_inserti32x4","_mm512_maskz_inserti64x4","_mm512_maskz_load_epi32","_mm512_maskz_load_epi64","_mm512_maskz_load_pd","_mm512_maskz_load_ps","_mm512_maskz_loadu_epi16","_mm512_maskz_loadu_epi32","_mm512_maskz_loadu_epi64","_mm512_maskz_loadu_epi8","_mm512_maskz_loadu_pd","_mm512_maskz_loadu_ps","_mm512_maskz_lzcnt_epi32","_mm512_maskz_lzcnt_epi64","_mm512_maskz_madd_epi16","_mm512_maskz_maddubs_epi16","_mm512_maskz_max_epi16","_mm512_maskz_max_epi32","_mm512_maskz_max_epi64","_mm512_maskz_max_epi8","_mm512_maskz_max_epu16","_mm512_maskz_max_epu32","_mm512_maskz_max_epu64","_mm512_maskz_max_epu8","_mm512_maskz_max_pd","_mm512_maskz_max_ps","_mm512_maskz_max_round_pd","_mm512_maskz_max_round_ps","_mm512_maskz_min_epi16","_mm512_maskz_min_epi32","_mm512_maskz_min_epi64","_mm512_maskz_min_epi8","_mm512_maskz_min_epu16","_mm512_maskz_min_epu32","_mm512_maskz_min_epu64","_mm512_maskz_min_epu8","_mm512_maskz_min_pd","_mm512_maskz_min_ps","_mm512_maskz_min_round_pd","_mm512_maskz_min_round_ps","_mm512_maskz_mov_epi16","_mm512_maskz_mov_epi32","_mm512_maskz_mov_epi64","_mm512_maskz_mov_epi8","_mm512_maskz_mov_pd","_mm512_maskz_mov_ps","_mm512_maskz_movedup_pd","_mm512_maskz_movehdup_ps","_mm512_maskz_moveldup_ps","_mm512_maskz_mul_epi32","_mm512_maskz_mul_epu32","_mm512_maskz_mul_pd","_mm512_maskz_mul_ps","_mm512_maskz_mul_round_pd","_mm512_maskz_mul_round_ps","_mm512_maskz_mulhi_epi16","_mm512_maskz_mulhi_epu16","_mm512_maskz_mulhrs_epi16","_mm512_maskz_mullo_epi16","_mm512_maskz_mullo_epi32","_mm512_maskz_multishift_epi64_epi8","_mm512_maskz_or_epi32","_mm512_maskz_or_epi64","_mm512_maskz_packs_epi16","_mm512_maskz_packs_epi32","_mm512_maskz_packus_epi16","_mm512_maskz_packus_epi32","_mm512_maskz_permute_pd","_mm512_maskz_permute_ps","_mm512_maskz_permutevar_pd","_mm512_maskz_permutevar_ps","_mm512_maskz_permutex2var_epi16","_mm512_maskz_permutex2var_epi32","_mm512_maskz_permutex2var_epi64","_mm512_maskz_permutex2var_epi8","_mm512_maskz_permutex2var_pd","_mm512_maskz_permutex2var_ps","_mm512_maskz_permutex_epi64","_mm512_maskz_permutex_pd","_mm512_maskz_permutexvar_epi16","_mm512_maskz_permutexvar_epi32","_mm512_maskz_permutexvar_epi64","_mm512_maskz_permutexvar_epi8","_mm512_maskz_permutexvar_pd","_mm512_maskz_permutexvar_ps","_mm512_maskz_popcnt_epi16","_mm512_maskz_popcnt_epi32","_mm512_maskz_popcnt_epi64","_mm512_maskz_popcnt_epi8","_mm512_maskz_rcp14_pd","_mm512_maskz_rcp14_ps","_mm512_maskz_rol_epi32","_mm512_maskz_rol_epi64","_mm512_maskz_rolv_epi32","_mm512_maskz_rolv_epi64","_mm512_maskz_ror_epi32","_mm512_maskz_ror_epi64","_mm512_maskz_rorv_epi32","_mm512_maskz_rorv_epi64","_mm512_maskz_roundscale_pd","_mm512_maskz_roundscale_ps","_mm512_maskz_roundscale_round_pd","_mm512_maskz_roundscale_round_ps","_mm512_maskz_rsqrt14_pd","_mm512_maskz_rsqrt14_ps","_mm512_maskz_scalef_pd","_mm512_maskz_scalef_ps","_mm512_maskz_scalef_round_pd","_mm512_maskz_scalef_round_ps","_mm512_maskz_set1_epi16","_mm512_maskz_set1_epi32","_mm512_maskz_set1_epi64","_mm512_maskz_set1_epi8","_mm512_maskz_shldi_epi16","_mm512_maskz_shldi_epi32","_mm512_maskz_shldi_epi64","_mm512_maskz_shldv_epi16","_mm512_maskz_shldv_epi32","_mm512_maskz_shldv_epi64","_mm512_maskz_shrdi_epi16","_mm512_maskz_shrdi_epi32","_mm512_maskz_shrdi_epi64","_mm512_maskz_shrdv_epi16","_mm512_maskz_shrdv_epi32","_mm512_maskz_shrdv_epi64","_mm512_maskz_shuffle_epi32","_mm512_maskz_shuffle_epi8","_mm512_maskz_shuffle_f32x4","_mm512_maskz_shuffle_f64x2","_mm512_maskz_shuffle_i32x4","_mm512_maskz_shuffle_i64x2","_mm512_maskz_shuffle_pd","_mm512_maskz_shuffle_ps","_mm512_maskz_shufflehi_epi16","_mm512_maskz_shufflelo_epi16","_mm512_maskz_sll_epi16","_mm512_maskz_sll_epi32","_mm512_maskz_sll_epi64","_mm512_maskz_slli_epi16","_mm512_maskz_slli_epi32","_mm512_maskz_slli_epi64","_mm512_maskz_sllv_epi16","_mm512_maskz_sllv_epi32","_mm512_maskz_sllv_epi64","_mm512_maskz_sqrt_pd","_mm512_maskz_sqrt_ps","_mm512_maskz_sqrt_round_pd","_mm512_maskz_sqrt_round_ps","_mm512_maskz_sra_epi16","_mm512_maskz_sra_epi32","_mm512_maskz_sra_epi64","_mm512_maskz_srai_epi16","_mm512_maskz_srai_epi32","_mm512_maskz_srai_epi64","_mm512_maskz_srav_epi16","_mm512_maskz_srav_epi32","_mm512_maskz_srav_epi64","_mm512_maskz_srl_epi16","_mm512_maskz_srl_epi32","_mm512_maskz_srl_epi64","_mm512_maskz_srli_epi16","_mm512_maskz_srli_epi32","_mm512_maskz_srli_epi64","_mm512_maskz_srlv_epi16","_mm512_maskz_srlv_epi32","_mm512_maskz_srlv_epi64","_mm512_maskz_sub_epi16","_mm512_maskz_sub_epi32","_mm512_maskz_sub_epi64","_mm512_maskz_sub_epi8","_mm512_maskz_sub_pd","_mm512_maskz_sub_ps","_mm512_maskz_sub_round_pd","_mm512_maskz_sub_round_ps","_mm512_maskz_subs_epi16","_mm512_maskz_subs_epi8","_mm512_maskz_subs_epu16","_mm512_maskz_subs_epu8","_mm512_maskz_ternarylogic_epi32","_mm512_maskz_ternarylogic_epi64","_mm512_maskz_unpackhi_epi16","_mm512_maskz_unpackhi_epi32","_mm512_maskz_unpackhi_epi64","_mm512_maskz_unpackhi_epi8","_mm512_maskz_unpackhi_pd","_mm512_maskz_unpackhi_ps","_mm512_maskz_unpacklo_epi16","_mm512_maskz_unpacklo_epi32","_mm512_maskz_unpacklo_epi64","_mm512_maskz_unpacklo_epi8","_mm512_maskz_unpacklo_pd","_mm512_maskz_unpacklo_ps","_mm512_maskz_xor_epi32","_mm512_maskz_xor_epi64","_mm512_max_epi16","_mm512_max_epi32","_mm512_max_epi64","_mm512_max_epi8","_mm512_max_epu16","_mm512_max_epu32","_mm512_max_epu64","_mm512_max_epu8","_mm512_max_pd","_mm512_max_ps","_mm512_max_round_pd","_mm512_max_round_ps","_mm512_min_epi16","_mm512_min_epi32","_mm512_min_epi64","_mm512_min_epi8","_mm512_min_epu16","_mm512_min_epu32","_mm512_min_epu64","_mm512_min_epu8","_mm512_min_pd","_mm512_min_ps","_mm512_min_round_pd","_mm512_min_round_ps","_mm512_movedup_pd","_mm512_movehdup_ps","_mm512_moveldup_ps","_mm512_movepi16_mask","_mm512_movepi8_mask","_mm512_movm_epi16","_mm512_movm_epi8","_mm512_mul_epi32","_mm512_mul_epu32","_mm512_mul_pd","_mm512_mul_ps","_mm512_mul_round_pd","_mm512_mul_round_ps","_mm512_mulhi_epi16","_mm512_mulhi_epu16","_mm512_mulhrs_epi16","_mm512_mullo_epi16","_mm512_mullo_epi32","_mm512_mullox_epi64","_mm512_multishift_epi64_epi8","_mm512_or_epi32","_mm512_or_epi64","_mm512_or_si512","_mm512_packs_epi16","_mm512_packs_epi32","_mm512_packus_epi16","_mm512_packus_epi32","_mm512_permute_pd","_mm512_permute_ps","_mm512_permutevar_epi32","_mm512_permutevar_pd","_mm512_permutevar_ps","_mm512_permutex2var_epi16","_mm512_permutex2var_epi32","_mm512_permutex2var_epi64","_mm512_permutex2var_epi8","_mm512_permutex2var_pd","_mm512_permutex2var_ps","_mm512_permutex_epi64","_mm512_permutex_pd","_mm512_permutexvar_epi16","_mm512_permutexvar_epi32","_mm512_permutexvar_epi64","_mm512_permutexvar_epi8","_mm512_permutexvar_pd","_mm512_permutexvar_ps","_mm512_popcnt_epi16","_mm512_popcnt_epi32","_mm512_popcnt_epi64","_mm512_popcnt_epi8","_mm512_rcp14_pd","_mm512_rcp14_ps","_mm512_reduce_add_epi32","_mm512_reduce_add_epi64","_mm512_reduce_add_pd","_mm512_reduce_add_ps","_mm512_reduce_and_epi32","_mm512_reduce_and_epi64","_mm512_reduce_max_epi32","_mm512_reduce_max_epi64","_mm512_reduce_max_epu32","_mm512_reduce_max_epu64","_mm512_reduce_max_pd","_mm512_reduce_max_ps","_mm512_reduce_min_epi32","_mm512_reduce_min_epi64","_mm512_reduce_min_epu32","_mm512_reduce_min_epu64","_mm512_reduce_min_pd","_mm512_reduce_min_ps","_mm512_reduce_mul_epi32","_mm512_reduce_mul_epi64","_mm512_reduce_mul_pd","_mm512_reduce_mul_ps","_mm512_reduce_or_epi32","_mm512_reduce_or_epi64","_mm512_rol_epi32","_mm512_rol_epi64","_mm512_rolv_epi32","_mm512_rolv_epi64","_mm512_ror_epi32","_mm512_ror_epi64","_mm512_rorv_epi32","_mm512_rorv_epi64","_mm512_roundscale_pd","_mm512_roundscale_ps","_mm512_roundscale_round_pd","_mm512_roundscale_round_ps","_mm512_rsqrt14_pd","_mm512_rsqrt14_ps","_mm512_sad_epu8","_mm512_scalef_pd","_mm512_scalef_ps","_mm512_scalef_round_pd","_mm512_scalef_round_ps","_mm512_set1_epi16","_mm512_set1_epi32","_mm512_set1_epi64","_mm512_set1_epi8","_mm512_set1_pd","_mm512_set1_ps","_mm512_set4_epi32","_mm512_set4_epi64","_mm512_set4_pd","_mm512_set4_ps","_mm512_set_epi16","_mm512_set_epi32","_mm512_set_epi64","_mm512_set_epi8","_mm512_set_pd","_mm512_set_ps","_mm512_setr4_epi32","_mm512_setr4_epi64","_mm512_setr4_pd","_mm512_setr4_ps","_mm512_setr_epi32","_mm512_setr_epi64","_mm512_setr_pd","_mm512_setr_ps","_mm512_setzero","_mm512_setzero_epi32","_mm512_setzero_pd","_mm512_setzero_ps","_mm512_setzero_si512","_mm512_shldi_epi16","_mm512_shldi_epi32","_mm512_shldi_epi64","_mm512_shldv_epi16","_mm512_shldv_epi32","_mm512_shldv_epi64","_mm512_shrdi_epi16","_mm512_shrdi_epi32","_mm512_shrdi_epi64","_mm512_shrdv_epi16","_mm512_shrdv_epi32","_mm512_shrdv_epi64","_mm512_shuffle_epi32","_mm512_shuffle_epi8","_mm512_shuffle_f32x4","_mm512_shuffle_f64x2","_mm512_shuffle_i32x4","_mm512_shuffle_i64x2","_mm512_shuffle_pd","_mm512_shuffle_ps","_mm512_shufflehi_epi16","_mm512_shufflelo_epi16","_mm512_sll_epi16","_mm512_sll_epi32","_mm512_sll_epi64","_mm512_slli_epi16","_mm512_slli_epi32","_mm512_slli_epi64","_mm512_sllv_epi16","_mm512_sllv_epi32","_mm512_sllv_epi64","_mm512_sqrt_pd","_mm512_sqrt_ps","_mm512_sqrt_round_pd","_mm512_sqrt_round_ps","_mm512_sra_epi16","_mm512_sra_epi32","_mm512_sra_epi64","_mm512_srai_epi16","_mm512_srai_epi32","_mm512_srai_epi64","_mm512_srav_epi16","_mm512_srav_epi32","_mm512_srav_epi64","_mm512_srl_epi16","_mm512_srl_epi32","_mm512_srl_epi64","_mm512_srli_epi16","_mm512_srli_epi32","_mm512_srli_epi64","_mm512_srlv_epi16","_mm512_srlv_epi32","_mm512_srlv_epi64","_mm512_store_epi32","_mm512_store_epi64","_mm512_store_pd","_mm512_store_ps","_mm512_store_si512","_mm512_storeu_epi16","_mm512_storeu_epi32","_mm512_storeu_epi64","_mm512_storeu_epi8","_mm512_storeu_pd","_mm512_storeu_ps","_mm512_storeu_si512","_mm512_stream_pd","_mm512_stream_ps","_mm512_stream_si512","_mm512_sub_epi16","_mm512_sub_epi32","_mm512_sub_epi64","_mm512_sub_epi8","_mm512_sub_pd","_mm512_sub_ps","_mm512_sub_round_pd","_mm512_sub_round_ps","_mm512_subs_epi16","_mm512_subs_epi8","_mm512_subs_epu16","_mm512_subs_epu8","_mm512_ternarylogic_epi32","_mm512_ternarylogic_epi64","_mm512_test_epi16_mask","_mm512_test_epi32_mask","_mm512_test_epi64_mask","_mm512_test_epi8_mask","_mm512_testn_epi16_mask","_mm512_testn_epi32_mask","_mm512_testn_epi64_mask","_mm512_testn_epi8_mask","_mm512_undefined","_mm512_undefined_epi32","_mm512_undefined_pd","_mm512_undefined_ps","_mm512_unpackhi_epi16","_mm512_unpackhi_epi32","_mm512_unpackhi_epi64","_mm512_unpackhi_epi8","_mm512_unpackhi_pd","_mm512_unpackhi_ps","_mm512_unpacklo_epi16","_mm512_unpacklo_epi32","_mm512_unpacklo_epi64","_mm512_unpacklo_epi8","_mm512_unpacklo_pd","_mm512_unpacklo_ps","_mm512_xor_epi32","_mm512_xor_epi64","_mm512_xor_si512","_mm512_zextpd128_pd512","_mm512_zextpd256_pd512","_mm512_zextps128_ps512","_mm512_zextps256_ps512","_mm512_zextsi128_si512","_mm512_zextsi256_si512","_mm_abs_epi16","_mm_abs_epi32","_mm_abs_epi8","_mm_add_epi16","_mm_add_epi32","_mm_add_epi64","_mm_add_epi8","_mm_add_pd","_mm_add_ps","_mm_add_round_sd","_mm_add_round_ss","_mm_add_sd","_mm_add_ss","_mm_adds_epi16","_mm_adds_epi8","_mm_adds_epu16","_mm_adds_epu8","_mm_addsub_pd","_mm_addsub_ps","_mm_aesdec_si128","_mm_aesdeclast_si128","_mm_aesenc_si128","_mm_aesenclast_si128","_mm_aesimc_si128","_mm_aeskeygenassist_si128","_mm_alignr_epi32","_mm_alignr_epi64","_mm_alignr_epi8","_mm_and_pd","_mm_and_ps","_mm_and_si128","_mm_andnot_pd","_mm_andnot_ps","_mm_andnot_si128","_mm_avg_epu16","_mm_avg_epu8","_mm_bitshuffle_epi64_mask","_mm_blend_epi16","_mm_blend_epi32","_mm_blend_pd","_mm_blend_ps","_mm_blendv_epi8","_mm_blendv_pd","_mm_blendv_ps","_mm_broadcast_ss","_mm_broadcastb_epi8","_mm_broadcastd_epi32","_mm_broadcastmb_epi64","_mm_broadcastmw_epi32","_mm_broadcastq_epi64","_mm_broadcastsd_pd","_mm_broadcastss_ps","_mm_broadcastw_epi16","_mm_bslli_si128","_mm_bsrli_si128","_mm_castpd_ps","_mm_castpd_si128","_mm_castps_pd","_mm_castps_si128","_mm_castsi128_pd","_mm_castsi128_ps","_mm_ceil_pd","_mm_ceil_ps","_mm_ceil_sd","_mm_ceil_ss","_mm_clflush","_mm_clmulepi64_si128","_mm_cmp_epi16_mask","_mm_cmp_epi32_mask","_mm_cmp_epi64_mask","_mm_cmp_epi8_mask","_mm_cmp_epu16_mask","_mm_cmp_epu32_mask","_mm_cmp_epu64_mask","_mm_cmp_epu8_mask","_mm_cmp_pd","_mm_cmp_pd_mask","_mm_cmp_ps","_mm_cmp_ps_mask","_mm_cmp_round_sd_mask","_mm_cmp_round_ss_mask","_mm_cmp_sd","_mm_cmp_sd_mask","_mm_cmp_ss","_mm_cmp_ss_mask","_mm_cmpeq_epi16","_mm_cmpeq_epi16_mask","_mm_cmpeq_epi32","_mm_cmpeq_epi32_mask","_mm_cmpeq_epi64","_mm_cmpeq_epi64_mask","_mm_cmpeq_epi8","_mm_cmpeq_epi8_mask","_mm_cmpeq_epu16_mask","_mm_cmpeq_epu32_mask","_mm_cmpeq_epu64_mask","_mm_cmpeq_epu8_mask","_mm_cmpeq_pd","_mm_cmpeq_ps","_mm_cmpeq_sd","_mm_cmpeq_ss","_mm_cmpestra","_mm_cmpestrc","_mm_cmpestri","_mm_cmpestrm","_mm_cmpestro","_mm_cmpestrs","_mm_cmpestrz","_mm_cmpge_epi16_mask","_mm_cmpge_epi32_mask","_mm_cmpge_epi64_mask","_mm_cmpge_epi8_mask","_mm_cmpge_epu16_mask","_mm_cmpge_epu32_mask","_mm_cmpge_epu64_mask","_mm_cmpge_epu8_mask","_mm_cmpge_pd","_mm_cmpge_ps","_mm_cmpge_sd","_mm_cmpge_ss","_mm_cmpgt_epi16","_mm_cmpgt_epi16_mask","_mm_cmpgt_epi32","_mm_cmpgt_epi32_mask","_mm_cmpgt_epi64","_mm_cmpgt_epi64_mask","_mm_cmpgt_epi8","_mm_cmpgt_epi8_mask","_mm_cmpgt_epu16_mask","_mm_cmpgt_epu32_mask","_mm_cmpgt_epu64_mask","_mm_cmpgt_epu8_mask","_mm_cmpgt_pd","_mm_cmpgt_ps","_mm_cmpgt_sd","_mm_cmpgt_ss","_mm_cmpistra","_mm_cmpistrc","_mm_cmpistri","_mm_cmpistrm","_mm_cmpistro","_mm_cmpistrs","_mm_cmpistrz","_mm_cmple_epi16_mask","_mm_cmple_epi32_mask","_mm_cmple_epi64_mask","_mm_cmple_epi8_mask","_mm_cmple_epu16_mask","_mm_cmple_epu32_mask","_mm_cmple_epu64_mask","_mm_cmple_epu8_mask","_mm_cmple_pd","_mm_cmple_ps","_mm_cmple_sd","_mm_cmple_ss","_mm_cmplt_epi16","_mm_cmplt_epi16_mask","_mm_cmplt_epi32","_mm_cmplt_epi32_mask","_mm_cmplt_epi64_mask","_mm_cmplt_epi8","_mm_cmplt_epi8_mask","_mm_cmplt_epu16_mask","_mm_cmplt_epu32_mask","_mm_cmplt_epu64_mask","_mm_cmplt_epu8_mask","_mm_cmplt_pd","_mm_cmplt_ps","_mm_cmplt_sd","_mm_cmplt_ss","_mm_cmpneq_epi16_mask","_mm_cmpneq_epi32_mask","_mm_cmpneq_epi64_mask","_mm_cmpneq_epi8_mask","_mm_cmpneq_epu16_mask","_mm_cmpneq_epu32_mask","_mm_cmpneq_epu64_mask","_mm_cmpneq_epu8_mask","_mm_cmpneq_pd","_mm_cmpneq_ps","_mm_cmpneq_sd","_mm_cmpneq_ss","_mm_cmpnge_pd","_mm_cmpnge_ps","_mm_cmpnge_sd","_mm_cmpnge_ss","_mm_cmpngt_pd","_mm_cmpngt_ps","_mm_cmpngt_sd","_mm_cmpngt_ss","_mm_cmpnle_pd","_mm_cmpnle_ps","_mm_cmpnle_sd","_mm_cmpnle_ss","_mm_cmpnlt_pd","_mm_cmpnlt_ps","_mm_cmpnlt_sd","_mm_cmpnlt_ss","_mm_cmpord_pd","_mm_cmpord_ps","_mm_cmpord_sd","_mm_cmpord_ss","_mm_cmpunord_pd","_mm_cmpunord_ps","_mm_cmpunord_sd","_mm_cmpunord_ss","_mm_comi_round_sd","_mm_comi_round_ss","_mm_comieq_sd","_mm_comieq_ss","_mm_comige_sd","_mm_comige_ss","_mm_comigt_sd","_mm_comigt_ss","_mm_comile_sd","_mm_comile_ss","_mm_comilt_sd","_mm_comilt_ss","_mm_comineq_sd","_mm_comineq_ss","_mm_conflict_epi32","_mm_conflict_epi64","_mm_crc32_u16","_mm_crc32_u32","_mm_crc32_u64","_mm_crc32_u8","_mm_cvt_roundi32_ss","_mm_cvt_roundi64_sd","_mm_cvt_roundi64_ss","_mm_cvt_roundsd_i32","_mm_cvt_roundsd_i64","_mm_cvt_roundsd_si32","_mm_cvt_roundsd_si64","_mm_cvt_roundsd_ss","_mm_cvt_roundsd_u32","_mm_cvt_roundsd_u64","_mm_cvt_roundsi32_ss","_mm_cvt_roundsi64_sd","_mm_cvt_roundsi64_ss","_mm_cvt_roundss_i32","_mm_cvt_roundss_i64","_mm_cvt_roundss_sd","_mm_cvt_roundss_si32","_mm_cvt_roundss_si64","_mm_cvt_roundss_u32","_mm_cvt_roundss_u64","_mm_cvt_roundu32_ss","_mm_cvt_roundu64_sd","_mm_cvt_roundu64_ss","_mm_cvt_si2ss","_mm_cvt_ss2si","_mm_cvtepi16_epi32","_mm_cvtepi16_epi64","_mm_cvtepi16_epi8","_mm_cvtepi32_epi16","_mm_cvtepi32_epi64","_mm_cvtepi32_epi8","_mm_cvtepi32_pd","_mm_cvtepi32_ps","_mm_cvtepi64_epi16","_mm_cvtepi64_epi32","_mm_cvtepi64_epi8","_mm_cvtepi8_epi16","_mm_cvtepi8_epi32","_mm_cvtepi8_epi64","_mm_cvtepu16_epi32","_mm_cvtepu16_epi64","_mm_cvtepu32_epi64","_mm_cvtepu32_pd","_mm_cvtepu8_epi16","_mm_cvtepu8_epi32","_mm_cvtepu8_epi64","_mm_cvti32_sd","_mm_cvti32_ss","_mm_cvti64_sd","_mm_cvti64_ss","_mm_cvtne2ps_pbh","_mm_cvtpd_epi32","_mm_cvtpd_epu32","_mm_cvtpd_ps","_mm_cvtph_ps","_mm_cvtps_epi32","_mm_cvtps_epu32","_mm_cvtps_pd","_mm_cvtps_ph","_mm_cvtsd_f64","_mm_cvtsd_i32","_mm_cvtsd_i64","_mm_cvtsd_si32","_mm_cvtsd_si64","_mm_cvtsd_si64x","_mm_cvtsd_ss","_mm_cvtsd_u32","_mm_cvtsd_u64","_mm_cvtsepi16_epi8","_mm_cvtsepi32_epi16","_mm_cvtsepi32_epi8","_mm_cvtsepi64_epi16","_mm_cvtsepi64_epi32","_mm_cvtsepi64_epi8","_mm_cvtsi128_si32","_mm_cvtsi128_si64","_mm_cvtsi128_si64x","_mm_cvtsi32_sd","_mm_cvtsi32_si128","_mm_cvtsi32_ss","_mm_cvtsi64_sd","_mm_cvtsi64_si128","_mm_cvtsi64_ss","_mm_cvtsi64x_sd","_mm_cvtsi64x_si128","_mm_cvtss_f32","_mm_cvtss_i32","_mm_cvtss_i64","_mm_cvtss_sd","_mm_cvtss_si32","_mm_cvtss_si64","_mm_cvtss_u32","_mm_cvtss_u64","_mm_cvtt_roundsd_i32","_mm_cvtt_roundsd_i64","_mm_cvtt_roundsd_si32","_mm_cvtt_roundsd_si64","_mm_cvtt_roundsd_u32","_mm_cvtt_roundsd_u64","_mm_cvtt_roundss_i32","_mm_cvtt_roundss_i64","_mm_cvtt_roundss_si32","_mm_cvtt_roundss_si64","_mm_cvtt_roundss_u32","_mm_cvtt_roundss_u64","_mm_cvtt_ss2si","_mm_cvttpd_epi32","_mm_cvttpd_epu32","_mm_cvttps_epi32","_mm_cvttps_epu32","_mm_cvttsd_i32","_mm_cvttsd_i64","_mm_cvttsd_si32","_mm_cvttsd_si64","_mm_cvttsd_si64x","_mm_cvttsd_u32","_mm_cvttsd_u64","_mm_cvttss_i32","_mm_cvttss_i64","_mm_cvttss_si32","_mm_cvttss_si64","_mm_cvttss_u32","_mm_cvttss_u64","_mm_cvtu32_sd","_mm_cvtu32_ss","_mm_cvtu64_sd","_mm_cvtu64_ss","_mm_cvtusepi16_epi8","_mm_cvtusepi32_epi16","_mm_cvtusepi32_epi8","_mm_cvtusepi64_epi16","_mm_cvtusepi64_epi32","_mm_cvtusepi64_epi8","_mm_dbsad_epu8","_mm_div_pd","_mm_div_ps","_mm_div_round_sd","_mm_div_round_ss","_mm_div_sd","_mm_div_ss","_mm_dp_pd","_mm_dp_ps","_mm_dpbf16_ps","_mm_dpbusd_epi32","_mm_dpbusds_epi32","_mm_dpwssd_epi32","_mm_dpwssds_epi32","_mm_extract_epi16","_mm_extract_epi32","_mm_extract_epi64","_mm_extract_epi8","_mm_extract_ps","_mm_extract_si64","_mm_fixupimm_pd","_mm_fixupimm_ps","_mm_fixupimm_round_sd","_mm_fixupimm_round_ss","_mm_fixupimm_sd","_mm_fixupimm_ss","_mm_floor_pd","_mm_floor_ps","_mm_floor_sd","_mm_floor_ss","_mm_fmadd_pd","_mm_fmadd_ps","_mm_fmadd_round_sd","_mm_fmadd_round_ss","_mm_fmadd_sd","_mm_fmadd_ss","_mm_fmaddsub_pd","_mm_fmaddsub_ps","_mm_fmsub_pd","_mm_fmsub_ps","_mm_fmsub_round_sd","_mm_fmsub_round_ss","_mm_fmsub_sd","_mm_fmsub_ss","_mm_fmsubadd_pd","_mm_fmsubadd_ps","_mm_fnmadd_pd","_mm_fnmadd_ps","_mm_fnmadd_round_sd","_mm_fnmadd_round_ss","_mm_fnmadd_sd","_mm_fnmadd_ss","_mm_fnmsub_pd","_mm_fnmsub_ps","_mm_fnmsub_round_sd","_mm_fnmsub_round_ss","_mm_fnmsub_sd","_mm_fnmsub_ss","_mm_getcsr","_mm_getexp_pd","_mm_getexp_ps","_mm_getexp_round_sd","_mm_getexp_round_ss","_mm_getexp_sd","_mm_getexp_ss","_mm_getmant_pd","_mm_getmant_ps","_mm_getmant_round_sd","_mm_getmant_round_ss","_mm_getmant_sd","_mm_getmant_ss","_mm_gf2p8affine_epi64_epi8","_mm_gf2p8affineinv_epi64_epi8","_mm_gf2p8mul_epi8","_mm_hadd_epi16","_mm_hadd_epi32","_mm_hadd_pd","_mm_hadd_ps","_mm_hadds_epi16","_mm_hsub_epi16","_mm_hsub_epi32","_mm_hsub_pd","_mm_hsub_ps","_mm_hsubs_epi16","_mm_i32gather_epi32","_mm_i32gather_epi64","_mm_i32gather_pd","_mm_i32gather_ps","_mm_i64gather_epi32","_mm_i64gather_epi64","_mm_i64gather_pd","_mm_i64gather_ps","_mm_insert_epi16","_mm_insert_epi32","_mm_insert_epi64","_mm_insert_epi8","_mm_insert_ps","_mm_insert_si64","_mm_lddqu_si128","_mm_lfence","_mm_load1_pd","_mm_load1_ps","_mm_load_epi32","_mm_load_epi64","_mm_load_pd","_mm_load_pd1","_mm_load_ps","_mm_load_ps1","_mm_load_sd","_mm_load_si128","_mm_load_ss","_mm_loaddup_pd","_mm_loadh_pd","_mm_loadl_epi64","_mm_loadl_pd","_mm_loadr_pd","_mm_loadr_ps","_mm_loadu_epi16","_mm_loadu_epi32","_mm_loadu_epi64","_mm_loadu_epi8","_mm_loadu_pd","_mm_loadu_ps","_mm_loadu_si128","_mm_loadu_si64","_mm_lzcnt_epi32","_mm_lzcnt_epi64","_mm_madd52hi_epu64","_mm_madd52lo_epu64","_mm_madd_epi16","_mm_maddubs_epi16","_mm_mask2_permutex2var_epi16","_mm_mask2_permutex2var_epi32","_mm_mask2_permutex2var_epi64","_mm_mask2_permutex2var_epi8","_mm_mask2_permutex2var_pd","_mm_mask2_permutex2var_ps","_mm_mask3_fmadd_pd","_mm_mask3_fmadd_ps","_mm_mask3_fmadd_round_sd","_mm_mask3_fmadd_round_ss","_mm_mask3_fmadd_sd","_mm_mask3_fmadd_ss","_mm_mask3_fmaddsub_pd","_mm_mask3_fmaddsub_ps","_mm_mask3_fmsub_pd","_mm_mask3_fmsub_ps","_mm_mask3_fmsub_round_sd","_mm_mask3_fmsub_round_ss","_mm_mask3_fmsub_sd","_mm_mask3_fmsub_ss","_mm_mask3_fmsubadd_pd","_mm_mask3_fmsubadd_ps","_mm_mask3_fnmadd_pd","_mm_mask3_fnmadd_ps","_mm_mask3_fnmadd_round_sd","_mm_mask3_fnmadd_round_ss","_mm_mask3_fnmadd_sd","_mm_mask3_fnmadd_ss","_mm_mask3_fnmsub_pd","_mm_mask3_fnmsub_ps","_mm_mask3_fnmsub_round_sd","_mm_mask3_fnmsub_round_ss","_mm_mask3_fnmsub_sd","_mm_mask3_fnmsub_ss","_mm_mask_abs_epi16","_mm_mask_abs_epi32","_mm_mask_abs_epi8","_mm_mask_add_epi16","_mm_mask_add_epi32","_mm_mask_add_epi64","_mm_mask_add_epi8","_mm_mask_add_pd","_mm_mask_add_ps","_mm_mask_add_round_sd","_mm_mask_add_round_ss","_mm_mask_add_sd","_mm_mask_add_ss","_mm_mask_adds_epi16","_mm_mask_adds_epi8","_mm_mask_adds_epu16","_mm_mask_adds_epu8","_mm_mask_alignr_epi32","_mm_mask_alignr_epi64","_mm_mask_alignr_epi8","_mm_mask_and_epi32","_mm_mask_and_epi64","_mm_mask_andnot_epi32","_mm_mask_andnot_epi64","_mm_mask_avg_epu16","_mm_mask_avg_epu8","_mm_mask_bitshuffle_epi64_mask","_mm_mask_blend_epi16","_mm_mask_blend_epi32","_mm_mask_blend_epi64","_mm_mask_blend_epi8","_mm_mask_blend_pd","_mm_mask_blend_ps","_mm_mask_broadcastb_epi8","_mm_mask_broadcastd_epi32","_mm_mask_broadcastq_epi64","_mm_mask_broadcastss_ps","_mm_mask_broadcastw_epi16","_mm_mask_cmp_epi16_mask","_mm_mask_cmp_epi32_mask","_mm_mask_cmp_epi64_mask","_mm_mask_cmp_epi8_mask","_mm_mask_cmp_epu16_mask","_mm_mask_cmp_epu32_mask","_mm_mask_cmp_epu64_mask","_mm_mask_cmp_epu8_mask","_mm_mask_cmp_pd_mask","_mm_mask_cmp_ps_mask","_mm_mask_cmp_round_sd_mask","_mm_mask_cmp_round_ss_mask","_mm_mask_cmp_sd_mask","_mm_mask_cmp_ss_mask","_mm_mask_cmpeq_epi16_mask","_mm_mask_cmpeq_epi32_mask","_mm_mask_cmpeq_epi64_mask","_mm_mask_cmpeq_epi8_mask","_mm_mask_cmpeq_epu16_mask","_mm_mask_cmpeq_epu32_mask","_mm_mask_cmpeq_epu64_mask","_mm_mask_cmpeq_epu8_mask","_mm_mask_cmpge_epi16_mask","_mm_mask_cmpge_epi32_mask","_mm_mask_cmpge_epi64_mask","_mm_mask_cmpge_epi8_mask","_mm_mask_cmpge_epu16_mask","_mm_mask_cmpge_epu32_mask","_mm_mask_cmpge_epu64_mask","_mm_mask_cmpge_epu8_mask","_mm_mask_cmpgt_epi16_mask","_mm_mask_cmpgt_epi32_mask","_mm_mask_cmpgt_epi64_mask","_mm_mask_cmpgt_epi8_mask","_mm_mask_cmpgt_epu16_mask","_mm_mask_cmpgt_epu32_mask","_mm_mask_cmpgt_epu64_mask","_mm_mask_cmpgt_epu8_mask","_mm_mask_cmple_epi16_mask","_mm_mask_cmple_epi32_mask","_mm_mask_cmple_epi64_mask","_mm_mask_cmple_epi8_mask","_mm_mask_cmple_epu16_mask","_mm_mask_cmple_epu32_mask","_mm_mask_cmple_epu64_mask","_mm_mask_cmple_epu8_mask","_mm_mask_cmplt_epi16_mask","_mm_mask_cmplt_epi32_mask","_mm_mask_cmplt_epi64_mask","_mm_mask_cmplt_epi8_mask","_mm_mask_cmplt_epu16_mask","_mm_mask_cmplt_epu32_mask","_mm_mask_cmplt_epu64_mask","_mm_mask_cmplt_epu8_mask","_mm_mask_cmpneq_epi16_mask","_mm_mask_cmpneq_epi32_mask","_mm_mask_cmpneq_epi64_mask","_mm_mask_cmpneq_epi8_mask","_mm_mask_cmpneq_epu16_mask","_mm_mask_cmpneq_epu32_mask","_mm_mask_cmpneq_epu64_mask","_mm_mask_cmpneq_epu8_mask","_mm_mask_compress_epi16","_mm_mask_compress_epi32","_mm_mask_compress_epi64","_mm_mask_compress_epi8","_mm_mask_compress_pd","_mm_mask_compress_ps","_mm_mask_compressstoreu_epi16","_mm_mask_compressstoreu_epi32","_mm_mask_compressstoreu_epi64","_mm_mask_compressstoreu_epi8","_mm_mask_compressstoreu_pd","_mm_mask_compressstoreu_ps","_mm_mask_conflict_epi32","_mm_mask_conflict_epi64","_mm_mask_cvt_roundps_ph","_mm_mask_cvt_roundsd_ss","_mm_mask_cvt_roundss_sd","_mm_mask_cvtepi16_epi32","_mm_mask_cvtepi16_epi64","_mm_mask_cvtepi16_epi8","_mm_mask_cvtepi16_storeu_epi8","_mm_mask_cvtepi32_epi16","_mm_mask_cvtepi32_epi64","_mm_mask_cvtepi32_epi8","_mm_mask_cvtepi32_pd","_mm_mask_cvtepi32_ps","_mm_mask_cvtepi32_storeu_epi16","_mm_mask_cvtepi32_storeu_epi8","_mm_mask_cvtepi64_epi16","_mm_mask_cvtepi64_epi32","_mm_mask_cvtepi64_epi8","_mm_mask_cvtepi64_storeu_epi16","_mm_mask_cvtepi64_storeu_epi32","_mm_mask_cvtepi64_storeu_epi8","_mm_mask_cvtepi8_epi16","_mm_mask_cvtepi8_epi32","_mm_mask_cvtepi8_epi64","_mm_mask_cvtepu16_epi32","_mm_mask_cvtepu16_epi64","_mm_mask_cvtepu32_epi64","_mm_mask_cvtepu32_pd","_mm_mask_cvtepu8_epi16","_mm_mask_cvtepu8_epi32","_mm_mask_cvtepu8_epi64","_mm_mask_cvtne2ps_pbh","_mm_mask_cvtpd_epi32","_mm_mask_cvtpd_epu32","_mm_mask_cvtpd_ps","_mm_mask_cvtph_ps","_mm_mask_cvtps_epi32","_mm_mask_cvtps_epu32","_mm_mask_cvtps_ph","_mm_mask_cvtsd_ss","_mm_mask_cvtsepi16_epi8","_mm_mask_cvtsepi16_storeu_epi8","_mm_mask_cvtsepi32_epi16","_mm_mask_cvtsepi32_epi8","_mm_mask_cvtsepi32_storeu_epi16","_mm_mask_cvtsepi32_storeu_epi8","_mm_mask_cvtsepi64_epi16","_mm_mask_cvtsepi64_epi32","_mm_mask_cvtsepi64_epi8","_mm_mask_cvtsepi64_storeu_epi16","_mm_mask_cvtsepi64_storeu_epi32","_mm_mask_cvtsepi64_storeu_epi8","_mm_mask_cvtss_sd","_mm_mask_cvttpd_epi32","_mm_mask_cvttpd_epu32","_mm_mask_cvttps_epi32","_mm_mask_cvttps_epu32","_mm_mask_cvtusepi16_epi8","_mm_mask_cvtusepi16_storeu_epi8","_mm_mask_cvtusepi32_epi16","_mm_mask_cvtusepi32_epi8","_mm_mask_cvtusepi32_storeu_epi16","_mm_mask_cvtusepi32_storeu_epi8","_mm_mask_cvtusepi64_epi16","_mm_mask_cvtusepi64_epi32","_mm_mask_cvtusepi64_epi8","_mm_mask_cvtusepi64_storeu_epi16","_mm_mask_cvtusepi64_storeu_epi32","_mm_mask_cvtusepi64_storeu_epi8","_mm_mask_dbsad_epu8","_mm_mask_div_pd","_mm_mask_div_ps","_mm_mask_div_round_sd","_mm_mask_div_round_ss","_mm_mask_div_sd","_mm_mask_div_ss","_mm_mask_dpbf16_ps","_mm_mask_dpbusd_epi32","_mm_mask_dpbusds_epi32","_mm_mask_dpwssd_epi32","_mm_mask_dpwssds_epi32","_mm_mask_expand_epi16","_mm_mask_expand_epi32","_mm_mask_expand_epi64","_mm_mask_expand_epi8","_mm_mask_expand_pd","_mm_mask_expand_ps","_mm_mask_expandloadu_epi16","_mm_mask_expandloadu_epi32","_mm_mask_expandloadu_epi64","_mm_mask_expandloadu_epi8","_mm_mask_expandloadu_pd","_mm_mask_expandloadu_ps","_mm_mask_fixupimm_pd","_mm_mask_fixupimm_ps","_mm_mask_fixupimm_round_sd","_mm_mask_fixupimm_round_ss","_mm_mask_fixupimm_sd","_mm_mask_fixupimm_ss","_mm_mask_fmadd_pd","_mm_mask_fmadd_ps","_mm_mask_fmadd_round_sd","_mm_mask_fmadd_round_ss","_mm_mask_fmadd_sd","_mm_mask_fmadd_ss","_mm_mask_fmaddsub_pd","_mm_mask_fmaddsub_ps","_mm_mask_fmsub_pd","_mm_mask_fmsub_ps","_mm_mask_fmsub_round_sd","_mm_mask_fmsub_round_ss","_mm_mask_fmsub_sd","_mm_mask_fmsub_ss","_mm_mask_fmsubadd_pd","_mm_mask_fmsubadd_ps","_mm_mask_fnmadd_pd","_mm_mask_fnmadd_ps","_mm_mask_fnmadd_round_sd","_mm_mask_fnmadd_round_ss","_mm_mask_fnmadd_sd","_mm_mask_fnmadd_ss","_mm_mask_fnmsub_pd","_mm_mask_fnmsub_ps","_mm_mask_fnmsub_round_sd","_mm_mask_fnmsub_round_ss","_mm_mask_fnmsub_sd","_mm_mask_fnmsub_ss","_mm_mask_getexp_pd","_mm_mask_getexp_ps","_mm_mask_getexp_round_sd","_mm_mask_getexp_round_ss","_mm_mask_getexp_sd","_mm_mask_getexp_ss","_mm_mask_getmant_pd","_mm_mask_getmant_ps","_mm_mask_getmant_round_sd","_mm_mask_getmant_round_ss","_mm_mask_getmant_sd","_mm_mask_getmant_ss","_mm_mask_gf2p8affine_epi64_epi8","_mm_mask_gf2p8affineinv_epi64_epi8","_mm_mask_gf2p8mul_epi8","_mm_mask_i32gather_epi32","_mm_mask_i32gather_epi64","_mm_mask_i32gather_pd","_mm_mask_i32gather_ps","_mm_mask_i64gather_epi32","_mm_mask_i64gather_epi64","_mm_mask_i64gather_pd","_mm_mask_i64gather_ps","_mm_mask_load_epi32","_mm_mask_load_epi64","_mm_mask_load_pd","_mm_mask_load_ps","_mm_mask_loadu_epi16","_mm_mask_loadu_epi32","_mm_mask_loadu_epi64","_mm_mask_loadu_epi8","_mm_mask_loadu_pd","_mm_mask_loadu_ps","_mm_mask_lzcnt_epi32","_mm_mask_lzcnt_epi64","_mm_mask_madd_epi16","_mm_mask_maddubs_epi16","_mm_mask_max_epi16","_mm_mask_max_epi32","_mm_mask_max_epi64","_mm_mask_max_epi8","_mm_mask_max_epu16","_mm_mask_max_epu32","_mm_mask_max_epu64","_mm_mask_max_epu8","_mm_mask_max_pd","_mm_mask_max_ps","_mm_mask_max_round_sd","_mm_mask_max_round_ss","_mm_mask_max_sd","_mm_mask_max_ss","_mm_mask_min_epi16","_mm_mask_min_epi32","_mm_mask_min_epi8","_mm_mask_min_epu16","_mm_mask_min_epu32","_mm_mask_min_epu64","_mm_mask_min_epu8","_mm_mask_min_pd","_mm_mask_min_ps","_mm_mask_min_round_sd","_mm_mask_min_round_ss","_mm_mask_min_sd","_mm_mask_min_ss","_mm_mask_mov_epi16","_mm_mask_mov_epi32","_mm_mask_mov_epi64","_mm_mask_mov_epi8","_mm_mask_mov_pd","_mm_mask_mov_ps","_mm_mask_move_sd","_mm_mask_move_ss","_mm_mask_movedup_pd","_mm_mask_movehdup_ps","_mm_mask_moveldup_ps","_mm_mask_mul_epi32","_mm_mask_mul_epu32","_mm_mask_mul_pd","_mm_mask_mul_ps","_mm_mask_mul_round_sd","_mm_mask_mul_round_ss","_mm_mask_mul_sd","_mm_mask_mul_ss","_mm_mask_mulhi_epi16","_mm_mask_mulhi_epu16","_mm_mask_mulhrs_epi16","_mm_mask_mullo_epi16","_mm_mask_mullo_epi32","_mm_mask_multishift_epi64_epi8","_mm_mask_or_epi32","_mm_mask_or_epi64","_mm_mask_packs_epi16","_mm_mask_packs_epi32","_mm_mask_packus_epi16","_mm_mask_packus_epi32","_mm_mask_permute_pd","_mm_mask_permute_ps","_mm_mask_permutevar_pd","_mm_mask_permutevar_ps","_mm_mask_permutex2var_epi16","_mm_mask_permutex2var_epi32","_mm_mask_permutex2var_epi64","_mm_mask_permutex2var_epi8","_mm_mask_permutex2var_pd","_mm_mask_permutex2var_ps","_mm_mask_permutexvar_epi16","_mm_mask_permutexvar_epi8","_mm_mask_popcnt_epi16","_mm_mask_popcnt_epi32","_mm_mask_popcnt_epi64","_mm_mask_popcnt_epi8","_mm_mask_rcp14_pd","_mm_mask_rcp14_ps","_mm_mask_rcp14_sd","_mm_mask_rcp14_ss","_mm_mask_rol_epi32","_mm_mask_rol_epi64","_mm_mask_rolv_epi32","_mm_mask_rolv_epi64","_mm_mask_ror_epi32","_mm_mask_ror_epi64","_mm_mask_rorv_epi32","_mm_mask_rorv_epi64","_mm_mask_roundscale_pd","_mm_mask_roundscale_ps","_mm_mask_roundscale_round_sd","_mm_mask_roundscale_round_ss","_mm_mask_roundscale_sd","_mm_mask_roundscale_ss","_mm_mask_rsqrt14_pd","_mm_mask_rsqrt14_ps","_mm_mask_rsqrt14_sd","_mm_mask_rsqrt14_ss","_mm_mask_scalef_pd","_mm_mask_scalef_ps","_mm_mask_scalef_round_sd","_mm_mask_scalef_round_ss","_mm_mask_scalef_sd","_mm_mask_scalef_ss","_mm_mask_set1_epi16","_mm_mask_set1_epi32","_mm_mask_set1_epi64","_mm_mask_set1_epi8","_mm_mask_shldi_epi16","_mm_mask_shldi_epi32","_mm_mask_shldi_epi64","_mm_mask_shldv_epi16","_mm_mask_shldv_epi32","_mm_mask_shldv_epi64","_mm_mask_shrdi_epi16","_mm_mask_shrdi_epi32","_mm_mask_shrdi_epi64","_mm_mask_shrdv_epi16","_mm_mask_shrdv_epi32","_mm_mask_shrdv_epi64","_mm_mask_shuffle_epi32","_mm_mask_shuffle_epi8","_mm_mask_shuffle_pd","_mm_mask_shuffle_ps","_mm_mask_shufflehi_epi16","_mm_mask_shufflelo_epi16","_mm_mask_sll_epi16","_mm_mask_sll_epi32","_mm_mask_sll_epi64","_mm_mask_slli_epi16","_mm_mask_slli_epi32","_mm_mask_slli_epi64","_mm_mask_sllv_epi16","_mm_mask_sllv_epi32","_mm_mask_sllv_epi64","_mm_mask_sqrt_pd","_mm_mask_sqrt_ps","_mm_mask_sqrt_round_sd","_mm_mask_sqrt_round_ss","_mm_mask_sqrt_sd","_mm_mask_sqrt_ss","_mm_mask_sra_epi16","_mm_mask_sra_epi32","_mm_mask_sra_epi64","_mm_mask_srai_epi16","_mm_mask_srai_epi32","_mm_mask_srai_epi64","_mm_mask_srav_epi16","_mm_mask_srav_epi32","_mm_mask_srav_epi64","_mm_mask_srl_epi16","_mm_mask_srl_epi32","_mm_mask_srl_epi64","_mm_mask_srli_epi16","_mm_mask_srli_epi32","_mm_mask_srli_epi64","_mm_mask_srlv_epi16","_mm_mask_srlv_epi32","_mm_mask_srlv_epi64","_mm_mask_store_epi32","_mm_mask_store_epi64","_mm_mask_store_pd","_mm_mask_store_ps","_mm_mask_storeu_epi16","_mm_mask_storeu_epi32","_mm_mask_storeu_epi64","_mm_mask_storeu_epi8","_mm_mask_storeu_pd","_mm_mask_storeu_ps","_mm_mask_sub_epi16","_mm_mask_sub_epi32","_mm_mask_sub_epi64","_mm_mask_sub_epi8","_mm_mask_sub_pd","_mm_mask_sub_ps","_mm_mask_sub_round_sd","_mm_mask_sub_round_ss","_mm_mask_sub_sd","_mm_mask_sub_ss","_mm_mask_subs_epi16","_mm_mask_subs_epi8","_mm_mask_subs_epu16","_mm_mask_subs_epu8","_mm_mask_ternarylogic_epi32","_mm_mask_ternarylogic_epi64","_mm_mask_test_epi16_mask","_mm_mask_test_epi32_mask","_mm_mask_test_epi64_mask","_mm_mask_test_epi8_mask","_mm_mask_testn_epi16_mask","_mm_mask_testn_epi32_mask","_mm_mask_testn_epi64_mask","_mm_mask_testn_epi8_mask","_mm_mask_unpackhi_epi16","_mm_mask_unpackhi_epi32","_mm_mask_unpackhi_epi64","_mm_mask_unpackhi_epi8","_mm_mask_unpackhi_pd","_mm_mask_unpackhi_ps","_mm_mask_unpacklo_epi16","_mm_mask_unpacklo_epi32","_mm_mask_unpacklo_epi64","_mm_mask_unpacklo_epi8","_mm_mask_unpacklo_pd","_mm_mask_unpacklo_ps","_mm_mask_xor_epi32","_mm_mask_xor_epi64","_mm_maskload_epi32","_mm_maskload_epi64","_mm_maskload_pd","_mm_maskload_ps","_mm_maskmoveu_si128","_mm_maskstore_epi32","_mm_maskstore_epi64","_mm_maskstore_pd","_mm_maskstore_ps","_mm_maskz_abs_epi16","_mm_maskz_abs_epi32","_mm_maskz_abs_epi8","_mm_maskz_add_epi16","_mm_maskz_add_epi32","_mm_maskz_add_epi64","_mm_maskz_add_epi8","_mm_maskz_add_pd","_mm_maskz_add_ps","_mm_maskz_add_round_sd","_mm_maskz_add_round_ss","_mm_maskz_add_sd","_mm_maskz_add_ss","_mm_maskz_adds_epi16","_mm_maskz_adds_epi8","_mm_maskz_adds_epu16","_mm_maskz_adds_epu8","_mm_maskz_alignr_epi32","_mm_maskz_alignr_epi64","_mm_maskz_alignr_epi8","_mm_maskz_and_epi32","_mm_maskz_and_epi64","_mm_maskz_andnot_epi32","_mm_maskz_andnot_epi64","_mm_maskz_avg_epu16","_mm_maskz_avg_epu8","_mm_maskz_broadcastb_epi8","_mm_maskz_broadcastd_epi32","_mm_maskz_broadcastq_epi64","_mm_maskz_broadcastss_ps","_mm_maskz_broadcastw_epi16","_mm_maskz_compress_epi16","_mm_maskz_compress_epi32","_mm_maskz_compress_epi64","_mm_maskz_compress_epi8","_mm_maskz_compress_pd","_mm_maskz_compress_ps","_mm_maskz_conflict_epi32","_mm_maskz_conflict_epi64","_mm_maskz_cvt_roundps_ph","_mm_maskz_cvt_roundsd_ss","_mm_maskz_cvt_roundss_sd","_mm_maskz_cvtepi16_epi32","_mm_maskz_cvtepi16_epi64","_mm_maskz_cvtepi16_epi8","_mm_maskz_cvtepi32_epi16","_mm_maskz_cvtepi32_epi64","_mm_maskz_cvtepi32_epi8","_mm_maskz_cvtepi32_pd","_mm_maskz_cvtepi32_ps","_mm_maskz_cvtepi64_epi16","_mm_maskz_cvtepi64_epi32","_mm_maskz_cvtepi64_epi8","_mm_maskz_cvtepi8_epi16","_mm_maskz_cvtepi8_epi32","_mm_maskz_cvtepi8_epi64","_mm_maskz_cvtepu16_epi32","_mm_maskz_cvtepu16_epi64","_mm_maskz_cvtepu32_epi64","_mm_maskz_cvtepu32_pd","_mm_maskz_cvtepu8_epi16","_mm_maskz_cvtepu8_epi32","_mm_maskz_cvtepu8_epi64","_mm_maskz_cvtne2ps_pbh","_mm_maskz_cvtpd_epi32","_mm_maskz_cvtpd_epu32","_mm_maskz_cvtpd_ps","_mm_maskz_cvtph_ps","_mm_maskz_cvtps_epi32","_mm_maskz_cvtps_epu32","_mm_maskz_cvtps_ph","_mm_maskz_cvtsd_ss","_mm_maskz_cvtsepi16_epi8","_mm_maskz_cvtsepi32_epi16","_mm_maskz_cvtsepi32_epi8","_mm_maskz_cvtsepi64_epi16","_mm_maskz_cvtsepi64_epi32","_mm_maskz_cvtsepi64_epi8","_mm_maskz_cvtss_sd","_mm_maskz_cvttpd_epi32","_mm_maskz_cvttpd_epu32","_mm_maskz_cvttps_epi32","_mm_maskz_cvttps_epu32","_mm_maskz_cvtusepi16_epi8","_mm_maskz_cvtusepi32_epi16","_mm_maskz_cvtusepi32_epi8","_mm_maskz_cvtusepi64_epi16","_mm_maskz_cvtusepi64_epi32","_mm_maskz_cvtusepi64_epi8","_mm_maskz_dbsad_epu8","_mm_maskz_div_pd","_mm_maskz_div_ps","_mm_maskz_div_round_sd","_mm_maskz_div_round_ss","_mm_maskz_div_sd","_mm_maskz_div_ss","_mm_maskz_dpbf16_ps","_mm_maskz_dpbusd_epi32","_mm_maskz_dpbusds_epi32","_mm_maskz_dpwssd_epi32","_mm_maskz_dpwssds_epi32","_mm_maskz_expand_epi16","_mm_maskz_expand_epi32","_mm_maskz_expand_epi64","_mm_maskz_expand_epi8","_mm_maskz_expand_pd","_mm_maskz_expand_ps","_mm_maskz_expandloadu_epi16","_mm_maskz_expandloadu_epi32","_mm_maskz_expandloadu_epi64","_mm_maskz_expandloadu_epi8","_mm_maskz_expandloadu_pd","_mm_maskz_expandloadu_ps","_mm_maskz_fixupimm_pd","_mm_maskz_fixupimm_ps","_mm_maskz_fixupimm_round_sd","_mm_maskz_fixupimm_round_ss","_mm_maskz_fixupimm_sd","_mm_maskz_fixupimm_ss","_mm_maskz_fmadd_pd","_mm_maskz_fmadd_ps","_mm_maskz_fmadd_round_sd","_mm_maskz_fmadd_round_ss","_mm_maskz_fmadd_sd","_mm_maskz_fmadd_ss","_mm_maskz_fmaddsub_pd","_mm_maskz_fmaddsub_ps","_mm_maskz_fmsub_pd","_mm_maskz_fmsub_ps","_mm_maskz_fmsub_round_sd","_mm_maskz_fmsub_round_ss","_mm_maskz_fmsub_sd","_mm_maskz_fmsub_ss","_mm_maskz_fmsubadd_pd","_mm_maskz_fmsubadd_ps","_mm_maskz_fnmadd_pd","_mm_maskz_fnmadd_ps","_mm_maskz_fnmadd_round_sd","_mm_maskz_fnmadd_round_ss","_mm_maskz_fnmadd_sd","_mm_maskz_fnmadd_ss","_mm_maskz_fnmsub_pd","_mm_maskz_fnmsub_ps","_mm_maskz_fnmsub_round_sd","_mm_maskz_fnmsub_round_ss","_mm_maskz_fnmsub_sd","_mm_maskz_fnmsub_ss","_mm_maskz_getexp_pd","_mm_maskz_getexp_ps","_mm_maskz_getexp_round_sd","_mm_maskz_getexp_round_ss","_mm_maskz_getexp_sd","_mm_maskz_getexp_ss","_mm_maskz_getmant_pd","_mm_maskz_getmant_ps","_mm_maskz_getmant_round_sd","_mm_maskz_getmant_round_ss","_mm_maskz_getmant_sd","_mm_maskz_getmant_ss","_mm_maskz_gf2p8affine_epi64_epi8","_mm_maskz_gf2p8affineinv_epi64_epi8","_mm_maskz_gf2p8mul_epi8","_mm_maskz_load_epi32","_mm_maskz_load_epi64","_mm_maskz_load_pd","_mm_maskz_load_ps","_mm_maskz_loadu_epi16","_mm_maskz_loadu_epi32","_mm_maskz_loadu_epi64","_mm_maskz_loadu_epi8","_mm_maskz_loadu_pd","_mm_maskz_loadu_ps","_mm_maskz_lzcnt_epi32","_mm_maskz_lzcnt_epi64","_mm_maskz_madd_epi16","_mm_maskz_maddubs_epi16","_mm_maskz_max_epi16","_mm_maskz_max_epi32","_mm_maskz_max_epi64","_mm_maskz_max_epi8","_mm_maskz_max_epu16","_mm_maskz_max_epu32","_mm_maskz_max_epu64","_mm_maskz_max_epu8","_mm_maskz_max_pd","_mm_maskz_max_ps","_mm_maskz_max_round_sd","_mm_maskz_max_round_ss","_mm_maskz_max_sd","_mm_maskz_max_ss","_mm_maskz_min_epi16","_mm_maskz_min_epi32","_mm_maskz_min_epi8","_mm_maskz_min_epu16","_mm_maskz_min_epu32","_mm_maskz_min_epu64","_mm_maskz_min_epu8","_mm_maskz_min_pd","_mm_maskz_min_ps","_mm_maskz_min_round_sd","_mm_maskz_min_round_ss","_mm_maskz_min_sd","_mm_maskz_min_ss","_mm_maskz_mov_epi16","_mm_maskz_mov_epi32","_mm_maskz_mov_epi64","_mm_maskz_mov_epi8","_mm_maskz_mov_pd","_mm_maskz_mov_ps","_mm_maskz_move_sd","_mm_maskz_move_ss","_mm_maskz_movedup_pd","_mm_maskz_movehdup_ps","_mm_maskz_moveldup_ps","_mm_maskz_mul_epi32","_mm_maskz_mul_epu32","_mm_maskz_mul_pd","_mm_maskz_mul_ps","_mm_maskz_mul_round_sd","_mm_maskz_mul_round_ss","_mm_maskz_mul_sd","_mm_maskz_mul_ss","_mm_maskz_mulhi_epi16","_mm_maskz_mulhi_epu16","_mm_maskz_mulhrs_epi16","_mm_maskz_mullo_epi16","_mm_maskz_mullo_epi32","_mm_maskz_multishift_epi64_epi8","_mm_maskz_or_epi32","_mm_maskz_or_epi64","_mm_maskz_packs_epi16","_mm_maskz_packs_epi32","_mm_maskz_packus_epi16","_mm_maskz_packus_epi32","_mm_maskz_permute_pd","_mm_maskz_permute_ps","_mm_maskz_permutevar_pd","_mm_maskz_permutevar_ps","_mm_maskz_permutex2var_epi16","_mm_maskz_permutex2var_epi32","_mm_maskz_permutex2var_epi64","_mm_maskz_permutex2var_epi8","_mm_maskz_permutex2var_pd","_mm_maskz_permutex2var_ps","_mm_maskz_permutexvar_epi16","_mm_maskz_permutexvar_epi8","_mm_maskz_popcnt_epi16","_mm_maskz_popcnt_epi32","_mm_maskz_popcnt_epi64","_mm_maskz_popcnt_epi8","_mm_maskz_rcp14_pd","_mm_maskz_rcp14_ps","_mm_maskz_rcp14_sd","_mm_maskz_rcp14_ss","_mm_maskz_rol_epi32","_mm_maskz_rol_epi64","_mm_maskz_rolv_epi32","_mm_maskz_rolv_epi64","_mm_maskz_ror_epi32","_mm_maskz_ror_epi64","_mm_maskz_rorv_epi32","_mm_maskz_rorv_epi64","_mm_maskz_roundscale_pd","_mm_maskz_roundscale_ps","_mm_maskz_roundscale_round_sd","_mm_maskz_roundscale_round_ss","_mm_maskz_roundscale_sd","_mm_maskz_roundscale_ss","_mm_maskz_rsqrt14_pd","_mm_maskz_rsqrt14_ps","_mm_maskz_rsqrt14_sd","_mm_maskz_rsqrt14_ss","_mm_maskz_scalef_pd","_mm_maskz_scalef_ps","_mm_maskz_scalef_round_sd","_mm_maskz_scalef_round_ss","_mm_maskz_scalef_sd","_mm_maskz_scalef_ss","_mm_maskz_set1_epi16","_mm_maskz_set1_epi32","_mm_maskz_set1_epi64","_mm_maskz_set1_epi8","_mm_maskz_shldi_epi16","_mm_maskz_shldi_epi32","_mm_maskz_shldi_epi64","_mm_maskz_shldv_epi16","_mm_maskz_shldv_epi32","_mm_maskz_shldv_epi64","_mm_maskz_shrdi_epi16","_mm_maskz_shrdi_epi32","_mm_maskz_shrdi_epi64","_mm_maskz_shrdv_epi16","_mm_maskz_shrdv_epi32","_mm_maskz_shrdv_epi64","_mm_maskz_shuffle_epi32","_mm_maskz_shuffle_epi8","_mm_maskz_shuffle_pd","_mm_maskz_shuffle_ps","_mm_maskz_shufflehi_epi16","_mm_maskz_shufflelo_epi16","_mm_maskz_sll_epi16","_mm_maskz_sll_epi32","_mm_maskz_sll_epi64","_mm_maskz_slli_epi16","_mm_maskz_slli_epi32","_mm_maskz_slli_epi64","_mm_maskz_sllv_epi16","_mm_maskz_sllv_epi32","_mm_maskz_sllv_epi64","_mm_maskz_sqrt_pd","_mm_maskz_sqrt_ps","_mm_maskz_sqrt_round_sd","_mm_maskz_sqrt_round_ss","_mm_maskz_sqrt_sd","_mm_maskz_sqrt_ss","_mm_maskz_sra_epi16","_mm_maskz_sra_epi32","_mm_maskz_sra_epi64","_mm_maskz_srai_epi16","_mm_maskz_srai_epi32","_mm_maskz_srai_epi64","_mm_maskz_srav_epi16","_mm_maskz_srav_epi32","_mm_maskz_srav_epi64","_mm_maskz_srl_epi16","_mm_maskz_srl_epi32","_mm_maskz_srl_epi64","_mm_maskz_srli_epi16","_mm_maskz_srli_epi32","_mm_maskz_srli_epi64","_mm_maskz_srlv_epi16","_mm_maskz_srlv_epi32","_mm_maskz_srlv_epi64","_mm_maskz_sub_epi16","_mm_maskz_sub_epi32","_mm_maskz_sub_epi64","_mm_maskz_sub_epi8","_mm_maskz_sub_pd","_mm_maskz_sub_ps","_mm_maskz_sub_round_sd","_mm_maskz_sub_round_ss","_mm_maskz_sub_sd","_mm_maskz_sub_ss","_mm_maskz_subs_epi16","_mm_maskz_subs_epi8","_mm_maskz_subs_epu16","_mm_maskz_subs_epu8","_mm_maskz_ternarylogic_epi32","_mm_maskz_ternarylogic_epi64","_mm_maskz_unpackhi_epi16","_mm_maskz_unpackhi_epi32","_mm_maskz_unpackhi_epi64","_mm_maskz_unpackhi_epi8","_mm_maskz_unpackhi_pd","_mm_maskz_unpackhi_ps","_mm_maskz_unpacklo_epi16","_mm_maskz_unpacklo_epi32","_mm_maskz_unpacklo_epi64","_mm_maskz_unpacklo_epi8","_mm_maskz_unpacklo_pd","_mm_maskz_unpacklo_ps","_mm_maskz_xor_epi32","_mm_maskz_xor_epi64","_mm_max_epi16","_mm_max_epi32","_mm_max_epi64","_mm_max_epi8","_mm_max_epu16","_mm_max_epu32","_mm_max_epu64","_mm_max_epu8","_mm_max_pd","_mm_max_ps","_mm_max_round_sd","_mm_max_round_ss","_mm_max_sd","_mm_max_ss","_mm_mfence","_mm_min_epi16","_mm_min_epi32","_mm_min_epi8","_mm_min_epu16","_mm_min_epu32","_mm_min_epu64","_mm_min_epu8","_mm_min_pd","_mm_min_ps","_mm_min_round_sd","_mm_min_round_ss","_mm_min_sd","_mm_min_ss","_mm_minpos_epu16","_mm_move_epi64","_mm_move_sd","_mm_move_ss","_mm_movedup_pd","_mm_movehdup_ps","_mm_movehl_ps","_mm_moveldup_ps","_mm_movelh_ps","_mm_movemask_epi8","_mm_movemask_pd","_mm_movemask_ps","_mm_movepi16_mask","_mm_movepi8_mask","_mm_movm_epi16","_mm_movm_epi8","_mm_mpsadbw_epu8","_mm_mul_epi32","_mm_mul_epu32","_mm_mul_pd","_mm_mul_ps","_mm_mul_round_sd","_mm_mul_round_ss","_mm_mul_sd","_mm_mul_ss","_mm_mulhi_epi16","_mm_mulhi_epu16","_mm_mulhrs_epi16","_mm_mullo_epi16","_mm_mullo_epi32","_mm_multishift_epi64_epi8","_mm_or_epi32","_mm_or_epi64","_mm_or_pd","_mm_or_ps","_mm_or_si128","_mm_packs_epi16","_mm_packs_epi32","_mm_packus_epi16","_mm_packus_epi32","_mm_pause","_mm_permute_pd","_mm_permute_ps","_mm_permutevar_pd","_mm_permutevar_ps","_mm_permutex2var_epi16","_mm_permutex2var_epi32","_mm_permutex2var_epi64","_mm_permutex2var_epi8","_mm_permutex2var_pd","_mm_permutex2var_ps","_mm_permutexvar_epi16","_mm_permutexvar_epi8","_mm_popcnt_epi16","_mm_popcnt_epi32","_mm_popcnt_epi64","_mm_popcnt_epi8","_mm_prefetch","_mm_rcp14_pd","_mm_rcp14_ps","_mm_rcp14_sd","_mm_rcp14_ss","_mm_rcp_ps","_mm_rcp_ss","_mm_rol_epi32","_mm_rol_epi64","_mm_rolv_epi32","_mm_rolv_epi64","_mm_ror_epi32","_mm_ror_epi64","_mm_rorv_epi32","_mm_rorv_epi64","_mm_round_pd","_mm_round_ps","_mm_round_sd","_mm_round_ss","_mm_roundscale_pd","_mm_roundscale_ps","_mm_roundscale_round_sd","_mm_roundscale_round_ss","_mm_roundscale_sd","_mm_roundscale_ss","_mm_rsqrt14_sd","_mm_rsqrt14_ss","_mm_rsqrt_ps","_mm_rsqrt_ss","_mm_sad_epu8","_mm_scalef_pd","_mm_scalef_ps","_mm_scalef_round_sd","_mm_scalef_round_ss","_mm_scalef_sd","_mm_scalef_ss","_mm_set1_epi16","_mm_set1_epi32","_mm_set1_epi64x","_mm_set1_epi8","_mm_set1_pd","_mm_set1_ps","_mm_set_epi16","_mm_set_epi32","_mm_set_epi64x","_mm_set_epi8","_mm_set_pd","_mm_set_pd1","_mm_set_ps","_mm_set_ps1","_mm_set_sd","_mm_set_ss","_mm_setcsr","_mm_setr_epi16","_mm_setr_epi32","_mm_setr_epi8","_mm_setr_pd","_mm_setr_ps","_mm_setzero_pd","_mm_setzero_ps","_mm_setzero_si128","_mm_sfence","_mm_sha1msg1_epu32","_mm_sha1msg2_epu32","_mm_sha1nexte_epu32","_mm_sha1rnds4_epu32","_mm_sha256msg1_epu32","_mm_sha256msg2_epu32","_mm_sha256rnds2_epu32","_mm_shldi_epi16","_mm_shldi_epi32","_mm_shldi_epi64","_mm_shldv_epi16","_mm_shldv_epi32","_mm_shldv_epi64","_mm_shrdi_epi16","_mm_shrdi_epi32","_mm_shrdi_epi64","_mm_shrdv_epi16","_mm_shrdv_epi32","_mm_shrdv_epi64","_mm_shuffle_epi32","_mm_shuffle_epi8","_mm_shuffle_pd","_mm_shuffle_ps","_mm_shufflehi_epi16","_mm_shufflelo_epi16","_mm_sign_epi16","_mm_sign_epi32","_mm_sign_epi8","_mm_sll_epi16","_mm_sll_epi32","_mm_sll_epi64","_mm_slli_epi16","_mm_slli_epi32","_mm_slli_epi64","_mm_slli_si128","_mm_sllv_epi16","_mm_sllv_epi32","_mm_sllv_epi64","_mm_sqrt_pd","_mm_sqrt_ps","_mm_sqrt_round_sd","_mm_sqrt_round_ss","_mm_sqrt_sd","_mm_sqrt_ss","_mm_sra_epi16","_mm_sra_epi32","_mm_sra_epi64","_mm_srai_epi16","_mm_srai_epi32","_mm_srai_epi64","_mm_srav_epi16","_mm_srav_epi32","_mm_srav_epi64","_mm_srl_epi16","_mm_srl_epi32","_mm_srl_epi64","_mm_srli_epi16","_mm_srli_epi32","_mm_srli_epi64","_mm_srli_si128","_mm_srlv_epi16","_mm_srlv_epi32","_mm_srlv_epi64","_mm_store1_pd","_mm_store1_ps","_mm_store_epi32","_mm_store_epi64","_mm_store_pd","_mm_store_pd1","_mm_store_ps","_mm_store_ps1","_mm_store_sd","_mm_store_si128","_mm_store_ss","_mm_storeh_pd","_mm_storel_epi64","_mm_storel_pd","_mm_storer_pd","_mm_storer_ps","_mm_storeu_epi16","_mm_storeu_epi32","_mm_storeu_epi64","_mm_storeu_epi8","_mm_storeu_pd","_mm_storeu_ps","_mm_storeu_si128","_mm_stream_pd","_mm_stream_ps","_mm_stream_sd","_mm_stream_si128","_mm_stream_si32","_mm_stream_si64","_mm_stream_ss","_mm_sub_epi16","_mm_sub_epi32","_mm_sub_epi64","_mm_sub_epi8","_mm_sub_pd","_mm_sub_ps","_mm_sub_round_sd","_mm_sub_round_ss","_mm_sub_sd","_mm_sub_ss","_mm_subs_epi16","_mm_subs_epi8","_mm_subs_epu16","_mm_subs_epu8","_mm_ternarylogic_epi32","_mm_ternarylogic_epi64","_mm_test_all_ones","_mm_test_all_zeros","_mm_test_epi16_mask","_mm_test_epi32_mask","_mm_test_epi64_mask","_mm_test_epi8_mask","_mm_test_mix_ones_zeros","_mm_testc_pd","_mm_testc_ps","_mm_testc_si128","_mm_testn_epi16_mask","_mm_testn_epi32_mask","_mm_testn_epi64_mask","_mm_testn_epi8_mask","_mm_testnzc_pd","_mm_testnzc_ps","_mm_testnzc_si128","_mm_testz_pd","_mm_testz_ps","_mm_testz_si128","_mm_tzcnt_32","_mm_tzcnt_64","_mm_ucomieq_sd","_mm_ucomieq_ss","_mm_ucomige_sd","_mm_ucomige_ss","_mm_ucomigt_sd","_mm_ucomigt_ss","_mm_ucomile_sd","_mm_ucomile_ss","_mm_ucomilt_sd","_mm_ucomilt_ss","_mm_ucomineq_sd","_mm_ucomineq_ss","_mm_undefined_pd","_mm_undefined_ps","_mm_undefined_si128","_mm_unpackhi_epi16","_mm_unpackhi_epi32","_mm_unpackhi_epi64","_mm_unpackhi_epi8","_mm_unpackhi_pd","_mm_unpackhi_ps","_mm_unpacklo_epi16","_mm_unpacklo_epi32","_mm_unpacklo_epi64","_mm_unpacklo_epi8","_mm_unpacklo_pd","_mm_unpacklo_ps","_mm_xor_epi32","_mm_xor_epi64","_mm_xor_pd","_mm_xor_ps","_mm_xor_si128","_mulx_u32","_mulx_u64","_pdep_u32","_pdep_u64","_pext_u32","_pext_u64","_popcnt32","_popcnt64","_rdrand16_step","_rdrand32_step","_rdrand64_step","_rdseed16_step","_rdseed32_step","_rdseed64_step","_rdtsc","_store_mask32","_store_mask64","_subborrow_u32","_subborrow_u64","_t1mskc_u32","_t1mskc_u64","_tzcnt_u32","_tzcnt_u64","_tzmsk_u32","_tzmsk_u64","_xabort","_xabort_code","_xbegin","_xend","_xgetbv","_xrstor","_xrstor64","_xrstors","_xrstors64","_xsave","_xsave64","_xsavec","_xsavec64","_xsaveopt","_xsaveopt64","_xsaves","_xsaves64","_xsetbv","_xtest","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmpxchg16b","eax","ebx","ecx","edx","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_cpuid","into","into","into","into","into","into","into","into","into","into","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ud2","IntoIter","TryFromSliceError","advance_back_by","advance_by","alive","as_mut_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","data","description","drop","empty","fmt","fmt","fmt","fold","from","from","from","from_fn","from_mut","from_ref","into","into","into_iter","is_empty","last","len","new","new_unchecked","next","next_back","provide","rfold","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from_fn","try_into","try_into","type_id","type_id","EscapeDefault","borrow","borrow_mut","clone","clone_into","data","escape_default","fmt","fmt","from","into","into_iter","last","next","next_back","range","size_hint","to_owned","to_string","try_from","try_into","type_id","assert_matches","debug_assert_matches","AsyncIterator","FromIter","Item","borrow","borrow_mut","clone","clone_into","fmt","from","from_iter","into","iter","poll_next","poll_next","size_hint","size_hint","to_owned","try_from","try_into","type_id","Borrow","BorrowMut","borrow","borrow_mut","BorrowError","BorrowMutError","Cell","LazyCell","OnceCell","Ref","RefCell","RefMut","SyncUnsafeCell","UnsafeCell","as_array_of_cells","as_ptr","as_ptr","as_slice_of_cells","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","default","default","default","deref","deref","deref","deref_mut","description","description","deserialize","deserialize","eq","eq","eq","filter_map","filter_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","ge","ge","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_or_init","get_or_try_init","gt","gt","inner","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","le","le","leak","leak","lt","lt","map","map","map_split","map_split","marker","new","new","new","new","new","new","partial_cmp","partial_cmp","provide","provide","raw_get","raw_get","replace","replace","replace_with","serialize","serialize","set","set","state","swap","swap","take","take","take","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_borrow","try_borrow_mut","try_borrow_unguarded","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_leak","update","value","value","value","value","value","value","CharTryFromError","DecodeUtf16","DecodeUtf16Error","EscapeDebug","EscapeDefault","EscapeUnicode","MAX","ParseCharError","REPLACEMENT_CHARACTER","ToLowercase","ToUppercase","TryFromCharError","UNICODE_VERSION","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","c","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","count","count","decode_utf16","description","description","description","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_digit","from_u32","from_u32_unchecked","hex_digit_idx","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","iter","kind","last","last","len","len","next","next","next","next","next","next","next_back","next_back","nth","provide","provide","provide","provide","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpaired_surrogate","Clone","Clone","clone","clone_from","Eq","Eq","Equal","Greater","Less","Ord","Ord","Ordering","PartialEq","PartialEq","PartialOrd","PartialOrd","Reverse","borrow","borrow","borrow_mut","borrow_mut","clamp","clone","clone","clone_from","clone_into","clone_into","cmp","cmp","cmp","default","deserialize","eq","eq","eq","fmt","fmt","from","from","ge","ge","get_hash","get_hash","gt","gt","hash","hash","into","into","is_eq","is_ge","is_gt","is_le","is_lt","is_ne","le","le","lt","lt","max","max","max_by","max_by_key","min","min","min_by","min_by_key","ne","partial_cmp","partial_cmp","partial_cmp","reverse","serialize","then","then_with","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AsMut","AsRef","Error","Error","FloatToInt","From","Infallible","Into","TryFrom","TryInto","as_mut","as_ref","borrow","borrow_mut","clone","clone_into","cmp","description","eq","fmt","fmt","from","from","from","from","get_hash","hash","identity","into","into","partial_cmp","provide","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","Default","Default","default","default","Error","Source","borrow","borrow_mut","cause","clone","clone_into","current","description","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","fmt","from","into","into_iter","is","is","is","next","provide","request_ref","request_ref","request_ref","request_value","request_value","request_value","source","sources","to_owned","try_from","try_into","type_id","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","consts","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","consts","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","CStr","FromBytesUntilNulError","FromBytesWithNulError","NonZero_c_char","NonZero_c_int","NonZero_c_long","NonZero_c_longlong","NonZero_c_schar","NonZero_c_short","NonZero_c_uchar","NonZero_c_uint","NonZero_c_ulong","NonZero_c_ulonglong","NonZero_c_ushort","VaList","VaListImpl","_marker","_marker","arg","as_ptr","as_ref","as_va_list","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","c_double","c_float","c_int","c_long","c_longlong","c_ptrdiff_t","c_schar","c_short","c_size_t","c_ssize_t","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","deref_mut","description","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fp_offset","from","from","from","from","from","from_bytes_until_nul","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","get_hash","gp_offset","hash","index","inner","inner","into","into","into","into","into","into_c_string","is_empty","kind","overflow_arg_area","partial_cmp","provide","provide","reg_save_area","to_bytes","to_bytes_with_nul","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string_lossy","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_copy","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","align","alternate","args","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","clone_into","clone_into","clone_into","cmp","collect_str","custom","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","empty_name","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fields","fill","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_hash","has_fields","has_fields","has_key","hash","inner","inner","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","pieces","precision","precision","provide","result","result","result","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","sign_aware_zero_pad","sign_minus","sign_plus","state","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","Future","IntoFuture","IntoFuture","Output","Output","Pending","PollFn","Ready","_data","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","f","fmt","fmt","fmt","from","from","from","into","into","into","into_future","into_future","into_future","into_future","into_inner","join","pending","poll","poll","poll","poll","poll_fn","ready","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BuildHasher","BuildHasherDefault","Hash","Hash","Hasher","Hasher","SipHasher","borrow","borrow","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","clone","clone_into","clone_into","default","default","eq","finish","finish","fmt","fmt","from","from","hash","hash_one","hash_slice","into","into","new","new_with_keys","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","black_box","must_use","spin_loop","unreachable_unchecked","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","abort","add_with_overflow","arith_offset","assert_inhabited","assert_mem_uninitialized_valid","assert_zero_valid","assume","atomic_and_acqrel","atomic_and_acquire","atomic_and_relaxed","atomic_and_release","atomic_and_seqcst","atomic_cxchg_acqrel_acquire","atomic_cxchg_acqrel_relaxed","atomic_cxchg_acqrel_seqcst","atomic_cxchg_acquire_acquire","atomic_cxchg_acquire_relaxed","atomic_cxchg_acquire_seqcst","atomic_cxchg_relaxed_acquire","atomic_cxchg_relaxed_relaxed","atomic_cxchg_relaxed_seqcst","atomic_cxchg_release_acquire","atomic_cxchg_release_relaxed","atomic_cxchg_release_seqcst","atomic_cxchg_seqcst_acquire","atomic_cxchg_seqcst_relaxed","atomic_cxchg_seqcst_seqcst","atomic_cxchgweak_acqrel_acquire","atomic_cxchgweak_acqrel_relaxed","atomic_cxchgweak_acqrel_seqcst","atomic_cxchgweak_acquire_acquire","atomic_cxchgweak_acquire_relaxed","atomic_cxchgweak_acquire_seqcst","atomic_cxchgweak_relaxed_acquire","atomic_cxchgweak_relaxed_relaxed","atomic_cxchgweak_relaxed_seqcst","atomic_cxchgweak_release_acquire","atomic_cxchgweak_release_relaxed","atomic_cxchgweak_release_seqcst","atomic_cxchgweak_seqcst_acquire","atomic_cxchgweak_seqcst_relaxed","atomic_cxchgweak_seqcst_seqcst","atomic_fence_acqrel","atomic_fence_acquire","atomic_fence_release","atomic_fence_seqcst","atomic_load_acquire","atomic_load_relaxed","atomic_load_seqcst","atomic_load_unordered","atomic_max_acqrel","atomic_max_acquire","atomic_max_relaxed","atomic_max_release","atomic_max_seqcst","atomic_min_acqrel","atomic_min_acquire","atomic_min_relaxed","atomic_min_release","atomic_min_seqcst","atomic_nand_acqrel","atomic_nand_acquire","atomic_nand_relaxed","atomic_nand_release","atomic_nand_seqcst","atomic_or_acqrel","atomic_or_acquire","atomic_or_relaxed","atomic_or_release","atomic_or_seqcst","atomic_singlethreadfence_acqrel","atomic_singlethreadfence_acquire","atomic_singlethreadfence_release","atomic_singlethreadfence_seqcst","atomic_store_relaxed","atomic_store_release","atomic_store_seqcst","atomic_store_unordered","atomic_umax_acqrel","atomic_umax_acquire","atomic_umax_relaxed","atomic_umax_release","atomic_umax_seqcst","atomic_umin_acqrel","atomic_umin_acquire","atomic_umin_relaxed","atomic_umin_release","atomic_umin_seqcst","atomic_xadd_acqrel","atomic_xadd_acquire","atomic_xadd_relaxed","atomic_xadd_release","atomic_xadd_seqcst","atomic_xchg_acqrel","atomic_xchg_acquire","atomic_xchg_relaxed","atomic_xchg_release","atomic_xchg_seqcst","atomic_xor_acqrel","atomic_xor_acquire","atomic_xor_relaxed","atomic_xor_release","atomic_xor_seqcst","atomic_xsub_acqrel","atomic_xsub_acquire","atomic_xsub_relaxed","atomic_xsub_release","atomic_xsub_seqcst","bitreverse","black_box","breakpoint","bswap","caller_location","ceilf32","ceilf64","const_allocate","const_deallocate","const_eval_select","copy","copy_nonoverlapping","copysignf32","copysignf64","cosf32","cosf64","ctlz","ctlz_nonzero","ctpop","cttz","cttz_nonzero","discriminant_value","drop_in_place","exact_div","exp2f32","exp2f64","expf32","expf64","fabsf32","fabsf64","fadd_fast","fdiv_fast","float_to_int_unchecked","floorf32","floorf64","fmaf32","fmaf64","fmul_fast","forget","frem_fast","fsub_fast","likely","log10f32","log10f64","log2f32","log2f64","logf32","logf64","maxnumf32","maxnumf64","min_align_of","min_align_of_val","minnumf32","minnumf64","mir","mul_with_overflow","nearbyintf32","nearbyintf64","needs_drop","nontemporal_store","offset","option_payload_ptr","powf32","powf64","powif32","powif64","pref_align_of","prefetch_read_data","prefetch_read_instruction","prefetch_write_data","prefetch_write_instruction","ptr_guaranteed_cmp","ptr_mask","ptr_offset_from","ptr_offset_from_unsigned","raw_eq","read_via_copy","rintf32","rintf64","rotate_left","rotate_right","roundevenf32","roundevenf64","roundf32","roundf64","rustc_peek","saturating_add","saturating_sub","sinf32","sinf64","size_of","size_of_val","sqrtf32","sqrtf64","sub_with_overflow","transmute","truncf32","truncf64","try","type_id","type_name","unaligned_volatile_load","unaligned_volatile_store","unchecked_add","unchecked_div","unchecked_mul","unchecked_rem","unchecked_shl","unchecked_shr","unchecked_sub","unlikely","unreachable","variant_count","volatile_copy_memory","volatile_copy_nonoverlapping_memory","volatile_load","volatile_set_memory","volatile_store","vtable_align","vtable_size","wrapping_add","wrapping_mul","wrapping_sub","write_bytes","BasicBlock","Call","CastTransmute","Checked","Deinit","Discriminant","Drop","Field","Goto","Len","Move","Retag","Return","SetDiscriminant","Static","StaticMut","StorageDead","StorageLive","Unreachable","Variant","borrow","borrow_mut","from","into","mir","place","try_from","try_into","type_id","MAX","MIN","ArrayChunks","ByRefSized","Chain","Cloned","Copied","Cycle","DoubleEndedIterator","Empty","Enumerate","ExactSizeIterator","Extend","Filter","FilterMap","FlatMap","Flatten","FromFn","FromIterator","Fuse","FusedIterator","Inspect","Intersperse","IntersperseWith","IntoIter","IntoIterator","Item","Item","Iterator","Map","MapWhile","Once","OnceWith","Peekable","Product","Repeat","RepeatWith","Rev","Scan","Skip","SkipWhile","Step","StepBy","Successors","Sum","Take","TakeWhile","TrustedLen","TrustedStep","Zip","a","a","a_len","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","all","any","array_chunks","b","b","backward","backward_checked","backward_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp_by","collect","collect_into","copied","count","count","count","count","count","count","count","count","count","count","count","count","count","cycle","default","default","default","default","default","default","default","default","element","empty","enumerate","eq","eq_by","extend","extend_one","extend_reserve","f","f","f","f","filter","filter_map","find","find","find","find","find_map","first_take","flag","flag","flat_map","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","for_each","for_each","forward","forward_checked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_generator","from_iter","fuse","ge","gen","gt","index","inner","inner","inner","inspect","intersperse","intersperse_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","it","it","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","last","last","last","last","last","last","last","last","last","le","len","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map_while","max","max_by","max_by_key","min","min_by","min_by_key","n","n","ne","needs_sep","needs_sep","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_chunk","next_chunk","next_if","next_if_eq","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","once","once_with","orig","partial_cmp","partial_cmp_by","partition","partition_in_place","peek","peek_mut","peekable","peeked","position","predicate","predicate","predicate","predicate","product","product","reduce","remainder","repeat","repeat_with","repeater","rev","rfind","rfind","rfind","rfind","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rposition","scan","separator","separator","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip_while","state","step","step_by","steps_between","succ","successors","sum","sum","take","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_collect","try_find","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unzip","zip","zip","Copy","Copy","Destruct","Discriminant","DiscriminantKind","FnPtr","PhantomData","PhantomPinned","PointerLike","Send","Sized","StructuralEq","StructuralPartialEq","Sync","Tuple","Unpin","Unsize","addr","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deserialize","deserialize","eq","eq","fmt","fmt","from","from","get_hash","get_hash","hash","hash","into","into","is_valid_bit_pattern","is_valid_bit_pattern","partial_cmp","partial_cmp","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ALIGNMENT","Assume","BikeshedIntrinsicFrom","Discriminant","LIFETIMES","ManuallyDrop","MaybeUninit","NOTHING","SAFETY","VALIDITY","add","align_of","align_of_val","align_of_val_raw","alignment","and","array_assume_init","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","but_not","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","copy","default","deref","deref_mut","discriminant","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","forget","forget_unsized","from","from","from","from","get_hash","get_hash","hash","hash","into","into","into","into","into_inner","is_valid_bit_pattern","lifetimes","min_align_of","min_align_of_val","needs_drop","new","new","partial_cmp","replace","safety","size_of","size_of_val","size_of_val_raw","slice_as_bytes","slice_as_bytes_mut","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","sub","swap","take","take","to_owned","to_owned","to_owned","to_owned","transmute","transmute_copy","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninit","uninit","uninit_array","uninitialized","validity","value","value","variant_count","write","write_slice","write_slice_cloned","zeroed","zeroed","AddrParseError","AdminLocal","BROADCAST","Global","InterfaceLocal","IpAddr","Ipv4Addr","Ipv6Addr","Ipv6MulticastScope","LOCALHOST","LOCALHOST","LinkLocal","OrganizationLocal","RealmLocal","SiteLocal","SocketAddr","SocketAddrV4","SocketAddrV6","UNSPECIFIED","UNSPECIFIED","V4","V4","V6","V6","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","flowinfo","flowinfo","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","ip","ip","ip","ip","ip","is_benchmarking","is_benchmarking","is_benchmarking","is_broadcast","is_documentation","is_documentation","is_documentation","is_global","is_global","is_global","is_ipv4","is_ipv4","is_ipv6","is_ipv6","is_link_local","is_loopback","is_loopback","is_loopback","is_multicast","is_multicast","is_multicast","is_private","is_reserved","is_shared","is_unicast","is_unicast_global","is_unicast_link_local","is_unique_local","is_unspecified","is_unspecified","is_unspecified","multicast_scope","new","new","new","new","new","octets","octets","octets","octets","parse_ascii","parse_ascii","parse_ascii","parse_ascii","parse_ascii","parse_ascii","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","port","port","port","port","port","provide","scope_id","scope_id","segments","set_flowinfo","set_ip","set_ip","set_ip","set_port","set_port","set_port","set_scope_id","to_canonical","to_canonical","to_ipv4","to_ipv4_mapped","to_ipv6_compatible","to_ipv6_mapped","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","Empty","FpCategory","Infinite","IntErrorKind","InvalidDigit","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","Nan","NegOverflow","NonZeroI128","NonZeroI16","NonZeroI32","NonZeroI64","NonZeroI8","NonZeroIsize","NonZeroU128","NonZeroU16","NonZeroU32","NonZeroU64","NonZeroU8","NonZeroUsize","Normal","ParseFloatError","ParseIntError","PosOverflow","Saturating","Subnormal","TryFromIntError","Wrapping","Zero","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","default","default","description","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_f32","from_f64","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_u16","from_u32","from_u64","from_u8","from_usize","get","get","get","get","get","get","get","get","get","get","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_valid_bit_pattern","is_zero","kind","kind","kind","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","max_value","max_value","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","one","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","provide","provide","provide","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_one","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_f32","to_f64","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_add","wrapping_mul","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","Add","AddAssign","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Included","Index","IndexMut","Mul","MulAssign","Neg","Not","OneSidedRange","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","Target","Try","TryType","Unbounded","Yeet","Yield","Yielded","add","add_assign","advance_back_by","advance_by","as_mut","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","contains","contains","contains","contains","contains","contains","continue_value","default","default","deref","deref_mut","deserialize","deserialize","deserialize","div","div_assign","drop","end","end","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","exhausted","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from_output","from_output","from_residual","from_residual","get","get","get","get","get","get","get","get","get","get","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","is_break","is_continue","is_empty","is_empty","is_sorted","is_sorted","last","last","map","map_break","map_continue","max","max","min","min","mul","mul_assign","neg","new","next","next","next","next_back","next_back","not","nth","nth","nth","nth_back","nth_back","partial_cmp","rem","rem_assign","resume","rfold","serialize","serialize","serialize","shl","shl_assign","shr","shr_assign","size_hint","size_hint","size_hint","start","start","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","IntoIter","Iter","IterMut","None","Option","Some","and","and_then","as_deref","as_deref_mut","as_mut","as_mut_slice","as_pin_mut","as_pin_ref","as_ref","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cloned","cloned","cmp","copied","copied","default","deserialize","eq","expect","filter","flatten","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_output","from_residual","from_residual","get_hash","get_or_insert","get_or_insert_default","get_or_insert_with","hash","inner","inner","inner","insert","inspect","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_none","is_some","is_some_and","is_valid_bit_pattern","iter","iter_mut","map","map_or","map_or_else","next","next","next","next_back","next_back","next_back","ok_or","ok_or_else","or","or_else","partial_cmp","product","replace","serialize","size_hint","size_hint","size_hint","sum","take","to_owned","to_owned","to_owned","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","unzip","xor","zip","zip_with","AssertUnwindSafe","Location","PanicInfo","RefUnwindSafe","UnwindSafe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_once","caller","can_unwind","can_unwind","clone","clone_into","cmp","col","column","default","deref","deref_mut","eq","file","file","fmt","fmt","fmt","fmt","fmt","from","from","from","get_hash","hash","into","into","into","into_future","line","line","location","location","message","message","partial_cmp","payload","payload","poll","poll_next","size_hint","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","const_panic_fmt","panic","panic_display","panic_fmt","panic_nounwind","panic_nounwind_fmt","panic_str","unreachable_display","Pin","as_deref_mut","as_mut","as_ref","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","eq","fmt","fmt","fmt","from","from","ge","get_hash","get_mut","get_ref","get_unchecked_mut","gt","hash","into","into_future","into_inner","into_inner_unchecked","into_ref","le","lt","map_unchecked","map_unchecked_mut","ne","new","new_unchecked","partial_cmp","pin","poll","poll_next","resume","resume","set","size_hint","static_mut","static_ref","to_owned","to_string","try_from","try_into","type_id","rust_2015","rust_2018","rust_2021","rust_2024","v1","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","Hash","Into","IntoIter","IntoIterator","Item","Item","Iterator","None","Ok","Option","Ord","Ord","Output","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","Send","Sized","Some","Sync","Unpin","advance_back_by","advance_by","all","alloc_error_handler","any","array_chunks","as_mut","as_ref","assert","bench","by_ref","call","call_mut","call_once","cfg","cfg_accessible","cfg_eval","chain","clamp","clone","clone_from","cloned","cmp","cmp","cmp_by","collect","collect_into","column","compile_error","concat","concat_bytes","concat_idents","copied","count","cycle","default","derive","derive_const","drop","drop","enumerate","env","eq","eq","eq_by","extend","extend_one","extend_reserve","file","filter","filter_map","find","find_map","flat_map","flatten","fold","for_each","format_args","format_args_nl","from","fuse","ge","ge","global_allocator","gt","gt","include","include_bytes","include_str","inspect","intersperse","intersperse_with","into","into_iter","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","le","le","len","line","log_syntax","lt","lt","map","map_while","max","max","max_by","max_by_key","min","min","min_by","min_by_key","module_path","ne","ne","next","next_back","next_chunk","nth","nth_back","option_env","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","position","product","reduce","rev","rfind","rfold","rposition","scan","size_hint","skip","skip_while","step_by","stringify","sum","take","take_while","test","test_case","trace_macros","try_collect","try_find","try_fold","try_for_each","try_reduce","try_rfold","type_ascribe","unzip","zip","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","Hash","Into","IntoIter","IntoIterator","Item","Item","Iterator","None","Ok","Option","Ord","Ord","Output","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","Send","Sized","Some","Sync","Unpin","advance_back_by","advance_by","all","alloc_error_handler","any","array_chunks","as_mut","as_ref","assert","bench","by_ref","call","call_mut","call_once","cfg","cfg_accessible","cfg_eval","chain","clamp","clone","clone_from","cloned","cmp","cmp","cmp_by","collect","collect_into","column","compile_error","concat","concat_bytes","concat_idents","copied","count","cycle","default","derive","derive_const","drop","drop","enumerate","env","eq","eq","eq_by","extend","extend_one","extend_reserve","file","filter","filter_map","find","find_map","flat_map","flatten","fold","for_each","format_args","format_args_nl","from","fuse","ge","ge","global_allocator","gt","gt","include","include_bytes","include_str","inspect","intersperse","intersperse_with","into","into_iter","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","le","le","len","line","log_syntax","lt","lt","map","map_while","max","max","max_by","max_by_key","min","min","min_by","min_by_key","module_path","ne","ne","next","next_back","next_chunk","nth","nth_back","option_env","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","position","product","reduce","rev","rfind","rfold","rposition","scan","size_hint","skip","skip_while","step_by","stringify","sum","take","take_while","test","test_case","trace_macros","try_collect","try_find","try_fold","try_for_each","try_reduce","try_rfold","type_ascribe","unzip","zip","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","Error","Error","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","FromIterator","Hash","Into","IntoIter","IntoIterator","Item","Item","Iterator","None","Ok","Option","Ord","Ord","Output","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","Send","Sized","Some","Sync","TryFrom","TryInto","Unpin","advance_back_by","advance_by","all","alloc_error_handler","any","array_chunks","as_mut","as_ref","assert","bench","by_ref","call","call_mut","call_once","cfg","cfg_accessible","cfg_eval","chain","clamp","clone","clone_from","cloned","cmp","cmp","cmp_by","collect","collect_into","column","compile_error","concat","concat_bytes","concat_idents","copied","count","cycle","default","derive","derive_const","drop","drop","enumerate","env","eq","eq","eq_by","extend","extend_one","extend_reserve","file","filter","filter_map","find","find_map","flat_map","flatten","fold","for_each","format_args","format_args_nl","from","from_iter","fuse","ge","ge","global_allocator","gt","gt","include","include_bytes","include_str","inspect","intersperse","intersperse_with","into","into_iter","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","le","le","len","line","log_syntax","lt","lt","map","map_while","max","max","max_by","max_by_key","min","min","min_by","min_by_key","module_path","ne","ne","next","next_back","next_chunk","nth","nth_back","option_env","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","position","product","reduce","rev","rfind","rfold","rposition","scan","size_hint","skip","skip_while","step_by","stringify","sum","take","take_while","test","test_case","trace_macros","try_collect","try_find","try_fold","try_for_each","try_from","try_into","try_reduce","try_rfold","type_ascribe","unzip","zip","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","Error","Error","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","FromIterator","Hash","Into","IntoIter","IntoIterator","Item","Item","Iterator","None","Ok","Option","Ord","Ord","Output","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","Send","Sized","Some","Sync","TryFrom","TryInto","Unpin","advance_back_by","advance_by","all","alloc_error_handler","any","array_chunks","as_mut","as_ref","assert","bench","by_ref","call","call_mut","call_once","cfg","cfg_accessible","cfg_eval","chain","clamp","clone","clone_from","cloned","cmp","cmp","cmp_by","collect","collect_into","column","compile_error","concat","concat_bytes","concat_idents","copied","count","cycle","default","derive","derive_const","drop","drop","enumerate","env","eq","eq","eq_by","extend","extend_one","extend_reserve","file","filter","filter_map","find","find_map","flat_map","flatten","fold","for_each","format_args","format_args_nl","from","from_iter","fuse","ge","ge","global_allocator","gt","gt","include","include_bytes","include_str","inspect","intersperse","intersperse_with","into","into_iter","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","le","le","len","line","log_syntax","lt","lt","map","map_while","max","max","max_by","max_by_key","min","min","min_by","min_by_key","module_path","ne","ne","next","next_back","next_chunk","nth","nth_back","option_env","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","position","product","reduce","rev","rfind","rfold","rposition","scan","size_hint","skip","skip_while","step_by","stringify","sum","take","take_while","test","test_case","trace_macros","try_collect","try_find","try_fold","try_for_each","try_from","try_into","try_reduce","try_rfold","type_ascribe","unzip","zip","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","Hash","Into","IntoIter","IntoIterator","Item","Item","Iterator","None","Ok","Option","Ord","Ord","Output","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","Send","Sized","Some","Sync","Unpin","advance_back_by","advance_by","all","alloc_error_handler","any","array_chunks","as_mut","as_ref","assert","bench","by_ref","call","call_mut","call_once","cfg","cfg_accessible","cfg_eval","chain","clamp","clone","clone_from","cloned","cmp","cmp","cmp_by","collect","collect_into","column","compile_error","concat","concat_bytes","concat_idents","copied","count","cycle","default","derive","derive_const","drop","drop","enumerate","env","eq","eq","eq_by","extend","extend_one","extend_reserve","file","filter","filter_map","find","find_map","flat_map","flatten","fold","for_each","format_args","format_args_nl","from","fuse","ge","ge","global_allocator","gt","gt","include","include_bytes","include_str","inspect","intersperse","intersperse_with","into","into_iter","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","le","le","len","line","log_syntax","lt","lt","map","map_while","max","max","max_by","max_by_key","min","min","min_by","min_by_key","module_path","ne","ne","next","next_back","next_chunk","nth","nth_back","option_env","partial_cmp","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","position","product","reduce","rev","rfind","rfold","rposition","scan","size_hint","skip","skip_while","step_by","stringify","sum","take","take_while","test","test_case","trace_macros","try_collect","try_find","try_fold","try_for_each","try_reduce","try_rfold","type_ascribe","unzip","zip","bool","char","f32","f64","i128","i16","i32","i64","i8","isize","str","u128","u16","u32","u64","u8","usize","Alignment","DynMetadata","MIN","Metadata","NonNull","Pointee","addr","addr_of","addr_of_mut","align_of","as_mut","as_mut_ptr","as_non_null_ptr","as_nonzero","as_ptr","as_ref","as_uninit_mut","as_uninit_ref","as_uninit_slice","as_uninit_slice_mut","as_usize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","copy","copy_nonoverlapping","dangling","drop_in_place","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_exposed_addr","from_exposed_addr_mut","from_mut","from_raw_parts","from_raw_parts","from_raw_parts_mut","from_ref","get_hash","get_hash","get_hash","get_unchecked_mut","hash","hash","hash","hash","into","into","into","invalid","invalid_mut","layout","len","log2","map_addr","metadata","new","new","new_unchecked","new_unchecked","null","null_mut","of","partial_cmp","partial_cmp","partial_cmp","phantom","pointer","read","read_unaligned","read_volatile","replace","size_of","slice_from_raw_parts","slice_from_raw_parts","slice_from_raw_parts_mut","swap","swap_nonoverlapping","to_owned","to_owned","to_owned","to_raw_parts","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vtable_ptr","with_addr","write","write_bytes","write_unaligned","write_volatile","Err","IntoIter","Iter","IterMut","Ok","Result","and","and_then","as_deref","as_deref_mut","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cloned","cloned","cmp","copied","copied","deserialize","eq","err","expect","expect_err","flatten","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","from_output","from_residual","from_residual","get_hash","hash","inner","inner","inner","inspect","inspect_err","into","into","into","into","into_err","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_ok","is_err","is_err_and","is_ok","is_ok_and","iter","iter_mut","map","map_err","map_or","map_or_else","next","next","next","next_back","next_back","next_back","ok","or","or_else","partial_cmp","product","serialize","size_hint","size_hint","size_hint","sum","to_owned","to_owned","to_owned","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","BITMASK_LEN","BitMask","Bits","First","INDEX","INDEX","LANES","LaneCount","Mask","Mask","Mask","Mask","Mask","MaskElement","Scalar","Scalar","Scalar","Second","Simd","SimdElement","SimdFloat","SimdInt","SimdOrd","SimdPartialEq","SimdPartialOrd","SimdUint","SupportedLaneCount","Swizzle","Swizzle2","ToBitMask","Which","abs","abs","abs","abs","abs","abs","abs","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","all","any","as_array","as_mut","as_mut","as_mut_array","as_ref","as_ref","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","copysign","copysign","copysign","default","default","deinterleave","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","eq","eq","eq","f32x16","f32x2","f32x4","f32x8","f64x2","f64x4","f64x8","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bits","from_bits","from_bits","from_int","from_int_unchecked","from_slice","gather_or","gather_or_default","gather_select","gather_select_unchecked","get_hash","get_hash","hash","hash","i16x16","i16x2","i16x32","i16x4","i16x8","i32x16","i32x2","i32x4","i32x8","i64x2","i64x4","i64x8","i8x16","i8x32","i8x4","i8x64","i8x8","index","index_mut","interleave","into","into","into","into","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","is_subnormal","isizex2","isizex4","isizex8","lanes","mask16x16","mask16x32","mask16x4","mask16x8","mask32x16","mask32x2","mask32x4","mask32x8","mask64x2","mask64x4","mask64x8","mask8x16","mask8x32","mask8x64","mask8x8","masksizex2","masksizex4","masksizex8","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","ne","neg","neg","neg","neg","neg","neg","neg","not","not","not","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","recip","recip","recip","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","reverse","rotate_lanes_left","rotate_lanes_right","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","scatter","scatter_select","scatter_select_unchecked","select","select_mask","set","set_unchecked","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","signum","signum","signum","signum","signum","signum","signum","signum","signum","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_swizzle","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swizzle","swizzle2","test","test_unchecked","to_array","to_array","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_int","to_int_unchecked","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u16x16","u16x2","u16x32","u16x4","u16x8","u32x16","u32x2","u32x4","u32x8","u64x2","u64x4","u64x8","u8x16","u8x32","u8x4","u8x64","u8x8","usizex2","usizex4","usizex8","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","EscapeAscii","GetManyMutError","GroupBy","GroupByMut","Item","Iter","IterMut","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","SlicePattern","Split","SplitInclusive","SplitInclusiveMut","SplitMut","SplitN","SplitNMut","Windows","_marker","_marker","_marker","_marker","_marker","_private","advance_back_by","advance_back_by","advance_by","advance_by","all","all","any","any","as_mut_slice","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","chunk_size","chunk_size","chunk_size","chunk_size","chunk_size","chunk_size","chunk_size","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count","count","count","count","count","count","count","count","count","count","count","default","default","end","end","find","find","find_map","find_map","finished","finished","finished","finished","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_ptr_range","from_ptr_range","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","heapsort","index","index_mut","inner","inner","inner","inner","inner","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_slice","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_sorted_by","iter","iter","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","len","len","marker","memchr","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","num","position","position","pred","pred","pred","pred","predicate","predicate","provide","ptr","ptr","range","rem","rem","rem","rem","rem","rem","remainder","remainder","remainder","rposition","rposition","size","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","slice","slice","slice_head","sort","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","v","v","v","v","v","v","v","v","v","v","v","v","v","memchr","memrchr","TimSortRun","borrow","borrow_mut","clone","clone_into","fmt","from","heapsort","into","len","merge_sort","partition_at_index","quicksort","start","to_owned","try_from","try_into","type_id","Bytes","CharIndices","Chars","EncodeUtf16","Err","EscapeDebug","EscapeDefault","EscapeUnicode","FromStr","Lines","LinesAny","MatchIndices","Matches","ParseBoolError","RMatchIndices","RMatches","RSplit","RSplitN","RSplitTerminator","Split","SplitAsciiWhitespace","SplitInclusive","SplitN","SplitTerminator","SplitWhitespace","Utf8Chunk","Utf8Chunks","Utf8Error","all","any","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chars","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","description","description","eq","eq","eq","error_len","error_len","extra","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","front_offset","inner","inner","inner","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invalid","invalid","is_empty","iter","iter","last","last","last","last","last","last","len","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_code_point","nth","nth_back","offset","pattern","position","provide","provide","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","rfind","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_char_width","valid","valid","valid_up_to","valid_up_to","CharArrayRefSearcher","CharArraySearcher","CharPredicateSearcher","CharSearcher","CharSliceSearcher","Done","DoubleEndedSearcher","Match","Pattern","Reject","ReverseSearcher","SearchStep","Searcher","Searcher","StrSearcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","finger","finger_back","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","haystack","haystack","haystack","haystack","haystack","haystack","haystack","haystack","haystack","into","into","into","into","into","into","into","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","needle","needle","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_match","next_match","next_match","next_match","next_match","next_match","next_match","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_reject","next_reject","next_reject","next_reject","next_reject","next_reject_back","next_reject_back","next_reject_back","next_reject_back","next_reject_back","searcher","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_encoded","utf8_size","Exclusive","atomic","borrow","borrow_mut","default","fmt","from","from","from","from_mut","from_pin_mut","get_mut","get_pin_mut","inner","into","into_future","into_inner","new","poll","try_from","try_into","type_id","ATOMIC_BOOL_INIT","ATOMIC_I16_INIT","ATOMIC_I32_INIT","ATOMIC_I64_INIT","ATOMIC_I8_INIT","ATOMIC_ISIZE_INIT","ATOMIC_U16_INIT","ATOMIC_U32_INIT","ATOMIC_U64_INIT","ATOMIC_U8_INIT","ATOMIC_USIZE_INIT","AcqRel","Acquire","AtomicBool","AtomicI16","AtomicI32","AtomicI64","AtomicI8","AtomicIsize","AtomicPtr","AtomicU16","AtomicU32","AtomicU64","AtomicU8","AtomicUsize","Ordering","Relaxed","Release","SeqCst","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compiler_fence","default","default","default","default","default","default","default","default","default","default","default","default","eq","fence","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_byte_add","fetch_byte_sub","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_not","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_ptr_add","fetch_ptr_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","get_hash","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","load","load","load","load","load","load","load","load","load","load","load","load","new","new","new","new","new","new","new","new","new","new","new","new","p","spin_loop_hint","store","store","store","store","store","store","store","store","store","store","store","store","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","v","v","v","v","v","v","v","v","v","v","v","Context","Pending","Poll","RawWaker","RawWakerVTable","Ready","Ready","Waker","_marker","_marker2","as_raw","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","branch","clone","clone","clone","clone","clone_into","clone_into","clone_into","cmp","data","data","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_output","from_output","from_output","from_raw","from_residual","from_residual","from_residual","from_residual","from_waker","get_hash","hash","into","into","into","into","into","into","is_pending","is_ready","map","map_err","map_err","map_ok","map_ok","new","new","partial_cmp","ready","ready","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vtable","vtable","wake","wake","wake_by_ref","wake_by_ref","waker","waker","waker","will_wake","Duration","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","TryFromFloatSecsError","ZERO","add","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","deserialize","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","eq","eq","fmt","fmt","fmt","from","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","get_hash","hash","into","into","is_zero","kind","mul","mul_assign","mul_f32","mul_f64","nanos","new","partial_cmp","provide","saturating_add","saturating_mul","saturating_sub","secs","serialize","sub","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","to_owned","to_owned","to_string","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","type_id","type_id","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","Case_Ignorable","Cased","UNICODE_VERSION","conversions","to_lower","to_upper","MAX","MIN","BGR","BmpHeader","Character","ColorCode","DEBUG_RENDY","DEFAULT_MARGIN","DEFAULT_TEXT_BACKGROUND","DEFAULT_TEXT_FOREGROUND","DEFAULT_THEME_BACKGROUND","DWORD_SIZE","DebugRendy","FONT","FONT_GLYPHS","FONT_HEIGHT","FONT_WIDTH","Image","MARGIN_GRADIENT","PixelFormat","QueueCharacter","RGB","RendyInfo","TAB_SIZE","U8","auto_flush","backspace","backspace","bf_offset","bf_signature","bf_size","bg","bg_canvas","bi_bpp","bi_clr_important","bi_clr_used","bi_compression","bi_height","bi_image_size","bi_planes","bi_size","bi_width","bi_xcount","bi_ycount","bits_per_pixel","blue_mask","blue_mask_shift","blue_mask_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpp","buffer","byte_len","char","char","clear","clear_screen","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color","cols","cursor_visibility","dbg","double_buffer_flush","double_buffer_flush","draw_cursor","eq","eq","eq","eq","fg","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","from","from","from","from","from","from","from","from","generate_canvas","genloop","get_background","get_cursor_position","get_foreground","get_framebuffer","get_rendy_info","get_resolution","get_rows_cols","get_term_info","green_mask","green_mask_shift","green_mask_size","grid","horizontal_resolution","image","img_height","img_width","info","init","into","into","into","into","into","into","into","into","is_initialized","loop_external","loop_internal","map","new","new","newline","offset_x","offset_y","old_x_pos","old_y_pos","parse_bmp_image","pitch","pixel_format","plot_char","plot_pixel","print","println","push_to_queue","queue","queue_cursor","raw_put_char","red_mask","red_mask_shift","red_mask_size","reserved","reset_default","rows","scroll","set_auto_flush","set_auto_flush","set_cursor_position","set_cursor_position","set_cursor_visibility","set_text_bg","set_text_color","set_text_fg","stride","theme_background","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertical_resolution","write_character","write_str","write_string","x","x_pos","y","y_pos","INet","SocketAddr","Unix","as_inet","as_unix","borrow","borrow_mut","fmt","from","from_family","inet","into","try_from","try_into","type_id","unix","Connected","Disconnected","InetSocket","InetSocketInner","SocketState","address","bind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","default","default","dest","from","from","from","handle","incoming","inner","into","into","into","ioctl","is_non_block","metadata","new","open","poll","protocol","recv","recv","send","set_addr","set_state","src_port","sref","sref","state","try_from","try_from","try_from","try_into","try_into","try_into","typ","type_id","type_id","type_id","wq","AcceptQueue","Connected","Disconnected","Listening","Message","MessageQueue","UnixSocket","UnixSocketInner","UnixSocketState","accept","address","backlog","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","connect","connect_pair","data","default","default","default","default","fmt","from","from","from","from","from","from","handle","inner","into","into","into","into","into","into","is_connected","is_empty","is_empty","is_non_block","listen","messages","metadata","new","new","new","open","path_from_unix_sock","poll","pop","push","queue","read","read_at","recv","set_backlog","sockets","sref","state","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","weak","wq","write","write_at","ExecArgs","SysLog","add_argument","add_argument_dbg","args","borrow","borrow","borrow_mut","borrow_mut","default","exec_args_from_slice","extend","flush","from","from","fs","futex","generic_do_syscall","inner","into","into","ipc","name","net","new","process","push","push_into_stack","result","set_result","time","try_from","try_from","try_into","try_into","type_id","type_id","SETFL_MASK","access","chdir","close","do_poll","dup","dup2","epoll_create","epoll_ctl","epoll_pwait","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","event_fd","fcntl","fstat","getcwd","getdents","ioctl","link","mkdirat","open","pipe","poll","read","read_link","rename","rmdir","seek","stat","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","unlink","write","FUTEX_CONTAINER","FutexContainer","addr_as_futex_key","borrow","borrow_mut","even_inner","even_inner","from","futexes","get","get_alloc","get_futex_container","into","new","syscall_inner","syscall_inner","try_from","try_into","type_id","validate_futex_ptr","wait","wait","wake","wake","IPC_ROOT_NODE","Message","MessageQueue","become_root","blockqueue","borrow","borrow","borrow_mut","borrow_mut","data","discover_root","even_inner","even_inner","even_inner","even_inner","from","from","from","handle_receive","into","into","new","queue","recv","send","syscall_inner","syscall_inner","syscall_inner","syscall_inner","try_from","try_from","try_into","try_into","type_id","type_id","accept","bind","connect","create_socket","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","listen","sock_recv","sock_send","socket","socket_addr_from_addr","socket_pair","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","HOSTNAME","backtrace","clone","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","even_inner","exec","exit","find_task_by_pid","fork","gethostname","getpgid","getpid","getppid","gettid","hostname","info","init_array","kill","log","mmap","mprotect","munmap","sethostname","setpgid","setsid","shutdown","sigaction","sigprocmask","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","syscall_inner","trace","uname","waitpid","CLOCK_TYPE_MONOTONIC","CLOCK_TYPE_REALTIME","TIMERS","check_timers","even_inner","even_inner","even_inner","even_inner","getitimer","gettime","setitimer","sleep","syscall_inner","syscall_inner","syscall_inner","syscall_inner","PANIC_HOOK_READY","UNWIND_INFO","UnwindInfo","_Unwind_Resume","borrow","borrow_mut","from","into","kernel_elf","new","prepare_panic","rust_begin_unwind","rust_eh_personality","set_panic_hook_ready","try_from","try_into","type_id","unwind_stack_trace","run","scheduler","signals","task","terminal","vm","ExitStatus","Normal","SCHEDULER","SCHEDULER_TIMER_US","SCHEDULER_VECTOR","Scheduler","SchedulerInterface","Signal","TaskContainer","await_io","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_task","current_task","current_task_optional","downcast_arc","exec","exit","exit","find_task","fmt","from","from","from","get_scheduler","init","init","inner","into","into","into","is_initialized","log_ptable","new","new","preempt","register_task","register_task","register_task","remove_task","round_robin","scheduler_irq_handler","sleep","tasks","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wake_up","RoundRobin","TaskQueue","await_io","awaiting","borrow","borrow","borrow_mut","borrow_mut","current_task","current_task_optional","dead","dead_wq","deadline_awaiting","exit","from","from","idle_task","init","into","into","new","new","preempt","preempt_task","preempter","push_awaiting","push_dead","push_deadline_awaiting","push_runnable","queue","register_task","runnable","schedule_check_deadline","schedule_next_task","sleep","sweep_dead","sweeper","try_from","try_from","try_into","try_into","type_id","type_id","wake_up","Blocked","Entries","IMMUTABLE_MASK","Ignored","Interrupted","SIGNAL_COUNT","SignalEntry","SignalError","SignalResult","Signals","TriggerResult","Triggered","blocked_mask","blocked_mask","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_override","check_for_signals","clear","clear_pending","clear_pending","clone","clone","clone","clone_into","clone_into","clone_into","copy_from","default","default","default","entries","entries","entries","eq","flags","flags","fmt","fmt","from","from","from","from","from","from_sigaction","handler","handler","has_pending","index","index_mut","into","into","into","into","into","into_sigaction","is_blocked","is_pending","mask","new","pending","pending","pending_mask","set_mask","set_pending","set_pending","set_signal","sigreturn","sigreturn","thread_pending","thread_pending_mask","to_owned","to_owned","to_owned","trigger","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Action","DEFAULT_ACTIONS","Handle","Ignore","action","borrow","borrow_mut","clone","clone_into","eq","from","handle_default","into","stop","terminate","terminate_thread","to_owned","try_from","try_into","type_id","AwaitingIo","Cwd","NEW","NEW","NEXT_PID","Runnable","SchedTaskAdapter","Task","TaskAdapter","TaskId","TaskState","Zombie","Zombies","add_child","add_zombie","allocate","arch_task","arch_task","arch_task_mut","as_usize","attach","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clink","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_process","cmp","controlling_terminal","cwd","cwd_dirent","default","default","enable_systrace","eq","eq","exec","executable","exit_status","exit_status","file_table","filesystem","fmt","fmt","fork","fork","from","from","from","from","from","from","from","from","get_cwd","get_hash","get_link","get_link","get_parent","get_value","get_value","gid","group_id","has_pending_io","hash","inode","into","into","into","into","into","into","into","into_zombie","is_group_leader","is_process_leader","is_session_leader","link","link_ops","link_ops","link_ops","link_ops","link_ops_mut","link_ops_mut","list","load_sleep_duration","make_child","message_queue","new","new","new","new","new","new_idle","new_kernel","parent","parent_pid","partial_cmp","path","pending_io","pid","pid","pointer_ops","pointer_ops","pointer_ops","pointer_ops","process_leader","remove_child","session_id","sessions","set_cwd","set_group_id","set_parent","set_pending_io","set_session_id","set_sleep_duration","sid","signal","signals","signals","sleep_duration","sref","state","state","systrace","systrace","this","tid","tid","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_state","vm","vm","waitpid","waitpid","wake_up","zombies","Group","LAZY","SESSIONS","Session","SessionList","__private_field","__stability","__static_ref_initialize","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_session","deref","find","find_group","from","from","from","from","groups","id","id","into","into","into","into","is_empty","is_empty","isolate","new","new","register_task","register_task","register_task","remove_task","remove_task","remove_task","signal","tasks","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","LineDiscipline","TerminalDevice","attach","borrow","borrow_mut","buffer","foreground","foreground","from","into","is_empty","new","read","set_foreground","try_from","try_into","type_id","wait_queue","wq","write","ELF_HEADER_MAGIC","ELF_PT1_SIZE","ELF_PT2_64_SIZE","Elf","ElfLoadError","End","Full","IOError","InvalidClass","InvalidMagic","InvalidProgramHeaderIndex","LoadedBinary","MMapFile","Mapping","MemoryMapError","None","Partial","ProgramHeaderIter","Shebang","Start","UnmapResult","Vm","VmProtected","argument","argv","base_addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","contains_shebang","elf","end_addr","entry_point","envv","file","file","file","file","find_any_above","find_fixed_mapping","flags","fmt","fork_from","fork_from","from","from","from","from","from","from","from","from","from","from","handle_cow","handle_page_fault","handle_page_fault","handle_pf_file","handle_pf_private_anon","header","header","inner","interpreter","into","into","into","into","into","into","into","into","into","into","into_iter","load_bin","load_bin","map_copied","mappings","mmap","mmap","mprotect","mprotect","munmap","munmap","new","new","new","new","new","new","next","next_index","offset","parse_elf_header","parse_program_header","parse_shebang","program_iter","protection","refresh_flags","size","size","split","start_addr","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","CeilDiv","Downcastable","PerCpu","StackHelper","VolatileCell","align_down","as_any","as_mut_ptr","bitmap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","ceil_div","ceil_div_impl","data","dma","from","from","from","get","get","get","get_by","get_mut","into","into","into","new","new","new_uninit","offset","ptr","set","skip_by","slice_into_bytes","sync","top","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate_array_mut","validate_mut_ptr","validate_ptr","validate_slice","validate_slice_mut","validate_str","value","write","write_bytes","write_slice","BLOCK_BITS","Bitmap","bitmap","borrow","borrow_mut","calculate_blocks","empty","find_first_set","find_first_unset","fmt","from","into","is_set","new_in","set","try_from","try_into","type_id","Buffer","RingBuffer","append_byte","borrow","borrow","borrow_mut","borrow_mut","clear_buffer","data","extract","fmt","from","from","has_data","into","into","new","new","position","read_data","rotate","storage","try_from","try_from","try_into","try_into","type_id","type_id","write_data","write_str","Dma","DmaAllocator","DmaBuffer","addr","allocate","assume_init","borrow","borrow","borrow_mut","borrow_mut","deallocate","deref","deref_mut","fmt","from","from","into","into","new_uninit_slice","try_from","try_from","try_into","try_into","type_id","type_id","zeroed","BMutex","BMutexGuard","BlockQueue","IrqGuard","Mutex","MutexGuard","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","drop","force_unlock","from","from","from","from","from","from","guard","guard","inner","insert","into","into","into","into","into","into","irq_lock","is_empty","lock","lock","lock_irq","locked","mutex","new","new","new","new","notify_complete","queue","remove","spin","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","wq"],"q":[[0,"aero_kernel"],[27,"aero_kernel::acpi"],[77,"aero_kernel::acpi::aml"],[93,"aero_kernel::acpi::fadt"],[141,"aero_kernel::acpi::hpet"],[159,"aero_kernel::acpi::madt"],[249,"aero_kernel::acpi::mcfg"],[278,"aero_kernel::acpi::rsdp"],[343,"aero_kernel::acpi::sdt"],[366,"aero_kernel::arch"],[367,"aero_kernel::arch::x86_64"],[391,"aero_kernel::arch::x86_64::apic"],[461,"aero_kernel::arch::x86_64::controlregs"],[1113,"aero_kernel::arch::x86_64::gdt"],[1377,"aero_kernel::arch::x86_64::interrupts"],[1471,"aero_kernel::arch::x86_64::interrupts::exceptions"],[1494,"aero_kernel::arch::x86_64::interrupts::idt"],[1724,"aero_kernel::arch::x86_64::io"],[1763,"aero_kernel::arch::x86_64::signals"],[1782,"aero_kernel::arch::x86_64::syscall"],[1792,"aero_kernel::arch::x86_64::task"],[1869,"aero_kernel::arch::x86_64::time"],[1882,"aero_kernel::arch::x86_64::tls"],[1913,"aero_kernel::cmdline"],[1930,"aero_kernel::drivers"],[1941,"aero_kernel::drivers::block"],[1944,"aero_kernel::drivers::block::ahci"],[3165,"aero_kernel::drivers::block::ide"],[3212,"aero_kernel::drivers::block::ide::channel"],[3273,"aero_kernel::drivers::block::ide::registers"],[3791,"aero_kernel::drivers::block::nvme"],[4011,"aero_kernel::drivers::block::nvme::command"],[4469,"aero_kernel::drivers::block::nvme::queue"],[4533,"aero_kernel::drivers::drm"],[4681,"aero_kernel::drivers::drm::rawfb"],[4699,"aero_kernel::drivers::e1000"],[5438,"aero_kernel::drivers::keyboard"],[5693,"aero_kernel::drivers::lai"],[5726,"aero_kernel::drivers::mouse"],[5865,"aero_kernel::drivers::pci"],[6205,"aero_kernel::drivers::pci::Bar"],[6211,"aero_kernel::drivers::pty"],[6316,"aero_kernel::drivers::tty"],[6437,"aero_kernel::drivers::uart_16550"],[6587,"aero_kernel::fs"],[6696,"aero_kernel::fs::block"],[6800,"aero_kernel::fs::block::gpt"],[6876,"aero_kernel::fs::cache"],[6987,"aero_kernel::fs::devfs"],[7099,"aero_kernel::fs::epoll"],[7114,"aero_kernel::fs::eventfd"],[7128,"aero_kernel::fs::ext2"],[7204,"aero_kernel::fs::ext2::disk"],[7381,"aero_kernel::fs::ext2::group_desc"],[7411,"aero_kernel::fs::file_table"],[7458,"aero_kernel::fs::inode"],[7659,"aero_kernel::fs::pipe"],[7679,"aero_kernel::fs::procfs"],[7744,"aero_kernel::fs::ramfs"],[7805,"aero_kernel::logger"],[7826,"aero_kernel::mem"],[7847,"aero_kernel::mem::alloc"],[7874,"aero_kernel::mem::paging"],[7959,"aero_kernel::mem::paging::addr"],[8076,"aero_kernel::mem::paging::frame"],[8208,"aero_kernel::mem::paging::mapper"],[8412,"aero_kernel::mem::paging::mapper::TranslateResult"],[8415,"aero_kernel::mem::paging::page"],[8582,"aero_kernel::mem::paging::page_table"],[8837,"aero_kernel::mem::pti"],[8840,"aero_kernel::mem::slab"],[8878,"aero_kernel::mem::vmalloc"],[8940,"aero_kernel::modules"],[8968,"aero_kernel::net"],[9070,"aero_kernel::net::arp"],[9094,"aero_kernel::net::checksum"],[9113,"aero_kernel::net::ethernet"],[9165,"aero_kernel::net::ip"],[9230,"aero_kernel::net::udp"],[9263,"aero_kernel::prelude"],[9264,"aero_kernel::prelude::rust_2021"],[9603,"aero_kernel::prelude::rust_2021::_core"],[9693,"aero_kernel::prelude::rust_2021::_core::alloc"],[9772,"aero_kernel::prelude::rust_2021::_core::any"],[9828,"aero_kernel::prelude::rust_2021::_core::arch"],[9831,"aero_kernel::prelude::rust_2021::_core::arch::x86_64"],[15039,"aero_kernel::prelude::rust_2021::_core::array"],[15092,"aero_kernel::prelude::rust_2021::_core::ascii"],[15114,"aero_kernel::prelude::rust_2021::_core::assert_matches"],[15116,"aero_kernel::prelude::rust_2021::_core::async_iter"],[15136,"aero_kernel::prelude::rust_2021::_core::borrow"],[15140,"aero_kernel::prelude::rust_2021::_core::cell"],[15359,"aero_kernel::prelude::rust_2021::_core::char"],[15551,"aero_kernel::prelude::rust_2021::_core::clone"],[15555,"aero_kernel::prelude::rust_2021::_core::cmp"],[15634,"aero_kernel::prelude::rust_2021::_core::convert"],[15673,"aero_kernel::prelude::rust_2021::_core::default"],[15677,"aero_kernel::prelude::rust_2021::_core::error"],[15716,"aero_kernel::prelude::rust_2021::_core::f32"],[15731,"aero_kernel::prelude::rust_2021::_core::f32::consts"],[15750,"aero_kernel::prelude::rust_2021::_core::f64"],[15765,"aero_kernel::prelude::rust_2021::_core::f64::consts"],[15784,"aero_kernel::prelude::rust_2021::_core::ffi"],[15915,"aero_kernel::prelude::rust_2021::_core::fmt"],[16134,"aero_kernel::prelude::rust_2021::_core::future"],[16187,"aero_kernel::prelude::rust_2021::_core::hash"],[16245,"aero_kernel::prelude::rust_2021::_core::hint"],[16249,"aero_kernel::prelude::rust_2021::_core::i128"],[16251,"aero_kernel::prelude::rust_2021::_core::i16"],[16253,"aero_kernel::prelude::rust_2021::_core::i32"],[16255,"aero_kernel::prelude::rust_2021::_core::i64"],[16257,"aero_kernel::prelude::rust_2021::_core::i8"],[16259,"aero_kernel::prelude::rust_2021::_core::intrinsics"],[16491,"aero_kernel::prelude::rust_2021::_core::intrinsics::mir"],[16520,"aero_kernel::prelude::rust_2021::_core::isize"],[16522,"aero_kernel::prelude::rust_2021::_core::iter"],[17401,"aero_kernel::prelude::rust_2021::_core::marker"],[17458,"aero_kernel::prelude::rust_2021::_core::mem"],[17586,"aero_kernel::prelude::rust_2021::_core::net"],[17851,"aero_kernel::prelude::rust_2021::_core::num"],[21296,"aero_kernel::prelude::rust_2021::_core::ops"],[21708,"aero_kernel::prelude::rust_2021::_core::option"],[21840,"aero_kernel::prelude::rust_2021::_core::panic"],[21904,"aero_kernel::prelude::rust_2021::_core::panicking"],[21912,"aero_kernel::prelude::rust_2021::_core::pin"],[21963,"aero_kernel::prelude::rust_2021::_core::prelude"],[21968,"aero_kernel::prelude::rust_2021::_core::prelude::rust_2015"],[22151,"aero_kernel::prelude::rust_2021::_core::prelude::rust_2018"],[22334,"aero_kernel::prelude::rust_2021::_core::prelude::rust_2021"],[22525,"aero_kernel::prelude::rust_2021::_core::prelude::rust_2024"],[22716,"aero_kernel::prelude::rust_2021::_core::prelude::v1"],[22899,"aero_kernel::prelude::rust_2021::_core::primitive"],[22916,"aero_kernel::prelude::rust_2021::_core::ptr"],[23038,"aero_kernel::prelude::rust_2021::_core::result"],[23157,"aero_kernel::prelude::rust_2021::_core::simd"],[24028,"aero_kernel::prelude::rust_2021::_core::slice"],[24614,"aero_kernel::prelude::rust_2021::_core::slice::memchr"],[24616,"aero_kernel::prelude::rust_2021::_core::slice::sort"],[24634,"aero_kernel::prelude::rust_2021::_core::str"],[25103,"aero_kernel::prelude::rust_2021::_core::str::pattern"],[25256,"aero_kernel::prelude::rust_2021::_core::sync"],[25278,"aero_kernel::prelude::rust_2021::_core::sync::atomic"],[25729,"aero_kernel::prelude::rust_2021::_core::task"],[25846,"aero_kernel::prelude::rust_2021::_core::time"],[25933,"aero_kernel::prelude::rust_2021::_core::u128"],[25935,"aero_kernel::prelude::rust_2021::_core::u16"],[25937,"aero_kernel::prelude::rust_2021::_core::u32"],[25939,"aero_kernel::prelude::rust_2021::_core::u64"],[25941,"aero_kernel::prelude::rust_2021::_core::u8"],[25943,"aero_kernel::prelude::rust_2021::_core::unicode"],[25947,"aero_kernel::prelude::rust_2021::_core::unicode::conversions"],[25949,"aero_kernel::prelude::rust_2021::_core::usize"],[25951,"aero_kernel::rendy"],[26161,"aero_kernel::socket"],[26177,"aero_kernel::socket::inet"],[26230,"aero_kernel::socket::unix"],[26323,"aero_kernel::syscall"],[26360,"aero_kernel::syscall::fs"],[26443,"aero_kernel::syscall::futex"],[26467,"aero_kernel::syscall::ipc"],[26502,"aero_kernel::syscall::net"],[26528,"aero_kernel::syscall::process"],[26604,"aero_kernel::syscall::time"],[26620,"aero_kernel::unwind"],[26638,"aero_kernel::userland"],[26644,"aero_kernel::userland::scheduler"],[26705,"aero_kernel::userland::scheduler::round_robin"],[26749,"aero_kernel::userland::signals"],[26847,"aero_kernel::userland::signals::default"],[26867,"aero_kernel::userland::task"],[27048,"aero_kernel::userland::task::sessions"],[27104,"aero_kernel::userland::terminal"],[27124,"aero_kernel::userland::vm"],[27283,"aero_kernel::utils"],[27343,"aero_kernel::utils::bitmap"],[27361,"aero_kernel::utils::buffer"],[27391,"aero_kernel::utils::dma"],[27417,"aero_kernel::utils::sync"]],"d":["","","","","","","","The ACPI (Advanced Configuration and Power Interface) …","","","","","","","","","","","A kernel module is an object file that contains code that …","","","","","System Calls are used to call a kernel service from …","","","","","","","","","","","","","","","","","","","","","","","","The FADT ACPI table contains information about fixed …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Initialize the ACPI tables.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lookup ACPI table entry with the provided signature.","","","","","","","","","","","","","","","","","","","","Reference","","","Ensures that the system control interrupt (SCI) is properly","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The ACPI MCFG table describes the location of the PCI …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return a immutable reference to the MCFG table.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the ACPI table contains the MCFG entry.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the address of this tables data.","Get the length of this tables data.","Returns the argument unchanged.","Get SDT from its address.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","The GDT contains entries telling the CPU about memory …","","","Wrapper functions for the hardware IO using respective …","","","How does <code>x86_64</code> context switching work?","The PIT (Programmable Interval Timer) chip basically …","Thread Local Storage (TLS) are per-thread global …","","","","","","The count of all the active CPUs.","","","","","","","EOI register. Write-only.","Error Status Register (ESR). Read/write.","Local APIC ID register. Read-only. See Section 10.12.5.1 …","LVT Error register. Read/write.","LVT Timer register. Read/write. See Figure 10-8 for …","Spurious Interrupt Vector Register (SVR). Read/write.","Current Count register (for Timer). Read-only.","Divide Configuration Register (DCR; for Timer). …","Initial Count register (for Timer). Read/write.","Task Priority Register (TPR). Read/write. Bits 31:8 are …","","","","","","","","At power up, system hardware assigns a unique APIC ID to …","","","Writes to the EOI register to signal the end of an …","","","Returns the argument unchanged.","Processor support for XAPIC and X2APIC can be detected …","Returns the argument unchanged.","Get the local BSP’s id.","Return the number of active CPUs.","The local APIC records errors detected during interrupt …","Get a mutable reference to the local apic.","Initialize the local apic.","This function is responsible for initializing this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the index of the I/O APIC that handles this …","Get the maximum number of redirects this I/O APIC can …","Read from the <code>io_apic_id</code> I/O APIC as described by the MADT.","","","Write from the <code>io_apic_id</code> I/O APIC as described by the …","","","","","Creates a new local APIC instance.","Reads the provided APIC register (<code>register</code>) and returns …","Converts the provided APIC register (<code>register</code>) into its …","Converts the provided APIC register (<code>register</code>) into its …","Calibrates the local APIC timer using the programmable …","","Stops the APIC timer.","","","","","","","","Writes the provided 32-bit value (<code>value</code>) to the provided …","","","Enable automatic alignment checking if CR0.AM is set. Only …","","","","Enables automatic usermode alignment checking if …","","","","Set by hardware if last arithmetic operation generated a …","","","","Enables AVX instructions and using the upper halves of the …","","","","Enables MPX instructions and using the BNDCFGU and …","","","","Enables MPX instructions and using the BND0-BND3 bound …","","","","Disables some processor caches, specifics are …","","","","Set by hardware if last arithmetic operation generated a …","","Configuration flags of the [<code>Cr0</code>] register.","Controls cache settings for the level 4 page table.","Controls cache settings for the level 4 page table.","","","Enables I/O breakpoint capability and enforces treatment …","","","","","","","","","","","","","","","","Determines the order in which strings are processed.","","","","","","","","","","","","Force all x87 and MMX instructions to cause an <code>#NE</code> …","","","","Indicates support of 387DX math coprocessor instructions.","","","","","","","","Enables software running in 64-bit mode at any privilege …","","","","Enables AVX-512 instructions and using the upper ZMM …","","","","Processor feature identification flag.","","","","Enable interrupts.","","","","","","","","","","","","The high bit of the I/O Privilege Level field.","","","","The low bit of the I/O Privilege Level field.","","","","Enables 5-level paging on supported CPUs.","","","","Enables Lightweight Profiling extensions and managing LWP …","","","","Enables the machine-check exception mechanism.","","","","Enables monitoring of the coprocessor, typical for x87 …","","","","Enables using the PKRU register with <code>XSAVE</code>/<code>XRSTOR</code>.","","","","","Used by <code>iret</code> in hardware task switch mode to determine if …","","","","Ignored, should always be unset.","","","","Enables the native (internal) error reporting mechanism …","","","","Enables AVX-512 instructions and using the K0-K7 mask …","","","","Enable the use of legacy SSE instructions; allows using …","","","","Enables the SIMD floating-point exception (#XF) for …","","","","Enables extended processor state management instructions, …","","","","","","","","Set by hardware to indicate that the sign bit of the …","","","","","","","","Enables the global-page mechanism, which allows to make …","","","","Disable caching for the P4 table.","","","","Use a writethrough cache policy for the P4 table (else a …","","","","Enables the use of 4MB physical frames; ignored in long …","","","","Enables paging.","","","","Set by hardware if last result has an even number of 1 …","","","","Enables process-context identifiers (PCIDs).","","","","Allows software running at any privilege level to use the …","","","","Enables physical address extension and 2MB physical …","","","","","","","","","","","","Enables protected mode.","","","","Enables support for protected-mode virtual interrupts.","","","","Enables 4-level paging to associate each linear address …","","","","Allows to restart an instruction following an instruction …","","The RFLAGS register.","","","","","","","","","","","","","","","Enables SMX instructions.","","","","Set by hardware if last arithmetic operation resulted in a …","","","","Enables using MXCSR and the XMM registers with <code>XSAVE</code>/<code>XRSTOR</code>…","","","","Enables restrictions for supervisor-mode software when …","","","","Prevents the execution of instructions that reside in …","","","","Automatically set to 1 on <em>hardware</em> task switch.","","","","When set, only privilege-level 0 can execute the RDTSC or …","","","","Enable single-step mode for debugging.","","","","","","","","","","","","Prevents the execution of the SGDT, SIDT, SLDT, SMSW, and …","","","","Enable the virtual-8086 mode.","","","","Enables hardware-supported performance enhancements for …","","","","Virtual image of the INTERRUPT_FLAG bit.","","","","Indicates that an external, maskable interrupt is pending.","","","","Enables VMX insturctions.","","","","Controls whether supervisor-level writes to read-only …","","","","Enables using the x87 FPU state with <code>XSAVE</code>/<code>XRSTOR</code>.","","Configuration flags of the XCr0 register.","","","Set by hardware if last arithmetic operation resulted in a …","","","","Enables AVX-512 instructions and using the upper halves of …","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","Read the current set of CR0 flags.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register.","","Read the current set of CR4 flags.","","Returns the current value of the RFLAGS register.","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Write the given set of CR0 flags.","Write the given set of CR4 flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies which element to load into a segment from …","","","","","","","","","","","","Although hardware task-switching is not supported in …","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","Initialize the <em>actual</em> GDT stored in TLS.","Initialize the bootstrap GDT which is required to …","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The 16-bit offset to the I/O permission bit map from the …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","The full 64-bit canonical forms of the interrupt stack …","The limit high and the flags.","","","","","","","","","","Create a new GDT descriptor.","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The linear address of the table.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","The full 64-bit canonical forms of the stack pointers …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","The size of the table subtracted by 1. The size of the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","APIC (Advanced Programmable Interrupt Controller) is an …","","","","","","The global interrupt controller for x86 protected by a …","The interrupt controller interface. The task of an …","","","","","","","","","","PIC (Programmable Interrupt Controller) manages hardware …","","","","","","","","","","","","","","","","","","","","","","","","","","Disables the PIC interrupt controller.","Wrapper function to the <code>cli</code> assembly instruction used to …","Wrapper function to the <code>sti</code> assembly instruction used to …","Send EOI, indicating the completion of an interrupt.","Send EOI to the local APIC, indicating the completion of …","Send EOI to the PIC chip, indicating the completion of an …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Helper function to get the IRQ register. This function is …","Wrapper function to the <code>hlt</code> assembly instruction used to …","The IDT is similar to the Global Descriptor Table in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if interrupts are enabled.","Returns true if the PIC master chip is active.","Returns true if the PIC slave chip is active.","","","Creates a new interrupt controller using the PIC chip by …","Creates a new PIC controller. This function is responsible …","Panics","Sets the interrupt controller to APIC.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","IDT entry with all values defaulted to 0, ie <code>null</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Initialize the IDT.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Create a new IDT descriptor.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","","Inserts or removes the specified flags depending on the …","Set the IDT entry flags.","Set the handler function of the IDT entry.","Set the IDT entry offset.","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","APIC Location and Status (R/W).","","System Call Flag Mask (R/W).","Map of BASE Address of FS (R/W)  See Table 35-2.","Map of BASE Address of GS (R/W)  See Table 35-2.","Swap Target of BASE Address of GS (R/W) See Table 35-2.","IA-32e Mode System Call Target Address (R/W).","System Call Target Address (R/W).","","","","","","","","","","","Returns the argument unchanged.","Wrapper function to the <code>inb</code> assembly instruction used to …","Wrapper function to the <code>inl</code> assembly instruction used to …","Calls <code>U::from(self)</code>.","Wrapper function to the <code>inw</code> assembly instruction used to …","","Wrapper function to the <code>outb</code> assembly instruction used to …","Wrapper function to the <code>outl</code> assembly instruction used to …","Wrapper function to the <code>outw</code> assembly instruction used to …","","","Wrapper function to the <code>rdmsr</code> assembly instruction used","","","","","","This function is called after every <code>outb</code> and <code>outl</code> …","","Wrapper function to the <code>wrmsr</code> assembly instruction used to …","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Initializes support for the <code>syscall</code> and <code>sysret</code> …","Check the user-provided return addresses for system calls …","","","","","","","","","","","","","","","","","","","Allocates a new context switch stack for the process and …","Check out the module level documentation for more …","","","","","","","","","","","","","Deallocates the architecture-specific task resources. This …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the saved FS base for this task.","Returns the saved GS base for this task.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Sets the FS base to the provided <code>base</code>.","Sets the GS base to the provided <code>base</code>.","","","","","","","","","","","","","","Returns the first address outside the user range.","","","","","","","","","","Returns the current amount of PIT ticks.","","","This function is responsible for initializing the PIT chip …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","SAFETY: The GS base should point to the kernel PCR.","SAFETY: The GS base should point to the kernel PCR.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the raw kernel command line string.","Calls <code>U::from(self)</code>.","","","","If set, then the kernel logs will be redirected onto the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structure representing the ACHI driverhis function is responsible for initializing and running …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","","","","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Copies the data from the DMA buffer into the given buffer.","","","","","The data size of the DMA buffer.","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","This function is responsible for enabling bus mastering …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","Returns a reference-counting pointer to the AHCI driver.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","Creates a new DMA request for the given sector and count.","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Sets the length of the command FIS. The HBA uses this …","Sets the data byte count that indicates the length in …","Sets the interrupt on completion bit which indicates that …","","","","","","This function is responsible for allocating space for …","","The start address of the DMA buffer.","","This function is responsible for initializing and starting …","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","Controller supports one or more I/O Command Sets and …","","","","","Controller supports the NVM command set.","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Returns whether the <code>CFS</code> (Controller Fatal Status) bit is …","Returns the command sets that are supported by the …","Returns the stride between doorbell properties.","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns whether the controller is enable. See the …","Returns whether the controller is in a ready state.","","","Returns maximum individual queue size that the controller …","","Returns the the minimum host memory page size that the …","","","","Returns the complement of this set of flags.","","","","","","","","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","Sets the arbitration mechanism to be used.","Sets the command set to be used.","Sets the enable bit if <code>enable</code> is true, otherwise clears the","","Sets the I/O completion queue size to <code>size</code>.","Sets the I/O submission queue size to <code>size</code>.","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This field indicates the maximum value of a valid NSID for …","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the physical address of the completion queue.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the unique ID of this queue pair.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the number of entries in the queue.","","","","","","","","Returns the physical address of the submission queue.","","","","","","","","","","","","","","","","","","","Represents a display connector; transmits the signal to …","","","The direct rendering manager (DRM) exposes the GPUs …","","","Holds information in relation to the framebuffer; this …","","","","","Converts this mode object into a connector.","Converts this mode object into a CRTC.","Converts this mode object into an encoder.","Converts this mode object into a framebuffer.","","","","","","","","","","","","","","","","","","Returns weather the DRM device supports creating dumb …","","","","","","","","Copies the mode object IDs into the user provided buffer. …","","","The current CRTC for this encoder.","The current encoder for this connector.","","","","Downcast’s an <code>Arc</code>ed trait object to an <code>Arc</code>ed object if …","Returns a tuple containing the driver name, desc and date …","Returns a tuple containing the driver major, minor and …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the mode object’s ID.","","","","","","","","","","Installs and initializes the connector identifier.","Installs and initializes the CRTC identifier.","Installs and initializes the encoder identifier.","Installs and initializes the framebuffer identifier.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns tuple containing the maximum dimensions (<code>xmax</code>, <code>ymax</code>…","","Returns tuple containing the minimum dimensions (<code>xmin</code>, <code>ymin</code>…","","","A vector containing all of the possible display modes for …","","","","","","","","","","","","","","","","","A vector containing all the possible sibling encoders for …","A vector containing all the possible CRTCs for this …","A vector containing all the possible encoders for this …","","","","","","","","The current status of the connector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeead pointer for the receive descriptor buffer.","Upper 32 bits of the 64 bit descriptor base address.","Descriptor length and must be 128B aligned.","Lower bits of the 64 bit descriptor base address.","Tail pointer for the receive descriptor buffer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Controls the IPG (Inter Packet Gap) timer.","Upper 32 bits of the 64 bit descriptor base address.","Lower bits of the 64 bit descriptor base address.","Head pointer for the transmit descriptor ring.","Descriptor length and must be 128B aligned.","Tail pointer for the transmit descriptor ring.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","","","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the minimum number of byte times which must elapse for","Sets the number of attempts at retransmission prior to …","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","","","This function is responsible for initializing PS2 keyboard …","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents the flags currently set for the mouse.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","","","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deliver the signal to all the agents listed in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Enable the bridge to operate as a master on the primary …","Enables response to memory accesses on the primary …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Returns the value stored in the bar of the provided slot. …","","","Returns the value stored in the PCI header type register …","Returns the value stored in the PCI vendor ID register …","","Returns true if the PCI device driver handles the device …","","","","Lookup and initialize all PCI devices.","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","","This function is responsible for initializing the device …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An interface to a serial port that allows sending out …","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Initialize the serial ports if available.","Initialize the serial port.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","Creates the file if it does not exist.","","","","","","","","","","","","","","","","","","","","A slice of a path (akin to str).","","","","","","","","","","","","","","","","","","","","","","","General implementation for file system caching. Stuff like …","","","Returns an iterator over the components of the path.","","","The <code>/dev</code> directory contains the special device files for …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the path is absolute.","","","","","","","","Helper function that returns the parent path and the base …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Installs the provided block <code>device</code> into the filesyetm.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the page has been marked dirty.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the given data to the device at the given offset …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Starting LBA of array of partition entries (usually <code>2</code> for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a clone of the <code>CacheArc&lt;T&gt;</code> pointer.","Makes a clone of the <code>CacheWeak&lt;T&gt;</code> pointer.","","","","","","","","","Drops the <code>ArcCache</code>.","","","Returns the argument unchanged.","Converts an <code>Arc&lt;T&gt;</code> into a <code>CacheArc&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the cached page at the given offset, if not …","","","This function is responsible for initializing the inode …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Constructs a new <code>CacheArc&lt;T&gt;</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","","","","","Removes the item with the provided <code>key</code> from the cache.","","","","","","","","","","","","","","","","","","","","","","","Cache items that are longer have any active strong …","Attempts to upgrade the Weak pointer to an Arc, delaying …","Whether the cache item has active strong references …","","","","","","","","","","","Implementation of dev filesystem. (See the module-level …","Structure representing a device inode. This is internally …","","Implementation of the null device (akin <code>/dev/null</code>).","","A trait representing a device. A device has a device …","","","","","","","","","","","","","","","","","","","","","Returns the device marker (or simply the device ID) of the …","","","","","Returns the device name of this device. (See the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initializes the dev filesystem. (See the module-level …","","","","","","Installs the provided <code>device</code> in the device filesystem (ie. …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a new device inode by looking up the device with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds an event to the interest list.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Removes an event from the interest list.","","","","Change the settings associated with file descriptor in the …","Retrieves ready events, and delivers them to the …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Reads the data at <code>offset</code> as <code>T</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Revision 1 introduces variable inode sizes, extended …","","","","","","","Returns the length of the BGDT.","","","","","Returns the size of a block in bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of entries per block.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocates a free bit in the bitmap and returns its index.","Allocates a block pointer using the first fit allocation …","Allocates a new inode using the first fit allocation …","","","","","","","","","Returns the index of the block group which has free …","Returns the index of the block group which has free …","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Reads the block group descriptors from the disk.","Reads the bitmap at <code>block</code> from the disk. The bitmap is …","","","","","","","","","","","","","","","","","","","","Closes a file descriptor, so that its no longer refers to …","","","","","Duplicates the provided file descriptor based on the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new file handle.","","","","","","","","","","","","","","","","This variant expresses a <em>normal file</em> (akin: A file that …","","If the file type of the inode is FileType::Device, in that …","","A directory entry is basically the mapping of filename to …","","","","","Error condition happened on the associated file descriptor.","","","Enum representing the inner contents of a file. The file …","","","","The associated file is available for read operations.","","","Structure representing the crucial, characteristics of an …","This file does <em>not</em> and <em>cannot</em> have any contents in bytes. …","","","The associated file is available for write operations.","","","","This variant is used to store the backing socket inode.","","This variant is similar to the one above, except it’s …","","","","","Returns the set containing all flags.","Returns the inner UNIX socket inode if bound to one.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Downcast’s an <code>Arc</code>ed trait object to an <code>Arc</code>ed object if …","","Drops the directory entry from the cache.","Returns an empty set of flags.","","","","Fetches a cached directory entry item from the directory …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","Returns the inner cached inode item of the directory entry.","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if the file type of the inode is a directory.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if the file type of the inode is a file.","Returns <code>true</code> if the file type of the inode is a socket.","","","","Looks up the directory entry in the filesystem.","Creates a new dev inode with the provided <code>name</code> and the …","","","Returns the inode metadata of <code>this</code> inode.","Creates a new directory with the provided <code>name</code> in the …","","","","Creates a new cached directory entry, where the entry has …","Creates a new root cached directory entry where the there …","Returns the complement of this set of flags.","","","","","","","Read at the provided <code>offset</code> to the given <code>buffer</code>.","","Removes the specified flags in-place.","Renames a file (<code>src</code>) to <code>dest</code>, moving it between …","Resolves the symbolically linked file and returns the …","","","Inserts or removes the specified flags depending on the …","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","Creates a new file with the provided <code>name</code> in the …","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Safety","Returns a weak reference to the filesystem that this inode …","Write at the provided <code>offset</code> with the given <code>buffer</code> as its …","","Returns the number of active writers to the pipe.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","The number of writers currently connected to the pipe.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of in-memory filesystem. (See the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Force-unlocks the logger ring buffer to prevent a deadlock.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Structure representing a <em>virtual</em> address space. The …","","","","","Returns a reference to the page table frame allocated for …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Allocates a new <em>virtual</em> address space.","Returns a mutable reference to the mapper pointing to the …","Returns a mutable reference to the page table allocated …","","PTI (Page Table Isolation) is a feature that mitigates the …","","","Returns the current active address space.","","","","Due to internal-fragmentation in the buddy frame …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the heap at the [HEAP_START].","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new uninitialized instance of the kernel global …","","","","","","","","","","","If this flag is set, the memory access that caused the …","","","","","If this flag is set, it indicates that the access that …","","","","","If this flag is set, the page fault is a result of the …","","","","","If this flag is set, the page fault was caused by a …","","Describes an page fault error code.","","","If this flag is set, an access in user mode (CPL=3) caused …","","","","Get a mutable reference to the active level 4 page table.","Physical and virtual addresses manipulation","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Initialize paging.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns true if level 5 paging is supported by the CPU and …","","Returns the complement of this set of flags.","Abstractions for default-sized and huge virtual memory …","Abstractions for page tables and page table entries.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","A 64-bit physical memory address.","A passed <code>u64</code> was not a valid physical address.","","A 64-bit virtual memory address.","","","","","","","","","Align address downwards.","Aligns the virtual address downwards to the given …","Aligns the physical address downwards to the given …","Align address upwards.","Aligns the virtual address upwards to the given alignment.","Aligns the physical address upwards to the given alignment.","","Converts this HHDM (Higher Half Direct Map) virtual …","Converts this physical address to HHDM (Higher Half Direct …","Converts the address to a mutable raw pointer.","Converts the address to a raw pointer.","Converts the address to an <code>u64</code>.","Converts the address to an <code>u64</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks whether the physical address has the demanded …","Creates a new canonical virtual address.","Creates a new physical address.","","Returns the 9-bit level 1 page table index.","Returns the 9-bit level 2 page table index.","Returns the 9-bit level 3 page table index.","Returns the 9-bit level 4 page table index.","Returns the 9-bit level 5 page table index.","Returns the 12-bit page offset of this virtual address.","","","Validate reads <code>sizeof(T)</code> bytes from the virtual address …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns if the address is valid to read <code>sizeof(T)</code> bytes at …","Creates a virtual address that points to <code>0</code>.","","","","","","Buddy allocator combines power-of-two allocator with free …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Finds a free chunk with the provided <code>order</code>.","Find the perfect buddy order for the provided address …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Initializes the inner locked global frame allocator.","","","Inserts the provided memory range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Constructs a new uninitialized and locked version of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error indicating that an <code>update_flags</code> call failed.","An additional frame was needed for the mapping process, …","","A trait for types that can allocate a frame of memory.","A trait for types that can deallocate a frame of memory.","The page table entry for the given virtual address points …","The page table entry for the given page points to an …","The page table entry for the given page points to an …","This error is returned from <code>map_to</code> and similar methods.","The virtual address is mapped to a physical frame.","Represents a physical frame mapped in a page table.","A Mapper implementation that relies on a PhysAddr to …","","","A trait for common page table operations on pages of size <code>S</code>…","An empty convencience trait that requires the <code>Mapper</code> trait …","This type represents a page whose mapping has changed in …","The given virtual address is not mapped to a physical …","","A Mapper implementation that requires that the complete …","The given page is already mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","","Provides a virtual address mapping for physical page table …","","","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","","The virtual address is mapped to a “huge” 1GiB frame.","The virtual address is mapped to a “large” 2MiB frame.","The virtual address is mapped to a 4KiB frame.","Provides methods for translating virtual addresses.","An error indicating that an <code>translate</code> call failed.","The return value of the <code>Translate::translate</code> function.","An error indicating that an <code>unmap</code> call failed.","Allocate a frame of the appropriate size and return it if …","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal helper function to create the page table of the …","","Deallocate the given unused frame.","Flush the page from the TLB to ensure that the newest …","","","","","","","","","","","","","","","Translate the given physical frame to a virtual page table …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Maps the given frame to the virtual page with the same …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new mapping in the page table.","","","Creates a new mapping in the page table.","","","","","Create a new flush promise","Creates a new <code>MappedPageTable</code> that uses the passed closure …","","Creates a new <code>OffsetPageTable</code> that uses the given offset …","Internal helper function to get a reference to the page …","Internal helper function to get a mutable reference to the …","","","","","","Returns the size the frame (4KB, 2MB or 1GB).","Returns the start address of the frame.","Return the frame that the given virtual address is mapped …","","","Translates the given virtual address to the physical …","Return the frame that the specified page is mapped to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes a mapping from the page table and returns the …","","","","","","Updates the flags of an existing mapping.","","","","","The entry flags in the lowest-level page table.","The mapped frame.","The offset within the mapped frame.","The given address was not sufficiently aligned.","This trait is implemented for 4KiB and 2MiB pages, but not …","A virtual memory page.","A range of pages with exclusive upper bound.","Trait for abstracting over the three possible page sizes …","A physical memory frame.","An range of physical memory frames, exclusive the upper …","An range of physical memory frames, inclusive the upper …","The page size in bytes.","A string representation of the page size for debug output.","A “giant” 1GiB page.","A “huge” 2MiB page.","A standard 4KiB page.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the page that contains the given virtual address.","Returns the frame that contains the given physical address.","The end of the range, exclusive.","The end of the range, exclusive.","The start of the range, inclusive.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the frame that starts at the given virtual address.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns the level 1 page table index of this page.","Returns the level 2 page table index of this page.","Returns the level 3 page table index of this page.","Returns the level 4 page table index of this page.","Returns the level 5 page table index of this page.","","","","","","Returns a range of pages, exclusive <code>end</code>.","","","The start of the range, inclusive.","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the page.","Returns the start address of the frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set by the CPU when the mapped frame or page table is …","","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","Available to the OS, can be used to store additional data, …","","","","","","Set by the CPU on a write to the mapped frame.","","","The number of entries in a page table.","","The error returned by the <code>PageTableEntry::frame</code> method.","The entry does not have the <code>PRESENT</code> flag set, so it isn’…","","","Indicates that the mapping is present in all address …","","","","Specifies that the entry maps a huge frame instead of a …","","The entry does have the <code>HUGE_PAGE</code> flag set. The <code>frame</code> …","","","Disables caching for the pointed entry is cacheable.","","","","Forbid code execution from the mapped frames.","","","","Specifies whether the mapped frame or page table is loaded …","","A 12-bit offset into a 4KiB Page.","Represents a page table.","A 64-bit page table entry.","Possible flags for a page table entry.","A 9-bit index into a page table.","","","Controls whether accesses from userspace (i.e. ring 3) are …","","","","Controls whether writes to the mapped frames are allowed.","","","","If this bit is set, a “write-through” policy is used …","","","","Returns the physical address mapped by this entry, might …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the flags of this entry.","","","","","","","","","","","","","Returns the physical frame mapped by this entry.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Returns the unused flag bits in the page table entry for …","","","Increments the page table entry counter by one.","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns whether this entry is zero.","Creates an unused page table entry.","Creates an empty page table.","Creates a new index from the given <code>u16</code>. Panics if the …","Creates a new offset from the given <code>u16</code>. Panics if the …","Creates a new index from the given <code>u16</code>. Throws away bits …","Creates a new offset from the given <code>u16</code>. Throws away bits …","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Map the entry to the specified physical address with the …","Sets the page table entry counter to the given <code>count</code>.","Sets the flags of this entry.","Map the entry to the specified physical frame with the …","Sets this entry to zero.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Clears all entries.","","","","","","For small slabs, the <code>BufCtl</code>s are stored inline.","","","Used for allocations smaller than <code>1/8</code> of a page.","","Returns the slab pool to which this header belongs to.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the <code>SlabHeader</code> from an allocated object.","Constructs a <code>BufCtl</code> from a raw pointer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Reference to the slab pool.","","Size of the slab.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Panics","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inner helper function to make sure the function provided …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This function is responsible for initializing all of the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Downcast’s an <code>Arc</code>ed trait object to an <code>Arc</code>ed object if …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Compute the internet checksum for <code>value</code>.","Compute the 32-bit internet checksum for <code>data</code>.","Compute the internet checksum for <code>value</code> of <code>size</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Folds the 32-bit sum (<code>sum</code>) to 16 bits in the network byte …","Combine several RFC 1071 compliant checksums.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Size of IPv4 adderess in octets.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Set the payload length.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","An iterator able to yield elements from both ends.","Custom code within the destructor.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Contains the error value","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to do value-to-value conversions while consuming the …","Conversion from an <code>Iterator</code>.","Derive macro generating an impl of the trait <code>Hash</code>.","A value-to-value conversion that consumes the input value. …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","No value.","Contains the success value","The <code>Option</code> type. See the module level documentation for …","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","The returned type after the call operator is used.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Some value of type <code>T</code>.","A UTF-8–encoded, growable string.","Types for which it is safe to share references between …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Types that can be safely moved after being pinned.","","","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Attribute macro applied to a function to register it as a …","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Returns a byte slice of this <code>String</code>’s contents.","Converts this type into a mutable reference of the …","","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Converts this type into a shared reference of the (usually …","","","Extracts a string slice containing the entire <code>String</code>.","Inline assembly.","Asserts that a boolean expression is <code>true</code> at runtime.","Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Attribute macro applied to a function to turn it into a …","","","","","Borrows an iterator, rather than consuming it.","Performs the call operation.","Performs the call operation.","Performs the call operation.","Returns this <code>String</code>’s capacity, in bytes.","Evaluates boolean combinations of configuration flags at …","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","Takes two iterators and creates a new iterator over both …","Restrict a value to a certain interval.","Truncates this <code>String</code>, removing all contents.","Returns a copy of the value.","","Performs copy-assignment from <code>source</code>.","","","Creates an iterator which <code>clone</code>s all of its elements.","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Returns the “default value” for a type.","Creates an empty <code>String</code>.","","","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","","Removes the specified range from the string in bulk, …","Disposes of a value.","Executes the destructor for this type.","Creates an iterator which gives the current iteration …","Inspects an environment variable at compile time.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","","","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","","","","","","","Copies elements from <code>src</code> range to the end of the string.","Extends a collection with exactly one element.","","","","","","Reserves capacity in a collection for the given number of …","","","Expands to the file name in which it was invoked.","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","","","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Converts to this type from the input type.","Converts a clone-on-write string to an owned instance of …","Returns the argument unchanged.","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Converts a <code>&amp;str</code> into a <code>String</code>.","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Allocates an owned <code>String</code> from a single character.","Creates a value from an iterator.","","","","","","","Creates a new <code>String</code> from a length, capacity, and pointer.","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","Creates an iterator which ends after the first <code>None</code>.","This method tests greater than or equal to (for <code>self</code> and …","Determines if the elements of this <code>Iterator</code> are …","","","Attribute macro applied to a static to register it as a …","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Converts this type into the (usually inferred) input type.","Calls <code>U::from(self)</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","Converts a <code>String</code> into a byte vector.","","Creates an iterator from a value.","Decomposes a <code>String</code> into its raw components.","","","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","Returns <code>true</code> if the iterator is empty.","Checks if the elements of this iterator are partitioned …","","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","","Consumes the iterator, returning the last element.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","Determines if the elements of this <code>Iterator</code> are …","Consumes and leaks the <code>String</code>, returning a mutable …","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","Returns the exact remaining length of the iterator.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","This method tests less than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Compares and returns the maximum of two values.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Expands to a string that represents the current module …","This method tests for <code>!=</code>. The default implementation is …","","","","Determines if the elements of this <code>Iterator</code> are not equal …","Creates a new empty <code>String</code>.","Advances the iterator and returns the next value.","Removes and returns an element from the end of the …","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","Optionally inspects an environment variable at compile …","This method returns an ordering between <code>self</code> and <code>other</code> …","","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Removes the last character from the string buffer and …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Reduces the elements to a single one, by repeatedly …","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> …","Retains only the characters specified by the predicate.","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","An iterator method that reduces the iterator’s elements …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of this <code>String</code> to match its length.","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Splits the string into two at the given byte index.","Creates an iterator starting at the same point, but …","Stringifies its arguments.","","","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","","","","Enables or disables tracing functionality used for …","Shortens this <code>String</code> to the specified length.","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","Performs the conversion.","","Performs the conversion.","","Reduces the elements to a single one by repeatedly …","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","Unstable placeholder for type ascription.","","Converts an iterator of pairs into a pair of containers.","","Creates a new empty <code>String</code> with at least the specified …","","","‘Zips up’ two iterators into a single iterator of …","Memory allocation APIs","Utilities for dynamic typing or type reflection.","SIMD and vendor intrinsics module.","Utilities for the array primitive type.","Operations on ASCII strings and characters.","Asserts that a boolean expression is <code>true</code> at runtime.","Asserts that two expressions are equal to each other …","Unstable module containing the unstable <code>assert_matches</code> …","Asserts that two expressions are not equal to each other …","Composable asynchronous iteration.","Utilities for working with borrowed data.","Shareable mutable containers.","Evaluates boolean combinations of configuration flags at …","Utilities for the <code>char</code> primitive type.","The <code>Clone</code> trait for types that cannot be ‘implicitly …","Utilities for comparing and ordering values.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Same as <code>format_args</code>, but can be used in some const …","Traits for conversions between types.","Asserts that a boolean expression is <code>true</code> at runtime.","Asserts that two expressions are equal to each other.","Asserts that two expressions are not equal to each other.","The <code>Default</code> trait for types with a default value.","Inspects an environment variable at compile time.","Interfaces for working with Errors.","Constants for the <code>f32</code> single-precision floating point type.","Constants for the <code>f64</code> double-precision floating point type.","Platform-specific types, as defined by C.","Expands to the file name in which it was invoked.","Utilities for formatting and printing strings.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Asynchronous basic functionality.","Generic hashing support.","Hints to compiler that affects how code should be emitted …","Redundant constants module for the <code>i128</code> primitive type.","Redundant constants module for the <code>i16</code> primitive type.","Redundant constants module for the <code>i32</code> primitive type.","Redundant constants module for the <code>i64</code> primitive type.","Redundant constants module for the <code>i8</code> primitive type.","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","Compiler intrinsics.","Redundant constants module for the <code>isize</code> primitive type.","Composable external iteration.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","Primitive traits and types representing basic properties …","Returns whether the given expression matches any of the …","Basic functions for dealing with memory.","Expands to a string that represents the current module …","Networking primitives for IP communication.","Numeric traits and functions for the built-in numeric …","Overloadable operators.","Optional values.","Optionally inspects an environment variable at compile …","Panic support in the standard library.","Panics the current thread.","Panic support for core","Types that pin data to its location in memory.","The core prelude","This module reexports the primitive types to allow usage …","Manually manage memory through raw pointers.","Error handling with the <code>Result</code> type.","Portable SIMD module.","Slice management and manipulation.","String manipulation.","Stringifies its arguments.","Synchronization primitives","Types and Traits for working with asynchronous tasks.","Temporal quantification.","Indicates unfinished code.","Enables or disables tracing functionality used for …","Unwraps a result or propagates its error.","Redundant constants module for the <code>u128</code> primitive type.","Redundant constants module for the <code>i16</code> primitive type.","Redundant constants module for the <code>u32</code> primitive type.","Redundant constants module for the <code>u64</code> primitive type.","Redundant constants module for the <code>u8</code> primitive type.","","Indicates unimplemented code by panicking with a message …","Indicates unreachable code.","Redundant constants module for the <code>usize</code> primitive type.","Writes formatted data into a buffer.","Write formatted data into a buffer, with a newline …","The <code>AllocError</code> error indicates an allocation failure that …","An implementation of <code>Allocator</code> can allocate, grow, shrink, …","A memory allocator that can be registered as the standard …","Layout of a block of memory.","","The parameters given to <code>Layout::from_size_align</code> or some …","The minimum byte alignment for a memory block of this …","","Creates a layout describing the record that can hold a …","Allocate memory as described by the given <code>layout</code>.","Behaves like <code>alloc</code>, but also ensures that the contents are …","Attempts to allocate a block of memory.","Behaves like <code>allocate</code>, but also ensures that the returned …","Creates a layout describing the record for a <code>[T; n]</code>.","","","","","","","Creates a “by reference” adapter for this instance of …","","","","","","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …","Deallocate the block of memory at the given <code>ptr</code> pointer …","Deallocates the memory referenced by <code>ptr</code>.","","","","Creates a layout describing the record for <code>self</code> followed by","Creates a layout describing the record for <code>self</code> followed by","","","","","","Produces layout describing a record that could be used to …","Produces layout describing a record that could be used to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …","Creates a layout, bypassing all checks.","","Attempts to extend the memory block.","Behaves like <code>grow</code>, but also ensures that the new contents …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.","Creates a layout by rounding the size of this layout up to …","Returns the amount of padding we must insert after <code>self</code> to …","","","Shrink or grow a block of memory to the given <code>new_size</code> in …","Creates a layout describing the record for <code>n</code> instances of …","Creates a layout describing the record for <code>n</code> instances of …","Attempts to shrink the memory block.","The minimum size in bytes for a memory block of this …","","","","","","","","","","","","","","","","A trait to emulate dynamic typing.","A helper object for providing data by type.","Trait implemented by a type which can dynamically provide …","A <code>TypeId</code> represents a globally unique identifier for a …","","","","","","","","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns some mutable reference to the inner value if it is …","Forwards to the method defined on the type <code>Any</code>.","Returns a mutable reference to the inner value as type …","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns some reference to the inner value if it is of type …","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns a reference to the inner value as type <code>dyn T</code>.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns the <code>TypeId</code> of the type this generic function has …","","Data providers should implement this method to provide <em>all</em> …","Provide a reference. The referee type must be bounded by …","Provide a reference computed using a closure. The referee …","Provide a value or other type with only static lifetimes.","Provide a value or other type with only static lifetimes …","Request a reference from the <code>Provider</code>.","Request a value from the <code>Provider</code>.","","","","","Gets the <code>TypeId</code> of <code>self</code>.","","","Returns the name of a type as a string slice.","Returns the name of the type of the pointed-to value as a …","Check if the <code>Demand</code> would be satisfied if provided with a …","Check if the <code>Demand</code> would be satisfied if provided with a …","Inline assembly.","Module-level inline assembly.","Platform-specific intrinsics for the <code>x86_64</code> platform.","Result of the <code>cpuid</code> instruction.","Equal (ordered, non-signaling)","Equal (ordered, signaling)","Equal (unordered, non-signaling)","Equal (unordered, signaling)","False (ordered, non-signaling)","False (ordered, signaling)","Greater-than-or-equal (ordered, non-signaling)","Greater-than-or-equal (ordered, signaling)","Greater-than (ordered, non-signaling)","Greater-than (ordered, signaling)","Less-than-or-equal (ordered, non-signaling)","Less-than-or-equal (ordered, signaling)","Less-than (ordered, non-signaling)","Less-than (ordered, signaling)","Not-equal (ordered, non-signaling)","Not-equal (ordered, signaling)","Not-equal (unordered, non-signaling)","Not-equal (unordered, signaling)","Not-greater-than-or-equal (unordered, non-signaling)","Not-greater-than-or-equal (unordered, signaling)","Not-greater-than (unordered, non-signaling)","Not-greater-than (unordered, signaling)","Not-less-than-or-equal (unordered, non-signaling)","Not-less-than-or-equal (unordered, signaling)","Not-less-than (unordered, non-signaling)","Not-less-than (unordered, signaling)","Ordered (non-signaling)","Ordered (signaling)","True (unordered, non-signaling)","True (unordered, signaling)","Unordered (non-signaling)","Unordered (signaling)","The <code>_MM_CMPINT_ENUM</code> type used to specify comparison …","Equal","False","Less-than-or-equal","Less-than","Not-equal","Not less-than-or-equal","Not less-than","True","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_EXCEPTION_STATE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_FLUSH_ZERO_MODE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","round up and do not suppress exceptions","use MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>","round down and do not suppress exceptions","use MXCSR.RC and suppress exceptions; see …","round to nearest and do not suppress exceptions","suppress exceptions","do not suppress exceptions","use MXCSR.RC and do not suppress exceptions; see …","round to nearest","round down","round up","truncate","truncate and do not suppress exceptions","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","The <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …","The <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …","interval [1, 2)","interval [0.5, 1)","interval [0.5, 2)","interval [0.75, 1.5)","DEST = NaN if sign(SRC) = 1","sign = sign(SRC)","sign = 0","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_EXCEPTION_MASK</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</codehe <code>MM_PERM_ENUM</code> type used to specify shuffle operations …","See <code>_mm_setcsr</code>","See <code>_MM_GET_ROUNDING_MODE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","A utility function for creating masks to use with Intel …","Transpose the 4x4 matrix formed by 4 rows of __m128 in …","<strong>Mask only</strong>: return the bit mask","For each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>","The strings defined by <code>a</code> and <code>b</code> are equal","Search for the defined substring in the target","For each character in <code>a</code>, determine if …","<strong>Index only</strong>: return the least significant bit <em>(Default)</em>","Negates results only before the end of the string","Do not negate results before the end of the string","<strong>Index only</strong>: return the most significant bit","Negates results","Do not negate results <em>(Default)</em>","String contains signed 8-bit characters","String contains unsigned 16-bit characters","String contains unsigned 8-bit characters <em>(Default)</em>","<strong>Mask only</strong>: return the byte mask","String contains unsigned 16-bit characters","Transaction abort due to the transaction using too much …","Transaction abort due to a memory conflict with another …","Transaction abort due to a debug trap.","Transaction explicitly aborted with xabort. The parameter …","Transaction abort in a inner nested transaction.","Transaction retry is possible.","Transaction successfully started.","<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>","See <code>__cpuid_count</code>.","Returns the result of the <code>cpuid</code> instruction for a given …","Returns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…","128-bit wide set of four <code>f32</code> types, x86-specific","128-bit wide set of eight ‘u16’ types, x86-specific","128-bit wide set of two <code>f64</code> types, x86-specific","128-bit wide integer vector type, x86-specific","256-bit wide set of eight <code>f32</code> types, x86-specific","256-bit wide set of 16 ‘u16’ types, x86-specific","256-bit wide set of four <code>f64</code> types, x86-specific","256-bit wide integer vector type, x86-specific","512-bit wide set of sixteen <code>f32</code> types, x86-specific","512-bit wide set of 32 ‘u16’ types, x86-specific","512-bit wide set of eight <code>f64</code> types, x86-specific","512-bit wide integer vector type, x86-specific","The <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …","The <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …","The <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …","The <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …","Reads the current value of the processor’s time-stamp …","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.","Extracts bits of <code>a</code> specified by <code>control</code> into the least …","Extracts bits of <code>a</code> specified by <code>control</code> into the least …","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>.","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>.","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Clears all bits below the least significant zero bit of <code>x</code>.","Clears all bits below the least significant zero bit of <code>x</code>.","Sets all bits of <code>x</code> to 1 except for the least significant …","Sets all bits of <code>x</code> to 1 except for the least significant …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code>.","Sets the least significant zero bit of <code>x</code>.","Sets all bits of <code>x</code> below the least significant one.","Sets all bits of <code>x</code> below the least significant one.","Extracts lowest set isolated bit.","Extracts lowest set isolated bit.","Clears least significant bit and sets all other bits.","Clears least significant bit and sets all other bits.","Gets mask up to lowest set bit.","Gets mask up to lowest set bit.","Resets the lowest set bit of <code>x</code>.","Resets the lowest set bit of <code>x</code>.","Returns an integer with the reversed byte order of x","Returns an integer with the reversed byte order of x","Zeroes higher bits of <code>a</code> &gt;= <code>index</code>.","Zeroes higher bits of <code>a</code> &gt;= <code>index</code>.","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …","Add 32-bit masks in a and b, and store the result in k.","Add 64-bit masks in a and b, and store the result in k.","Compute the bitwise AND of 16-bit masks a and b, and store …","Compute the bitwise AND of 32-bit masks a and b, and store …","Compute the bitwise AND of 64-bit masks a and b, and store …","Compute the bitwise NOT of 16-bit masks a and then AND …","Compute the bitwise NOT of 32-bit masks a and then AND …","Compute the bitwise NOT of 64-bit masks a and then AND …","Compute the bitwise NOT of 16-bit mask a, and store the …","Compute the bitwise NOT of 32-bit mask a, and store the …","Compute the bitwise NOT of 64-bit mask a, and store the …","Compute the bitwise OR of 16-bit masks a and b, and store …","Compute the bitwise OR of 32-bit masks a and b, and store …","Compute the bitwise OR of 64-bit masks a and b, and store …","Compute the bitwise XNOR of 16-bit masks a and b, and …","Compute the bitwise XNOR of 32-bit masks a and b, and …","Compute the bitwise XNOR of 64-bit masks a and b, and …","Compute the bitwise XOR of 16-bit masks a and b, and store …","Compute the bitwise XOR of 32-bit masks a and b, and store …","Compute the bitwise XOR of 64-bit masks a and b, and store …","Load 32-bit mask from memory into k.","Load 64-bit mask from memory into k.","Counts the leading most significant zero bits.","Counts the leading most significant zero bits.","Computes the absolute values of packed 16-bit integers in <code>a</code>…","Computes the absolute values of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Computes the absolute values of packed 8-bit integers in <code>a</code>.","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.","Adds packed double-precision (64-bit) floating-point …","Adds packed single-precision (32-bit) floating-point …","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …","Alternatively adds and subtracts packed double-precision …","Alternatively adds and subtracts packed single-precision …","Performs one round of an AES decryption flow on each …","Performs the last round of an AES decryption flow on each …","Performs one round of an AES encryption flow on each …","Performs the last round of an AES encryption flow on each …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …","Computes the bitwise AND of a packed double-precision …","Computes the bitwise AND of packed single-precision …","Computes the bitwise AND of 256 bits (representing integer …","Computes the bitwise NOT of packed double-precision …","Computes the bitwise NOT of packed single-precision …","Computes the bitwise NOT of 256 bits (representing integer …","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blends packed 16-bit integers from <code>a</code> and <code>b</code> using control …","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …","Blends packed double-precision (64-bit) floating-point …","Blends packed single-precision (32-bit) floating-point …","Blends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.","Blends packed double-precision (64-bit) floating-point …","Blends packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcasts 128 bits from memory (composed of 2 packed …","Broadcasts 128 bits from memory (composed of 4 packed …","Broadcasts a double-precision (64-bit) floating-point …","Broadcasts a single-precision (32-bit) floating-point …","Broadcasts the low packed 8-bit integer from <code>a</code> to all …","Broadcasts the low packed 32-bit integer from <code>a</code> to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcasts the low packed 64-bit integer from <code>a</code> to all …","Broadcasts the low double-precision (64-bit) …","Broadcasts 128 bits of integer data from a to all 128-bit …","Broadcasts the low single-precision (32-bit) …","Broadcasts the low packed 16-bit integer from a to all …","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …","Casts vector of type __m128d to type __m256d; the upper …","Casts vector of type __m256d to type __m128d.","Cast vector of type __m256d to type __m256.","Casts vector of type __m256d to type __m256i.","Casts vector of type __m128 to type __m256; the upper 128 …","Casts vector of type __m256 to type __m128.","Cast vector of type __m256 to type __m256d.","Casts vector of type __m256 to type __m256i.","Casts vector of type __m128i to type __m256i; the upper …","Casts vector of type __m256i to type __m256d.","Casts vector of type __m256i to type __m256.","Casts vector of type __m256i to type __m128i.","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compares packed double-precision (64-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 32-bit integers in a and b for equality, …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 64-bit integers in a and b for equality, …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 32-bit integers in a and b for …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Sign-extend 16-bit integers to 32-bit integers.","Sign-extend 16-bit integers to 64-bit integers.","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign-extend 32-bit integers to 64-bit integers.","Convert packed 32-bit integers in a to packed 8-bit …","Converts packed 32-bit integers in <code>a</code> to packed …","Converts packed 32-bit integers in <code>a</code> to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign-extend 8-bit integers to 16-bit integers.","Sign-extend 8-bit integers to 32-bit integers.","Sign-extend 8-bit integers to 64-bit integers.","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zero-extend the lower four unsigned 16-bit integers in <code>a</code> …","Zero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …","Convert packed unsigned 32-bit integers in a to packed …","Zero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …","Zero-extend the lower eight unsigned 8-bit integers in <code>a</code> …","Zero-extend the lower four unsigned 8-bit integers in <code>a</code> to …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Converts the 8 x 16-bit half-precision float values in the …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Converts the 8 x 32-bit float values in the 256-bit vector …","Returns the first element of the input vector of …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Returns the first element of the input vector of <code>[8 x i32]</code>.","Returns the first element of the input vector of …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Computes the division of each of the 4 packed 64-bit …","Computes the division of each of the 8 packed 32-bit …","Conditionally multiplies the packed single-precision …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Extracts a 16-bit integer from <code>a</code>, selected with <code>INDEX</code>. …","Extracts a 32-bit integer from <code>a</code>, selected with <code>INDEX</code>.","Extracts a 64-bit integer from <code>a</code>, selected with <code>INDEX</code>.","Extracts an 8-bit integer from <code>a</code>, selected with <code>INDEX</code>. …","Extracts 128 bits (composed of 2 packed double-precision …","Extracts 128 bits (composed of 4 packed single-precision …","Extracts 128 bits (composed of integer data) from <code>a</code>, …","Extract 128 bits (composed of 4 packed single-precision …","Extracts 128 bits (of integer data) from <code>a</code> selected with …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …","Horizontally adds adjacent pairs of 32-bit integers in <code>a</code> …","Horizontal addition of adjacent pairs in the two packed …","Horizontal addition of adjacent pairs in the two packed …","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …","Horizontally subtract adjacent pairs of 16-bit integers in …","Horizontally subtract adjacent pairs of 32-bit integers in …","Horizontal subtraction of adjacent pairs in the two packed …","Horizontal subtraction of adjacent pairs in the two packed …","Horizontally subtract adjacent pairs of 16-bit integers in …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Copies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …","Copies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …","Copies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into …","Copies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …","Copies <code>a</code> to result, then inserts 128 bits (composed of 2 …","Copies <code>a</code> to result, then inserts 128 bits (composed of 4 …","Copies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Loads 256-bits of integer data from unaligned memory into …","Load 256-bits (composed of 8 packed 32-bit integers) from …","Load 256-bits (composed of 4 packed 64-bit integers) from …","Loads 256-bits (composed of 4 packed double-precision …","Loads 256-bits (composed of 8 packed single-precision …","Loads 256-bits of integer data from memory into result. …","Loads two 128-bit values (composed of 4 packed …","Loads two 128-bit values (composed of 2 packed …","Loads two 128-bit values (composed of integer data) from …","Load 256-bits (composed of 16 packed 16-bit integers) from …","Load 256-bits (composed of 8 packed 32-bit integers) from …","Load 256-bits (composed of 4 packed 64-bit integers) from …","Load 256-bits (composed of 32 packed 8-bit integers) from …","Loads 256-bits (composed of 4 packed double-precision …","Loads 256-bits (composed of 8 packed single-precision …","Loads 256-bits of integer data from memory into result. …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …","Vertically multiplies each unsigned 8-bit integer from <code>a</code> …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 4 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 8 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Zero extend packed unsigned 8-bit integers in the low 4 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Loads packed 32-bit integers from memory pointed by …","Loads packed 64-bit integers from memory pointed by …","Loads packed double-precision (64-bit) floating-point …","Loads packed single-precision (32-bit) floating-point …","Stores packed 32-bit integers from <code>a</code> into memory pointed …","Stores packed 64-bit integers from <code>a</code> into memory pointed …","Stores packed double-precision (64-bit) floating-point …","Stores packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 4 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 8 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Zero extend packed unsigned 8-bit integers in the low 4 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Creates mask from the most significant bit of each 8-bit …","Sets each bit of the returned mask based on the most …","Sets each bit of the returned mask based on the most …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Computes the sum of absolute differences (SADs) of …","Multiplies the low 32-bit integers from each packed 64-bit …","Multiplies the low unsigned 32-bit integers from each …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, …","Multiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, producing","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Computes the bitwise OR packed double-precision (64-bit) …","Computes the bitwise OR packed single-precision (32-bit) …","Computes the bitwise OR of 256 bits (representing integer …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Shuffles 256 bits (composed of 4 packed double-precision …","Shuffles 256 bits (composed of 8 packed single-precision …","Shuffles 128-bits (composed of integer data) selected by …","Shuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …","Permutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.","Shuffles 64-bit floating-point elements in <code>a</code> across lanes …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Permutes packed 32-bit integers from <code>a</code> according to the …","Shuffles eight 32-bit floating-point elements in <code>a</code> across …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Computes the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Computes the approximate reciprocal square root of packed …","Computes the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcasts 16-bit integer <code>a</code> to all elements of returned …","Broadcasts 32-bit integer <code>a</code> to all elements of returned …","Broadcasts 64-bit integer <code>a</code> to all elements of returned …","Broadcasts 8-bit integer <code>a</code> to all elements of returned …","Broadcasts double-precision (64-bit) floating-point value <code>a</code>…","Broadcasts single-precision (32-bit) floating-point value <code>a</code>…","Sets packed 16-bit integers in returned vector with the …","Sets packed 32-bit integers in returned vector with the …","Sets packed 64-bit integers in returned vector with the …","Sets packed 8-bit integers in returned vector with the …","Sets packed __m256 returned vector with the supplied …","Sets packed __m256d returned vector with the supplied …","Sets packed __m256i returned vector with the supplied …","Sets packed double-precision (64-bit) floating-point …","Sets packed single-precision (32-bit) floating-point …","Sets packed 16-bit integers in returned vector with the …","Sets packed 32-bit integers in returned vector with the …","Sets packed 64-bit integers in returned vector with the …","Sets packed 8-bit integers in returned vector with the …","Sets packed __m256 returned vector with the supplied …","Sets packed __m256d returned vector with the supplied …","Sets packed __m256i returned vector with the supplied …","Sets packed double-precision (64-bit) floating-point …","Sets packed single-precision (32-bit) floating-point …","Returns vector of type __m256d with all elements set to …","Returns vector of type __m256 with all elements set to …","Returns vector of type __m256i with all elements set to …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffles 16-bit integers in the high 64 bits of 128-bit …","Shuffles 16-bit integers in the low 64 bits of 128-bit …","Negates packed 16-bit integers in <code>a</code> when the corresponding …","Negates packed 32-bit integers in <code>a</code> when the corresponding …","Negates packed 8-bit integers in <code>a</code> when the corresponding …","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …","Shift packed 16-bit integers in a left by the amount …","Shifts packed 32-bit integers in <code>a</code> left by the amount …","Shifts packed 64-bit integers in <code>a</code> left by the amount …","Returns the square root of packed double-precision …","Returns the square root of packed single-precision …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shift packed 64-bit integers in a right by count while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shifts packed 64-bit integers in <code>a</code> right by the amount …","Store 256-bits (composed of 8 packed 32-bit integers) from …","Store 256-bits (composed of 4 packed 64-bit integers) from …","Stores 256-bits (composed of 4 packed double-precision …","Stores 256-bits (composed of 8 packed single-precision …","Stores 256-bits of integer data from <code>a</code> into memory. …","Stores the high and low 128-bit halves (each composed of 4 …","Stores the high and low 128-bit halves (each composed of 2 …","Stores the high and low 128-bit halves (each composed of …","Store 256-bits (composed of 16 packed 16-bit integers) …","Store 256-bits (composed of 8 packed 32-bit integers) from …","Store 256-bits (composed of 4 packed 64-bit integers) from …","Store 256-bits (composed of 32 packed 8-bit integers) from …","Stores 256-bits (composed of 4 packed double-precision …","Stores 256-bits (composed of 8 packed single-precision …","Stores 256-bits of integer data from <code>a</code> into memory. …","Moves double-precision values from a 256-bit vector of …","Moves single-precision floating point values from a …","Moves integer data from a 256-bit integer vector to a …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtracts packed double-precision (64-bit) floating-point …","Subtracts packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Returns vector of type <code>__m256d</code> with undefined elements.","Returns vector of type <code>__m256</code> with undefined elements.","Returns vector of type __m256i with undefined elements.","Unpacks and interleave 16-bit integers from the high half …","Unpacks and interleave 32-bit integers from the high half …","Unpacks and interleave 64-bit integers from the high half …","Unpacks and interleave 8-bit integers from the high half …","Unpacks and interleave double-precision (64-bit) …","Unpacks and interleave single-precision (32-bit) …","Unpacks and interleave 16-bit integers from the low half …","Unpacks and interleave 32-bit integers from the low half …","Unpacks and interleave 64-bit integers from the low half …","Unpacks and interleave 8-bit integers from the low half of …","Unpacks and interleave double-precision (64-bit) …","Unpacks and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Computes the bitwise XOR of packed double-precision …","Computes the bitwise XOR of packed single-precision …","Computes the bitwise XOR of 256 bits (representing integer …","Zeroes the contents of all XMM or YMM registers.","Zeroes the upper 128 bits of all YMM registers; the lower …","Constructs a 256-bit floating-point vector of <code>[4 x double]</code> …","Constructs a 256-bit floating-point vector of <code>[8 x float]</code> …","Constructs a 256-bit integer vector from a 128-bit integer …","Compute the absolute value of packed signed 16-bit …","Computes the absolute values of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Finds the absolute value of each packed double-precision …","Finds the absolute value of each packed single-precision …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Performs one round of an AES decryption flow on each …","Performs the last round of an AES decryption flow on each …","Performs one round of an AES encryption flow on each …","Performs the last round of an AES encryption flow on each …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of 512 bits (composed of packed …","Compute the bitwise AND of 512 bits (representing integer …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of 512 bits (composed of packed …","Compute the bitwise NOT of 512 bits (representing integer …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Shift 128-bit lanes in a left by imm8 bytes while shifting …","Shift 128-bit lanes in a right by imm8 bytes while …","Cast vector of type __m128d to type __m512d; the upper 384 …","Cast vector of type __m256d to type __m512d; the upper 256 …","Cast vector of type __m512d to type __m128d. This …","Cast vector of type __m512d to type __m256d. This …","Cast vector of type __m512d to type __m512. This intrinsic …","Cast vector of type __m512d to type __m512i. This …","Cast vector of type __m128 to type __m512; the upper 384 …","Cast vector of type __m256 to type __m512; the upper 256 …","Cast vector of type __m512 to type __m128. This intrinsic …","Cast vector of type __m512 to type __m256. This intrinsic …","Cast vector of type __m512 to type __m512d. This intrinsic …","Cast vector of type __m512 to type __m512i. This intrinsic …","Cast vector of type __m128i to type __m512i; the upper 384 …","Cast vector of type __m256i to type __m512i; the upper 256 …","Cast vector of type __m512i to type __m512d. This …","Cast vector of type __m512i to type __m512. This intrinsic …","Cast vector of type __m512i to type __m128i. This …","Cast vector of type __m512i to type __m256i. This …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Performs an element-by-element conversion of packed …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Performs element-by-element conversion of the lower half …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Copy the lower 32-bit integer in a to dst.","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Gather 32-bit integers from memory using 32-bit indices. …","Gather 64-bit integers from memory using 32-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 32-bit …","Scatter 64-bit integers from a into memory using 32-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Gather 32-bit integers from memory using 64-bit indices. …","Gather 64-bit integers from memory using 64-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 64-bit …","Scatter 64-bit integers from a into memory using 64-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copy a to dst, then insert 256 bits (composed of 4 packed …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copy a to dst, then insert 256 bits (composed of 4 packed …","Converts integer mask into bitmask, storing the result in …","Compute the bitwise AND of 16-bit masks a and b, and store …","Compute the bitwise NOT of 16-bit masks a and then AND …","Copy 16-bit mask a to k.","Compute the bitwise NOT of 16-bit mask a, and store the …","Compute the bitwise OR of 16-bit masks a and b, and store …","Performs bitwise OR between k1 and k2, storing the result …","Unpack and interleave 8 bits from masks a and b, and store …","Compute the bitwise XNOR of 16-bit masks a and b, and …","Compute the bitwise XOR of 16-bit masks a and b, and store …","Load 512-bits (composed of 16 packed 32-bit integers) from …","Load 512-bits (composed of 8 packed 64-bit integers) from …","Load 512-bits (composed of 8 packed double-precision …","Load 512-bits (composed of 16 packed single-precision …","Load 512-bits of integer data from memory into dst. …","Load 512-bits (composed of 32 packed 16-bit integers) from …","Load 512-bits (composed of 16 packed 32-bit integers) from …","Load 512-bits (composed of 8 packed 64-bit integers) from …","Load 512-bits (composed of 64 packed 8-bit integers) from …","Loads 512-bits (composed of 8 packed double-precision …","Loads 512-bits (composed of 16 packed single-precision …","Load 512-bits of integer data from memory into dst. …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed signed 16-bit integers in a and b, …","Vertically multiply each unsigned 8-bit integer from a …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Converts bit mask k1 into an integer value, storing the …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Computes the absolute value of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Finds the absolute value of each packed double-precision …","Finds the absolute value of each packed single-precision …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Performs element-by-element conversion of the lower half …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Performs an element-by-element conversion of packed …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Performs element-by-element conversion of the lower half …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Gather 32-bit integers from memory using 32-bit indices. …","Gather 64-bit integers from memory using 32-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 32-bit …","Scatter 64-bit integers from a into memory using 32-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Gather 32-bit integers from memory using 64-bit indices. …","Gather 64-bit integers from memory using 64-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 64-bit …","Scatter 64-bit integers from a into memory using 64-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","Multiplies elements in packed 64-bit integer vectors a and …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 32-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Reduce the packed 32-bit integers in a by addition using …","Reduce the packed 64-bit integers in a by addition using …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise AND …","Reduce the packed 64-bit integers in a by addition using …","Reduce the packed signed 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed unsigned 32-bit integers in a by maximum …","Reduce the packed unsigned 64-bit integers in a by maximum …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed signed 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed unsigned 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by multiplication …","Reduce the packed 64-bit integers in a by multiplication …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise OR using …","Reduce the packed 64-bit integers in a by bitwise OR using …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compute the absolute value of packed signed 16-bit …","Computes the absolute value of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","Multiplies elements in packed 64-bit integer vectors a and …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Compute the bitwise OR of 512 bits (representing integer …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 32-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Reduce the packed 32-bit integers in a by addition. …","Reduce the packed 64-bit integers in a by addition. …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise AND. …","Reduce the packed 64-bit integers in a by bitwise AND. …","Reduce the packed signed 32-bit integers in a by maximum. …","Reduce the packed signed 64-bit integers in a by maximum. …","Reduce the packed unsigned 32-bit integers in a by …","Reduce the packed unsigned 64-bit integers in a by …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed signed 32-bit integers in a by minimum. …","Reduce the packed signed 64-bit integers in a by minimum. …","Reduce the packed unsigned 32-bit integers in a by …","Reduce the packed unsigned 64-bit integers in a by …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by multiplication. …","Reduce the packed 64-bit integers in a by multiplication. …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise OR. …","Reduce the packed 64-bit integers in a by bitwise OR. …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.","Broadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.","Broadcast 8-bit integer a to all elements of dst.","Broadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.","Broadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.","Set packed 32-bit integers in dst with the repeated 4 …","Set packed 64-bit integers in dst with the repeated 4 …","Set packed double-precision (64-bit) floating-point …","Set packed single-precision (32-bit) floating-point …","Set packed 16-bit integers in dst with the supplied values.","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 64-bit integers in dst with the supplied values.","Set packed 8-bit integers in dst with the supplied values.","Set packed double-precision (64-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 32-bit integers in dst with the repeated 4 …","Set packed 64-bit integers in dst with the repeated 4 …","Set packed double-precision (64-bit) floating-point …","Set packed single-precision (32-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 64-bit integers in dst with the supplied values …","Set packed double-precision (64-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Return vector of type __m512 with all elements set to zero.","Return vector of type __m512i with all elements set to …","Returns vector of type <code>__m512d</code> with all elements set to …","Returns vector of type <code>__m512d</code> with all elements set to …","Returns vector of type <code>__m512i</code> with all elements set to …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store 512-bits (composed of 16 packed 32-bit integers) …","Store 512-bits (composed of 8 packed 64-bit integers) from …","Store 512-bits (composed of 8 packed double-precision …","Store 512-bits of integer data from a into memory. …","Store 512-bits of integer data from a into memory. …","Store 512-bits (composed of 32 packed 16-bit integers) …","Store 512-bits (composed of 16 packed 32-bit integers) …","Store 512-bits (composed of 8 packed 64-bit integers) from …","Store 512-bits (composed of 64 packed 8-bit integers) from …","Stores 512-bits (composed of 8 packed double-precision …","Stores 512-bits (composed of 16 packed single-precision …","Store 512-bits of integer data from a into memory. …","Store 512-bits (composed of 8 packed double-precision …","Store 512-bits (composed of 16 packed single-precision …","Store 512-bits of integer data from a into memory using a …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Return vector of type __m512 with undefined elements.","Return vector of type __m512i with undefined elements.","Returns vector of type <code>__m512d</code> with undefined elements.","Returns vector of type <code>__m512</code> with undefined elements.","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compute the bitwise XOR of 512 bits (representing integer …","Cast vector of type __m128d to type __m512d; the upper 384 …","Cast vector of type __m256d to type __m512d; the upper 256 …","Cast vector of type __m128 to type __m512; the upper 384 …","Cast vector of type __m256 to type __m512; the upper 256 …","Cast vector of type __m128i to type __m512i; the upper 384 …","Cast vector of type __m256i to type __m512i; the upper 256 …","Computes the absolute value of each of the packed 16-bit …","Computes the absolute value of each of the packed 32-bit …","Computes the absolute value of packed 8-bit signed …","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.","Adds packed double-precision (64-bit) floating-point …","Adds __m128 vectors.","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Adds the first component of <code>a</code> and <code>b</code>, the other components …","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …","Alternatively add and subtract packed double-precision …","Alternatively add and subtract packed single-precision …","Performs one round of an AES decryption flow on data …","Performs the last round of an AES decryption flow on data …","Performs one round of an AES encryption flow on data …","Performs the last round of an AES encryption flow on data …","Performs the <code>InvMixColumns</code> transformation on <code>a</code>.","Assist in expanding the AES cipher key.","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte …","Computes the bitwise AND of packed double-precision …","Bitwise AND of packed single-precision (32-bit) …","Computes the bitwise AND of 128 bits (representing integer …","Computes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.","Bitwise AND-NOT of packed single-precision (32-bit) …","Computes the bitwise NOT of 128 bits (representing integer …","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask …","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Blend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcasts a single-precision (32-bit) floating-point …","Broadcasts the low packed 8-bit integer from <code>a</code> to all …","Broadcasts the low packed 32-bit integer from <code>a</code> to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcasts the low packed 64-bit integer from <code>a</code> to all …","Broadcasts the low double-precision (64-bit) …","Broadcasts the low single-precision (32-bit) …","Broadcasts the low packed 16-bit integer from a to all …","Shifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.","Shifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.","Casts a 128-bit floating-point vector of <code>[2 x double]</code> into …","Casts a 128-bit floating-point vector of <code>[2 x double]</code> into …","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …","Casts a 128-bit integer vector into a 128-bit …","Casts a 128-bit integer vector into a 128-bit …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Invalidates and flushes the cache line that contains <code>p</code> …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compares packed double-precision (64-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compares the lower double-precision (64-bit) …","Compare the lower double-precision (64-bit) floating-point …","Compares the lower single-precision (32-bit) …","Compare the lower single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 32-bit integers in a and b for equality, …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality","Compare packed 64-bit integers in a and b for equality, …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for equality.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for equality. The …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for greater than or …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 32-bit integers in a and b for …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for greater than. …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for less than or …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for less-than.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for less than. The …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for not-equal.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for inequality. The …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for not-less-than. …","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Checks if the lowest <code>f32</code> of both inputs are ordered. The …","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Checks if the lowest <code>f32</code> of both inputs are unordered. The …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compares the lower element of <code>a</code> and <code>b</code> for equality.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for less-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Convert the signed 32-bit integer b to a single-precision …","Convert the signed 64-bit integer b to a double-precision …","Convert the signed 64-bit integer b to a single-precision …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the signed 32-bit integer b to a single-precision …","Convert the signed 64-bit integer b to a double-precision …","Convert the signed 64-bit integer b to a single-precision …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Alias for <code>_mm_cvtsi32_ss</code>.","Alias for <code>_mm_cvtss_si32</code>.","Sign extend packed 16-bit integers in <code>a</code> to packed 32-bit …","Sign extend packed 16-bit integers in <code>a</code> to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in <code>a</code> to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Converts the lower two packed 32-bit integers in <code>a</code> to …","Converts packed 32-bit integers in <code>a</code> to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in <code>a</code> to packed 16-bit …","Sign extend packed 8-bit integers in <code>a</code> to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of <code>a</code> …","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 32-bit integers in <code>a</code> to …","Convert packed unsigned 32-bit integers in a to packed …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Convert the signed 32-bit integer b to a double-precision …","Convert the signed 32-bit integer b to a single-precision …","Convert the signed 64-bit integer b to a double-precision …","Convert the signed 64-bit integer b to a single-precision …","Convert packed single-precision (32-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Converts the 4 x 16-bit half-precision float values in the …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Converts the 4 x 32-bit float values in the 128-bit vector …","Returns the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Converts the lower double-precision (64-bit) …","Converts the lower double-precision (64-bit) …","Alias for <code>_mm_cvtsd_si64</code>","Converts the lower double-precision (64-bit) …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Returns the lowest element of <code>a</code>.","Returns the lowest element of <code>a</code>.","Returns the lowest element of <code>a</code>.","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Converts a 32 bit integer to a 32 bit float. The result …","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Converts a 64 bit integer to a 32 bit float. The result …","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Extracts the lowest 32 bit float from the input vector.","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Converts the lower single-precision (32-bit) …","Converts the lowest 32 bit float in the input vector to a …","Converts the lowest 32 bit float in the input vector to a …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Alias for <code>_mm_cvttss_si32</code>.","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Converts the lower double-precision (64-bit) …","Converts the lower double-precision (64-bit) …","Alias for <code>_mm_cvttsd_si64</code>","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Converts the lowest 32 bit float in the input vector to a …","Converts the lowest 32 bit float in the input vector to a …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divides __m128 vectors.","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Divides the first component of <code>b</code> by <code>a</code>, the other …","Returns the dot product of two __m128d vectors.","Returns the dot product of two __m128 vectors.","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Returns the <code>imm8</code> element of <code>a</code>.","Extracts an 32-bit integer from <code>a</code> selected with <code>IMM8</code>","Extracts an 64-bit integer from <code>a</code> selected with <code>IMM1</code>","Extracts an 8-bit integer from <code>a</code>, selected with <code>IMM8</code>. …","Extracts a single-precision (32-bit) floating-point …","Extracts the bit range specified by <code>y</code> from the lower 64 …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Gets the unsigned 32-bit value of the MXCSR control and …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Horizontally adds the adjacent pairs of values contained …","Horizontally adds the adjacent pairs of values contained …","Horizontally adds adjacent pairs of double-precision …","Horizontally adds adjacent pairs of single-precision …","Horizontally adds the adjacent pairs of values contained …","Horizontally subtract the adjacent pairs of values …","Horizontally subtract the adjacent pairs of values …","Horizontally subtract adjacent pairs of double-precision …","Horizontally adds adjacent pairs of single-precision …","Horizontally subtract the adjacent pairs of values …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns a new vector where the <code>imm8</code> element of <code>a</code> is …","Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> …","Returns a copy of <code>a</code> with the 64-bit integer from <code>i</code> …","Returns a copy of <code>a</code> with the 8-bit integer from <code>i</code> inserted …","Select a single value in <code>a</code> to store at some position in <code>b</code>, …","Inserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.","Loads 128-bits of integer data from unaligned memory. This …","Performs a serializing operation on all load-from-memory …","Loads a double-precision (64-bit) floating-point element …","Construct a <code>__m128</code> by duplicating the value read from <code>p</code> …","Load 128-bits (composed of 4 packed 32-bit integers) from …","Load 128-bits (composed of 2 packed 64-bit integers) from …","Loads 128-bits (composed of 2 packed double-precision …","Loads a double-precision (64-bit) floating-point element …","Loads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. …","Alias for <code>_mm_load1_ps</code>","Loads a 64-bit double-precision value to the low element …","Loads 128-bits of integer data from memory into a new …","Construct a <code>__m128</code> with the lowest element read from <code>p</code> and …","Loads a double-precision (64-bit) floating-point element …","Loads a double-precision value into the high-order bits of …","Loads 64-bit integer from memory into first element of …","Loads a double-precision value into the low-order bits of …","Loads 2 double-precision (64-bit) floating-point elements …","Loads four <code>f32</code> values from aligned memory into a <code>__m128</code> in …","Load 128-bits (composed of 8 packed 16-bit integers) from …","Load 128-bits (composed of 4 packed 32-bit integers) from …","Load 128-bits (composed of 2 packed 64-bit integers) from …","Load 128-bits (composed of 16 packed 8-bit integers) from …","Loads 128-bits (composed of 2 packed double-precision …","Loads four <code>f32</code> values from memory into a <code>__m128</code>. There are …","Loads 128-bits of integer data from memory into a new …","Loads unaligned 64-bits of integer data from memory into …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiplies and then horizontally add signed 16 bit …","Multiplies corresponding pairs of packed 8-bit unsigned …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 2 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 4 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 4 …","Zero extend packed unsigned 8-bit integers in the low 2 …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert the lower single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Move the lower double-precision (64-bit) floating-point …","Move the lower single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Loads packed 32-bit integers from memory pointed by …","Loads packed 64-bit integers from memory pointed by …","Loads packed double-precision (64-bit) floating-point …","Loads packed single-precision (32-bit) floating-point …","Conditionally store 8-bit integer elements from <code>a</code> into …","Stores packed 32-bit integers from <code>a</code> into memory pointed …","Stores packed 64-bit integers from <code>a</code> into memory pointed …","Stores packed double-precision (64-bit) floating-point …","Stores packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 2 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 4 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in th elow 4 …","Zero extend packed unsigned 8-bit integers in the low 2 …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert the lower single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Move the lower double-precision (64-bit) floating-point …","Move the lower single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Returns a new vector with the maximum values from …","Compares packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the first single-precision (32-bit) …","Performs a serializing operation on all load-from-memory …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Returns a new vector with the minimum values from …","Compares packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the first single-precision (32-bit) …","Finds the minimum unsigned 16-bit element in the 128-bit __…","Returns a vector where the low element is extracted from <code>a</code> …","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…","Returns a <code>__m128</code> with the first component from <code>b</code> and the …","Duplicate the low double-precision (64-bit) floating-point …","Duplicate odd-indexed single-precision (32-bit) …","Combine higher half of <code>a</code> and <code>b</code>. The higher half of <code>b</code> …","Duplicate even-indexed single-precision (32-bit) …","Combine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …","Returns a mask of the most significant bit of each element …","Returns a mask of the most significant bit of each element …","Returns a mask of the most significant bit of each element …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Subtracts 8-bit unsigned integer values and computes the …","Multiplies the low 32-bit integers from each packed 64-bit …","Multiplies the low unsigned 32-bit integers from each …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies __m128 vectors.","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Returns a new vector with the low element of <code>a</code> replaced by …","Multiplies the first component of <code>a</code> and <code>b</code>, the other …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies packed 16-bit signed integer values, truncate …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Computes the bitwise OR of <code>a</code> and <code>b</code>.","Bitwise OR of packed single-precision (32-bit) …","Computes the bitwise OR of 128 bits (representing integer …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Provides a hint to the processor that the code sequence is …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Fetch the cache line that contains address <code>p</code> using the …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Returns the approximate reciprocal of packed …","Returns the approximate reciprocal of the first …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Returns the approximate reciprocal square root of packed …","Returns the approximate reciprocal square root of the …","Sum the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcasts 16-bit integer <code>a</code> to all elements.","Broadcasts 32-bit integer <code>a</code> to all elements.","Broadcasts 64-bit integer <code>a</code> to all elements.","Broadcasts 8-bit integer <code>a</code> to all elements.","Broadcasts double-precision (64-bit) floating-point value …","Construct a <code>__m128</code> with all element set to <code>a</code>.","Sets packed 16-bit integers with the supplied values.","Sets packed 32-bit integers with the supplied values.","Sets packed 64-bit integers with the supplied values, from …","Sets packed 8-bit integers with the supplied values.","Sets packed double-precision (64-bit) floating-point …","Broadcasts double-precision (64-bit) floating-point value …","Construct a <code>__m128</code> from four floating point values highest …","Alias for <code>_mm_set1_ps</code>","Copies double-precision (64-bit) floating-point element <code>a</code> …","Construct a <code>__m128</code> with the lowest element set to <code>a</code> and …","Sets the MXCSR register with the 32-bit unsigned integer …","Sets packed 16-bit integers with the supplied values in …","Sets packed 32-bit integers with the supplied values in …","Sets packed 8-bit integers with the supplied values in …","Sets packed double-precision (64-bit) floating-point …","Construct a <code>__m128</code> from four floating point values lowest …","Returns packed double-precision (64-bit) floating-point …","Construct a <code>__m128</code> with all elements initialized to zero.","Returns a vector with all elements set to zero.","Performs a serializing operation on all store-to-memory …","Performs an intermediate calculation for the next four …","Performs the final calculation for the next four SHA1 …","Calculate SHA1 state variable E after four rounds of …","Performs four rounds of SHA1 operation using an initial …","Performs an intermediate calculation for the next four …","Performs the final calculation for the next four SHA256 …","Performs 2 rounds of SHA256 operation using an initial …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffles 32-bit integers in <code>a</code> using the control in <code>IMM8</code>.","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.","Constructs a 128-bit floating-point vector of <code>[2 x double]</code> …","Shuffles packed single-precision (32-bit) floating-point …","Shuffles 16-bit integers in the high 64 bits of <code>a</code> using …","Shuffles 16-bit integers in the low 64 bits of <code>a</code> using the …","Negates packed 16-bit integers in <code>a</code> when the corresponding …","Negates packed 32-bit integers in <code>a</code> when the corresponding …","Negates packed 8-bit integers in <code>a</code> when the corresponding …","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.","Shift packed 16-bit integers in a left by the amount …","Shifts packed 32-bit integers in <code>a</code> left by the amount …","Shifts packed 64-bit integers in <code>a</code> left by the amount …","Returns a new vector with the square root of each of the …","Returns the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Returns a new vector with the low element of <code>a</code> replaced by …","Returns the square root of the first single-precision …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shift packed 64-bit integers in a right by count while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shifts packed 64-bit integers in <code>a</code> right by the amount …","Stores the lower double-precision (64-bit) floating-point …","Stores the lowest 32 bit float of <code>a</code> repeated four times …","Store 128-bits (composed of 4 packed 32-bit integers) from …","Store 128-bits (composed of 2 packed 64-bit integers) from …","Stores 128-bits (composed of 2 packed double-precision …","Stores the lower double-precision (64-bit) floating-point …","Stores four 32-bit floats into <em>aligned</em> memory.","Alias for <code>_mm_store1_ps</code>","Stores the lower 64 bits of a 128-bit vector of …","Stores 128-bits of integer data from <code>a</code> into memory.","Stores the lowest 32 bit float of <code>a</code> into memory.","Stores the upper 64 bits of a 128-bit vector of …","Stores the lower 64-bit integer <code>a</code> to a memory location.","Stores the lower 64 bits of a 128-bit vector of …","Stores 2 double-precision (64-bit) floating-point elements …","Stores four 32-bit floats into <em>aligned</em> memory in reverse …","Store 128-bits (composed of 8 packed 16-bit integers) from …","Store 128-bits (composed of 4 packed 32-bit integers) from …","Store 128-bits (composed of 2 packed 64-bit integers) from …","Store 128-bits (composed of 16 packed 8-bit integers) from …","Stores 128-bits (composed of 2 packed double-precision …","Stores four 32-bit floats into memory. There are no …","Stores 128-bits of integer data from <code>a</code> into memory.","Stores a 128-bit floating point vector of <code>[2 x double]</code> to …","Stores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …","Non-temporal store of <code>a.0</code> into <code>p</code>.","Stores a 128-bit integer vector to a 128-bit aligned …","Stores a 32-bit integer value in the specified memory …","Stores a 64-bit integer value in the specified memory …","Non-temporal store of <code>a.0</code> into <code>p</code>.","Subtracts packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …","Subtracts packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtracts __m128 vectors.","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Returns a new vector with the low element of <code>a</code> replaced by …","Subtracts the first component of <code>b</code> from <code>a</code>, the other …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Tests whether the specified bits in <code>a</code> 128-bit integer …","Tests whether the specified bits in a 128-bit integer …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Tests whether the specified bits in a 128-bit integer …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Counts the number of trailing least significant zero bits.","Counts the number of trailing least significant zero bits.","Compares the lower element of <code>a</code> and <code>b</code> for equality.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for less-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Returns vector of type __m128d with undefined elements.","Returns vector of type __m128 with undefined elements.","Returns vector of type __m128i with undefined elements.","Unpacks and interleave 16-bit integers from the high half …","Unpacks and interleave 32-bit integers from the high half …","Unpacks and interleave 64-bit integers from the high half …","Unpacks and interleave 8-bit integers from the high half …","The resulting <code>__m128d</code> element is composed by the low-order …","Unpacks and interleave single-precision (32-bit) …","Unpacks and interleave 16-bit integers from the low half …","Unpacks and interleave 32-bit integers from the low half …","Unpacks and interleave 64-bit integers from the low half …","Unpacks and interleave 8-bit integers from the low half of …","The resulting <code>__m128d</code> element is composed by the …","Unpacks and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Computes the bitwise XOR of <code>a</code> and <code>b</code>.","Bitwise exclusive OR of packed single-precision (32-bit) …","Computes the bitwise XOR of 128 bits (representing integer …","Unsigned multiply without affecting flags.","Unsigned multiply without affecting flags.","Scatter contiguous low order bits of <code>a</code> to the result at …","Scatter contiguous low order bits of <code>a</code> to the result at …","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …","Counts the bits that are set.","Counts the bits that are set.","Read a hardware generated 16-bit random value and store …","Read a hardware generated 32-bit random value and store …","Read a hardware generated 64-bit random value and store …","Read a 16-bit NIST SP800-90B and SP800-90C compliant …","Read a 32-bit NIST SP800-90B and SP800-90C compliant …","Read a 64-bit NIST SP800-90B and SP800-90C compliant …","Reads the current value of the processor’s time-stamp …","Store 32-bit mask from a into memory.","Store 64-bit mask from a into memory.","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Clears all bits below the least significant zero of <code>x</code> and …","Clears all bits below the least significant zero of <code>x</code> and …","Counts the number of trailing least significant zero bits.","Counts the number of trailing least significant zero bits.","Sets all bits below the least significant one of <code>x</code> and …","Sets all bits below the least significant one of <code>x</code> and …","Forces a restricted transactional memory (RTM) region to …","Retrieves the parameter passed to <code>_xabort</code> when <code>_xbegin</code>’s …","Specifies the start of a restricted transactional memory …","Specifies the end of a restricted transactional memory …","Reads the contents of the extended control register <code>XCR</code> …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Copies 64-bits from <code>val</code> to the extended control register (…","Queries whether the processor is executing in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compares and exchange 16 bytes (128 bits) of data …","EAX register.","EBX register.","ECX register.","EDX register.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Does the host support the <code>cpuid</code> instruction?","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generates the trap instruction <code>UD2</code>","A by-value array iterator.","The error type returned when a conversion from a slice to …","","","","Returns a mutable slice of all elements that have not been …","Returns an immutable slice of all elements that have not …","","","","","","","","","","","","","Creates an iterator over <code>T</code> which returns no elements.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates an array of type [T; N], where each element <code>T</code> is …","Converts a mutable reference to <code>T</code> into a mutable reference …","Converts a reference to <code>T</code> into a reference to an array of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new iterator over the given <code>array</code>.","Creates an iterator over the elements in a …","","","","","","","","","","","Creates an array <code>[T; N]</code> where each fallible array element <code>T</code>…","","","","","An iterator over the escaped version of a byte.","","","","","","Returns an iterator that produces an escaped version of a …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Asserts that an expression matches any of the given …","Asserts that an expression matches any of the given …","A trait for dealing with asynchronous iterators.","An async iterator that was created from iterator.","The type of items yielded by the async iterator.","","","","","","Returns the argument unchanged.","Converts an iterator into an async iterator.","Calls <code>U::from(self)</code>.","","Attempt to pull out the next value of this async iterator, …","","Returns the bounds on the remaining length of the async …","","","","","","A trait for borrowing data.","A trait for mutably borrowing data.","Immutably borrows from an owned value.","Mutably borrows from an owned value.","An error returned by <code>RefCell::try_borrow</code>.","An error returned by <code>RefCell::try_borrow_mut</code>.","A mutable memory location.","A value which is initialized on the first access.","A cell which can be written to only once.","Wraps a borrowed reference to a value in a <code>RefCell</code> box. A …","A mutable memory location with dynamically checked borrow …","A wrapper type for a mutably borrowed value from a …","<code>UnsafeCell</code>, but <code>Sync</code>.","The core primitive for interior mutability in Rust.","Returns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>","Returns a raw pointer to the underlying data in this cell.","Returns a raw pointer to the underlying data in this cell.","Returns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>","","","","Immutably borrows the wrapped value.","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","","Panics","Copies a <code>Ref</code>.","Panics","","","","","Panics","Creates a new lazy value using <code>Default</code> as the initializing …","","Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.","Creates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.","","","","","","","","","","","Panics","Makes a new <code>Ref</code> for an optional component of the borrowed …","Makes a new <code>RefMut</code> for an optional component of the …","","","","","","","","","","","","","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Creates a new <code>OnceCell&lt;T&gt;</code> which already contains the given …","","Returns the argument unchanged.","Creates a new <code>Cell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","","Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.","Creates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","","Returns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>","","Panics","Gets the reference to the underlying value.","Returns a copy of the contained value.","Gets a mutable pointer to the wrapped value.","Gets a mutable pointer to the wrapped value.","Gets the mutable reference to the underlying value.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","Panics","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the cell, returning the wrapped value.","Unwraps the value, consuming the cell.","Consumes the <code>RefCell</code>, returning the wrapped value.","Unwraps the value, consuming the cell.","Unwraps the value, consuming the cell.","","Panics","Convert into a reference to the underlying data.","Convert into a mutable reference to the underlying data.","","Panics","Makes a new <code>Ref</code> for a component of the borrowed data.","Makes a new <code>RefMut</code> for a component of the borrowed data, …","Splits a <code>Ref</code> into multiple <code>Ref</code>s for different components …","Splits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …","","Creates a new lazy value with the given initializing …","Creates a new empty cell.","Creates a new <code>Cell</code> containing the given value.","Creates a new <code>RefCell</code> containing <code>value</code>.","Constructs a new instance of <code>UnsafeCell</code> which will wrap …","Constructs a new instance of <code>SyncUnsafeCell</code> which will …","","Panics","","","Gets a mutable pointer to the wrapped value. The …","Gets a mutable pointer to the wrapped value.","Replaces the contained value with <code>val</code>, and returns the old …","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>, …","","","Sets the contents of the cell to <code>value</code>.","Sets the contained value.","","Swaps the values of two <code>Cell</code>s. Difference with …","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Takes the value out of this <code>OnceCell</code>, moving it back to an …","Takes the value of the cell, leaving <code>Default::default()</code> in …","Takes the wrapped value, leaving <code>Default::default()</code> in its …","","","","","","","","Immutably borrows the wrapped value, returning an error if …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo the effect of leaked guards on the borrow state of …","Updates the contained value using a function and returns …","","","","","","","The error type returned when a conversion from <code>u32</code> to …","An iterator that decodes UTF-16 encoded code points from …","An error that can be returned when decoding UTF-16 code …","An iterator that yields the literal escape code of a <code>char</code>.","An iterator that yields the literal escape code of a <code>char</code>.","Returns an iterator that yields the hexadecimal Unicode …","The highest valid code point a <code>char</code> can have, <code>&#39;\\\\u{10FFFF}&#39;</code>…","An error which can be returned when parsing a char.","<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …","Returns an iterator that yields the lowercase equivalent …","Returns an iterator that yields the uppercase equivalent …","The error type returned when a checked char conversion …","The version of Unicode that the Unicode parts of <code>char</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator over the UTF-16 encoded code points in …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a digit in the given radix to a <code>char</code>. Use …","Converts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.","Converts a <code>u32</code> to a <code>char</code>, ignoring validity. Use …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the unpaired surrogate which caused this error.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","An ordering where a compared value is equal to another.","An ordering where a compared value is greater than another.","An ordering where a compared value is less than another.","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","An <code>Ordering</code> is the result of a comparison between two …","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","A helper struct for reverse ordering.","","","","","Restrict a value to a certain interval.","","","","","","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This method tests greater than or equal to (for <code>self</code> and …","","","","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","","This method tests less than (for <code>self</code> and <code>other</code>) and is …","","Compares and returns the maximum of two values.","Compares and returns the maximum of two values.","Returns the maximum of two values with respect to the …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Compares and returns the minimum of two values.","Returns the minimum of two values with respect to the …","Returns the element that gives the minimum value from the …","This method tests for <code>!=</code>. The default implementation is …","This method returns an ordering between <code>self</code> and <code>other</code> …","","","Reverses the <code>Ordering</code>.","","Chains two orderings.","Chains the ordering with the given function.","","","","","","","","","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …","Used to do value-to-value conversions while consuming the …","The error type for errors that can never happen.","A value-to-value conversion that consumes the input value. …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","","","","","","","","","","Converts to this type from the input type.","","Returns the argument unchanged.","","","","The identity function.","Converts this type into the (usually inferred) input type.","Calls <code>U::from(self)</code>.","","","","","Performs the conversion.","","Performs the conversion.","","","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","Return the default value of a type according to the <code>Default</code>…","Returns the “default value” for a type.","<code>Error</code> is a trait representing the basic expectations for …","An iterator over an <code>Error</code> and its sources.","","","","","","","","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some mutable reference to the inner value if it is …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some reference to the inner value if it is of type …","Forwards to the method defined on the type <code>dyn Error</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","","Provides type based access to context intended for error …","Request a reference of type <code>T</code> as context about this error.","Request a reference of type <code>T</code> as context about this error.","Request a reference of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","The lower-level source of this error, if any.","Returns an iterator starting with the current error and …","","","","","Approximate number of significant digits in base 10. Use …","Machine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.","Infinity (∞). Use <code>f32::INFINITY</code> instead.","Number of significant digits in base 2. Use …","Largest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.","Maximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> …","Maximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …","Smallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.","Minimum possible normal power of 10 exponent. Use …","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …","Not a Number (NaN). Use <code>f32::NAN</code> instead.","Negative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.","The radix or base of the internal representation of <code>f32</code>. …","Basic mathematical constants.","Euler’s number (e)","1/π","1/sqrt(2)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","ln(10)","ln(2)","log10(2)","log10(e)","log2(10)","log2(e)","Archimedes’ constant (π)","sqrt(2)","The full circle constant (τ)","Approximate number of significant digits in base 10. Use …","Machine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.","Infinity (∞). Use <code>f64::INFINITY</code> instead.","Number of significant digits in base 2. Use …","Largest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.","Maximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> …","Maximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …","Smallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.","Minimum possible normal power of 10 exponent. Use …","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …","Not a Number (NaN). Use <code>f64::NAN</code> instead.","Negative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.","The radix or base of the internal representation of <code>f64</code>. …","Basic mathematical constants.","Euler’s number (e)","1/π","1/sqrt(2)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","ln(10)","ln(2)","log10(2)","log10(e)","log2(10)","log2(e)","Archimedes’ constant (π)","sqrt(2)","The full circle constant (τ)","Representation of a borrowed C string.","An error indicating that no nul byte was present.","An error indicating that a nul byte was not in the …","Type alias for <code>NonZero</code> version of <code>c_char</code>","Type alias for <code>NonZero</code> version of <code>c_int</code>","Type alias for <code>NonZero</code> version of <code>c_long</code>","Type alias for <code>NonZero</code> version of <code>c_longlong</code>","Type alias for <code>NonZero</code> version of <code>c_schar</code>","Type alias for <code>NonZero</code> version of <code>c_short</code>","Type alias for <code>NonZero</code> version of <code>c_uchar</code>","Type alias for <code>NonZero</code> version of <code>c_uint</code>","Type alias for <code>NonZero</code> version of <code>c_ulong</code>","Type alias for <code>NonZero</code> version of <code>c_ulonglong</code>","Type alias for <code>NonZero</code> version of <code>c_ushort</code>","A wrapper for a <code>va_list</code>","x86_64 ABI implementation of a <code>va_list</code>.","","","Advance to the next arg.","Returns the inner pointer to this C string.","","Convert a <code>VaListImpl</code> into a <code>VaList</code> that is …","","","","","","","","","","","","","Equivalent to C’s <code>char</code> type.","Equivalent to C’s <code>double</code> type.","Equivalent to C’s <code>float</code> type.","Equivalent to C’s <code>signed int</code> (<code>int</code>) type.","Equivalent to C’s <code>signed long</code> (<code>long</code>) type.","Equivalent to C’s <code>signed long long</code> (<code>long long</code>) type.","Equivalent to C’s <code>ptrdiff_t</code> type, from <code>stddef.h</code> (or …","Equivalent to C’s <code>signed char</code> type.","Equivalent to C’s <code>signed short</code> (<code>short</code>) type.","Equivalent to C’s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> …","Equivalent to C’s <code>ssize_t</code> (on POSIX) or <code>SSIZE_T</code> (on …","Equivalent to C’s <code>unsigned char</code> type.","Equivalent to C’s <code>unsigned int</code> type.","Equivalent to C’s <code>unsigned long</code> type.","Equivalent to C’s <code>unsigned long long</code> type.","Equivalent to C’s <code>unsigned short</code> type.","Equivalent to C’s <code>void</code> type when used as a pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a C string wrapper from a byte slice.","Creates a C string wrapper from a byte slice.","Unsafely creates a C string wrapper from a byte slice.","Wraps a raw C string with a safe C string wrapper.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.","","","","","","","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","","","","","Yields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.","","","Converts a <code>CStr</code> into a Cow&lt;str&gt;.","","","","","","","","","","","","","","","","","Copies the <code>va_list</code> at the current location.","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","","Determines if the <code>#</code> flag was specified.","","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","","Character used as ‘fill’ whenever there is alignment.","","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","","Optionally specified precision for numeric types. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","Writes some formatted information into this instance.","","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …","","A future represents an asynchronous computation obtained …","Conversion into a <code>Future</code>.","Which kind of future are we turning this into?","The type of value produced on completion.","The output that the future will produce on completion.","Creates a future which never resolves, representing a …","A Future that wraps a function returning <code>Poll</code>.","A future that is immediately ready with a value.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a future from a value.","","","","Consumes the <code>Ready</code>, returning the wrapped value.","Polls multiple futures simultaneously, returning a tuple …","Creates a future which never resolves, representing a …","Attempt to resolve the future to a final value, registering","","","","Creates a future that wraps a function returning <code>Poll</code>.","Creates a future that is immediately ready with a value.","","","","","","","","","","","","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","An implementation of SipHash 2-4.","","","","","Creates a new hasher.","","","","","","","","","Returns the hash value for the values written so far.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","Writes some data into this <code>Hasher</code>.","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","Writes a single <code>str</code> into this hasher.","","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","An identity function that <em><strong>hints</strong></em> to the compiler to be …","An identity function that causes an <code>unused_must_use</code> …","Emits a machine instruction to signal the processor that …","Informs the compiler that the site which is calling this …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","Aborts the execution of the process.","Performs checked integer addition.","Calculates the offset from a pointer, potentially wrapping.","A guard for unsafe functions that cannot ever be executed …","A guard for <code>std::mem::uninitialized</code>. This will statically …","A guard for unsafe functions that cannot ever be executed …","Informs the optimizer that a condition is always true. If …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","An atomic fence.","An atomic fence.","An atomic fence.","An atomic fence.","Loads the current value of the pointer.","Loads the current value of the pointer.","Loads the current value of the pointer.","","Maximum with the current value using a signed comparison.","Maximum with the current value using a signed comparison.","Maximum with the current value.","Maximum with the current value using a signed comparison.","Maximum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","A compiler-only memory barrier.","A compiler-only memory barrier.","A compiler-only memory barrier.","A compiler-only memory barrier.","Stores the value at the specified memory location.","Stores the value at the specified memory location.","Stores the value at the specified memory location.","","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Reverses the bits in an integer type <code>T</code>.","See documentation of <code>std::hint::black_box</code> for details.","Executes a breakpoint trap, for inspection by a debugger.","Reverses the bytes in an integer type <code>T</code>.","Gets a reference to a static <code>Location</code> indicating where it …","Returns the smallest integer greater than or equal to an …","Returns the smallest integer greater than or equal to an …","Allocates a block of memory at compile time. At runtime, …","Deallocates a memory which allocated by …","Selects which function to call depending on the context.","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.","Copies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.","Returns the cosine of an <code>f32</code>.","Returns the cosine of an <code>f64</code>.","Returns the number of leading unset bits (zeroes) in an …","Like <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given …","Returns the number of bits set in an integer type <code>T</code>","Returns the number of trailing unset bits (zeroes) in an …","Like <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given …","Returns the value of the discriminant for the variant in …","","Performs an exact division, resulting in undefined …","Returns 2 raised to the power of an <code>f32</code>.","Returns 2 raised to the power of an <code>f64</code>.","Returns the exponential of an <code>f32</code>.","Returns the exponential of an <code>f64</code>.","Returns the absolute value of an <code>f32</code>.","Returns the absolute value of an <code>f64</code>.","Float addition that allows optimizations based on …","Float division that allows optimizations based on …","Convert with LLVM’s fptoui/fptosi, which may return …","Returns the largest integer less than or equal to an <code>f32</code>.","Returns the largest integer less than or equal to an <code>f64</code>.","Returns <code>a * b + c</code> for <code>f32</code> values.","Returns <code>a * b + c</code> for <code>f64</code> values.","Float multiplication that allows optimizations based on …","Moves a value out of scope without running drop glue.","Float remainder that allows optimizations based on …","Float subtraction that allows optimizations based on …","Hints to the compiler that branch condition is likely to …","Returns the base 10 logarithm of an <code>f32</code>.","Returns the base 10 logarithm of an <code>f64</code>.","Returns the base 2 logarithm of an <code>f32</code>.","Returns the base 2 logarithm of an <code>f64</code>.","Returns the natural logarithm of an <code>f32</code>.","Returns the natural logarithm of an <code>f64</code>.","Returns the maximum of two <code>f32</code> values.","Returns the maximum of two <code>f64</code> values.","The minimum alignment of a type.","The required alignment of the referenced value.","Returns the minimum of two <code>f32</code> values.","Returns the minimum of two <code>f64</code> values.","Rustc internal tooling for hand-writing MIR.","Performs checked integer multiplication","Returns the nearest integer to an <code>f32</code>.","Returns the nearest integer to an <code>f64</code>.","Returns <code>true</code> if the actual type given as <code>T</code> requires drop …","Emits a <code>!nontemporal</code> store according to LLVM (see their …","Calculates the offset from a pointer.","This method creates a pointer to any <code>Some</code> value. If the …","Raises an <code>f32</code> to an <code>f32</code> power.","Raises an <code>f64</code> to an <code>f64</code> power.","Raises an <code>f32</code> to an integer power.","Raises an <code>f64</code> to an integer power.","The preferred alignment of a type.","The <code>prefetch</code> intrinsic is a hint to the code generator to …","The <code>prefetch</code> intrinsic is a hint to the code generator to …","The <code>prefetch</code> intrinsic is a hint to the code generator to …","The <code>prefetch</code> intrinsic is a hint to the code generator to …","See documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.","Masks out bits of the pointer according to a mask.","See documentation of <code>&lt;*const T&gt;::offset_from</code> for details.","See documentation of <code>&lt;*const T&gt;::sub_ptr</code> for details.","Determines whether the raw bytes of the two values are …","This is an implementation detail of <code>crate::ptr::read</code> and …","Returns the nearest integer to an <code>f32</code>. May raise an …","Returns the nearest integer to an <code>f64</code>. May raise an …","Performs rotate left.","Performs rotate right.","Returns the nearest integer to an <code>f32</code>. Rounds half-way …","Returns the nearest integer to an <code>f64</code>. Rounds half-way …","Returns the nearest integer to an <code>f32</code>. Rounds half-way …","Returns the nearest integer to an <code>f64</code>. Rounds half-way …","Magic intrinsic that derives its meaning from attributes …","Computes <code>a + b</code>, saturating at numeric bounds.","Computes <code>a - b</code>, saturating at numeric bounds.","Returns the sine of an <code>f32</code>.","Returns the sine of an <code>f64</code>.","The size of a type in bytes.","The size of the referenced value in bytes.","Returns the square root of an <code>f32</code>","Returns the square root of an <code>f64</code>","Performs checked integer subtraction","Reinterprets the bits of a value of one type as another …","Returns the integer part of an <code>f32</code>.","Returns the integer part of an <code>f64</code>.","Rust’s “try catch” construct which invokes the …","Gets an identifier which is globally unique to the …","Gets a static string slice containing the name of a type.","Performs a volatile load from the <code>src</code> pointer The pointer …","Performs a volatile store to the <code>dst</code> pointer. The pointer …","Returns the result of an unchecked addition, resulting in …","Performs an unchecked division, resulting in undefined …","Returns the result of an unchecked multiplication, …","Returns the remainder of an unchecked division, resulting …","Performs an unchecked left shift, resulting in undefined …","Performs an unchecked right shift, resulting in undefined …","Returns the result of an unchecked subtraction, resulting …","Hints to the compiler that branch condition is likely to …","Informs the optimizer that this point in the code is not …","Returns the number of variants of the type <code>T</code> cast to a …","Equivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …","Equivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …","Performs a volatile load from the <code>src</code> pointer.","Equivalent to the appropriate <code>llvm.memset.p0i8.*</code> …","Performs a volatile store to the <code>dst</code> pointer.","<code>ptr</code> must point to a vtable. The intrinsic will return the …","<code>ptr</code> must point to a vtable. The intrinsic will return the …","Returns (a + b) mod 2N, where N is the width of T in bits.","Returns (a * b) mod 2N, where N is the width of T in bits.","Returns (a - b) mod 2N, where N is the width of T in bits.","Sets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…","Type representing basic blocks.","","Emits a <code>CastKind::Transmute</code> cast.","","","Gets the discriminant of a place.","","Access the field with the given index of some place.","","","","","","","","","","","","Adds a variant projection with the given index to the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Macro for generating custom MIR.","Helper macro that allows you to treat a value expression …","","","","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","An iterator over <code>N</code> elements of the iterator at a time.","Like <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …","An iterator that links two iterators together, in a chain.","An iterator that clones the elements of an underlying …","An iterator that copies the elements of an underlying …","An iterator that repeats endlessly.","An iterator able to yield elements from both ends.","An iterator that yields nothing.","An iterator that yields the current count and the element …","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","An iterator that filters the elements of <code>iter</code> with …","An iterator that uses <code>f</code> to both filter and map elements …","An iterator that maps each element to an iterator, and …","An iterator that flattens one level of nesting in an …","An iterator where each iteration calls the provided …","Conversion from an <code>Iterator</code>.","An iterator that yields <code>None</code> forever after the underlying …","An iterator that always continues to yield <code>None</code> when …","An iterator that calls a function with a reference to each …","An iterator adapter that places a separator between all …","An iterator adapter that places a separator between all …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","An iterator that maps the values of <code>iter</code> with <code>f</code>.","An iterator that only accepts elements while <code>predicate</code> …","An iterator that yields an element exactly once.","An iterator that yields a single element of type <code>A</code> by …","An iterator with a <code>peek()</code> that returns an optional …","Trait to represent types that can be created by …","An iterator that repeats an element endlessly.","An iterator that repeats elements of type <code>A</code> endlessly by …","A double-ended iterator with the direction inverted.","An iterator to maintain state while iterating another …","An iterator that skips over <code>n</code> elements of <code>iter</code>.","An iterator that rejects elements while <code>predicate</code> returns …","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …","An iterator for stepping iterators by a custom amount.","An new iterator where each successive item is computed …","Trait to represent types that can be created by summing up …","An iterator that only iterates over the first <code>n</code> iterations …","An iterator that only accepts elements while <code>predicate</code> …","An iterator that reports an accurate length using …","A type that upholds all invariants of <code>Step</code>.","An iterator that iterates two other iterators …","","","","","","Advances the iterator from the back by <code>n</code> elements.","","","","","","","","","","","Advances the iterator by <code>n</code> elements.","","","","","","","","","","Tests if every element of the iterator matches a predicate.","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","","","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Takes two iterators and creates a new iterator over both …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which <code>clone</code>s all of its elements.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Creates an iterator which copies all of its elements.","","","Consumes the iterator, counting the number of iterations …","","","","","","","","","","","Repeats an iterator endlessly.","Creates a <code>Flatten</code> iterator from the default value of <code>I</code>.","","Creates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.","Creates a <code>Cloned</code> iterator from the default value of <code>I</code>","Creates a <code>Copied</code> iterator from the default value of <code>I</code>","Creates an <code>Enumerate</code> iterator from the default value of <code>I</code>","Creates a <code>Fuse</code> iterator from the default value of <code>I</code>.","Creates a <code>Rev</code> iterator from the default value of <code>I</code>","","Creates an iterator that yields nothing.","Creates an iterator which gives the current iteration …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","","","","","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","","","","Applies function to the elements of iterator and returns …","","","","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds every element into an accumulator by applying an …","","","","","","","","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new iterator where each iteration calls the …","Creates a new iterator where each iteration calls the …","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","Determines if the elements of this <code>Iterator</code> are …","","Determines if the elements of this <code>Iterator</code> are …","","","","","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator from a value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the remaining elements of the …","Returns <code>true</code> if the iterator is empty.","","","","","","","","","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","","","","","","","","","","","","","","","","","","","","","","","","Consumes the iterator, returning the last element.","","","","","","","Determines if the elements of this <code>Iterator</code> are …","","Returns the exact remaining length of the iterator.","","","","","","","","","","","","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","","","Determines if the elements of this <code>Iterator</code> are not equal …","","","Advances the iterator and returns the next value.","","","","","","","","","","","Overflow Behavior","","","","","","","","","","","","","","","","","","","","","","","","Removes and returns an element from the end of the …","","","","","","","","","","","","","","","","","","","","","","","","Advances the iterator and returns an array containing the …","","Consume and return the next value of this iterator if a …","Consume and return the next item if it is equal to <code>expected</code>…","Returns the <code>n</code>th element of the iterator.","","","","","","","","","","","","","Returns the <code>n</code>th element from the end of the iterator.","","","","","","","","","","Creates an iterator that yields an element exactly once.","Creates an iterator that lazily generates a value exactly …","","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Returns a reference to the next() value without advancing …","Returns a mutable reference to the next() value without …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","","Searches for an element in an iterator, returning its …","","","","","Method which takes an iterator and generates <code>Self</code> from the …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","","Creates a new iterator that endlessly repeats a single …","Creates a new iterator that repeats elements of type <code>A</code> …","","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","","","","","","An iterator method that reduces the iterator’s elements …","","","","","","","","","","","","","","","","","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","","","","","","","Returns the bounds on the remaining length of the iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","","","Creates an iterator starting at the same point, but …","Returns the number of <em>successor</em> steps required to get from …","","Creates a new iterator where each successive item is …","Method which takes an iterator and generates <code>Self</code> from the …","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","","","An iterator method that applies a function as long as it …","","","","","","","","","","","","","","","","","","","","","","","An iterator method that applies a fallible function to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the elements to a single one by repeatedly …","","","This is the reverse version of <code>Iterator::try_fold()</code>: it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an iterator of pairs into a pair of containers.","Converts the arguments to iterators and zips them.","‘Zips up’ two iterators into a single iterator of …","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","A marker for types that can be dropped.","The type of the discriminant, which must satisfy the trait …","Compiler-internal trait used to indicate the type of enum …","A common trait implemented by all function pointers.","Zero-sized type used to mark things that “act like” …","A marker type which does not implement <code>Unpin</code>.","A marker for pointer-like types.","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Required trait for constants used in pattern matches.","Required trait for constants used in pattern matches.","Types for which it is safe to share references between …","A marker for tuple types.","Types that can be safely moved after being pinned.","Types that can be “unsized” to a dynamically-sized …","Returns the address of the function pointer.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Assume only that alignment conditions are met.","What transmutation safety conditions shall the compiler …","Are values of a type transmutable into values of another …","Opaque type representing the discriminant of an enum.","Assume only that lifetime conditions are met.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Do not assume that <em>you</em> have ensured any safety properties …","Assume only that safety conditions are met.","Assume only that dynamically-satisfiable validity …","","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring …","Assume both <code>self</code> and <code>other_assumptions</code>.","Extracts the values from an array of <code>MaybeUninit</code> …","Returns the contents of this <code>MaybeUninit</code> as a slice of …","Returns the contents of this <code>MaybeUninit</code> as a mutable …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","Assume <code>self</code>, excepting <code>other_assumptions</code>.","","","","","","","","","","Bitwise-copies a value.","","","","Returns a value uniquely identifying the enum variant in <code>v</code>.","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","","","Takes ownership and “forgets” about the value <strong>without </strong>…","Like <code>forget</code>, but also accepts unsized values.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the value from the <code>ManuallyDrop</code> container.","","When <code>true</code>, the compiler assume that <em>you</em> are ensuring that …","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","When <code>true</code>, the compiler assumes that <em>you</em> have ensured that …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Returns the contents of this slice of <code>MaybeUninit</code> as a …","Returns the contents of this mutable slice of <code>MaybeUninit</code> …","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.","","","","","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …","Transposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…","","","","","","","","","","","","","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.","","Create a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …","","","Returns the number of variants in the enum type <code>T</code>.","Sets the value of the <code>MaybeUninit&lt;T&gt;</code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …","An error which can be returned when parsing an IP address …","Admin-Local scope.","An IPv4 address representing the broadcast address: …","Global scope.","Interface-Local scope.","An IP address, either IPv4 or IPv6.","An IPv4 address.","An IPv6 address.","Scope of an IPv6 multicast address as defined in IETF RFC …","An IPv4 address with the address pointing to localhost: …","An IPv6 address representing localhost: <code>::1</code>.","Link-Local scope.","Organization-Local scope.","Realm-Local scope.","Site-Local scope.","An internet socket address, either IPv4 or IPv6.","An IPv4 socket address.","An IPv6 socket address.","An IPv4 address representing an unspecified address: …","An IPv6 address representing the unspecified address: <code>::</code>","An IPv4 address.","An IPv4 socket address.","An IPv6 address.","An IPv6 socket address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the flow information associated with this address.","","","","","","","","","","","","","","","","","Copies this address to a new <code>IpAddr::V4</code>.","Creates an <code>IpAddr::V6</code> from a sixteen element byte array.","Copies this address to a new <code>IpAddr::V6</code>.","Creates an <code>IpAddr::V6</code> from an eight element 16-bit array.","Returns the argument unchanged.","Creates an <code>IpAddr::V4</code> from a four element byte array.","Returns the argument unchanged.","Converts a host byte order <code>u32</code> into an <code>Ipv4Addr</code>.","Creates an <code>Ipv4Addr</code> from a four element byte array.","Creates an <code>Ipv6Addr</code> from a sixteen element byte array.","Creates an <code>Ipv6Addr</code> from an eight element 16-bit array.","Returns the argument unchanged.","Convert a host byte order <code>u128</code> into an <code>Ipv6Addr</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.","Converts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.","Converts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the IP address associated with this socket address.","Returns the IP address associated with this socket address.","Returns the IP address associated with this socket address.","","","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …","Returns <code>true</code> if this is an address reserved for …","Returns <code>true</code> if this is a broadcast address (…","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this is an address reserved for …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).","Returns <code>true</code> if this is a loopback address.","Returns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).","Returns <code>true</code> if this is the loopback address (<code>::1</code>), as …","Returns <code>true</code> if this is a multicast address.","Returns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).","Returns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).","Returns <code>true</code> if this is a private address.","Returns <code>true</code> if this address is reserved by IANA for …","Returns <code>true</code> if this address is part of the Shared Address …","Returns <code>true</code> if this is a unicast address, as defined by …","Returns <code>true</code> if the address is a globally routable unicast …","Returns <code>true</code> if the address is a unicast address with …","Returns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).","Returns <code>true</code> for the special ‘unspecified’ address.","Returns <code>true</code> for the special ‘unspecified’ address (…","Returns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…","Returns the address’s multicast scope if the address is …","Creates a new IPv4 address from four eight-bit octets.","Creates a new IPv6 address from eight 16-bit segments.","Creates a new socket address from an IP address and a port …","Creates a new socket address from an <code>IPv4</code> address and a …","Creates a new socket address from an <code>IPv6</code> address, a …","Returns the four eight-bit integers that make up this …","Returns the sixteen eight-bit integers the IPv6 address …","","","Parse an IP address from a slice of bytes.","Parse an IPv4 address from a slice of bytes.","Parse an IPv6 address from a slice of bytes.","Parse a socket address from a slice of bytes.","Parse an IPv4 socket address from a slice of bytes.","Parse an IPv6 socket address from a slice of bytes.","","","","","","","","","","","Returns the port number associated with this socket …","Returns the port number associated with this socket …","Returns the port number associated with this socket …","","","","Returns the scope ID associated with this address.","","Returns the eight 16-bit segments that make up this …","Changes the flow information associated with this socket …","Changes the IP address associated with this socket address.","Changes the IP address associated with this socket address.","Changes the IP address associated with this socket address.","Changes the port number associated with this socket …","Changes the port number associated with this socket …","Changes the port number associated with this socket …","Changes the scope ID associated with this socket address.","Converts this address to an <code>IpAddr::V4</code> if it is an …","Converts this address to an <code>IpAddr::V4</code> if it is an …","Converts this address to an <code>IPv4</code> address if it is either …","Converts this address to an <code>IPv4</code> address if it’s an …","Converts this address to an IPv4-compatible <code>IPv6</code> address.","Converts this address to an IPv4-mapped <code>IPv6</code> address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Value being parsed is empty.","A classification of floating point numbers.","Positive or negative infinity, which often results from …","Enum to store the various types of errors that can cause …","Contains an invalid digit in its context.","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","NaN (not a number): this value results from calculations …","Integer is too small to store in target integer type.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","A regular floating point number, not any of the …","An error which can be returned when parsing a float.","An error which can be returned when parsing an integer.","Integer is too large to store in target integer type.","Provides intentionally-saturating arithmetic on <code>T</code>.","“Subnormal” or “denormal” floating point …","The error type returned when a checked integral type …","Provides intentionally-wrapped arithmetic on <code>T</code>.","Value was Zero","Positive or negative zero.","Computes the absolute value of self. See <code>i8::abs</code> for …","Computes the absolute value of self. See <code>i16::abs</code> for …","Computes the absolute value of self. See <code>i32::abs</code> for …","Computes the absolute value of self. See <code>i64::abs</code> for …","Computes the absolute value of self. See <code>i128::abs</code> for …","Computes the absolute value of self. See <code>isize::abs</code> for …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …hecked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …eturns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroU16</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU32</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroU32</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU32</code> to <code>NonZeroU64</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU64</code> losslessly.","Converts <code>NonZeroU64</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU128</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU32</code> to <code>NonZeroU128</code> losslessly.","Returns the argument unchanged.","","Converts <code>NonZeroU8</code> to <code>NonZeroUsize</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroUsize</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroI16</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI8</code> to <code>NonZeroI16</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI32</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU64</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI64</code> to <code>NonZeroI128</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroIsize</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI8</code> to <code>NonZeroIsize</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroIsize</code> losslessly.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","","","","","","","","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","","","","","","","","","","","","","","","","","","","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","","","Outputs the detailed cause of parsing an integer failing.","","","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …reates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","","","","","","","","","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","Raises self to the power of <code>exp</code>, using exponentiation by …","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …everses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating absolute value, see <code>i8::saturating_abs</code>.","Saturating absolute value, see <code>i16::saturating_abs</code>.","Saturating absolute value, see <code>i32::saturating_abs</code>.","Saturating absolute value, see <code>i64::saturating_abs</code>.","Saturating absolute value, see <code>i128::saturating_abs</code>.","Saturating absolute value, see <code>isize::saturating_abs</code>.","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Multiplies two non-zero integers together. Return <code>u8::MAX</code> …","Multiplies two non-zero integers together. Return <code>u16::MAX</code> …","Multiplies two non-zero integers together. Return <code>u32::MAX</code> …","Multiplies two non-zero integers together. Return <code>u64::MAX</code> …","Multiplies two non-zero integers together. Return <code>u128::MAX</code>…","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return <code>i8::MAX</code> …","Multiplies two non-zero integers together. Return <code>i16::MAX</code> …","Multiplies two non-zero integers together. Return <code>i32::MAX</code> …","Multiplies two non-zero integers together. Return <code>i64::MAX</code> …","Multiplies two non-zero integers together. Return <code>i128::MAX</code>…","Multiplies two non-zero integers together. Return …","Saturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …","Saturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …","Saturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …","Saturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …","Saturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …","Saturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …","Raise non-zero value to an integer power. Return <code>u8::MAX</code> …","Raise non-zero value to an integer power. Return <code>u16::MAX</code> …","Raise non-zero value to an integer power. Return <code>u32::MAX</code> …","Raise non-zero value to an integer power. Return <code>u64::MAX</code> …","Raise non-zero value to an integer power. Return <code>u128::MAX</code> …","Raise non-zero value to an integer power. Return <code>usize::MAX</code>…","Raise non-zero value to an integer power. Return <code>i8::MIN</code> …","Raise non-zero value to an integer power. Return <code>i16::MIN</code> …","Raise non-zero value to an integer power. Return <code>i32::MIN</code> …","Raise non-zero value to an integer power. Return <code>i64::MIN</code> …","Raise non-zero value to an integer power. Return <code>i128::MIN</code> …","Raise non-zero value to an integer power. Return <code>isize::MIN</code>…eturns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</codeeverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","","","","","","","","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","","","","","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU8</code>.","","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>u8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>u16</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU16</code>.","","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>u32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU32</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>u64</code> to <code>NonZeroU64</code>.","","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU128</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>u128</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroUsize</code>.","","Attempts to convert <code>usize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU8</code> to <code>NonZeroI8</code>.","","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>i8</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>i16</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI16</code>.","","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI32</code>.","","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>i32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI64</code>.","","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI64</code>.","Attempts to convert <code>i64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>i128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI128</code>.","","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>isize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroIsize</code>.","","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroIsize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Wrapping absolute value, see <code>i8::wrapping_abs</code>.","Wrapping absolute value, see <code>i16::wrapping_abs</code>.","Wrapping absolute value, see <code>i32::wrapping_abs</code>.","Wrapping absolute value, see <code>i64::wrapping_abs</code>.","Wrapping absolute value, see <code>i128::wrapping_abs</code>.","Wrapping absolute value, see <code>isize::wrapping_abs</code>.","","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","","","","","","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","The unary logical negation operator <code>!</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","The “return” type of this meta-function.","An infinite endpoint. Indicates that there is no bound in …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","","","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Performs the <code>&amp;</code> operation.","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Performs the <code>|=</code> operation.","Performs the <code>^</code> operation.","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","","","","","","","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","","","Dereferences the value.","Mutably dereferences the value.","","","","Performs the <code>/</code> operation.","Performs the <code>/=</code> operation.","Executes the destructor for this type.","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs the type from its <code>Output</code> type.","","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","","","","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","","","","","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","","","","","Performs the <code>*</code> operation.","Performs the <code>*=</code> operation.","Performs the unary <code>-</code> operation.","Creates a new inclusive range. Equivalent to writing …","","","","","","Performs the unary <code>!</code> operation.","","","","","","","Performs the <code>%</code> operation.","Performs the <code>%=</code> operation.","Resumes the execution of this generator.","","","","","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","","","","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","","Start index bound.","","","","","","","","","","","","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the value in <code>Some</code> variant of an <code>Option</code>.","An iterator over a reference to the <code>Some</code> variant of an …","An iterator over a mutable reference to the <code>Some</code> variant …","No value.","The <code>Option</code> type. See the module level documentation for …","Some value of type <code>T</code>.","Returns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.","Returns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with …","Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to …","Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to …","Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.","Returns a mutable slice of the contained value, if any. If …","Converts from Pin&lt;&amp;mut Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;mut T&gt;&gt;.","Converts from Pin&lt;&amp;Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;T&gt;&gt;.","Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","Returns a slice of the contained value, if any. If this is …","","","","","","","","","","","","","","","","","Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …","Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …","","Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …","Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …","Returns <code>None</code>.","","","Returns the contained <code>Some</code> value, consuming the <code>self</code> value.","Returns <code>None</code> if the option is <code>None</code>, otherwise calls …","Converts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","Returns the argument unchanged.","Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>","Moves <code>val</code> into a new <code>Some</code>.","Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is <code>None</code>, no …","","","","","Inserts <code>value</code> into the option if it is <code>None</code>, then returns …","Inserts the default value into the option if it is <code>None</code>, …","Inserts a value computed from <code>f</code> into the option if it is …","","","","","Inserts <code>value</code> into the option, then returns a mutable …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns a consuming iterator over the possibly contained …","","","","Returns <code>true</code> if the option is a <code>None</code> value.","Returns <code>true</code> if the option is a <code>Some</code> value.","Returns <code>true</code> if the option is a <code>Some</code> and the value inside …","","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …","Returns the provided default result (if none), or applies …","Computes a default function result (if none), or applies a …","","","","","","","Transforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …","Transforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …","Returns the option if it contains a value, otherwise …","Returns the option if it contains a value, otherwise calls …","","Takes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …","Replaces the actual value in the option by the value given …","","","","","Takes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …","Takes the value out of the option, leaving a <code>None</code> in its …","","","","Transposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>…","","","","","","","","","","","","","Returns the contained <code>Some</code> value, consuming the <code>self</code> value.","Returns the contained <code>Some</code> value or a provided default.","Returns the contained <code>Some</code> value or a default.","Returns the contained <code>Some</code> value or computes it from a …","Returns the contained <code>Some</code> value, consuming the <code>self</code> value,","Unzips an option containing a tuple of two options.","Returns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, …","Zips <code>self</code> with another <code>Option</code>.","Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.","A simple wrapper around a type to assert that it is unwind …","A struct containing information about the location of a …","A struct providing information about a panic.","A marker trait representing types where a shared reference …","A marker trait which represents “panic safe” types in …","","","","","","","","Returns the source location of the caller of this …","Returns whether the panic handler is allowed to unwind the …","","","","","","Returns the column from which the panic originated.","","","","","Returns the name of the source file from which the panic …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the line number from which the panic originated.","","Returns information about the location from which the …","","If the <code>panic!</code> macro from the <code>core</code> crate (not from <code>std</code>) was …","","","Returns the payload associated with the panic.","","","","","","","","","","","","","","","","","This function is used instead of panic_fmt in const eval.","The underlying implementation of core’s <code>panic!</code> macro …","","The entry point for panicking with a formatted message.","Like <code>panic</code>, but without unwinding and track_caller to …","Like <code>panic_fmt</code>, but for non-unwinding panics.","","","A pinned pointer.","Gets a pinned mutable reference from this nested pinned …","Gets a pinned mutable reference from this pinned pointer.","Gets a pinned shared reference from this pinned pointer.","","","","","","","","","","","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Returns the argument unchanged.","","","Gets a mutable reference to the data inside of this <code>Pin</code>.","Gets a shared reference out of a pin.","Gets a mutable reference to the data inside of this <code>Pin</code>.","","","Calls <code>U::from(self)</code>.","","Unwraps this <code>Pin&lt;P&gt;</code> returning the underlying pointer.","Unwraps this <code>Pin&lt;P&gt;</code> returning the underlying pointer.","Converts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same …","","","Constructs a new pin by mapping the interior value.","Construct a new pin by mapping the interior value.","","Construct a new <code>Pin&lt;P&gt;</code> around a pointer to some data of a …","Construct a new <code>Pin&lt;P&gt;</code> around a reference to some data of …","","Constructs a Pin&lt;&amp;mut T&gt;, by pinning a <code>value: T</code> locally.","","","","","Assigns a new value to the memory behind the pinned …","","Get a pinned mutable reference from a static mutable …","Get a pinned reference from a static reference.","","","","","","The 2015 version of the core prelude.","The 2018 version of the core prelude.","The 2021 version of the core prelude.","The 2024 edition of the core prelude.","The first version of the core prelude.","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","An iterator able to yield elements from both ends.","Custom code within the destructor.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Contains the error value","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to do value-to-value conversions while consuming the …","Derive macro generating an impl of the trait <code>Hash</code>.","A value-to-value conversion that consumes the input value. …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","No value.","Contains the success value","The <code>Option</code> type. See the module level documentation for …","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","The returned type after the call operator is used.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Some value of type <code>T</code>.","Types for which it is safe to share references between …","Types that can be safely moved after being pinned.","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Attribute macro applied to a function to register it as a …","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","Asserts that a boolean expression is <code>true</code> at runtime.","Attribute macro applied to a function to turn it into a …","Borrows an iterator, rather than consuming it.","Performs the call operation.","Performs the call operation.","Performs the call operation.","Evaluates boolean combinations of configuration flags at …","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","Takes two iterators and creates a new iterator over both …","Restrict a value to a certain interval.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Creates an iterator which <code>clone</code>s all of its elements.","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Returns the “default value” for a type.","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","Disposes of a value.","Executes the destructor for this type.","Creates an iterator which gives the current iteration …","Inspects an environment variable at compile time.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Expands to the file name in which it was invoked.","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Converts to this type from the input type.","Creates an iterator which ends after the first <code>None</code>.","This method tests greater than or equal to (for <code>self</code> and …","Determines if the elements of this <code>Iterator</code> are …","Attribute macro applied to a static to register it as a …","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Converts this type into the (usually inferred) input type.","Creates an iterator from a value.","Returns <code>true</code> if the iterator is empty.","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Consumes the iterator, returning the last element.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","Determines if the elements of this <code>Iterator</code> are …","Returns the exact remaining length of the iterator.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","This method tests less than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Compares and returns the maximum of two values.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Expands to a string that represents the current module …","This method tests for <code>!=</code>. The default implementation is …","Determines if the elements of this <code>Iterator</code> are not equal …","Advances the iterator and returns the next value.","Removes and returns an element from the end of the …","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","Optionally inspects an environment variable at compile …","This method returns an ordering between <code>self</code> and <code>other</code> …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","An iterator method that reduces the iterator’s elements …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Stringifies its arguments.","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","Enables or disables tracing functionality used for …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","Reduces the elements to a single one by repeatedly …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","Unstable placeholder for type ascription.","Converts an iterator of pairs into a pair of containers.","‘Zips up’ two iterators into a single iterator of …","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","An iterator able to yield elements from both ends.","Custom code within the destructor.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Contains the error value","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to do value-to-value conversions while consuming the …","Derive macro generating an impl of the trait <code>Hash</code>.","A value-to-value conversion that consumes the input value. …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","No value.","Contains the success value","The <code>Option</code> type. See the module level documentation for …","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","The returned type after the call operator is used.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Some value of type <code>T</code>.","Types for which it is safe to share references between …","Types that can be safely moved after being pinned.","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Attribute macro applied to a function to register it as a …","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","Asserts that a boolean expression is <code>true</code> at runtime.","Attribute macro applied to a function to turn it into a …","Borrows an iterator, rather than consuming it.","Performs the call operation.","Performs the call operation.","Performs the call operation.","Evaluates boolean combinations of configuration flags at …","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","Takes two iterators and creates a new iterator over both …","Restrict a value to a certain interval.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Creates an iterator which <code>clone</code>s all of its elements.","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Returns the “default value” for a type.","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","Disposes of a value.","Executes the destructor for this type.","Creates an iterator which gives the current iteration …","Inspects an environment variable at compile time.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Expands to the file name in which it was invoked.","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Converts to this type from the input type.","Creates an iterator which ends after the first <code>None</code>.","This method tests greater than or equal to (for <code>self</code> and …","Determines if the elements of this <code>Iterator</code> are …","Attribute macro applied to a static to register it as a …","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Converts this type into the (usually inferred) input type.","Creates an iterator from a value.","Returns <code>true</code> if the iterator is empty.","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Consumes the iterator, returning the last element.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","Determines if the elements of this <code>Iterator</code> are …","Returns the exact remaining length of the iterator.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","This method tests less than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Compares and returns the maximum of two values.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Expands to a string that represents the current module …","This method tests for <code>!=</code>. The default implementation is …","Determines if the elements of this <code>Iterator</code> are not equal …","Advances the iterator and returns the next value.","Removes and returns an element from the end of the …","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","Optionally inspects an environment variable at compile …","This method returns an ordering between <code>self</code> and <code>other</code> …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","An iterator method that reduces the iterator’s elements …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Stringifies its arguments.","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","Enables or disables tracing functionality used for …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","Reduces the elements to a single one by repeatedly …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","Unstable placeholder for type ascription.","Converts an iterator of pairs into a pair of containers.","‘Zips up’ two iterators into a single iterator of …","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","An iterator able to yield elements from both ends.","Custom code within the destructor.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Contains the error value","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to do value-to-value conversions while consuming the …","Conversion from an <code>Iterator</code>.","Derive macro generating an impl of the trait <code>Hash</code>.","A value-to-value conversion that consumes the input value. …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","No value.","Contains the success value","The <code>Option</code> type. See the module level documentation for …","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","The returned type after the call operator is used.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Some value of type <code>T</code>.","Types for which it is safe to share references between …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Types that can be safely moved after being pinned.","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Attribute macro applied to a function to register it as a …","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","Asserts that a boolean expression is <code>true</code> at runtime.","Attribute macro applied to a function to turn it into a …","Borrows an iterator, rather than consuming it.","Performs the call operation.","Performs the call operation.","Performs the call operation.","Evaluates boolean combinations of configuration flags at …","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","Takes two iterators and creates a new iterator over both …","Restrict a value to a certain interval.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Creates an iterator which <code>clone</code>s all of its elements.","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Returns the “default value” for a type.","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","Disposes of a value.","Executes the destructor for this type.","Creates an iterator which gives the current iteration …","Inspects an environment variable at compile time.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Expands to the file name in which it was invoked.","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Converts to this type from the input type.","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","This method tests greater than or equal to (for <code>self</code> and …","Determines if the elements of this <code>Iterator</code> are …","Attribute macro applied to a static to register it as a …","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Converts this type into the (usually inferred) input type.","Creates an iterator from a value.","Returns <code>true</code> if the iterator is empty.","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Consumes the iterator, returning the last element.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","Determines if the elements of this <code>Iterator</code> are …","Returns the exact remaining length of the iterator.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","This method tests less than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Compares and returns the maximum of two values.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Expands to a string that represents the current module …","This method tests for <code>!=</code>. The default implementation is …","Determines if the elements of this <code>Iterator</code> are not equal …","Advances the iterator and returns the next value.","Removes and returns an element from the end of the …","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","Optionally inspects an environment variable at compile …","This method returns an ordering between <code>self</code> and <code>other</code> …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","An iterator method that reduces the iterator’s elements …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Stringifies its arguments.","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","Enables or disables tracing functionality used for …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","Performs the conversion.","Performs the conversion.","Reduces the elements to a single one by repeatedly …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","Unstable placeholder for type ascription.","Converts an iterator of pairs into a pair of containers.","‘Zips up’ two iterators into a single iterator of …","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","An iterator able to yield elements from both ends.","Custom code within the destructor.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Contains the error value","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to do value-to-value conversions while consuming the …","Conversion from an <code>Iterator</code>.","Derive macro generating an impl of the trait <code>Hash</code>.","A value-to-value conversion that consumes the input value. …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","No value.","Contains the success value","The <code>Option</code> type. See the module level documentation for …","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","The returned type after the call operator is used.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Some value of type <code>T</code>.","Types for which it is safe to share references between …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Types that can be safely moved after being pinned.","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Attribute macro applied to a function to register it as a …","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","Asserts that a boolean expression is <code>true</code> at runtime.","Attribute macro applied to a function to turn it into a …","Borrows an iterator, rather than consuming it.","Performs the call operation.","Performs the call operation.","Performs the call operation.","Evaluates boolean combinations of configuration flags at …","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","Takes two iterators and creates a new iterator over both …","Restrict a value to a certain interval.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Creates an iterator which <code>clone</code>s all of its elements.","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Returns the “default value” for a type.","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","Disposes of a value.","Executes the destructor for this type.","Creates an iterator which gives the current iteration …","Inspects an environment variable at compile time.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Expands to the file name in which it was invoked.","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Converts to this type from the input type.","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","This method tests greater than or equal to (for <code>self</code> and …","Determines if the elements of this <code>Iterator</code> are …","Attribute macro applied to a static to register it as a …","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Converts this type into the (usually inferred) input type.","Creates an iterator from a value.","Returns <code>true</code> if the iterator is empty.","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Consumes the iterator, returning the last element.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","Determines if the elements of this <code>Iterator</code> are …","Returns the exact remaining length of the iterator.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","This method tests less than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Compares and returns the maximum of two values.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Expands to a string that represents the current module …","This method tests for <code>!=</code>. The default implementation is …","Determines if the elements of this <code>Iterator</code> are not equal …","Advances the iterator and returns the next value.","Removes and returns an element from the end of the …","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","Optionally inspects an environment variable at compile …","This method returns an ordering between <code>self</code> and <code>other</code> …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","An iterator method that reduces the iterator’s elements …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Stringifies its arguments.","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","Enables or disables tracing functionality used for …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","Performs the conversion.","Performs the conversion.","Reduces the elements to a single one by repeatedly …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","Unstable placeholder for type ascription.","Converts an iterator of pairs into a pair of containers.","‘Zips up’ two iterators into a single iterator of …","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","Derive macro generating an impl of the trait <code>Debug</code>.","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","An iterator able to yield elements from both ends.","Custom code within the destructor.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","Contains the error value","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to do value-to-value conversions while consuming the …","Derive macro generating an impl of the trait <code>Hash</code>.","A value-to-value conversion that consumes the input value. …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","No value.","Contains the success value","The <code>Option</code> type. See the module level documentation for …","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","The returned type after the call operator is used.","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Some value of type <code>T</code>.","Types for which it is safe to share references between …","Types that can be safely moved after being pinned.","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","Tests if every element of the iterator matches a predicate.","Attribute macro applied to a function to register it as a …","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","Asserts that a boolean expression is <code>true</code> at runtime.","Attribute macro applied to a function to turn it into a …","Borrows an iterator, rather than consuming it.","Performs the call operation.","Performs the call operation.","Performs the call operation.","Evaluates boolean combinations of configuration flags at …","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","Takes two iterators and creates a new iterator over both …","Restrict a value to a certain interval.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Creates an iterator which <code>clone</code>s all of its elements.","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Creates an iterator which copies all of its elements.","Consumes the iterator, counting the number of iterations …","Repeats an iterator endlessly.","Returns the “default value” for a type.","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","Disposes of a value.","Executes the destructor for this type.","Creates an iterator which gives the current iteration …","Inspects an environment variable at compile time.","This method tests for <code>self</code> and <code>other</code> values to be equal, …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Expands to the file name in which it was invoked.","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","Folds every element into an accumulator by applying an …","Calls a closure on each element of an iterator.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","Converts to this type from the input type.","Creates an iterator which ends after the first <code>None</code>.","This method tests greater than or equal to (for <code>self</code> and …","Determines if the elements of this <code>Iterator</code> are …","Attribute macro applied to a static to register it as a …","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Converts this type into the (usually inferred) input type.","Creates an iterator from a value.","Returns <code>true</code> if the iterator is empty.","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Consumes the iterator, returning the last element.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","Determines if the elements of this <code>Iterator</code> are …","Returns the exact remaining length of the iterator.","Expands to the line number on which it was invoked.","Prints passed tokens into the standard output.","This method tests less than (for <code>self</code> and <code>other</code>) and is …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Compares and returns the maximum of two values.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Expands to a string that represents the current module …","This method tests for <code>!=</code>. The default implementation is …","Determines if the elements of this <code>Iterator</code> are not equal …","Advances the iterator and returns the next value.","Removes and returns an element from the end of the …","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","Optionally inspects an environment variable at compile …","This method returns an ordering between <code>self</code> and <code>other</code> …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","An iterator method that reduces the iterator’s elements …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","Returns the bounds on the remaining length of the iterator.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Stringifies its arguments.","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","Enables or disables tracing functionality used for …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","An iterator method that applies a function as long as it …","An iterator method that applies a fallible function to …","Reduces the elements to a single one by repeatedly …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","Unstable placeholder for type ascription.","Converts an iterator of pairs into a pair of containers.","‘Zips up’ two iterators into a single iterator of …","","","","","","","","","","","","","","","","","","A type storing a <code>usize</code> which is a power of two, and thus …","The metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.","The smallest possible alignment, 1.","The type for metadata in pointers and references to <code>Self</code>.","<code>*mut T</code> but non-zero and covariant.","Provides the pointer metadata type of any pointed-to type.","Gets the “address” portion of the pointer.","Create a <code>const</code> raw pointer to a place, without creating an …","Create a <code>mut</code> raw pointer to a place, without creating an …","Returns the alignment of the type associated with this …","Returns a unique reference to the value. If the value may …","Returns a raw pointer to the slice’s buffer.","Returns a non-null pointer to the slice’s buffer.","Returns the alignment as a <code>NonZeroUsize</code>","Acquires the underlying <code>*mut</code> pointer.","Returns a shared reference to the value. If the value may …","Returns a unique references to the value. In contrast to …","Returns a shared references to the value. In contrast to …","Returns a shared reference to a slice of possibly …","Returns a unique reference to a slice of possibly …","Returns the alignment as a <code>usize</code>","","","","","","","Casts to a pointer of another type.","","","","","","","","","","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Creates a new <code>NonNull</code> that is dangling, but well-aligned.","Executes the destructor (if any) of the pointed-to value.","Compares raw pointers for equality.","","","","","","","","Returns the argument unchanged.","Converts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.","Converts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Convert an address back to a pointer, picking up a …","Convert an address back to a mutable pointer, picking up a …","Convert a mutable reference to a raw pointer.","Forms a (possibly-wide) raw pointer from a data address …","Performs the same functionality as <code>std::ptr::from_raw_parts</code>…","Performs the same functionality as <code>from_raw_parts</code>, except …","Convert a reference to a raw pointer.","","","","Returns a raw pointer to an element or subslice, without …","Hash a raw pointer.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an invalid pointer with the given address.","Creates an invalid mutable pointer with the given address.","Returns the size and alignment together as a <code>Layout</code>","Returns the length of a non-null raw slice.","Returns the base-2 logarithm of the alignment.","Creates a new pointer by mapping <code>self</code>’s address to a new …","Extract the metadata component of a pointer.","Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.","Creates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…","Creates a new <code>NonNull</code>.","Creates an <code>Alignment</code> from a power-of-two <code>usize</code>.","Creates a null raw pointer.","Creates a null mutable raw pointer.","Returns the alignment for a type.","","","","","","Reads the value from <code>src</code> without moving it. This leaves the","Reads the value from <code>src</code> without moving it. This leaves the","Performs a volatile read of the value from <code>src</code> without …","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …","Returns the size of the type associated with this vtable.","Forms a raw slice from a pointer and a length.","Creates a non-null raw slice from a thin pointer and a …","Performs the same functionality as <code>slice_from_raw_parts</code>, …","Swaps the values at two mutable locations of the same …","Swaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …","","","","Decompose a (possibly wide) pointer into its address and …","","","","","","","","","","","","","Creates a new pointer with the given address.","Overwrites a memory location with the given value without …","Sets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…","Overwrites a memory location with the given value without …","Performs a volatile write of a memory location with the …","Contains the error value","An iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.","An iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.","An iterator over a mutable reference to the <code>Ok</code> variant of …","Contains the success value","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","","","","","","","","","","","","","","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","","","","","Calls the provided closure with a reference to the …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contained <code>Err</code> value, but never panics.","","","Returns a consuming iterator over the possibly contained …","","","","Returns the contained <code>Ok</code> value, but never panics.","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Err</code> and the value inside of …","Returns <code>true</code> if the result is <code>Ok</code>.","Returns <code>true</code> if the result is <code>Ok</code> and the value inside of …","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …","","","","","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","","","","","","","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","The number of bytes in a bitmask with this many lanes.","The integer bitmask type.","Bit representation of this SIMD vector type.","Index of a lane in the first input SIMD vector.","Map from the lanes of the input vector to the output …","Map from the lanes of the input vectors to the output …","Number of lanes in this vector.","Specifies the number of lanes in a SIMD vector as a type.","A SIMD vector mask for <code>LANES</code> elements of width specified …","Mask type used for manipulating this SIMD vector type.","Mask type used for manipulating this SIMD vector type.","The mask type returned by each comparison.","The mask element type corresponding to this element type.","Marker trait for types that may be used as SIMD mask …","Scalar type contained by this SIMD vector type.","Scalar type contained by this SIMD vector type.","Scalar type contained by this SIMD vector type.","Index of a lane in the second input SIMD vector.","A SIMD vector of <code>LANES</code> elements of type <code>T</code>. <code>Simd&lt;T, N&gt;</code> has …","Marker trait for types that may be used as SIMD vector …","Operations on SIMD vectors of floats.","Operations on SIMD vectors of signed integers.","Parallel <code>Ord</code>.","Parallel <code>PartialEq</code>.","Parallel <code>PartialOrd</code>.","Operations on SIMD vectors of unsigned integers.","Statically guarantees that a lane count is marked as …","Create a vector from the elements of another vector.","Create a vector from the elements of two other vectors.","Converts masks to and from integer bitmasks.","Specifies a lane index into one of two SIMD vectors.","Produces a vector where every lane has the absolute value …","Lanewise absolute value, implemented in Rust. Every lane …","","","","","","","","","","","","","","","","","","","","","","","","Returns true if all lanes are set, or false otherwise.","Returns true if any lane is set, or false otherwise.","Returns an array reference containing the entire SIMD …","","","Returns a mutable array reference containing the entire …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the mask to a mask of any other lane size.","Performs lanewise conversion of a SIMD vector’s elements …","","","","","","","","","Returns each lane with the magnitude of <code>self</code> and the sign …","","","","","Deinterleave two vectors.","","","","","","","","","","","","","","","","","","","","A 512-bit SIMD vector with 16 elements of type <code>f32</code>.","A 64-bit SIMD vector with two elements of type <code>f32</code>.","A 128-bit SIMD vector with four elements of type <code>f32</code>.","A 256-bit SIMD vector with eight elements of type <code>f32</code>.","A 128-bit SIMD vector with two elements of type <code>f64</code>.","A 256-bit SIMD vector with four elements of type <code>f64</code>.","A 512-bit SIMD vector with eight elements of type <code>f64</code>.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Converts an array of bools to a SIMD mask.","Converts an array to a SIMD vector.","Converts a bitmask to a mask.","","","","","","","","Raw transmutation from an unsigned integer vector type …","","","Converts a vector of integers to a mask, where 0 …","Converts a vector of integers to a mask, where 0 …","Converts a slice to a SIMD vector containing <code>slice[..LANES]</code>…","Reads from potentially discontiguous indices in <code>slice</code> to …","Reads from potentially discontiguous indices in <code>slice</code> to …","Reads from potentially discontiguous indices in <code>slice</code> to …","Reads from potentially discontiguous indices in <code>slice</code> to …","","","","","A 256-bit SIMD vector with 16 elements of type <code>i16</code>.","A 32-bit SIMD vector with two elements of type <code>i16</code>.","A 512-bit SIMD vector with 32 elements of type <code>i16</code>.","A 64-bit SIMD vector with four elements of type <code>i16</code>.","A 128-bit SIMD vector with eight elements of type <code>i16</code>.","A 512-bit SIMD vector with 16 elements of type <code>i32</code>.","A 64-bit SIMD vector with two elements of type <code>i32</code>.","A 128-bit SIMD vector with four elements of type <code>i32</code>.","A 256-bit SIMD vector with eight elements of type <code>i32</code>.","A 128-bit SIMD vector with two elements of type <code>i64</code>.","A 256-bit SIMD vector with four elements of type <code>i64</code>.","A 512-bit SIMD vector with eight elements of type <code>i64</code>.","A 128-bit SIMD vector with 16 elements of type <code>i8</code>.","A 256-bit SIMD vector with 32 elements of type <code>i8</code>.","A 32-bit SIMD vector with four elements of type <code>i8</code>.","A 512-bit SIMD vector with 64 elements of type <code>i8</code>.","A 64-bit SIMD vector with eight elements of type <code>i8</code>.","","","Interleave two vectors.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true for each lane if its value is neither …","","","Returns true for each lane if its value is positive …","","","Returns true for each lane if its value is <code>NaN</code>.","","","Returns true for each negative lane and false if it is …","","","","","","Returns true for each lane if its value is neither zero, …","","","Returns true for each positive lane and false if it is …","","","","","","Returns true for each lane if it has a negative sign, …","","","Returns true for each lane if it has a positive sign, …","","","Returns true for each lane if its value is subnormal.","","","A SIMD vector with two elements of type <code>isize</code>.","A SIMD vector with four elements of type <code>isize</code>.","A SIMD vector with eight elements of type <code>isize</code>.","Returns the number of lanes in this SIMD vector.","A mask for SIMD vectors with 16 elements of 16 bits.","A mask for SIMD vectors with 32 elements of 16 bits.","A mask for SIMD vectors with four elements of 16 bits.","A mask for SIMD vectors with eight elements of 16 bits.","A mask for SIMD vectors with 16 elements of 32 bits.","A mask for SIMD vectors with two elements of 32 bits.","A mask for SIMD vectors with four elements of 32 bits.","A mask for SIMD vectors with eight elements of 32 bits.","A mask for SIMD vectors with two elements of 64 bits.","A mask for SIMD vectors with four elements of 64 bits.","A mask for SIMD vectors with eight elements of 64 bits.","A mask for SIMD vectors with 16 elements of 8 bits.","A mask for SIMD vectors with 32 elements of 8 bits.","A mask for SIMD vectors with 64 elements of 8 bits.","A mask for SIMD vectors with eight elements of 8 bits.","A mask for SIMD vectors with two elements of pointer width.","A mask for SIMD vectors with four elements of pointer …","A mask for SIMD vectors with eight elements of pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the reciprocal (inverse) of each lane, <code>1/x</code>.","","","Returns the cumulative bitwise “and” across the lanes …","Returns the cumulative bitwise “and” across the lanes …","","","","","","","","","","","Returns the maximum lane in the vector.","Returns the maximum lane in the vector.","Returns the maximum lane in the vector.","","","","","","","","","","","","","Returns the minimum lane in the vector.","Returns the minimum lane in the vector.","Returns the minimum lane in the vector.","","","","","","","","","","","","","Returns the cumulative bitwise “or” across the lanes …","Returns the cumulative bitwise “or” across the lanes …","","","","","","","","","","","Reducing multiply.  Returns the product of the lanes of …","Returns the product of the lanes of the vector, with …","Returns the product of the lanes of the vector, with …","","","","","","","","","","","","","Returns the sum of the lanes of the vector.","Returns the sum of the lanes of the vector, with wrapping …","Returns the sum of the lanes of the vector, with wrapping …","","","","","","","","","","","","","Returns the cumulative bitwise “xor” across the lanes …","Returns the cumulative bitwise “xor” across the lanes …","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverse the order of the lanes in the vector.","Rotates the vector such that the first <code>OFFSET</code> elements of …","Rotates the vector such that the first <code>LANES - OFFSET</code> …","Lanewise saturating absolute value, implemented in Rust. …","","","","","","Lanewise saturating add.","Lanewise saturating add.","","","","","","","","","","","Lanewise saturating negation, implemented in Rust. As …","","","","","","Lanewise saturating subtract.","Lanewise saturating subtract.","","","","","","","","","","","Writes the values in a SIMD vector to potentially …","Writes the values in a SIMD vector to multiple potentially …","Writes the values in a SIMD vector to multiple potentially …","Choose lanes from two vectors.","Choose lanes from two masks.","Sets the value of the specified lane.","Sets the value of the specified lane.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces each lane with a number that represents its sign.","Returns numbers representing the sign of each lane.","","","","","","","","Restrict each lane to a certain interval unless it is NaN.","Restrict each lane to a certain interval.","","","","","","","","","","","","","","","","","","Test if each lane is equal to the corresponding lane in …","","","","","","","","","","","","","","","","","","Test if each lane is greater than or equal to the …","","","","","","","","","","","","","","","","","","Test if each lane is greater than the corresponding lane …","","","","","","","","","","","","","","","","","","Test if each lane is less than or equal to the …","","","","","","","","","","","","","","","","","","Test if each lane is less than the corresponding lane in …","","","","","","","","","","","","","","","","","","Returns the maximum of each lane.","Returns the lane-wise maximum with <code>other</code>.","","","","","","","","","","","","","","","","","","Returns the minimum of each lane.","Returns the lane-wise minimum with <code>other</code>.","","","","","","","","","","","","","","","","","","Test if each lane is equal to the corresponding lane in …","","","","","","","","","","","","","","","","","","Constructs a new SIMD vector by copying elements from …","Construct a mask by setting all lanes to the given value.","Constructs a new SIMD vector with all lanes set to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new vector from the lanes of <code>vector</code>.","Create a new vector from the lanes of <code>first</code> and <code>second</code>.","Tests the value of the specified lane.","Tests the value of the specified lane.","Converts a SIMD mask to an array of bools.","Converts a SIMD vector to an array.","Converts a mask to a bitmask.","","","","","","","","Raw transmutation to an unsigned integer vector type with …","","","Converts each lane from radians to degrees.","","","Converts the mask to a vector of integers, where 0 …","Rounds toward zero and converts to the same-width integer …","","","","Converts each lane from degrees to radians.","","","","","","","","","","","","","","","A 256-bit SIMD vector with 16 elements of type <code>u16</code>.","A 32-bit SIMD vector with two elements of type <code>u16</code>.","A 512-bit SIMD vector with 32 elements of type <code>u16</code>.","A 64-bit SIMD vector with four elements of type <code>u16</code>.","A 128-bit SIMD vector with eight elements of type <code>u16</code>.","A 512-bit SIMD vector with 16 elements of type <code>u32</code>.","A 64-bit SIMD vector with two elements of type <code>u32</code>.","A 128-bit SIMD vector with four elements of type <code>u32</code>.","A 256-bit SIMD vector with eight elements of type <code>u32</code>.","A 128-bit SIMD vector with two elements of type <code>u64</code>.","A 256-bit SIMD vector with four elements of type <code>u64</code>.","A 512-bit SIMD vector with eight elements of type <code>u64</code>.","A 128-bit SIMD vector with 16 elements of type <code>u8</code>.","A 256-bit SIMD vector with 32 elements of type <code>u8</code>.","A 32-bit SIMD vector with four elements of type <code>u8</code>.","A 512-bit SIMD vector with 64 elements of type <code>u8</code>.","A 64-bit SIMD vector with eight elements of type <code>u8</code>.","A SIMD vector with two elements of type <code>usize</code>.","A SIMD vector with four elements of type <code>usize</code>.","A SIMD vector with eight elements of type <code>usize</code>.","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over the escaped version of a byte slice.","The error type returned by <code>get_many_mut&lt;N&gt;</code>.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable chunks …","The element type of the slice being matched on.","Immutable slice iterator","Mutable slice iterator.","The output type returned by methods.","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","Patterns in slices - currently, only used by <code>strip_prefix</code> …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector which …","An iterator over the mutable subslices of the vector which …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","","","","","","","","","","","","","","","Views the underlying data as a mutable subslice of the …","","","Currently, the consumers of <code>SlicePattern</code> need a slice.","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns a slice which contains items not yet handled by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty slice iterator.","Creates an empty slice iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a reference to T into a slice of length 1 …","Forms a mutable slice from a pointer range.","Forms a slice from a pointer range.","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Sorts <code>v</code> using heapsort, which guarantees <em>O</em>(<em>n</em> * log(<em>n</em>)) …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Views the underlying data as a subslice of the original …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pure rust memchr implementation, taken from rust-memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Slice sorting","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the first index matching the byte <code>x</code> in <code>text</code>.","Returns the last index matching the byte <code>x</code> in <code>text</code>.","Internal type used by merge_sort.","","","","","","Returns the argument unchanged.","Sorts <code>v</code> using heapsort, which guarantees <em>O</em>(<em>n</em> * log(<em>n</em>)) …","Calls <code>U::from(self)</code>.","","This merge sort borrows some (but not all) ideas from …","Reorder the slice such that the element at <code>index</code> is at its …","Sorts <code>v</code> using pattern-defeating quicksort, which is <em>O</em>(<em>n</em> * …","","","","","","An iterator over the bytes of a string slice.","An iterator over the <code>char</code>s of a string slice, and their …","An iterator over the <code>char</code>s of a string slice.","An iterator of <code>u16</code> over the string encoded as UTF-16.","The associated error which can be returned from parsing.","The return type of <code>str::escape_debug</code>.","The return type of <code>str::escape_default</code>.","The return type of <code>str::escape_unicode</code>.","Parse a value from a string","An iterator over the lines of a string, as string slices.","Created with the method <code>lines_any</code>.","Created with the method <code>match_indices</code>.","Created with the method <code>matches</code>.","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails","Created with the method <code>rmatch_indices</code>.","Created with the method <code>rmatches</code>.","Created with the method <code>rsplit</code>.","Created with the method <code>rsplitn</code>.","Created with the method <code>rsplit_terminator</code>.","Created with the method <code>split</code>.","An iterator over the non-ASCII-whitespace substrings of a …","An iterator over the substrings of a string, terminated by …","Created with the method <code>splitn</code>.","Created with the method <code>split_terminator</code>.","An iterator over the non-whitespace substrings of a string,","An item returned by the <code>Utf8Chunks</code> iterator.","An iterator used to decode a slice of mostly UTF-8 bytes …","Errors which can occur when attempting to interpret a …","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides more information about the failure:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses a string <code>s</code> to return a value of this type.","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the invalid sequence that caused a failure.","","","","","","","","","","","","Creates a new iterator to decode the bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reads the next code point out of a byte iterator (assuming …","","","Returns the byte position of the next character, or the …","The string Pattern API.","","","","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string","Returns remainder of the split string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a first byte, determines how many bytes are in this …","Returns the next validated UTF-8 substring.","","Returns the index in the given string up to which valid …","","Associated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Expresses that every byte of the haystack has been …","A marker trait to express that a <code>ReverseSearcher</code> can be …","Expresses that a match of the pattern has been found at …","A string pattern.","Expresses that <code>haystack[a..b]</code> has been rejected as a …","A reverse searcher for a string pattern.","Result of calling <code>Searcher::next()</code> or …","A searcher for a string pattern.","Associated searcher for this pattern","Associated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getter for the underlying string to be searched in","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the associated searcher from <code>self</code> and the …","Checks whether the pattern matches anywhere in the haystack","Checks whether the pattern matches at the front of the …","Checks whether the pattern matches at the back of the …","","","Performs the next search step starting from the front.","","","","","","","Performs the next search step starting from the back.","","","","","","","Finds the next <code>Match</code> result. See <code>next()</code>.","","","","","","","Finds the next <code>Match</code> result. See <code>next_back()</code>.","","","","","","","Finds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.","","","","","Finds the next <code>Reject</code> result. See <code>next_back()</code>.","","","","","","Removes the pattern from the front of haystack, if it …","Removes the pattern from the back of haystack, if it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Exclusive</code> provides only <em>mutable</em> access, also referred to …","Atomic types","","","","","Returns the argument unchanged.","","","Build a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>…","Build a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a …","Get exclusive access to the underlying value.","Get pinned exclusive access to the underlying value.","","Calls <code>U::from(self)</code>.","","Unwrap the value contained in the <code>Exclusive</code>","Wrap a value in an <code>Exclusive</code>","","","","","An <code>AtomicBool</code> initialized to <code>false</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","An atomic integer initialized to <code>0</code>.","Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","A boolean type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","A raw pointer type which can be safely shared between …","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","Atomic memory orderings","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","Returns a mutable pointer to the underlying <code>bool</code>.","Returns a mutable pointer to the underlying pointer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","A compiler memory fence.","Creates an <code>AtomicBool</code> initialized to <code>false</code>.","Creates a null <code>AtomicPtr&lt;T&gt;</code>.","","","","","","","","","","","","An atomic fence.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Logical “and” with a boolean value.","Performs a bitwise “and” operation on the address of …","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Offsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …","Offsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Logical “nand” with a boolean value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Logical “not” with a boolean value.","Logical “or” with a boolean value.","Performs a bitwise “or” operation on the address of …","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Offsets the pointer’s address by adding <code>val</code> (in units of …","Offsets the pointer’s address by subtracting <code>val</code> (in …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Logical “xor” with a boolean value.","Performs a bitwise “xor” operation on the address of …","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>bool</code> into an <code>AtomicBool</code>.","Returns the argument unchanged.","Converts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i8</code> into an <code>AtomicI8</code>.","Converts an <code>u8</code> into an <code>AtomicU8</code>.","Returns the argument unchanged.","Converts an <code>i16</code> into an <code>AtomicI16</code>.","Returns the argument unchanged.","Converts an <code>u16</code> into an <code>AtomicU16</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> into an <code>AtomicI32</code>.","Converts an <code>u32</code> into an <code>AtomicU32</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i64</code> into an <code>AtomicI64</code>.","Converts an <code>u64</code> into an <code>AtomicU64</code>.","Returns the argument unchanged.","Converts an <code>isize</code> into an <code>AtomicIsize</code>.","Returns the argument unchanged.","Converts an <code>usize</code> into an <code>AtomicUsize</code>.","Returns the argument unchanged.","Get atomic access to a <code>&amp;mut bool</code>.","Get atomic access to a pointer.","Get atomic access to a <code>&amp;mut i8</code>.","Get atomic access to a <code>&amp;mut u8</code>.","Get atomic access to a <code>&amp;mut i16</code>.","Get atomic access to a <code>&amp;mut u16</code>.","Get atomic access to a <code>&amp;mut i32</code>.","Get atomic access to a <code>&amp;mut u32</code>.","Get atomic access to a <code>&amp;mut i64</code>.","Get atomic access to a <code>&amp;mut u64</code>.","Get atomic access to a <code>&amp;mut isize</code>.","Get atomic access to a <code>&amp;mut usize</code>.","Get atomic access to a <code>&amp;mut [bool]</code> slice.","Get atomic access to a slice of pointers.","Get atomic access to a <code>&amp;mut [i8]</code> slice.","Get atomic access to a <code>&amp;mut [u8]</code> slice.","Get atomic access to a <code>&amp;mut [i16]</code> slice.","Get atomic access to a <code>&amp;mut [u16]</code> slice.","Get atomic access to a <code>&amp;mut [i32]</code> slice.","Get atomic access to a <code>&amp;mut [u32]</code> slice.","Get atomic access to a <code>&amp;mut [i64]</code> slice.","Get atomic access to a <code>&amp;mut [u64]</code> slice.","Get atomic access to a <code>&amp;mut [isize]</code> slice.","Get atomic access to a <code>&amp;mut [usize]</code> slice.","Creates a new <code>AtomicBool</code> from a pointer.","Creates a new <code>AtomicPtr</code> from a pointer.","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","","Returns a mutable reference to the underlying <code>bool</code>.","Returns a mutable reference to the underlying pointer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Get non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.","Get non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.","Get non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Loads a value from the bool.","Loads a value from the pointer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Creates a new <code>AtomicBool</code>.","Creates a new <code>AtomicPtr</code>.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","","Signals the processor that it is inside a busy-wait …","Stores a value into the bool.","Stores a value into the pointer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the bool, returning the previous value.","Stores a value into the pointer, returning the previous …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context of an asynchronous task.","Represents that a value is not ready yet.","Indicates whether a value is available or if the current …","A <code>RawWaker</code> allows the implementor of a task executor to …","A virtual function pointer table (vtable) that specifies …","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","Represents that a value is immediately ready.","A <code>Waker</code> is a handle for waking up a task by notifying its …","","","Get a reference to the underlying <code>RawWaker</code>.","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>data</code> pointer used to create this <code>RawWaker</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Use a <code>Wake</code>-able type as a <code>Waker</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Moves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.","Returns the argument unchanged.","","Use a <code>Wake</code>-able type as a <code>RawWaker</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Creates a new <code>Waker</code> from <code>RawWaker</code>.","","","","","Create a new <code>Context</code> from a <code>&amp;Waker</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the poll is a <code>Pending</code> value.","Returns <code>true</code> if the poll is a <code>Poll::Ready</code> value.","Maps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …","Maps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …","Maps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …","Maps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …","Maps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …","Creates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …","Creates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,","","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","Get the <code>vtable</code> pointer used to create this <code>RawWaker</code>.","","Wake up the task associated with this <code>Waker</code>.","","Wake up the task associated with this <code>Waker</code> without …","","Returns a reference to the <code>Waker</code> for the current task.","","","Returns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake …","A <code>Duration</code> type to represent a span of time, typically …","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","An error which can be returned when converting a …","A duration of zero time.","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this <code>Duration</code> spans no time.","","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","","Creates a new <code>Duration</code> from the specified number of whole …","","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","","","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","","","The version of Unicode that the Unicode parts of <code>char</code> and …","","","","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","One byte blue, then one byte green, then one byte red.","","","","","","","","","","","","","","","","The amount of VGA font glyphs.","Color format of pixels in the framebuffer.","","One byte red, then one byte green, then one byte blue.","","","A single byte, representing the grayscale value.","","","","","","","","","","","","","","","","","","","","The number of bits per pixel.","","","","","","","","","","","","","","","","","","","","","The raw framebuffer pointer queried from the BIOS or UEFI …","The total size in bytes.","","","","Clears the screen and if <code>mv</code> is set to true, resets the …","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","Force-unlocks the rendy to prevent a deadlock.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Gets the cursor position as a tuple <code>(x, y)</code>.","","","Panics","Returns the terminal’s resolution in the form of a …","Returns the terminal’s rows and columns in the form of a …","Returns a tuple of the amount of <code>(rows, columns)</code> in the …","","","","","The width in pixels.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if the terminal is initialized.","","","","Create a new debug renderer with the default foreground …","","","","","","","","","The color format of each pixel.","","Plots a pixel at the given coordinates with the provided …","","","","","","","","","","","Resets the text foreground and background to their default …","","","Panics","","Sets the cursor position to the provided <code>x</code> and <code>y</code> …","","","","","","Number of pixels between the start of a line and the start …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The height in pixels.","","","","","","","","","","","","Converts the socket address into a unix socket address. …","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","The socket is not connected.","","","","The address that the socket has been bound to.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The socket has connected to a peer.","The socket is not connected.","The socket is listening for new connections.","","","","","","","The address that the socket has been bound to.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the socket is connected.","Returns <code>true</code> if the queue contains no pending connections.","","","","","","Parameters","","","","","","Removes the first pending connection from the queue and …","Adds the given socket to the queue. Returns <code>EAGAIN</code> if the …","","","","","Updates the maximum number of pending connections that the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The formatted argument values.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","The result of the syscall.","","","","","","","","","","","","","","","","Returns a file descriptor referring to the new epoll …","Used to add, modify, or remove entries in the interest …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new link (also known as a hard link) to an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the user-provided futex word pointer to a unique …","","","","","Returns the argument unchanged.","","Returns the futex at the given key, or None if it doesn’…","Returns the futex at the given key; allocating it if it …","Returns a reference to the futex container; initializing …","Calls <code>U::from(self)</code>.","","","","","","","Ensures the user-provided futex pointer is non-null and …","","Tests the that the value at the futex word pointed to by …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Accept a connection on a socket.","","Connects the socket to the specified address.","","","","","","","","","","Marks the socket as a passive socket (i.e. as a socket …","","","","Creates a <code>SocketAddr</code> from the provided userland socket …","Create an unbound pair of connected sockets in a specified …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enables syscall tracer for this process/thread.","","","","","","","","","","","","","","","","","","","","","","This function is automatically called after each unwinding …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","This function is the entry point for the unwinding process.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the current task","","","Downcast’s an <code>Arc</code>ed trait object to an <code>Arc</code>ed object if …","","Exits the current task.","","Lookup a task by ID","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a reference to the active scheduler.","Initialize the scheduler and set up the scheduler …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the task scheduler has been initiaized.","","","Create a new scheduler with no active tasks by default.","Yields execution to another task.","Register the provided task into the task scheduler queue.","","Registers the provided task in the schedulers queue.","","","","","","","","","","","","","","","","","Round Robin is the simplest algorithm for a preemptive …","Scheduler queue containing a vector of all of the task of …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The kernel idle task is a special kind of task that is run …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new task queue with no taskes by default.","Creates a new instance of the round robin scheduler and …","","","","","","","","The per-cpu scheduler queues.","","","","","","","Special scheduler task which is responsible to terminate a …","","","","","","","","","","","","","","","","","","","","Returns the blocked mask.","","","","","","","","","","","","Returns <code>true</code> if the provided <code>signal</code> is overridable.","","Clear the signal entries and blocked mask.","","Marks the provided <code>signal</code> as not pending.","","","","","","","Copy over the signals from the provided <code>signals</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>SignalEntry</code> with the provided <code>sigaction</code> and …","Returns the <code>SignalHandler</code> for this <code>SignalEntry</code>.","","Returns <code>true</code> if has pending signals.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the provided <code>signal</code> is blocked.","","","","","Returns the pending mask.","","Used to update or read the signal mask of a task.","","Sets the provided <code>signal</code> to be pending.","","","","","","","","","","","","","","","","","","","","","","","","","","Some of the default actions for the signals.","","","Get the default action for the provided <code>signal</code>.","","","","","","Returns the argument unchanged.","Runs the default action for the provided <code>signal</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Allocates a new task ID.","Returns a immutable reference to the inner ArchTask …","","Returns a mutable reference to the inner ArchTask …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the group identifier of the task (<code>GID</code>).","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether the task is the group leader (<code>pid</code> == <code>gid</code>).","","Returns whether the task is the session leader (<code>pid</code> == <code>sid</code>…","","","","","","","","","","","","","","","","","Creates a per-cpu idle task. An idle task is a special …","Allocates a new kernel task pointing at the provided entry …","","","","","","Returns the PID ID that was allocated for this task.","","","","","","","","Returns the session identifier of the task (<code>SID</code>).","","","Sets the group identifier of the task (<code>GID</code>) to <code>group_id</code>.","","","Sets the session identifier of the task (<code>SID</code>) to <code>session_id</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Process Group","","","Process Session","","","","","","","","","","","","","Creates and registers a new process session with the given …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Unique identifier of the process group.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new process group.","Creates a new process session.","","","","","","","","Processes part of the process group.","","","","","","","","","","","","","Line Discipline","Terminal Device","Called when a session leader is attached/connected to the …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns whether the line discipline buffer is empty.","Creates a new line discipline.","Reads data from the line discipline buffer.","","","","","Returns the line discipline’s wait queue.","","Writes data to the line discipline buffer.","","","","","","","","Unexpected file system error occurred on an IO operation …","The ELF header contains an invalid class.","The PT1 header has an invalid magic number.","The provided program header index is invalid.","","","","Unexpected file system error occurred when memory mapping …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears all of the mappings without unmapping them. The …","Clears and unmaps all of the mappings in the VM.","","","","","Returns <code>true</code> if the provided executable (<code>bin</code>) contains a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handler routine for a COW (Copy-On-Write) pages. A COW …","","This function is responsible for handling page faults …","Handler routine for pages backed by a file. This function …","Handler routine for private anonymous pages. Since its an …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Mapping the provided <code>bin</code> file into the VM.","Copies the contents of the <code>page</code> page to a newly allocated …","","","","","","","","","","","","Creates a new instance of VM.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Just like <code>Cell</code> but with volatile read / write operations","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a copy of the contained value.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Sets the contained value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new, empty bitmap. This function does <em>not</em> …","Returns the index of the first set bit.","Returns the index of the first unset bit.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns weather the bit at the provided <code>bit_idx</code> is set.","Constructs a new bitmap with <code>size</code> bits and uses <code>alloc</code> as …","Sets the bit at the provided <code>bit_idx</code> to <code>yes</code> (<code>true</code> or <code>false</code>…","","","","","Special special kind of buffer that stores valid UTF-8 text","Appends the provided byte to the ring buffer.","","","","","Clears the ring buffer and resets the position.","","Extracts the contents of the ring buffer as a string …","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new kernel ring buffer with the storage provided.","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Creates a new DMA (Direct Memory Access) buffer and is …","A blocking-based lock providing mutually exclusive access …","","Used to manage and block threads that are waiting for a …","Helper guard structure used to lock interrupts. When …","A spin-based lock providing mutually exclusive access to …","","Run a future to completion on the current task. This …","","","","","","","","","","","","","","","","","Drops the IRQ guard, enabling interrupts again. See the …","","","Force unlock this <code>Mutex</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Locks the <code>Mutex</code> and returns a guard that permits access to …","Locks the <code>Mutex</code> and returns a IRQ guard that permits …","","","Creates a new block queue.","Creates a new IRQ guard. See the <code>IrqGuard</code> documentation …","","Creates a new <code>Mutex</code> wrapping the supplied data.","Notify’s all of the tasks in the blocker’s queue that …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,799,799,4,4,4,0,4,4,799,7,4,799,7,4,4,4,0,4,799,7,4,0,7,0,0,0,799,7,4,7,0,0,7,7,0,0,4,799,7,4,799,7,4,799,7,4,0,0,16,0,16,16,17,17,16,0,0,16,17,16,16,16,0,0,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,800,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,801,801,0,801,0,0,0,0,0,0,802,22,802,803,804,801,23,21,22,802,803,804,801,23,21,803,21,21,23,21,22,802,803,22,802,803,804,801,23,21,803,804,22,802,803,804,22,22,802,803,804,801,23,21,23,804,804,803,22,21,23,22,23,802,804,21,22,802,803,804,801,23,21,22,802,803,804,801,23,21,22,802,803,804,801,23,21,0,0,0,0,805,805,24,805,24,805,24,805,24,0,24,24,805,24,0,805,805,24,805,805,24,805,24,805,24,0,0,0,28,0,0,0,28,26,806,29,30,26,28,29,30,26,28,29,30,26,26,30,0,29,30,26,28,26,29,30,26,28,30,26,26,26,26,29,30,30,29,30,29,30,31,29,30,29,30,29,30,26,28,29,30,26,28,29,30,26,28,0,0,30,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,34,0,0,0,0,0,0,0,0,0,0,34,33,33,33,34,33,34,33,34,34,33,34,34,33,34,34,0,0,33,0,0,33,33,34,0,0,0,0,0,0,0,34,0,0,33,33,33,33,33,33,33,34,33,34,33,34,33,34,33,38,807,38,808,39,809,39,810,38,807,38,808,40,811,40,812,40,811,40,812,40,811,40,812,39,809,39,810,38,807,38,808,0,0,0,41,813,41,814,42,815,42,816,42,815,42,816,42,815,42,816,38,807,38,808,42,815,42,816,42,815,42,816,39,809,39,810,39,809,39,810,42,815,42,816,41,813,41,814,40,811,40,812,38,807,38,808,38,807,38,808,42,815,42,816,42,815,42,816,38,807,38,808,38,807,38,808,41,813,41,814,40,811,40,812,41,813,41,814,39,809,39,810,40,811,40,812,0,38,807,38,808,39,809,39,810,39,809,39,810,40,811,40,812,41,813,41,814,41,813,41,814,41,813,41,814,42,815,42,816,38,807,38,808,42,815,42,816,41,813,41,814,43,817,43,818,43,817,43,818,41,813,41,814,39,809,39,810,38,807,38,808,41,813,41,814,41,813,41,814,41,813,41,814,42,815,42,816,42,815,42,816,39,809,39,810,41,813,41,814,41,813,41,814,38,807,38,808,0,42,815,42,816,42,815,42,816,42,815,42,816,41,813,41,814,38,807,38,808,40,811,40,812,41,813,41,814,41,813,41,814,39,809,39,810,41,813,41,814,38,807,38,808,42,815,42,816,42,815,42,816,41,813,41,814,38,807,38,808,41,813,41,814,38,807,38,808,38,807,38,808,41,813,41,814,39,809,39,810,40,811,40,812,0,38,807,38,808,40,811,40,812,0,0,0,0,0,0,0,0,0,0,0,0,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,43,43,43,43,41,41,41,41,41,39,39,39,39,39,38,38,38,38,38,42,42,42,42,42,40,40,40,40,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,0,0,0,0,0,0,0,0,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,43,41,39,38,42,40,0,0,0,0,0,0,819,0,0,0,0,0,0,0,820,820,820,0,50,821,50,822,50,821,819,50,822,53,819,819,50,821,50,822,819,819,51,823,51,824,51,823,51,824,51,823,51,824,51,823,51,824,0,52,0,819,0,51,823,51,824,51,823,51,824,820,819,820,0,0,0,0,0,53,51,50,53,53,53,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,819,820,56,55,54,51,50,52,53,819,820,56,55,54,51,50,52,53,51,50,52,53,51,50,52,53,51,50,51,50,51,50,54,51,50,51,50,51,50,52,51,50,51,51,51,51,51,50,50,50,50,50,52,53,819,820,56,55,54,51,50,52,53,51,50,51,50,51,50,51,50,51,50,0,0,51,50,0,0,51,50,51,50,51,50,819,820,56,55,54,51,50,52,53,55,51,50,51,50,55,53,53,0,0,0,0,0,0,0,0,56,51,53,51,50,56,51,50,51,50,55,55,55,55,55,51,50,53,53,53,56,51,50,51,50,51,50,51,50,52,53,51,50,819,820,56,55,54,51,50,52,53,819,820,56,55,54,51,50,52,53,54,819,820,56,55,54,51,50,52,53,51,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,62,0,0,0,0,0,0,0,59,58,57,60,61,62,59,58,57,60,61,62,60,61,62,57,0,0,59,58,57,0,59,58,57,60,61,62,0,57,0,0,59,58,57,60,61,62,0,57,57,59,59,59,57,0,59,59,58,57,60,61,62,59,58,57,60,61,62,59,58,57,60,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,69,0,0,0,64,825,64,826,0,0,0,0,0,0,0,65,69,64,825,64,826,0,64,825,64,826,64,825,64,826,64,825,64,826,64,825,64,826,64,825,64,826,0,64,825,64,826,0,0,64,64,64,64,64,64,64,64,64,70,64,65,66,67,68,37,63,69,70,64,65,66,67,68,37,63,69,64,65,66,67,68,37,63,69,64,65,66,67,68,37,63,69,64,63,64,64,68,66,67,68,37,63,64,64,64,64,64,64,64,64,64,66,67,68,37,63,70,64,65,66,67,68,37,63,69,64,64,64,64,64,64,65,0,64,0,64,64,70,64,65,66,67,68,37,63,69,37,64,64,68,65,0,70,64,70,65,65,65,64,37,66,66,67,67,67,67,66,66,66,67,67,66,66,66,64,68,68,66,68,37,65,64,65,65,65,70,68,63,64,64,64,64,65,66,67,68,37,63,69,64,70,64,65,66,67,68,37,63,69,70,64,65,66,67,68,37,63,69,65,70,64,65,66,67,68,37,63,69,64,0,0,0,0,0,0,0,0,0,0,0,0,0,71,71,71,71,71,0,71,0,0,71,0,71,0,0,0,72,72,0,71,71,71,71,71,0,71,0,0,0,0,73,73,73,73,73,73,73,0,73,73,73,0,0,73,73,73,0,0,0,0,0,0,0,0,0,0,0,79,79,79,79,79,0,0,0,0,0,0,0,0,78,78,0,78,80,79,78,80,79,79,79,78,78,78,80,78,80,78,79,78,0,0,78,78,80,79,78,78,78,78,78,80,79,0,0,78,78,80,80,80,80,80,80,80,78,78,0,79,78,80,79,78,80,79,78,80,79,78,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,827,89,827,89,827,827,89,827,0,827,827,89,89,0,0,0,827,89,89,827,89,827,89,827,89,827,0,0,90,90,90,0,90,90,0,0,90,0,90,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,828,92,829,93,830,93,831,94,832,94,833,95,834,95,835,94,832,94,833,94,832,94,833,94,832,94,833,96,836,96,837,96,836,96,837,96,836,96,837,96,836,96,837,118,0,0,0,0,0,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,92,828,92,829,97,838,97,839,95,834,95,835,97,838,97,839,92,828,92,829,98,840,98,841,94,832,94,833,94,832,94,833,99,842,99,843,100,844,100,845,94,832,94,833,94,832,94,833,96,836,96,837,96,836,96,837,95,834,95,835,99,842,99,843,100,844,100,845,94,832,94,833,99,842,99,843,100,844,100,845,99,842,99,843,100,844,100,845,0,99,842,99,843,100,844,100,845,118,0,0,0,0,0,98,840,98,841,94,832,94,833,94,832,94,833,98,840,98,841,94,832,94,833,94,832,94,833,0,0,99,842,99,843,100,844,100,845,99,842,99,843,100,844,100,845,94,832,94,833,93,830,93,831,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,830,93,831,99,842,99,843,100,844,100,845,99,842,99,843,100,844,100,845,99,842,99,843,100,844,100,845,94,832,94,833,93,830,93,831,94,832,94,833,95,834,95,835,110,118,99,842,99,843,100,844,100,845,97,838,97,839,97,838,97,839,110,92,828,92,829,99,842,99,843,100,844,100,845,94,832,94,833,98,840,98,841,94,832,94,833,99,842,99,843,100,844,100,845,98,840,98,841,99,842,99,843,100,844,100,845,118,110,110,92,828,92,829,846,105,98,840,98,841,95,834,95,835,98,840,98,841,98,840,98,841,98,840,98,841,98,840,98,841,99,842,99,843,100,844,100,845,95,834,95,835,98,840,98,841,98,840,98,841,97,838,97,839,98,840,98,841,98,840,98,841,98,840,98,841,98,840,98,841,94,832,94,833,96,836,96,837,94,832,94,833,96,836,96,837,96,836,96,837,96,836,96,837,96,836,96,837,98,840,98,841,118,99,842,99,843,100,844,100,845,99,842,99,843,100,844,100,845,92,828,92,829,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,103,102,120,107,108,107,102,117,0,96,95,97,98,93,100,99,94,92,101,116,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,101,116,116,102,102,107,107,96,95,97,98,93,100,99,94,92,104,105,106,96,95,97,98,93,100,99,94,92,104,105,106,107,107,117,96,95,97,98,93,100,99,94,92,101,103,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,103,101,101,103,108,109,109,120,103,106,107,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,111,116,116,96,95,97,98,93,100,99,94,92,104,96,95,97,98,93,100,99,94,92,107,107,103,103,103,103,120,108,96,96,96,96,96,95,95,95,95,95,97,97,97,97,97,98,98,98,98,98,93,93,93,93,93,100,100,100,100,100,99,99,99,99,99,94,94,94,94,94,92,92,92,92,92,104,117,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,0,96,95,97,98,93,100,99,94,92,116,113,96,95,97,98,93,100,99,94,92,111,111,117,116,116,103,107,119,113,96,95,97,98,93,100,99,94,92,106,116,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,101,107,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,104,104,103,103,103,103,103,103,101,119,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,116,111,116,108,102,102,108,107,119,96,95,97,98,93,100,99,94,92,847,107,117,119,107,107,101,101,109,107,96,95,97,98,93,100,99,94,92,103,92,120,120,103,107,107,107,109,107,113,109,107,111,111,107,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,96,95,97,98,93,100,99,94,92,107,96,95,97,98,93,100,99,94,92,104,105,106,96,95,97,98,93,100,99,94,92,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,846,109,101,116,103,102,120,110,118,107,108,847,117,119,111,113,96,95,97,98,93,100,99,94,92,104,105,106,96,95,97,98,93,100,99,94,92,116,107,116,0,0,0,0,0,0,0,123,123,125,124,123,125,124,0,123,125,124,123,125,124,0,124,125,0,123,125,124,125,123,125,123,123,0,123,124,123,125,124,123,125,124,123,125,124,123,123,0,0,0,0,127,129,127,127,128,129,127,126,128,129,127,126,129,127,128,126,127,126,127,128,128,129,127,126,127,127,126,127,128,129,127,126,128,128,127,126,127,127,127,126,129,129,129,127,127,128,129,127,126,128,129,127,126,128,129,127,126,130,848,130,849,130,848,130,849,0,0,0,0,0,0,0,0,130,848,130,849,0,0,0,0,0,131,850,131,851,0,0,0,0,131,850,131,851,0,0,0,131,850,131,851,132,852,132,853,132,852,132,853,132,852,132,853,133,854,133,855,133,854,133,855,131,850,131,851,134,856,134,857,134,856,134,857,0,0,131,850,131,851,135,858,135,859,130,848,130,849,131,850,131,851,132,852,132,853,130,848,130,849,130,848,130,849,135,858,135,859,132,852,132,853,131,850,131,851,132,852,132,853,135,858,135,859,131,850,131,851,130,848,130,849,130,848,130,849,134,856,134,857,0,0,0,0,0,0,0,0,0,0,0,0,136,130,131,135,134,133,132,137,138,136,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,139,137,138,136,130,131,135,134,133,132,139,137,138,136,130,131,135,134,133,132,137,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,138,130,131,135,134,133,132,130,131,135,134,133,132,130,130,130,130,130,131,131,131,131,131,135,135,135,135,135,134,134,134,134,134,133,133,133,133,133,132,132,132,132,132,139,137,138,136,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,139,137,138,136,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,137,137,136,139,137,138,136,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,139,137,137,139,137,137,137,137,137,137,139,138,136,137,136,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,130,131,135,134,133,132,139,137,138,136,130,131,135,134,133,132,139,137,138,136,130,131,135,134,133,132,137,139,137,138,136,130,131,135,134,133,132,130,131,135,134,133,132,139,140,860,140,861,0,0,0,0,0,0,0,0,142,0,0,0,140,860,140,861,140,860,151,140,861,0,142,142,0,150,142,0,0,0,0,152,141,140,152,152,140,140,140,140,140,140,140,140,141,148,148,147,144,151,150,146,143,152,148,141,145,142,140,147,144,151,150,146,143,152,148,141,145,142,140,152,152,142,140,142,140,140,0,140,140,148,152,145,140,140,140,140,142,140,140,140,140,140,147,144,151,150,146,143,152,148,141,145,142,140,140,140,140,140,143,144,144,140,145,140,141,140,140,140,152,152,147,144,151,150,146,143,152,148,141,145,142,140,141,0,140,140,146,143,147,148,144,147,144,141,141,145,140,148,0,140,148,0,141,141,140,152,152,148,140,146,146,146,152,146,146,148,145,140,140,140,147,142,140,140,147,144,151,150,146,143,152,148,141,145,142,140,147,144,151,150,146,143,152,148,141,145,142,140,147,144,151,150,146,143,152,148,141,145,142,140,140,152,141,141,0,0,0,0,0,0,0,154,0,153,862,153,863,0,0,0,0,0,154,0,155,0,155,0,155,0,0,0,0,0,154,0,153,862,153,863,149,0,154,149,155,149,0,0,164,163,163,164,164,153,164,166,164,164,159,159,164,164,164,164,153,153,153,153,153,153,153,153,167,154,153,149,155,156,157,158,163,164,165,166,159,160,161,162,167,154,153,149,155,156,157,158,163,164,165,166,159,160,161,162,164,157,157,157,157,157,157,157,154,153,149,155,156,157,158,159,160,161,162,154,153,149,155,156,157,158,159,160,161,162,164,153,158,164,157,158,159,160,161,162,167,153,153,159,158,161,164,160,161,164,164,164,167,167,164,164,157,158,159,154,153,149,155,156,157,158,159,160,161,153,166,166,166,165,159,164,164,164,153,166,163,153,166,163,153,157,158,163,159,160,161,166,153,153,153,153,153,156,163,164,165,166,159,162,164,166,164,164,167,154,153,149,155,156,157,158,163,164,165,166,159,160,161,162,153,153,153,153,164,164,153,153,164,164,164,164,164,164,167,163,163,164,153,153,153,167,154,153,149,155,156,157,158,158,163,164,165,166,159,159,160,160,161,161,162,164,164,161,153,153,164,166,159,164,163,164,166,164,157,159,164,164,164,165,164,164,164,166,166,166,166,157,164,166,166,166,166,166,166,164,166,153,166,166,166,164,166,166,166,166,158,159,166,166,166,166,164,164,164,164,164,157,158,159,160,161,153,156,160,161,156,160,161,164,160,161,164,163,163,159,153,166,162,160,161,164,164,158,164,164,166,158,159,160,161,158,164,164,164,164,166,166,162,165,164,163,163,163,164,164,167,164,153,164,164,160,162,162,164,160,164,159,162,153,153,164,153,164,154,153,149,155,156,157,158,159,160,161,162,153,167,154,153,149,155,156,157,158,163,164,165,166,159,160,161,162,167,154,153,149,155,156,157,158,163,164,165,166,159,160,161,162,167,154,153,149,155,156,157,158,163,164,165,166,159,160,161,162,153,164,164,164,164,166,164,164,163,163,0,168,0,0,0,0,0,0,168,169,171,172,864,169,170,171,172,864,169,170,0,170,170,170,169,171,172,864,169,170,170,170,169,171,172,864,169,170,170,169,170,169,169,169,170,170,170,169,170,171,172,864,169,170,171,172,864,169,170,171,172,864,169,170,0,0,0,0,0,0,0,0,0,0,174,175,181,181,181,181,177,178,176,179,174,175,180,177,178,176,179,174,175,180,175,179,175,191,175,180,180,191,176,175,0,0,175,175,178,176,175,175,175,181,191,191,191,175,175,175,180,191,175,177,178,176,179,174,175,180,181,177,178,176,179,175,177,178,175,175,175,175,175,175,175,177,178,176,179,174,175,180,175,0,0,180,175,191,180,191,175,175,176,177,178,176,179,174,175,180,181,177,178,176,179,177,178,176,179,178,178,176,0,180,177,178,176,179,175,176,180,177,178,176,179,174,175,180,177,178,176,179,174,175,180,177,178,176,179,174,175,180,0,0,192,192,192,192,192,192,192,192,192,0,192,192,192,192,192,192,193,865,193,866,194,867,195,868,194,869,195,870,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,200,0,197,873,197,874,0,196,871,196,872,193,865,193,866,0,0,197,873,197,874,193,865,193,866,0,198,875,196,871,198,876,196,872,0,200,0,0,200,194,867,195,868,194,869,195,870,200,200,0,196,871,196,872,196,871,196,872,197,873,197,874,196,871,196,872,194,867,195,868,194,869,195,870,193,865,193,866,193,865,193,866,193,865,193,866,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,196,871,196,872,199,199,193,865,193,866,194,867,195,868,194,869,195,870,196,871,196,872,198,875,198,876,0,200,196,871,196,872,196,871,196,872,196,871,196,872,194,867,195,868,194,869,195,870,198,875,198,876,193,865,193,866,193,865,193,866,193,865,193,866,0,0,199,0,200,200,200,200,200,0,196,871,196,872,196,871,196,872,194,867,195,868,194,869,195,870,193,865,193,866,198,875,198,876,200,0,200,0,197,873,197,874,193,865,193,866,193,865,193,866,193,865,193,866,0,0,200,200,200,200,200,200,0,196,871,196,872,199,196,871,196,872,194,867,195,868,194,869,195,870,0,0,0,0,0,0,0,0,0,0,0,0,0,201,202,194,197,195,198,196,193,203,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,208,203,205,206,199,200,194,197,195,198,196,193,201,202,208,203,205,206,199,200,194,197,195,198,196,193,201,202,202,199,200,194,197,195,198,196,193,199,200,194,197,195,198,196,193,201,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,201,201,197,201,202,203,194,197,195,198,196,193,208,205,194,197,195,198,196,193,194,197,195,198,196,193,202,194,197,195,198,196,193,199,194,194,194,194,194,197,197,197,197,197,195,195,195,195,195,198,198,198,198,198,196,196,196,196,196,193,193,193,193,193,208,203,205,206,199,199,200,194,197,195,198,196,193,201,202,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,203,205,206,194,197,195,198,196,193,0,203,203,194,197,195,198,196,193,203,194,197,195,198,196,193,194,197,195,198,196,193,208,203,205,206,199,200,194,197,195,198,196,193,201,202,0,194,197,195,198,196,193,194,197,195,198,196,193,201,202,203,205,203,208,203,205,206,194,197,195,198,196,193,194,197,195,198,196,193,208,203,203,203,205,203,205,194,197,195,198,196,193,203,203,203,203,203,203,205,194,197,195,198,196,193,198,198,201,202,206,201,202,194,197,195,198,196,193,194,197,195,198,196,193,194,197,195,198,196,193,199,200,194,197,195,198,196,193,194,197,195,198,196,193,208,203,205,206,199,200,194,197,195,198,196,193,201,202,208,203,205,206,199,200,194,197,195,198,196,193,201,202,203,203,203,208,203,205,206,199,200,194,197,195,198,196,193,201,202,194,197,195,198,196,193,205,203,203,212,877,212,878,212,877,212,878,0,212,877,212,878,212,877,212,878,212,877,212,878,0,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,0,0,0,212,877,212,878,0,0,212,877,212,878,212,877,212,878,0,0,0,215,0,0,212,212,212,212,212,212,212,212,212,216,213,212,214,215,216,213,212,214,215,213,212,214,212,214,212,212,212,215,213,213,212,212,212,214,212,216,212,212,212,212,212,214,216,213,212,214,215,212,212,212,212,212,212,213,212,212,212,216,213,212,214,215,212,212,0,213,216,213,212,219,213,212,213,0,213,0,216,212,0,212,216,213,212,212,212,212,214,212,216,213,212,214,215,216,213,212,214,215,216,213,212,214,215,212,213,0,0,0,221,220,221,220,220,220,221,220,221,221,0,221,220,221,221,221,221,221,221,221,221,220,221,221,221,220,221,220,221,220,222,879,222,880,0,0,0,222,879,222,880,222,879,222,880,0,0,0,0,0,222,879,222,880,222,879,222,880,222,879,222,880,222,879,222,880,222,879,222,880,0,0,225,0,0,222,222,222,222,222,222,222,222,222,223,222,225,224,223,222,225,224,222,224,222,224,222,222,222,222,224,225,223,223,222,222,222,222,224,222,222,222,222,222,224,223,222,225,224,222,222,222,222,222,222,223,222,222,222,223,222,225,224,0,222,222,223,223,222,223,222,223,223,0,223,222,222,222,222,222,222,224,222,223,222,225,224,223,222,225,224,223,222,225,224,222,223,224,224,114,115,115,115,115,115,0,115,115,115,0,0,115,115,115,115,226,881,226,882,115,0,0,115,115,115,115,115,115,115,115,115,115,115,234,115,115,115,115,115,115,115,228,115,115,115,114,115,115,115,115,115,115,115,115,115,115,115,115,228,228,0,115,115,229,0,229,115,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,0,226,881,226,882,226,881,226,882,115,0,0,0,115,0,115,115,115,115,115,115,115,115,115,0,114,115,115,115,115,115,226,881,226,882,226,881,226,882,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,229,115,114,115,0,115,115,115,115,0,0,230,230,226,112,112,112,112,112,226,226,226,226,226,226,226,226,234,230,231,227,112,883,232,226,229,228,115,114,234,230,231,227,112,883,232,226,229,228,115,114,112,112,226,228,226,228,226,226,226,230,112,226,112,226,112,112,226,229,115,114,226,226,226,226,226,226,229,228,115,114,234,230,231,227,112,883,232,226,229,228,115,114,226,226,226,226,112,112,112,226,112,112,883,233,112,226,227,0,232,226,112,226,226,234,230,231,227,112,883,232,226,229,228,115,114,227,226,226,230,114,230,231,112,231,227,112,232,115,114,227,226,227,226,112,112,0,226,230,231,226,230,233,226,226,226,231,226,228,226,234,230,231,227,112,883,232,226,229,228,115,114,234,230,231,227,112,883,232,226,229,228,115,114,234,230,231,227,112,883,232,226,229,228,115,114,226,112,884,885,884,885,884,885,0,0,0,0,0,0,0,0,0,0,0,239,0,0,236,236,886,241,235,240,239,238,236,886,241,235,240,239,238,236,238,239,235,235,235,238,236,236,886,241,235,240,239,238,238,236,241,235,238,240,236,886,241,235,240,239,238,236,241,238,241,241,238,236,241,235,240,235,236,241,0,236,241,240,240,238,241,238,886,236,886,241,235,240,239,238,236,886,241,235,240,239,238,236,886,241,235,240,239,238,238,236,236,236,241,0,0,0,0,0,887,0,0,887,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,887,0,254,255,0,0,0,0,250,888,248,250,248,250,888,248,887,251,254,255,250,888,248,887,251,254,255,888,248,248,251,250,254,255,248,248,248,251,0,250,888,248,887,251,254,255,250,0,248,250,888,248,887,251,254,255,248,250,888,888,888,250,248,248,248,888,248,251,888,248,888,248,248,248,250,250,888,248,887,251,254,255,250,888,248,887,251,254,255,250,888,248,887,251,254,255,248,0,256,889,256,890,257,891,257,892,0,0,257,891,257,892,256,889,256,890,256,889,256,890,256,889,256,890,0,0,0,0,0,256,257,256,257,256,257,256,257,256,257,256,257,256,257,256,257,256,257,258,256,257,258,256,257,256,257,256,257,256,257,256,257,256,257,256,257,256,257,256,257,256,257,256,256,256,256,256,257,257,257,257,257,258,256,257,256,257,256,257,256,257,256,257,256,257,256,257,0,258,256,257,256,257,256,257,258,256,257,256,257,256,257,258,258,256,257,256,257,256,257,258,0,0,256,257,256,257,256,257,256,257,256,257,256,257,258,256,257,258,256,257,258,256,257,256,257,258,258,186,186,264,186,186,0,0,186,186,186,186,0,0,0,0,0,0,264,186,186,186,186,0,0,0,0,186,186,263,0,0,260,0,259,263,261,186,260,264,259,263,261,186,260,264,0,261,261,260,260,263,0,0,186,264,0,0,0,261,259,186,260,264,259,263,261,186,186,186,264,0,0,259,263,261,186,264,260,0,0,0,259,259,260,261,260,0,0,0,0,246,261,261,259,263,261,186,264,259,263,261,186,264,259,263,261,186,260,264,0,0,0,0,0,0,0,0,0,0,0,271,0,0,273,268,269,266,270,268,269,271,266,270,268,269,271,270,266,266,266,270,271,270,268,266,266,269,268,268,266,266,266,270,268,269,271,0,268,268,0,266,270,268,269,271,266,0,266,266,268,268,266,270,268,269,266,269,266,270,272,273,268,269,273,268,269,269,272,268,268,266,266,270,268,269,271,266,270,268,269,271,266,270,268,269,271,272,273,268,269,273,268,269,0,0,0,0,0,0,0,0,274,274,276,274,893,893,275,274,276,893,275,274,276,274,274,274,893,274,893,274,275,275,893,274,893,276,274,276,893,275,274,276,893,893,893,275,274,276,276,893,276,275,893,893,276,276,893,893,893,276,276,893,893,274,893,275,274,276,893,275,274,276,276,893,275,274,276,276,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,894,84,84,281,83,895,267,277,84,281,83,895,267,277,83,279,277,267,0,0,84,281,84,281,0,281,84,83,277,84,84,280,83,84,84,281,83,895,267,277,267,267,0,267,0,277,84,281,83,895,267,277,83,267,267,267,84,267,84,281,83,267,277,267,267,267,83,84,281,84,281,83,895,267,277,84,281,83,895,267,277,84,281,83,895,267,277,895,281,83,895,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,284,0,0,0,290,283,285,286,287,288,284,290,283,285,286,287,288,284,284,289,285,286,287,288,289,285,286,287,288,287,290,283,285,286,287,288,284,0,289,285,286,287,288,0,0,290,283,285,286,287,288,284,290,287,287,290,287,290,283,285,286,287,288,290,290,285,290,285,286,288,283,290,283,285,286,287,288,284,290,283,285,286,287,288,284,290,283,285,286,287,288,284,287,290,285,286,287,0,292,292,292,292,292,292,292,292,292,292,292,292,292,292,0,294,294,294,294,294,294,294,294,294,294,294,294,294,0,0,0,298,295,295,295,298,298,295,301,298,295,301,298,295,295,0,298,295,301,298,295,295,0,295,295,301,295,301,298,301,295,295,295,295,295,295,295,295,295,295,295,301,298,301,301,295,295,295,295,295,295,295,295,298,295,295,295,298,295,298,295,295,295,301,298,295,301,298,295,301,298,295,295,295,0,0,300,300,0,300,300,300,0,0,0,303,0,306,306,0,300,0,300,300,303,303,300,304,305,303,303,303,303,306,303,304,299,300,305,306,303,304,299,300,305,303,303,304,299,300,305,303,304,299,300,305,303,305,303,305,303,303,303,305,303,305,303,299,306,300,303,305,303,303,303,305,299,303,303,303,305,306,303,304,299,305,305,303,303,304,303,304,306,303,304,299,300,305,305,303,305,303,305,299,304,303,304,303,303,306,303,304,299,300,305,303,303,303,303,303,305,305,303,303,303,303,303,303,303,303,303,303,303,299,305,305,304,303,303,303,304,303,303,303,305,299,305,305,305,305,305,303,303,304,299,300,305,306,303,304,299,300,305,306,303,304,299,300,305,305,306,303,304,299,300,305,304,305,303,303,303,0,0,307,308,308,307,308,307,308,307,308,307,308,308,308,308,308,307,307,308,307,308,307,307,308,307,308,307,308,307,310,0,310,0,0,310,310,244,309,310,244,309,309,309,309,244,244,309,244,244,310,244,309,244,309,244,244,310,244,309,309,244,309,244,309,244,244,310,244,309,310,244,309,310,244,309,244,313,0,313,312,0,0,312,218,896,218,897,312,0,0,218,896,218,897,0,0,313,218,896,218,897,0,0,313,312,313,312,0,0,185,218,185,185,218,218,218,218,218,218,218,218,313,898,82,217,218,242,312,313,898,82,217,218,242,312,82,82,242,218,242,312,218,242,312,185,218,218,185,218,82,313,217,312,218,185,185,217,82,218,218,312,218,0,242,242,82,218,218,218,218,218,242,312,313,898,82,217,218,242,312,312,218,218,218,82,218,82,218,218,242,242,82,898,217,218,218,218,313,898,82,217,218,242,312,185,218,242,218,242,242,242,185,185,185,185,185,185,185,185,185,82,898,82,82,218,185,82,898,218,185,217,185,185,218,185,185,185,185,218,82,82,242,185,218,218,218,218,242,312,218,185,185,313,898,82,217,218,242,312,313,898,82,217,218,242,312,313,898,82,217,218,242,312,218,185,185,185,0,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,0,0,317,317,0,0,317,0,0,0,316,317,318,316,319,317,318,316,319,319,319,317,319,318,319,319,317,318,316,319,0,0,319,0,318,317,318,316,319,318,318,318,318,316,316,319,319,0,318,316,316,316,317,318,316,319,317,318,316,319,317,318,316,319,318,0,0,0,321,322,322,321,323,322,321,323,323,323,323,322,323,323,322,321,323,323,322,322,321,323,322,322,322,322,322,322,322,322,322,322,322,321,321,323,322,323,322,322,321,321,321,322,322,322,322,321,323,322,321,323,322,321,323,322,322,322,0,0,0,0,0,324,324,324,0,324,0,324,0,0,324,324,0,0,324,324,324,0,0,0,327,327,327,327,327,327,327,327,327,0,0,0,327,327,327,327,327,0,0,0,0,329,331,0,329,331,329,331,329,331,329,331,0,329,331,329,331,331,329,331,329,331,329,331,329,332,899,332,900,0,332,899,332,900,0,332,899,332,900,0,332,899,332,900,0,332,899,332,900,0,0,0,0,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,0,332,332,332,332,332,332,332,0,332,332,332,332,332,332,0,0,332,0,0,332,332,332,332,332,332,332,332,332,332,332,332,204,204,0,0,0,0,9,9,122,122,9,9,122,122,0,9,122,0,9,122,9,9,122,9,9,9,122,122,9,9,122,204,334,9,122,204,334,9,122,204,9,122,204,9,122,9,9,122,9,9,9,9,9,9,122,122,122,122,122,122,204,334,9,9,122,204,334,122,122,9,122,204,334,0,9,122,9,122,122,9,9,9,9,9,9,9,122,9,9,9,9,9,122,122,122,9,9,122,122,9,122,204,9,122,204,334,9,122,204,334,9,122,204,334,9,9,122,0,0,0,0,0,0,0,0,0,347,347,344,0,0,345,337,337,338,337,337,342,343,342,337,346,347,343,342,333,345,344,338,337,346,347,343,342,333,345,344,338,342,342,338,338,346,346,338,337,337,342,333,342,344,342,342,345,344,338,342,342,337,346,347,343,342,333,345,344,338,342,342,338,0,333,337,0,338,342,337,346,347,343,342,333,345,344,338,346,346,343,343,342,333,338,337,346,0,0,333,333,342,345,338,337,346,347,343,342,333,345,344,338,337,346,347,343,342,333,345,344,338,337,346,347,343,342,333,345,344,338,345,0,77,352,0,0,355,358,360,0,355,0,0,362,352,0,0,0,355,362,0,77,358,359,360,0,0,0,0,77,358,359,360,0,356,356,356,0,0,0,0,901,355,356,354,77,358,359,360,361,349,362,352,121,363,355,356,354,77,358,359,360,361,349,362,352,121,363,349,901,902,354,355,356,354,77,358,359,360,361,349,362,352,121,363,121,348,363,355,356,354,77,77,77,77,358,358,359,359,360,360,361,349,362,362,352,121,363,366,354,121,355,356,354,77,358,359,360,361,349,362,352,121,363,361,366,361,361,366,361,361,121,121,354,361,349,121,349,349,363,121,361,349,361,356,356,903,361,121,903,366,361,361,121,121,355,356,354,77,358,359,360,361,349,362,352,121,363,355,356,354,77,358,359,360,361,349,362,352,121,363,355,356,354,77,358,359,360,361,349,362,352,121,363,366,361,361,121,121,121,366,361,361,121,121,904,904,904,0,0,0,0,0,0,0,0,353,353,0,0,0,367,189,367,189,189,76,341,364,367,370,375,189,371,372,76,341,364,367,370,375,189,371,372,76,341,364,367,370,189,371,372,76,341,364,367,370,189,371,372,76,341,364,367,189,367,189,370,371,372,76,341,364,367,370,189,371,372,76,341,364,367,370,375,375,189,371,372,76,341,364,367,370,375,189,371,372,189,76,341,364,367,370,375,189,371,372,370,371,372,370,371,372,367,367,367,367,367,76,341,364,367,189,367,367,189,370,371,372,367,189,367,189,367,367,189,189,367,189,76,341,364,367,370,189,371,372,375,76,341,364,367,370,375,189,371,372,76,341,364,367,370,375,189,371,372,76,341,364,367,370,375,189,371,372,351,905,351,906,350,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,351,905,351,906,350,350,351,905,351,906,0,0,350,0,365,351,905,351,906,351,905,351,906,365,351,905,351,906,351,905,351,906,351,905,351,906,0,0,0,0,0,351,905,351,906,351,905,351,906,351,905,351,906,0,0,350,351,351,351,351,351,351,351,351,351,365,350,351,328,335,336,365,350,351,328,335,336,365,350,351,328,335,336,365,350,351,328,335,336,351,335,336,351,351,328,351,351,328,350,365,351,335,336,351,350,365,350,351,351,351,351,351,328,335,336,328,328,350,365,350,351,351,328,335,336,351,351,351,351,350,351,351,350,328,328,328,328,351,351,351,365,350,351,328,335,336,351,351,350,350,328,335,336,335,336,351,351,335,336,350,351,351,350,350,350,350,350,351,351,351,365,350,351,328,335,336,351,365,350,351,328,335,336,365,350,351,328,335,336,365,350,351,328,335,336,351,350,328,0,0,0,0,0,0,381,0,0,379,380,380,381,379,380,381,379,379,379,379,380,381,379,380,381,380,381,379,379,380,379,379,380,381,379,380,381,379,380,381,379,383,0,0,0,0,0,0,0,0,385,382,385,384,382,383,385,384,382,383,383,383,382,383,382,385,384,382,383,383,383,383,0,0,385,384,382,383,384,383,383,383,385,384,382,383,383,383,384,385,383,385,384,382,383,385,384,382,383,385,384,382,383,386,0,0,386,0,0,386,387,386,387,386,386,386,387,386,387,0,387,386,387,386,386,387,386,387,387,386,387,0,0,0,0,397,0,0,0,0,0,0,0,0,0,0,0,0,211,0,907,211,211,0,908,908,388,395,209,211,388,395,209,211,0,211,211,211,211,211,395,0,388,396,909,388,209,0,209,211,388,395,209,211,0,910,910,908,211,209,0,388,395,209,211,0,395,907,211,211,396,388,388,211,209,0,910,396,211,211,211,396,910,396,211,211,211,388,211,388,395,209,211,388,395,209,211,388,395,209,211,0,911,0,0,0,399,398,399,398,399,398,0,398,0,398,399,398,399,399,398,399,398,399,398,399,398,0,402,402,0,0,0,402,402,402,0,0,402,402,402,402,402,402,402,402,207,207,0,0,394,0,0,394,912,207,210,394,912,207,210,207,210,207,210,207,207,912,207,207,210,394,912,207,210,207,207,394,912,207,210,207,912,207,210,394,912,207,210,394,912,207,210,912,394,912,207,210,0,391,0,0,0,0,390,401,391,390,392,401,391,390,392,391,390,392,391,390,392,391,391,401,391,391,390,401,401,391,390,392,391,391,401,401,401,391,390,392,401,401,391,391,401,401,401,391,390,392,401,401,391,390,392,401,391,390,392,401,401,391,390,392,401,0,0,0,0,0,0,0,0,404,393,404,393,393,393,404,0,404,404,404,404,393,404,393,404,403,404,393,404,393,404,393,404,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,913,914,0,0,0,0,0,0,0,0,0,45,0,45,262,0,12,13,0,0,0,282,0,0,0,0,0,0,0,12,0,0,0,0,0,184,184,440,262,262,0,262,262,184,791,184,184,184,790,184,184,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,184,184,184,262,663,88,282,184,0,0,0,262,373,184,369,184,369,184,184,262,373,184,262,262,262,262,0,0,0,0,0,0,0,0,262,262,262,495,184,184,184,0,0,184,184,0,915,262,0,374,184,184,184,184,184,262,262,411,184,184,184,184,184,184,184,411,184,184,184,184,184,411,184,184,0,262,262,262,262,262,262,184,184,262,262,0,0,625,184,184,184,184,184,184,184,410,184,184,184,184,184,184,184,184,184,184,184,184,184,262,377,262,184,184,0,377,262,184,0,0,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,262,262,262,173,184,184,184,184,45,184,184,184,184,445,262,184,262,262,262,184,262,377,262,184,184,445,0,0,377,262,262,262,373,262,262,262,373,262,262,262,0,374,184,184,184,262,184,262,440,262,262,440,0,377,184,262,262,262,262,262,184,262,262,184,184,262,184,184,184,184,184,184,262,440,440,262,262,184,184,184,262,262,262,184,262,0,184,184,262,262,262,0,0,184,184,184,0,184,262,262,262,262,914,184,913,184,262,184,184,440,0,184,262,184,184,184,184,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,330,330,330,916,916,619,619,330,330,457,340,330,457,340,619,330,457,340,330,457,340,330,916,619,330,457,340,330,330,330,457,457,340,340,330,330,330,457,340,330,330,330,619,619,330,330,457,340,330,330,330,457,340,916,330,330,619,330,330,330,457,340,457,340,330,457,340,330,457,340,330,457,340,0,0,0,0,458,14,458,14,14,14,14,459,459,459,459,459,459,459,459,459,459,459,459,14,459,459,459,458,14,14,14,14,14,459,459,459,14,14,460,458,458,458,458,0,0,14,14,14,14,459,458,14,0,0,458,458,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,475,477,476,472,471,478,462,462,0,462,462,462,462,462,467,461,468,464,466,465,475,477,476,472,471,478,462,467,467,467,467,467,467,467,467,467,467,467,461,461,468,468,464,464,464,464,464,464,464,464,464,464,464,466,466,465,465,475,475,475,475,475,475,475,475,475,475,475,477,477,476,476,472,471,478,462,0,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,462,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,475,477,476,472,471,478,462,467,461,468,464,466,465,475,477,476,472,471,478,462,0,0,0,439,439,439,439,439,439,482,439,482,439,482,439,482,439,439,482,439,439,439,482,482,439,439,482,482,0,0,0,439,482,439,439,439,439,439,439,439,439,482,439,439,439,482,482,439,482,0,439,482,439,482,0,484,484,484,484,484,0,484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,0,0,0,0,617,485,485,485,485,485,485,0,485,485,617,485,617,485,485,485,485,485,0,0,917,918,0,0,0,0,0,0,0,0,0,0,489,489,490,489,496,493,489,490,490,499,500,491,492,497,498,490,491,492,496,493,489,490,490,499,500,491,492,497,498,493,489,490,491,490,493,489,490,489,490,496,493,489,490,497,498,496,491,492,492,499,500,489,490,493,489,490,491,492,496,493,489,490,499,499,500,500,491,491,492,492,497,498,496,496,493,493,493,489,489,489,490,490,490,499,500,491,492,497,497,497,498,498,498,489,489,490,493,489,497,498,493,489,490,497,498,493,493,489,490,493,496,493,489,490,499,500,491,492,497,498,493,489,490,497,498,489,490,491,492,489,490,491,492,491,492,492,496,493,489,490,497,498,489,490,499,500,497,498,489,490,490,489,490,493,489,496,489,490,493,489,490,493,489,490,499,500,491,492,490,490,490,496,493,489,490,499,500,491,492,497,498,496,493,489,490,499,500,491,492,497,498,496,493,489,490,499,500,491,492,497,498,490,489,489,490,491,492,497,498,0,0,0,0,0,0,0,0,0,0,0,0,0,504,505,506,507,508,509,510,511,512,513,504,505,506,507,508,509,510,511,512,513,506,508,504,505,506,507,508,509,510,511,512,513,504,505,506,507,508,509,510,511,512,513,507,508,509,0,504,505,507,504,505,507,513,504,504,505,505,506,507,507,508,508,509,509,510,510,511,511,512,512,513,513,504,505,506,507,508,509,510,511,512,513,0,0,0,508,504,505,506,507,508,509,510,511,512,513,506,508,509,510,511,512,506,504,508,509,508,509,506,508,509,510,511,512,511,512,509,504,505,507,513,506,508,509,510,511,512,508,509,504,505,506,507,508,509,510,511,512,513,504,505,507,508,509,510,511,512,513,504,505,506,507,508,509,510,511,512,513,504,505,506,507,508,509,510,511,512,513,504,505,506,507,508,509,510,511,512,513,507,0,0,369,369,0,0,44,44,44,0,0,0,0,0,0,0,0,44,514,44,514,373,44,514,514,44,514,373,44,514,514,514,374,44,514,44,514,44,514,377,514,44,514,377,514,44,514,44,514,44,44,44,44,44,44,377,514,377,514,0,373,0,0,0,373,0,0,374,377,44,514,44,514,44,44,44,514,44,514,44,514,44,514,0,0,913,914,0,0,0,0,0,0,791,790,483,483,483,483,483,483,483,483,483,625,483,483,483,483,483,0,173,483,483,483,483,483,914,483,913,483,483,0,0,0,495,0,0,516,516,515,516,516,516,515,515,515,515,515,515,515,515,515,515,516,516,516,516,515,515,515,516,515,515,515,515,515,515,515,515,515,516,516,516,516,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,517,520,517,519,519,517,524,519,521,522,517,520,524,519,521,522,517,520,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,521,522,517,519,521,522,517,519,519,520,520,521,517,519,521,522,524,519,521,521,522,522,517,520,517,524,521,522,517,520,519,519,519,519,519,517,519,519,519,520,524,521,522,517,520,519,519,521,517,519,521,522,517,519,519,519,521,522,517,519,521,522,519,524,521,522,517,520,524,521,522,517,520,524,519,521,522,517,520,517,0,0,0,526,0,0,0,0,0,0,0,0,0,0,526,0,0,0,0,0,526,0,0,0,5,5,5,527,527,531,532,530,528,529,5,526,423,527,531,532,530,528,529,5,526,423,527,5,526,423,527,526,423,527,423,5,423,5,5,5,5,5,423,423,532,530,528,529,530,528,529,526,423,531,532,532,5,5,531,532,530,528,529,531,5,5,357,502,587,586,589,588,618,630,631,526,423,423,527,527,531,532,529,527,531,532,530,528,529,5,526,423,527,423,531,529,529,423,530,528,531,532,530,528,529,5,526,423,527,529,5,5,423,527,5,5,423,531,532,529,527,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,529,526,423,527,423,527,531,532,530,528,529,5,526,423,527,531,532,530,528,529,5,526,423,527,531,532,530,528,529,5,526,423,527,529,5,5,0,534,5,534,5,5,534,5,5,0,0,919,616,919,0,0,0,535,535,537,536,535,537,536,535,536,535,536,537,535,537,536,535,537,536,535,537,536,919,535,537,536,536,0,0,616,535,537,536,0,0,535,536,535,537,536,535,537,536,535,537,536,0,0,0,0,0,48,0,538,539,538,539,48,538,538,539,538,539,538,539,538,49,539,538,539,538,539,46,48,46,538,539,539,539,538,539,538,539,538,539,538,539,49,539,49,49,49,49,49,49,49,49,539,49,49,49,49,49,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542,542,542,542,0,0,542,542,542,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,408,456,456,421,422,440,543,408,412,417,444,448,452,544,421,422,262,543,408,412,413,417,444,448,452,544,262,262,262,408,456,604,604,604,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,262,262,421,422,434,545,406,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,421,422,434,545,406,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,262,262,262,262,262,262,421,422,262,406,408,412,417,419,426,441,448,544,417,262,422,545,408,409,412,417,426,444,544,0,262,262,262,411,411,411,420,432,437,446,262,262,262,408,426,444,262,450,449,453,262,262,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,421,422,434,262,406,543,408,409,412,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,262,452,604,604,604,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,0,0,410,262,262,548,262,456,421,422,547,262,262,262,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,45,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,406,445,406,409,412,417,426,432,437,444,262,262,262,262,409,412,434,406,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,421,422,262,408,412,426,441,448,544,262,545,445,406,409,412,417,426,432,437,444,547,548,456,262,262,262,262,262,262,262,262,262,448,452,262,434,433,262,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,550,440,421,422,545,406,543,408,409,412,417,419,420,426,432,437,441,444,448,450,452,456,547,548,544,262,412,441,441,262,543,408,412,417,426,441,444,448,450,452,456,544,440,543,408,417,426,444,448,450,452,544,0,0,413,262,262,262,262,441,441,262,441,262,419,438,449,453,442,262,262,406,0,0,549,262,440,408,426,444,421,422,440,406,543,408,409,412,417,419,420,426,432,437,441,444,448,450,452,262,262,434,433,421,422,434,545,262,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,547,548,544,549,550,262,262,446,450,262,604,550,0,451,262,262,262,421,422,434,545,406,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,262,262,421,422,262,406,543,408,409,412,413,417,419,420,426,432,437,438,441,444,446,448,449,450,452,453,549,262,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,262,421,422,440,406,543,408,409,412,417,419,420,426,432,437,441,444,448,450,452,421,422,434,545,406,543,408,409,412,413,417,419,420,426,432,433,437,438,441,444,446,448,449,450,452,453,456,546,547,548,544,549,550,262,0,262,0,0,0,920,0,0,0,0,0,0,0,0,0,0,0,0,0,921,554,555,554,555,554,555,554,555,554,555,554,555,554,554,554,555,554,555,554,555,554,555,554,555,554,555,554,555,554,555,554,554,555,554,555,554,555,554,555,556,0,0,0,556,0,0,556,556,556,556,0,0,0,556,556,557,557,557,557,557,557,557,557,557,557,558,559,557,556,558,559,557,556,556,558,559,557,556,558,559,557,556,559,0,559,559,559,0,0,559,558,559,556,558,559,557,556,0,0,558,559,557,556,558,559,558,559,558,559,557,556,559,559,556,0,0,0,559,557,559,0,556,0,0,0,557,557,557,557,557,557,556,0,0,559,558,559,557,556,0,0,557,558,559,557,556,558,559,557,556,558,559,557,556,557,557,557,0,556,559,557,0,557,557,557,0,557,0,563,561,563,563,0,0,0,0,561,562,563,563,563,563,0,0,0,561,562,560,565,560,565,560,561,562,563,564,565,566,567,560,561,562,563,564,565,566,567,560,561,562,563,564,565,566,567,560,561,562,563,564,565,566,567,560,561,562,565,566,567,564,560,560,560,561,561,562,562,563,564,565,566,567,567,567,560,560,561,561,562,562,563,564,564,565,565,566,566,567,567,560,560,560,560,560,560,561,561,561,562,562,562,562,563,564,565,565,565,565,566,567,560,561,562,565,566,567,560,561,562,563,565,566,567,560,561,562,563,565,566,567,560,561,562,563,564,565,566,567,565,566,567,566,567,560,561,562,561,560,561,562,560,561,562,560,565,560,565,561,560,561,562,560,561,562,561,561,561,562,562,562,562,560,561,562,562,561,562,565,566,567,561,562,561,562,560,561,562,565,566,567,560,560,560,561,561,562,562,565,566,567,565,566,567,566,567,564,567,567,562,567,565,566,567,565,566,567,567,560,562,562,562,561,561,560,561,562,563,564,565,566,567,560,561,562,564,565,566,567,560,561,562,563,564,565,566,567,560,561,562,563,564,565,566,567,560,561,562,563,564,565,566,567,577,578,579,580,581,405,568,569,570,571,572,573,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,584,0,585,0,584,577,578,579,580,581,405,568,569,570,571,572,573,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,577,578,579,580,581,405,568,569,570,571,572,573,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,585,584,0,0,0,0,0,0,0,0,0,0,0,0,585,0,0,584,0,585,0,0,584,585,568,569,570,571,572,573,574,574,574,574,574,574,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,577,577,578,578,579,579,580,580,581,581,405,405,568,568,569,569,570,570,571,571,572,572,573,573,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,577,577,578,578,579,579,580,580,581,581,405,405,568,568,569,569,570,570,571,571,572,572,573,573,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,568,569,570,571,572,573,577,578,579,580,581,405,577,578,579,580,581,405,568,569,570,571,572,573,568,569,570,571,572,573,577,578,579,580,581,405,577,578,579,580,581,405,568,569,570,571,572,573,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,577,578,579,580,581,405,568,569,570,571,572,573,574,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,574,575,582,583,91,577,578,579,580,581,405,568,569,570,571,572,573,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,582,582,583,583,91,91,584,577,577,577,577,577,577,578,578,578,578,578,578,579,579,579,579,579,579,580,580,580,580,580,580,581,581,581,581,581,581,405,405,405,405,405,405,568,568,568,568,568,568,569,569,569,569,569,569,570,570,570,570,570,570,571,571,571,571,571,571,572,572,572,572,572,572,573,573,573,573,573,573,574,574,574,574,574,574,575,575,575,575,575,575,585,582,583,583,583,583,91,584,577,578,578,579,579,579,580,580,580,580,581,581,581,581,581,405,405,405,405,568,569,569,569,570,570,570,570,570,571,571,571,571,571,571,571,572,572,572,572,572,572,572,572,572,573,573,573,573,574,575,575,585,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,577,578,579,580,581,405,568,569,570,571,572,573,575,575,575,575,575,575,577,578,579,580,581,405,568,569,570,571,572,573,577,578,579,580,581,405,568,569,570,571,572,573,574,575,577,578,579,580,581,405,568,569,570,571,572,573,574,575,577,578,579,580,581,405,577,578,579,580,581,405,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,568,569,570,571,572,573,574,574,574,574,574,574,575,575,575,575,575,575,575,574,574,574,574,574,574,575,575,575,575,575,575,575,577,578,579,580,581,405,574,574,574,574,574,574,575,575,575,575,575,575,575,575,91,582,91,577,578,579,580,581,405,568,569,570,571,572,573,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,577,578,579,580,581,405,568,569,570,571,572,573,577,578,579,580,581,405,568,569,570,571,572,573,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,568,569,570,571,572,573,568,569,570,571,572,573,577,578,579,580,581,405,568,569,570,571,572,573,574,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,582,583,91,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,568,569,570,571,572,573,577,578,579,580,581,405,577,578,579,580,581,405,568,569,570,571,572,573,568,569,570,571,572,573,577,578,579,580,581,405,568,569,570,571,572,573,577,578,579,580,581,405,568,569,570,571,572,573,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,582,583,91,577,578,579,580,581,405,568,569,570,571,572,573,574,575,575,575,575,575,575,577,578,579,580,581,405,568,569,570,571,572,573,574,574,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,575,575,575,575,575,582,583,91,584,577,577,577,577,577,577,577,577,577,577,577,577,577,578,578,578,578,578,578,578,578,578,578,578,578,579,579,579,579,579,579,579,579,579,579,579,580,580,580,580,580,580,580,580,580,580,581,581,581,581,581,581,581,581,581,405,405,405,405,405,405,405,405,405,405,405,568,568,568,568,568,568,568,568,568,568,568,568,568,569,569,569,569,569,569,569,569,569,569,569,570,570,570,570,570,570,570,570,570,571,571,571,571,571,571,571,572,572,572,572,572,573,573,573,573,573,573,573,573,573,573,574,575,585,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,582,583,91,584,577,578,579,580,581,405,568,569,570,571,572,573,574,575,585,577,578,579,580,581,405,577,578,579,580,581,405,568,569,570,571,572,573,568,569,570,571,572,573,568,569,570,571,572,573,575,575,568,569,570,571,572,573,575,575,575,575,575,0,0,0,0,0,0,0,0,0,606,0,607,606,0,0,0,0,0,0,0,605,0,0,0,0,0,0,605,0,0,0,0,0,0,0,922,923,924,925,926,927,928,929,930,931,932,933,282,934,454,0,0,0,0,0,0,0,0,0,0,454,551,0,0,0,0,0,0,609,0,935,605,0,551,607,922,936,368,368,605,605,929,937,930,938,931,939,606,607,428,368,430,431,427,429,605,608,606,607,428,368,430,431,427,429,605,608,454,606,606,663,88,282,606,607,428,368,430,431,427,429,605,606,607,428,368,430,431,427,429,605,605,607,415,368,430,431,427,429,606,428,368,609,610,368,427,605,925,940,915,427,368,431,427,429,415,428,368,368,430,430,431,431,427,427,429,429,606,607,428,368,430,431,427,429,605,427,606,607,428,368,430,431,427,429,605,608,427,606,607,428,368,430,431,427,429,605,608,454,606,941,606,428,428,368,368,430,430,431,431,427,427,429,429,606,607,428,368,430,431,427,429,605,428,428,368,368,430,430,431,431,427,427,429,429,428,428,368,368,430,430,431,431,427,427,429,429,428,428,368,368,430,430,431,431,427,427,429,429,606,607,428,368,430,431,427,429,605,934,428,428,368,368,430,430,431,431,427,427,429,429,942,428,428,368,368,430,430,431,431,427,427,429,429,606,607,428,368,430,431,427,429,605,608,427,368,430,427,606,606,368,427,368,427,368,427,605,606,606,368,427,368,427,924,943,927,427,368,430,427,368,427,928,368,430,427,368,427,607,926,944,551,427,368,427,605,932,945,933,946,368,430,427,427,368,430,427,415,428,368,368,430,430,431,431,427,427,429,429,923,947,606,607,428,368,430,431,427,429,605,427,606,607,428,368,430,431,427,429,605,608,606,607,428,368,430,431,427,429,605,608,427,606,607,428,368,430,431,427,429,605,608,0,0,0,12,0,12,12,12,12,12,12,12,12,12,12,12,12,611,613,612,12,611,613,612,12,12,611,612,12,12,611,612,12,12,12,12,12,12,12,12,12,12,12,12,611,613,612,12,12,12,12,12,611,613,612,12,12,12,12,12,12,12,12,12,611,613,612,12,12,12,611,613,612,12,12,12,611,613,612,12,12,12,12,12,12,12,12,12,611,613,612,611,613,612,12,12,12,12,12,12,12,12,611,613,612,12,12,12,611,612,12,12,611,613,612,12,611,613,612,12,611,613,612,12,12,12,12,12,12,12,12,12,0,0,0,0,0,614,540,615,614,540,615,614,540,615,615,540,540,540,540,540,614,614,614,540,540,540,614,540,540,615,615,614,540,615,540,540,614,540,615,614,540,540,615,615,615,615,540,615,615,614,614,614,540,540,615,614,540,615,614,540,615,614,540,615,0,0,0,0,0,0,0,0,0,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,0,486,486,486,486,486,486,486,486,486,486,486,486,486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,45,0,45,262,0,12,13,0,0,0,282,0,0,0,0,0,0,0,12,0,0,440,262,262,0,262,262,791,790,0,0,262,663,88,282,0,0,0,262,373,369,369,262,373,262,262,262,262,0,0,0,0,0,262,262,262,495,0,0,0,915,262,0,374,262,262,411,411,411,0,262,262,262,262,262,262,262,262,0,0,625,262,377,262,0,377,262,0,0,0,262,262,262,173,45,445,262,262,262,262,262,377,262,445,0,0,377,262,262,262,373,262,262,262,373,262,262,262,0,374,262,262,440,262,262,440,0,377,262,262,262,262,262,262,262,262,262,440,440,262,262,262,262,262,262,0,262,262,262,0,0,0,262,262,262,262,262,440,0,262,262,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,45,0,45,262,0,12,13,0,0,0,282,0,0,0,0,0,0,0,12,0,0,440,262,262,0,262,262,791,790,0,0,262,663,88,282,0,0,0,262,373,369,369,262,373,262,262,262,262,0,0,0,0,0,262,262,262,495,0,0,0,915,262,0,374,262,262,411,411,411,0,262,262,262,262,262,262,262,262,0,0,625,262,377,262,0,377,262,0,0,0,262,262,262,173,45,445,262,262,262,262,262,377,262,445,0,0,377,262,262,262,373,262,262,262,373,262,262,262,0,374,262,262,440,262,262,440,0,377,262,262,262,262,262,262,262,262,262,440,440,262,262,262,262,262,262,0,262,262,262,0,0,0,262,262,262,262,262,440,0,262,262,0,0,0,0,0,0,0,0,0,0,0,0,0,13,913,914,0,0,0,0,0,0,0,0,0,45,0,45,262,0,12,13,0,0,0,282,0,0,0,0,0,0,0,12,0,0,0,0,440,262,262,0,262,262,791,790,0,0,262,663,88,282,0,0,0,262,373,369,369,262,373,262,262,262,262,0,0,0,0,0,262,262,262,495,0,0,0,915,262,0,374,262,262,411,411,411,0,262,262,262,262,262,262,262,262,0,0,625,410,262,377,262,0,377,262,0,0,0,262,262,262,173,45,445,262,262,262,262,262,377,262,445,0,0,377,262,262,262,373,262,262,262,373,262,262,262,0,374,262,262,440,262,262,440,0,377,262,262,262,262,262,262,262,262,262,440,440,262,262,262,262,262,262,0,262,262,262,0,0,0,262,262,262,262,914,913,262,440,0,262,262,0,0,0,0,0,0,0,0,0,0,0,0,0,13,913,914,0,0,0,0,0,0,0,0,0,45,0,45,262,0,12,13,0,0,0,282,0,0,0,0,0,0,0,12,0,0,0,0,440,262,262,0,262,262,791,790,0,0,262,663,88,282,0,0,0,262,373,369,369,262,373,262,262,262,262,0,0,0,0,0,262,262,262,495,0,0,0,915,262,0,374,262,262,411,411,411,0,262,262,262,262,262,262,262,262,0,0,625,410,262,377,262,0,377,262,0,0,0,262,262,262,173,45,445,262,262,262,262,262,377,262,445,0,0,377,262,262,262,373,262,262,262,373,262,262,262,0,374,262,262,440,262,262,440,0,377,262,262,262,262,262,262,262,262,262,440,440,262,262,262,262,262,262,0,262,262,262,0,0,0,262,262,262,262,914,913,262,440,0,262,262,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,45,0,45,262,0,12,13,0,0,0,282,0,0,0,0,0,0,0,12,0,0,440,262,262,0,262,262,791,790,0,0,262,663,88,282,0,0,0,262,373,369,369,262,373,262,262,262,262,0,0,0,0,0,262,262,262,495,0,0,0,915,262,0,374,262,262,411,411,411,0,262,262,262,262,262,262,262,262,0,0,625,262,377,262,0,377,262,0,0,0,262,262,262,173,45,445,262,262,262,262,262,377,262,445,0,0,377,262,262,262,373,262,262,262,373,262,262,262,0,374,262,262,440,262,262,440,0,377,262,262,262,262,262,262,262,262,262,440,440,262,262,262,262,262,262,0,262,262,262,0,0,0,262,262,262,262,262,440,0,262,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,590,948,0,0,339,0,0,620,339,339,339,590,339,339,339,339,339,339,590,620,339,590,620,339,590,339,620,339,590,620,339,590,620,339,590,0,0,339,0,0,620,339,590,620,339,339,590,620,339,339,339,590,0,0,0,0,339,0,0,620,339,590,339,0,620,339,590,620,339,590,0,0,620,339,590,339,0,339,590,339,590,0,0,590,620,339,590,620,339,0,0,0,0,620,0,339,0,0,0,620,339,590,339,620,339,590,590,590,620,339,590,620,339,590,620,339,0,0,0,0,13,0,0,0,13,0,13,13,13,13,13,13,13,622,624,623,13,622,624,623,13,13,622,623,13,13,622,623,13,13,13,13,13,13,13,13,13,13,13,13,622,624,623,13,622,624,623,13,13,13,13,13,13,622,624,623,13,13,13,622,624,623,13,13,13,13,622,624,623,13,13,13,13,13,13,13,13,13,13,13,622,624,623,622,624,623,13,13,13,13,13,13,622,624,623,13,13,622,623,13,13,622,624,623,13,622,624,623,13,622,624,623,13,13,13,13,13,13,13,949,950,951,629,952,953,481,0,0,951,954,955,626,0,951,954,956,629,0,0,0,0,0,0,0,0,0,0,0,0,0,951,954,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,628,628,481,481,481,481,481,481,628,628,481,481,481,481,481,481,481,481,481,481,481,481,481,628,628,481,628,628,481,481,481,481,481,481,481,481,481,481,481,481,481,628,628,481,628,628,481,481,481,481,481,481,481,481,481,481,481,481,481,628,628,481,949,628,481,629,949,628,481,629,628,481,628,481,629,628,481,629,481,629,951,481,481,628,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,628,481,629,0,0,0,0,0,0,0,628,481,481,481,481,481,481,481,629,949,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,629,628,481,950,628,628,628,628,628,628,628,951,481,481,628,628,481,481,481,481,481,481,629,481,629,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,481,481,481,949,628,481,629,951,481,481,951,481,481,951,481,481,954,481,481,481,481,481,951,481,481,954,481,481,481,481,481,951,481,481,951,481,481,951,481,481,0,0,0,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,628,481,481,481,481,481,481,481,481,481,481,628,481,629,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,951,481,481,954,956,481,481,481,481,481,481,481,481,481,481,951,954,956,481,481,481,481,481,481,481,481,481,481,481,481,951,954,956,481,481,481,481,481,481,481,481,481,481,481,481,954,956,481,481,481,481,481,481,481,481,481,481,951,954,956,481,481,481,481,481,481,481,481,481,481,481,481,951,954,956,481,481,481,481,481,481,481,481,481,481,481,481,954,956,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,954,481,481,481,481,481,954,956,481,481,481,481,481,481,481,481,481,481,954,481,481,481,481,481,954,956,481,481,481,481,481,481,481,481,481,481,481,481,481,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,951,954,481,481,481,481,481,481,481,951,957,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,955,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,958,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,958,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,958,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,958,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,951,957,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,951,957,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,955,628,628,628,628,628,481,481,481,481,481,481,481,481,481,481,481,481,0,628,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,481,952,953,628,628,628,481,950,628,628,628,628,628,628,628,951,481,481,951,481,481,628,481,628,481,629,951,481,481,949,628,481,629,949,628,481,629,949,628,481,629,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,959,0,0,621,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,634,635,647,648,650,661,634,635,634,635,634,635,634,635,635,634,635,959,634,635,636,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,641,647,642,648,645,650,646,651,634,636,637,638,639,640,641,642,643,644,645,646,634,636,637,638,639,640,641,642,643,644,645,646,634,635,640,641,647,642,648,643,644,649,645,650,646,651,634,635,634,635,634,635,634,635,636,637,652,653,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,661,639,639,640,641,647,642,648,643,644,649,645,650,646,651,639,634,635,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,0,0,0,0,0,0,621,621,621,621,0,621,621,638,654,655,656,657,658,639,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,636,637,652,653,638,654,655,656,657,658,659,660,639,640,641,647,642,648,643,644,649,645,650,646,651,648,649,651,635,634,635,642,648,643,644,649,646,651,634,644,649,634,635,659,660,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,643,0,634,635,636,637,652,653,638,654,655,656,657,658,659,660,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,636,637,652,653,638,654,659,660,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,640,641,647,642,648,643,644,649,645,650,646,651,634,635,640,641,647,642,648,643,644,649,645,650,646,651,643,634,635,636,637,652,653,659,660,661,634,635,0,642,648,644,649,646,651,642,644,646,634,635,640,634,635,636,637,652,653,638,654,655,656,657,658,659,660,639,640,641,647,642,648,643,644,649,645,650,646,651,659,660,643,0,634,636,637,638,639,640,641,642,643,644,645,646,661,639,639,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,634,635,636,637,652,653,638,654,655,656,657,658,659,660,661,639,640,641,647,642,648,643,644,649,645,650,646,651,636,637,652,653,640,641,647,642,648,645,650,646,651,0,0,0,662,662,662,662,662,662,0,662,662,0,0,0,662,662,662,662,662,0,0,0,0,960,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,664,664,665,666,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,683,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,665,666,664,525,668,525,668,687,525,525,683,664,667,525,525,668,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,684,685,685,686,686,687,688,684,685,686,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,960,0,0,0,0,666,681,682,684,685,686,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,667,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,688,687,687,664,665,666,665,666,664,679,681,682,664,688,667,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,688,667,665,666,664,669,670,671,672,675,676,677,678,679,680,681,682,0,664,664,666,0,664,525,668,667,669,670,671,672,673,674,681,682,664,664,665,666,664,679,680,681,682,683,684,685,686,688,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,525,668,684,685,686,684,685,686,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,667,525,668,665,666,664,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,0,687,687,525,525,0,0,0,0,0,689,0,689,0,689,0,0,0,443,0,689,690,691,692,693,694,695,689,690,691,692,693,694,695,689,690,691,692,693,694,695,689,690,691,692,693,694,695,689,690,690,689,690,691,692,693,694,695,689,690,691,692,693,694,695,961,690,691,692,693,694,695,690,695,689,690,691,692,693,694,695,443,443,443,443,690,695,961,690,691,692,693,694,695,962,690,691,692,693,694,695,961,690,691,692,693,694,695,962,690,691,692,693,694,695,961,691,692,693,694,962,691,692,693,694,695,443,443,689,690,691,692,693,694,695,689,690,691,692,693,694,695,689,690,691,692,693,694,695,689,690,691,692,693,694,695,690,690,0,0,696,696,696,696,696,696,696,696,696,696,696,696,696,696,696,696,696,696,696,696,0,0,0,0,0,0,0,0,0,0,0,480,480,0,0,0,0,0,0,0,0,0,0,0,0,0,480,480,480,697,698,699,700,701,702,703,704,705,706,707,708,697,698,480,699,700,701,702,703,704,705,706,707,708,697,698,480,699,700,701,702,703,704,705,706,707,708,480,480,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,0,697,698,699,700,701,702,703,704,705,706,707,708,480,0,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,698,698,699,700,701,702,703,704,705,706,707,708,699,700,701,702,703,704,705,706,707,708,697,699,700,701,702,703,704,705,706,707,708,697,697,698,699,700,701,702,703,704,705,706,707,708,698,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,698,480,699,700,701,702,703,704,705,706,707,708,697,697,698,698,480,699,699,700,700,701,701,702,702,703,703,704,704,705,705,706,706,707,707,708,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,480,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,480,697,698,480,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,698,0,697,698,699,700,701,702,703,704,705,706,707,708,697,698,699,700,701,702,703,704,705,706,707,708,480,697,698,480,699,700,701,702,703,704,705,706,707,708,697,698,480,699,700,701,702,703,704,705,706,707,708,697,698,480,699,700,701,702,703,704,705,706,707,708,697,699,700,701,702,703,704,705,706,707,708,0,488,0,0,0,0,488,0,487,487,709,487,709,711,488,710,712,487,709,711,488,710,712,711,488,488,709,488,712,712,709,488,712,488,710,710,709,712,488,710,712,487,709,711,488,710,712,487,709,709,711,488,488,488,710,710,712,711,488,488,709,711,488,488,488,487,488,488,487,709,711,488,710,712,488,488,488,488,488,488,488,710,712,488,488,0,709,488,712,487,709,711,488,710,712,487,709,711,488,710,712,487,709,711,488,710,712,710,710,709,712,709,712,487,487,709,709,0,716,716,716,716,716,0,716,716,716,716,716,716,716,716,716,716,717,716,717,716,716,716,716,716,717,716,717,716,716,716,716,716,716,716,716,716,716,717,716,717,717,716,717,716,716,716,716,716,716,716,716,716,717,716,717,716,716,716,716,716,716,716,717,716,716,716,716,716,716,716,716,716,716,716,716,716,717,717,716,717,716,716,716,717,716,717,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,722,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,722,0,0,722,718,0,718,963,963,963,719,718,963,963,963,963,963,963,963,963,963,963,963,291,963,291,291,963,718,719,720,721,722,291,723,963,718,719,720,721,722,291,723,723,718,291,719,720,718,0,719,720,721,722,291,719,720,721,722,291,718,718,718,0,0,718,718,719,720,721,722,719,719,720,721,722,291,723,0,963,718,719,720,721,722,291,723,718,718,721,0,721,718,0,0,0,0,963,291,291,718,291,723,723,723,718,0,963,718,719,720,721,722,291,723,0,718,718,718,718,721,718,718,718,718,718,0,723,291,718,718,0,0,718,718,718,718,963,291,291,963,0,718,718,0,718,0,718,0,0,0,0,291,718,719,720,721,722,291,963,718,719,720,721,722,291,723,963,718,719,720,721,722,291,723,963,718,719,720,721,722,291,723,291,718,718,718,720,718,720,718,297,0,297,297,297,297,297,297,297,297,0,297,297,297,297,0,728,728,0,0,0,729,727,727,728,729,727,728,729,727,728,729,727,727,728,729,727,729,727,727,728,729,727,727,727,727,727,727,727,727,727,727,727,727,727,727,727,729,727,728,729,727,728,729,727,727,728,729,727,0,734,734,734,0,0,0,0,0,296,735,736,296,736,296,732,733,734,735,736,296,732,733,734,735,296,296,296,732,732,733,734,735,732,736,296,732,733,734,735,296,296,736,296,732,733,734,735,734,736,733,296,296,733,296,736,296,732,296,0,296,736,736,734,733,296,296,736,736,296,735,736,296,732,733,734,735,736,296,732,733,734,735,736,296,732,733,734,735,296,296,733,296,0,0,737,737,737,737,85,737,85,85,0,85,737,737,85,0,0,0,85,737,85,0,737,0,737,0,85,85,737,737,0,737,85,737,85,737,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,739,739,739,0,0,739,739,739,739,0,739,739,0,0,739,739,739,739,0,739,0,739,0,0,0,0,741,740,741,740,741,740,0,0,0,0,0,740,741,740,0,740,741,741,741,0,0,0,0,0,0,740,741,740,741,740,741,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,748,748,748,748,748,748,0,0,0,0,748,748,748,0,0,0,0,0,0,0,0,749,0,0,0,0,0,749,0,751,753,750,749,753,750,749,749,749,750,751,751,751,750,751,750,750,749,753,750,749,0,0,751,750,753,750,749,0,750,753,750,751,751,753,750,753,0,0,751,750,749,753,750,749,753,750,749,753,750,749,751,0,0,754,755,755,754,755,754,755,754,755,755,755,754,755,754,755,754,755,754,755,754,754,755,0,755,755,755,755,754,754,755,754,754,754,754,0,755,754,755,754,755,754,754,762,0,0,762,265,0,0,0,0,0,0,762,756,756,756,762,265,758,757,756,762,265,758,757,0,0,756,756,757,756,758,757,756,758,757,756,0,758,757,756,756,757,265,758,758,265,758,756,762,265,758,757,758,758,758,756,757,757,756,762,265,758,757,758,756,756,758,756,756,757,757,756,756,757,756,758,758,756,756,756,758,757,756,756,762,265,758,757,756,762,265,758,757,756,762,265,758,757,0,0,763,763,0,763,763,763,763,763,763,0,763,0,0,0,763,763,763,763,766,0,767,768,0,766,0,0,0,0,0,766,0,237,764,752,237,237,237,752,237,764,769,764,237,752,766,767,768,769,764,237,752,766,767,768,237,237,752,766,767,768,752,766,767,768,237,752,237,237,237,767,768,237,752,766,237,237,237,237,237,769,752,766,769,237,769,764,237,752,766,766,767,768,237,752,767,768,237,767,768,237,237,237,752,769,769,764,237,752,766,767,768,237,237,237,237,237,767,768,767,768,767,768,764,237,237,237,769,764,752,767,768,237,237,237,237,752,237,237,237,237,767,768,767,768,237,237,237,0,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,752,766,767,768,769,764,237,752,766,767,768,769,764,237,752,766,767,768,769,764,237,752,766,767,768,237,237,237,764,237,237,237,0,0,0,0,0,772,0,0,774,773,771,772,774,773,771,772,771,772,773,771,774,773,771,772,773,774,774,774,773,771,772,774,773,771,774,773,774,773,771,774,773,771,774,774,774,773,771,772,774,773,771,772,774,773,771,772,0,0,765,775,775,775,775,775,775,775,775,775,775,775,775,775,775,775,775,775,0,0,0,0,0,786,786,779,779,779,779,0,0,0,779,786,786,0,0,786,0,0,0,781,780,780,781,782,784,786,780,776,81,779,777,778,781,782,784,786,780,776,81,779,777,778,776,81,777,778,777,778,0,780,778,780,780,782,784,777,778,776,776,778,779,776,81,781,782,784,786,780,776,81,779,777,778,778,776,81,778,778,782,784,81,781,781,782,784,786,780,776,81,779,777,778,784,776,81,778,776,776,81,776,81,776,81,781,782,784,776,81,777,784,784,777,0,0,0,782,778,778,778,777,778,778,777,778,781,782,784,786,780,776,81,779,777,778,781,782,784,786,780,776,81,779,777,778,781,782,784,786,780,776,81,779,777,778,778,0,0,0,0,0,738,964,787,0,788,787,738,788,787,738,0,965,0,787,0,788,787,738,788,787,738,738,787,788,787,738,787,738,787,738,738,788,738,0,0,738,788,787,738,788,787,738,788,787,738,0,0,0,0,0,0,788,738,738,738,0,0,789,789,789,0,789,789,789,789,789,789,789,789,789,789,789,789,0,0,792,793,792,793,792,792,793,792,792,793,792,793,793,792,793,792,792,793,792,792,793,792,793,792,793,792,793,792,0,0,0,794,795,794,795,794,795,794,795,794,794,794,795,794,795,794,794,795,794,795,794,795,794,794,0,0,0,0,0,0,314,314,797,798,796,183,8,314,797,798,796,183,8,796,8,796,8,797,796,8,183,314,797,798,796,183,8,796,8,183,314,314,797,798,796,183,8,8,314,798,183,183,797,796,314,797,798,183,314,314,314,798,314,797,798,796,183,8,314,797,798,796,183,8,314,797,798,796,183,8,798],"f":[0,0,0,[[1,1],2],[[1,1],2],[[2,1,1]],[[2,1,1,1],2],0,[1,3],[[],3],0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[[]],0,[[4,5],6],[[]],[[]],[[]],[[],[[8,[7]]]],0,0,[9],0,[[]],[[]],[[]],[[7,10],[[12,[11]]]],0,0,[9,7],[7,2],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,0,0,0,[[]],[[]],[15],[16],[[]],[[],[[18,[17]]]],[[[18,[17]]]],[[]],[[19,2,2,2,2],2],[[],13],[[],13],[[],14],0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],13],[[],13],[[],14],0,0,0,0,0,[[]],[[]],0,[[]],0,0,0,[[]],0,[11,20],0,0,[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[21,21],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[22,23],0,0,0,[23,12],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,[[]],[[]],[[]],[[]],0,[24,1],[[]],[[]],[[],24],0,[24],[[]],[[]],[[],25],0,0,0,0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[26,[15]]],1],[[[26,[27]]],1],0,[9,28],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],0,[[[26,[15]],10],[[12,[11]]]],[[[26,[27]],10],[[12,[11]]]],[9,[[26,[15]]]],[9,[[26,[27]]]],0,0,0,0,0,0,0,[[]],[29],[30],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[2,1],25],[31,25],0,0,[11],[[]],[[]],0,0,0,[11,1],[11,1],[[]],[9,11],[[]],[11,25],0,0,0,0,0,[11],0,[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,[[],3],0,[[]],[[]],0,[[]],0,0,0,0,0,0,0,[32,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[33,15],[34,34],[[]],[33],[[34,34],25],[[34,5],6],[[]],[35,34],[[]],[[],27],[[],1],[33,15],[[],[[8,[33]]]],[[],34],[33],[[]],[[]],[15,[[12,[1]]]],[1,15],[[1,15],15],[[2,15,19,36]],[[2,2,36]],[[1,15,15]],[[],25],[34,25],[37],[25],[[9,34],33],[[33,15],15],[[33,15],15],[[33,15],9],[33],[[33,2,1]],[33],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[33,15,15]],[38,25],[[],25],0,0,[39,25],[[],25],0,0,[38,25],[[],25],0,0,[40,25],[[],25],0,0,[40,25],[[],25],0,0,[40,25],[[],25],0,0,[39,25],[[],25],0,0,[38,25],[[],25],0,0,0,0,0,[41,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[38,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[39,25],[[],25],0,0,[39,25],[[],25],0,0,[42,25],[[],25],0,0,[41,25],[[],25],0,0,[40,25],[[],25],0,0,[38,25],[[],25],0,0,[38,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[38,25],[[],25],0,0,[38,25],[[],25],0,0,[41,25],[[],25],0,0,[40,25],[[],25],0,0,[41,25],[[],25],0,0,[39,25],[[],25],0,0,[40,25],[[],25],0,0,0,[38,25],[[],25],0,0,[39,25],[[],25],0,0,[39,25],[[],25],0,0,[40,25],[[],25],0,0,[41,25],[[],25],0,0,[41,25],[[],25],0,0,[41,25],[[],25],0,0,[42,25],[[],25],0,0,[38,25],[[],25],0,0,[42,25],[[],25],0,0,[41,25],[[],25],0,0,[43,25],[[],25],0,0,[43,25],[[],25],0,0,[41,25],[[],25],0,0,[39,25],[[],25],0,0,[38,25],[[],25],0,0,[41,25],[[],25],0,0,[41,25],[[],25],0,0,[41,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[39,25],[[],25],0,0,[41,25],[[],25],0,0,[41,25],[[],25],0,0,[38,25],[[],25],0,0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[41,25],[[],25],0,0,[38,25],[[],25],0,0,[40,25],[[],25],0,0,[41,25],[[],25],0,0,[41,25],[[],25],0,0,[39,25],[[],25],0,0,[41,25],[[],25],0,0,[38,25],[[],25],0,0,[42,25],[[],25],0,0,[42,25],[[],25],0,0,[41,25],[[],25],0,0,[38,25],[[],25],0,0,[41,25],[[],25],0,0,[38,25],[[],25],0,0,[38,25],[[],25],0,0,[41,25],[[],25],0,0,[39,25],[[],25],0,0,[40,25],[[],25],0,0,0,[38,25],[[],25],0,0,[40,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],43],[[],41],[[],39],[[],38],[[],42],[[],40],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[43,27],[41,27],[39,27],[38,27],[42,15],[40,27],0,0,0,0,0,0,[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[41,41],[39,39],[38,38],[42,42],[40,40],[[]],[[]],[[]],[[]],[[]],[[]],[[43,43],44],[[41,41],44],[[39,39],44],[[38,38],44],[[42,42],44],[[40,40],44],[43,43],[41,41],[39,39],[38,38],[42,42],[40,40],[[43,43],25],[[41,41],25],[[39,39],25],[[38,38],25],[[42,42],25],[[40,40],25],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[],43],[[],41],[[],39],[[],38],[[],42],[[],40],[[43,43],25],[[41,41],25],[[39,39],25],[[38,38],25],[[42,42],25],[[40,40],25],[[43,45]],[[41,45]],[[39,45]],[[38,45]],[[42,45]],[[40,45]],[[43,5],6],[[43,5],6],[[43,5],6],[[43,5],6],[[43,5],6],[[41,5],6],[[41,5],6],[[41,5],6],[[41,5],6],[[41,5],6],[[39,5],6],[[39,5],6],[[39,5],6],[[39,5],6],[[39,5],6],[[38,5],6],[[38,5],6],[[38,5],6],[[38,5],6],[[38,5],6],[[42,5],6],[[42,5],6],[[42,5],6],[[42,5],6],[[42,5],6],[[40,5],6],[[40,5],6],[[40,5],6],[[40,5],6],[[40,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[27,[[12,[43]]]],[27,[[12,[41]]]],[27,[[12,[39]]]],[27,[[12,[38]]]],[15,[[12,[42]]]],[27,[[12,[40]]]],[27,43],[27,41],[27,39],[27,38],[15,42],[27,40],[27,43],[27,41],[27,39],[27,38],[15,42],[27,40],[45,43],[45,41],[45,39],[45,38],[45,42],[45,40],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[43,49]],[[41,49]],[[39,49]],[[38,49]],[[42,49]],[[40,49]],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[43,43],25],[[41,41],25],[[39,39],25],[[38,38],25],[[42,42],25],[[40,40],25],[[]],[[]],[[]],[[]],[[]],[[]],[43,25],[41,25],[39,25],[38,25],[42,25],[40,25],[43,25],[41,25],[39,25],[38,25],[42,25],[40,25],[43,43],[41,41],[39,39],[38,38],[42,42],[40,40],[[43,43],[[12,[44]]]],[[41,41],[[12,[44]]]],[[39,39],[[12,[44]]]],[[38,38],[[12,[44]]]],[[42,42],[[12,[44]]]],[[40,40],[[12,[44]]]],[[],39],[[],9],[[]],[[],27],[[],41],[[],42],[[],38],[[],40],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[[43,43,25]],[[41,41,25]],[[39,39,25]],[[38,38,25]],[[42,42,25]],[[40,40,25]],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[[]],[[]],[[]],[[]],[[]],[[]],[[43,43]],[[41,41]],[[39,39]],[[38,38]],[[42,42]],[[40,40]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[43,43],43],[[41,41],41],[[39,39],39],[[38,38],38],[[42,42],42],[[40,40],40],[39],[41],[42],[40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,25],[[],25],0,0,[50,25],[[],25],0,0,0,0,0,0,[50,25],[[],25],0,0,0,0,[51,25],[[],25],0,0,[51,25],[[],25],0,0,[51,25],[[],25],0,0,[51,25],[[],25],0,0,0,0,0,0,0,[51,25],[[],25],0,0,[51,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,[[],51],[[],50],0,0,0,[[51,51],51],[[50,50],50],[[51,51]],[[50,50]],[[51,51],51],[[50,50],50],[[51,51]],[[50,50]],[51,19],[50,2],0,0,[[51,51],51],[[50,50],50],[[51,51]],[[50,50]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[50,50],[52,52],[53,53],[[]],[[]],[[]],[[]],[[51,51],44],[[50,50],44],[51,51],[50,50],[[51,51],25],[[50,50],25],0,[[51,51],51],[[50,50],50],[[],51],[[],50],[[51,51],25],[[50,50],25],[[52,52],25],[[51,45]],[[50,45]],[[51,5],6],[[51,5],6],[[51,5],6],[[51,5],6],[[51,5],6],[[50,5],6],[[50,5],6],[[50,5],6],[[50,5],6],[[50,5],6],[[52,5],6],[[53,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[12,[51]]]],[2,[[12,[50]]]],[19,51],[2,50],[19,51],[2,50],[45,51],[45,50],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[],54],[[],55],[[51,49]],[[50,49]],[[]],[[]],[[51,51]],[[50,50]],[[51,51],51],[[50,50],50],[[51,51],25],[[50,50],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[51,25],[50,25],[51,25],[50,25],0,0,0,[51],[51],[51],[51],[56],[51],[51],[51],[[19,27],56],[[19,52],51],[[2,50],53],[51,51],[50,50],0,[[51,51],[[12,[44]]]],[[50,50],[[12,[44]]]],[[51,51]],[[50,50]],0,0,0,0,0,[[51,51,25]],[[50,50,25]],[[53,15]],[[53,15]],[53],0,[[51,51],51],[[50,50],50],[[51,51]],[[50,50]],[[51,51],51],[[50,50],50],[[]],[[]],[[]],[[]],[[51,51]],[[50,50]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[51,51],51],[[50,50],50],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],57],[[],58],[[],59],[[],57],[[],58],[[],59],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,57],[61,58],[62,59],[57],[[]],[[]],[59],[58],[57],0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,63]],[[57,2],19],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[57,25],[57,25],[59,1],0,[[],59],[[],57],[2],[59],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[63],[63],[63],[63],[63],[63],[63],[63],0,[63],[63],[63],[63],[63],[63],[63],[63],[63],[63],[63],[63],0,0,0,0,0,[64,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,[64,25],[[],25],0,0,0,[64,25],[[],25],0,0,[64,25],[[],25],0,0,[64,25],[[],25],0,0,[64,25],[[],25],0,0,[64,25],[[],25],0,0,0,[64,25],[[],25],0,0,0,0,[[],64],[[64,64],64],[[64,64]],[[64,64],64],[[64,64]],[64,2],0,[[64,64],64],[[64,64]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,64],[65,65],[66,66],[67,67],[68,68],[37,37],[63,63],[69,69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[64,64],44],0,[64,64],[[64,64],25],0,[[],66],[[],67],[[],68],[[],37],[[],63],[[64,64],64],[[],64],[[64,64],25],[[64,45]],[[64,5],6],[[64,5],6],[[64,5],6],[[64,5],6],[[64,5],6],[[66,5],6],[[67,5],6],[[68,5],6],[[37,5],6],[[63,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[12,[64]]]],[2,64],[2,64],[45,64],[[[0,[46,47]],48],27],[[64,49]],0,[[]],[[64,64]],0,[[64,64],64],[[64,64],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[64,25],[64,25],[68,25],0,[70],[[19,27],70],[64,64],0,0,0,0,[[64,64],[[12,[44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[64,64]],0,0,0,0,0,0,[[64,64,25]],[[65,64]],[[65,2]],[[65,19,1]],0,0,0,[[64,64],64],[[64,64]],[[64,64],64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[64,64]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[64,64],64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[71,71],[[]],[1],[[]],[19,2],[19,15],[[]],[19,19],[19,71],[[19,2]],[[19,15]],[[19,19]],[19],[19],[15,27],[[71,19],72],[[]],[[],13],[[],13],[[],14],[[]],[[71,19,72]],[[15,27]],0,0,0,[[]],[[]],[[73,5],6],0,[[]],[[37,27],73],[[25,27,37,27],73],[37],[[]],0,0,[37],[[74,37]],[[],13],[[],13],[[],14],0,0,0,0,[[1,1],[[13,[1,75]]]],[[]],[63],[63],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[13,[9,[77,[76]]]]]],[[78,78]],[[]],[[]],[[]],[[]],[[]],[[]],[79,79],[[]],[[78,1,1],[[13,[78,[77,[76]]]]]],0,0,0,[78],[[],80],[[78,81,[84,[[83,[82]]]],[12,[85]],[12,[85]]],[[13,[[77,[76]]]]]],[[79,5],6],[78,[[13,[78,[77,[76]]]]]],0,0,0,[[]],[[]],[[]],0,[78,9],[78,9],0,[[]],[[]],[[]],0,0,[[],78],[[9,25],78],0,0,0,0,0,0,0,[[78,9]],[[78,9]],0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[78],0,[[],9],[86],[86],[[],15],0,0,0,0,0,0,[[],19],[[],87],[[],1],[[]],[37],[1],[19],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[88],0,[[]],[[]],0,[[],1],[[],89],[1],[[]],[[]],0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,[[]],[[]],[[]],[[],10],[[]],[[],90],[10,90],[10,[[13,[1,91]]]],0,[10],0,0,[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[92,25],[[],25],0,0,[93,25],[[],25],0,0,[94,25],[[],25],0,0,[95,25],[[],25],0,0,[94,25],[[],25],0,0,[94,25],[[],25],0,0,[94,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[92,25],[[],25],0,0,[97,25],[[],25],0,0,[95,25],[[],25],0,0,[97,25],[[],25],0,0,[92,25],[[],25],0,0,[98,25],[[],25],0,0,[94,25],[[],25],0,0,[94,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[94,25],[[],25],0,0,[94,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,[95,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[94,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,0,0,0,0,0,0,[98,25],[[],25],0,0,[94,25],[[],25],0,0,[94,25],[[],25],0,0,[98,25],[[],25],0,0,[94,25],[[],25],0,0,[94,25],[[],25],0,0,0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[94,25],[[],25],0,0,[93,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[93,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[94,25],[[],25],0,0,[93,25],[[],25],0,0,[94,25],[[],25],0,0,[95,25],[[],25],0,0,0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[97,25],[[],25],0,0,[97,25],[[],25],0,0,0,[92,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[94,25],[[],25],0,0,[98,25],[[],25],0,0,[94,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[98,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,0,0,0,[92,25],[[],25],0,0,0,0,[98,25],[[],25],0,0,[95,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[95,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[97,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[98,25],[[],25],0,0,[94,25],[[],25],0,0,[96,25],[[],25],0,0,[94,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,[96,25],[[],25],0,0,[98,25],[[],25],0,0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[99,25],[[],25],0,0,[100,25],[[],25],0,0,[92,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],96],[[],95],[[],97],[[],98],[[],93],[[],100],[[],99],[[],94],[[],92],[[101,1]],0,[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],[96,15],[95,15],[97,15],[98,15],[93,15],[100,15],[99,15],[94,15],[92,19],0,0,0,0,0,0,0,0,0,[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[102,103],0,0,[96,96],[95,95],[97,97],[98,98],[93,93],[100,100],[99,99],[94,94],[92,92],[104,104],[105,105],[106,106],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[107,1],108],0,[[96,96],44],[[95,95],44],[[97,97],44],[[98,98],44],[[93,93],44],[[100,100],44],[[99,99],44],[[94,94],44],[[92,92],44],0,0,[96,96],[95,95],[97,97],[98,98],[93,93],[100,100],[99,99],[94,94],[92,92],[[96,96],25],[[95,95],25],[[97,97],25],[[98,98],25],[[93,93],25],[[100,100],25],[[99,99],25],[[94,94],25],[[92,92],25],0,[101],0,0,0,[109,1],0,0,0,[106,110],0,[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],[[],96],[[],95],[[],97],[[],98],[[],93],[[],100],[[],99],[[],94],[[],92],[[111,112]],0,0,[[96,96],25],[[95,95],25],[[97,97],25],[[98,98],25],[[93,93],25],[[100,100],25],[[99,99],25],[[94,94],25],[[92,92],25],[[104,104],25],[[96,45]],[[95,45]],[[97,45]],[[98,45]],[[93,45]],[[100,45]],[[99,45]],[[94,45]],[[92,45]],0,0,0,0,0,0,0,0,[[96,5],6],[[96,5],6],[[96,5],6],[[96,5],6],[[96,5],6],[[95,5],6],[[95,5],6],[[95,5],6],[[95,5],6],[[95,5],6],[[97,5],6],[[97,5],6],[[97,5],6],[[97,5],6],[[97,5],6],[[98,5],6],[[98,5],6],[[98,5],6],[[98,5],6],[[98,5],6],[[93,5],6],[[93,5],6],[[93,5],6],[[93,5],6],[[93,5],6],[[100,5],6],[[100,5],6],[[100,5],6],[[100,5],6],[[100,5],6],[[99,5],6],[[99,5],6],[[99,5],6],[[99,5],6],[[99,5],6],[[94,5],6],[[94,5],6],[[94,5],6],[[94,5],6],[[94,5],6],[[92,5],6],[[92,5],6],[[92,5],6],[[92,5],6],[[92,5],6],[[104,5],6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[12,[96]]]],[15,[[12,[95]]]],[15,[[12,[97]]]],[15,[[12,[98]]]],[15,[[12,[93]]]],[15,[[12,[100]]]],[15,[[12,[99]]]],[15,[[12,[94]]]],[19,[[12,[92]]]],[15,96],[15,95],[15,97],[15,98],[15,93],[15,100],[15,99],[15,94],[19,92],[15,96],[15,95],[15,97],[15,98],[15,93],[15,100],[15,99],[15,94],[19,92],[45,96],[45,95],[45,97],[45,98],[45,93],[45,100],[45,99],[45,94],[45,92],[[],[[18,[113]]]],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],0,[[113,114,115],25],[[96,49]],[[95,49]],[[97,49]],[[98,49]],[[93,49]],[[100,49]],[[99,49]],[[94,49]],[[92,49]],0,[111,116],[117,107],0,0,0,0,0,0,[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],[106,118],0,[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],[[96,96],25],[[95,95],25],[[97,97],25],[[98,98],25],[[93,93],25],[[100,100],25],[[99,99],25],[[94,94],25],[[92,92],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[101,104],0,[96,25],[95,25],[97,25],[98,25],[93,25],[100,25],[99,25],[94,25],[92,25],[96,25],[95,25],[97,25],[98,25],[93,25],[100,25],[99,25],[94,25],[92,25],[104,25],[104,25],0,0,0,0,0,0,[[1,1],101],[9,119],[96,96],[95,95],[97,97],[98,98],[93,93],[100,100],[99,99],[94,94],[92,92],[[96,96],[[12,[44]]]],[[95,95],[[12,[44]]]],[[97,97],[[12,[44]]]],[[98,98],[[12,[44]]]],[[93,93],[[12,[44]]]],[[100,100],[[12,[44]]]],[[99,99],[[12,[44]]]],[[94,94],[[12,[44]]]],[[92,92],[[12,[44]]]],[[116,1],107],0,0,0,0,[[102,1],120],0,[[107,121,1],[[13,[25,[77,[76]]]]]],[[119,1],[[12,[1]]]],[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],0,[[107,104,1,1,1]],[[117,[18,[101]],1],1],[[119,[18,[101]]],[[12,[1]]]],0,0,[101,1],0,[109,1],0,[[96,96,25]],[[95,95,25]],[[97,97,25]],[[98,98,25]],[[93,93,25]],[[100,100,25]],[[99,99,25]],[[94,94,25]],[[92,92,25]],[[103,25]],[[92,1]],[[120,1]],[[120,25]],[[103,1]],0,0,0,[109,122],[[107,121],[[13,[[77,[76]]]]]],[[113,112,121]],0,[107],[[111,112],[[13,[[77,[76]]]]]],[[111,121],[[13,[[77,[76]]]]]],[107],[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[96,96]],[[95,95]],[[97,97]],[[98,98]],[[93,93]],[[100,100]],[[99,99]],[[94,94]],[[92,92]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[96,96],96],[[95,95],95],[[97,97],97],[[98,98],98],[[93,93],93],[[100,100],100],[[99,99],99],[[94,94],94],[[92,92],92],0,0,0,0,0,0,0,0,0,0,[123,1],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[],[[18,[124]]]],[[124,114,115],25],0,[[]],[[]],[[]],[[]],[[125,112]],[[25,[18,[126]]],[[18,[123]]]],[[],125],[[123,1],[[12,[1]]]],[[123,1,122,1],[[12,[1]]]],0,0,[[124,112,121]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[123,1],[[12,[1]]]],[[123,1,122,1],[[12,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[127,25],25],[[126,25],25],[127],[[128,1],129],[[]],[[]],[[]],[[]],[127,128],[127],[126],0,[[]],[[]],[[]],[[]],[[128,1],1],[[122,1],128],[[19,19,19,1],127],[[19,19,19,1],[[18,[126]]]],0,[[127,104,1,1,25],1],[[127,[18,[101]],1,25],1],[[126,[18,[101]],25],[[12,[1]]]],[[129,122]],[[129,1]],[[129,25]],[127],[127],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[130,25],[[],25],0,0,[130,25],[[],25],0,0,0,0,0,0,0,0,0,0,[130,25],[[],25],0,0,0,0,0,0,0,[131,25],[[],25],0,0,0,0,0,0,[131,25],[[],25],0,0,0,0,0,[131,25],[[],25],0,0,[132,25],[[],25],0,0,[132,25],[[],25],0,0,[132,25],[[],25],0,0,[133,25],[[],25],0,0,[133,25],[[],25],0,0,[131,25],[[],25],0,0,[134,25],[[],25],0,0,[134,25],[[],25],0,0,0,0,[131,25],[[],25],0,0,[135,25],[[],25],0,0,[130,25],[[],25],0,0,[131,25],[[],25],0,0,[132,25],[[],25],0,0,[130,25],[[],25],0,0,[130,25],[[],25],0,0,[135,25],[[],25],0,0,[132,25],[[],25],0,0,[131,25],[[],25],0,0,[132,25],[[],25],0,0,[135,25],[[],25],0,0,[131,25],[[],25],0,0,[130,25],[[],25],0,0,[130,25],[[],25],0,0,[134,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[136],[[],130],[[],131],[[],135],[[],134],[[],133],[[],132],0,0,0,[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[130,2],[131,2],[135,2],[134,2],[133,2],[132,2],0,0,0,0,0,0,[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[137],[130,130],[131,131],[135,135],[134,134],[133,133],[132,132],[[]],[[]],[[]],[[]],[[]],[[]],[[130,130],44],[[131,131],44],[[135,135],44],[[134,134],44],[[133,133],44],[[132,132],44],[130,130],[131,131],[135,135],[134,134],[133,133],[132,132],[[130,130],25],[[131,131],25],[[135,135],25],[[134,134],25],[[133,133],25],[[132,132],25],[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[],130],[[],131],[[],135],[[],134],[[],133],[[],132],[138],[[130,130],25],[[131,131],25],[[135,135],25],[[134,134],25],[[133,133],25],[[132,132],25],[[130,45]],[[131,45]],[[135,45]],[[134,45]],[[133,45]],[[132,45]],[[130,5],6],[[130,5],6],[[130,5],6],[[130,5],6],[[130,5],6],[[131,5],6],[[131,5],6],[[131,5],6],[[131,5],6],[[131,5],6],[[135,5],6],[[135,5],6],[[135,5],6],[[135,5],6],[[135,5],6],[[134,5],6],[[134,5],6],[[134,5],6],[[134,5],6],[[134,5],6],[[133,5],6],[[133,5],6],[[133,5],6],[[133,5],6],[[133,5],6],[[132,5],6],[[132,5],6],[[132,5],6],[[132,5],6],[[132,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[12,[130]]]],[2,[[12,[131]]]],[2,[[12,[135]]]],[2,[[12,[134]]]],[2,[[12,[133]]]],[2,[[12,[132]]]],[2,130],[2,131],[2,135],[2,134],[2,133],[2,132],[2,130],[2,131],[2,135],[2,134],[2,133],[2,132],[45,130],[45,131],[45,135],[45,134],[45,133],[45,132],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[130,49]],[[131,49]],[[135,49]],[[134,49]],[[133,49]],[[132,49]],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[130,130],25],[[131,131],25],[[135,135],25],[[134,134],25],[[133,133],25],[[132,132],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[130,25],[131,25],[135,25],[134,25],[133,25],[132,25],[130,25],[131,25],[135,25],[134,25],[133,25],[132,25],[137,2],[137,2],[[136,122]],[[],139],[19,137],[19,138],[19,136],[130,130],[131,131],[135,135],[134,134],[133,133],[132,132],[[130,130],[[12,[44]]]],[[131,131],[[12,[44]]]],[[135,135],[[12,[44]]]],[[134,134],[[12,[44]]]],[[133,133],[[12,[44]]]],[[132,132],[[12,[44]]]],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[[130,130,25]],[[131,131,25]],[[135,135,25]],[[134,134,25]],[[133,133,25]],[[132,132,25]],[[139,1]],[[137,104]],[[137,25,25,19]],[[139,25]],[[137,25,19]],[[137,2]],[[137,19]],[[137,25,1]],[[137,1]],[[137,1]],[[139,25]],[138],[[136,104]],[137,131],[136,132],[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[[]],[[]],[[]],[[]],[[]],[[]],[[130,130]],[[131,131]],[[135,135]],[[134,134]],[[133,133]],[[132,132]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[137,[[12,[131]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[130,130],130],[[131,131],131],[[135,135],135],[[134,134],134],[[133,133],133],[[132,132],132],[139,2],[140,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[140,25],[[],25],0,0,[140,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],140],0,0,[[140,140],140],[[140,140]],[[140,140],140],[[140,140]],[140,2],0,[[140,140],140],[[140,140]],[141,1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[142,142],[140,140],[[]],[[]],[[140,140],44],0,[140,140],[[140,140],25],0,0,0,[[140,140],140],[[],140],[[140,140],25],[[140,45]],[[142,5],6],[[140,5],6],[[140,5],6],[[140,5],6],[[140,5],6],[[140,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[12,[140]]]],[2,140],[2,140],[45,140],[143,25],[144,140],[144,27],[[[0,[46,47]],48],27],[[145,114,115],25],[[140,49]],0,[[140,140]],[[140,140],140],[[140,140],25],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[37],[140,25],[140,25],[146,25],[143,25],[147,19],0,[144,19],[147,2],[144,27],0,[112,[[13,[[18,[141]],142]]]],[[],[[18,[145]]]],[140,140],0,[[]],[[140,140],[[12,[44]]]],0,0,[[141,1],[[12,[1]]]],[[141,1,122,1],[[12,[1]]]],[[140,140]],0,0,[[148,149,1,122,1]],[[140,140,25]],[[146,150]],[[146,151]],[[146,25]],[[152,25],[[13,[142]]]],[[146,15]],[[146,15]],0,[[145,112,121]],[[140,140],140],[[140,140]],[[140,140],140],[147,2],[[]],[[]],[[140,140]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[140,140],140],0,[[141,1],[[12,[1]]]],[[141,1,122,1],[[12,[1]]]],0,0,0,0,0,0,0,0,0,[153,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[153,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],153],0,0,0,0,0,0,0,0,0,0,[[153,153],153],[[153,153]],[[153,153],153],[[153,153]],[153,19],0,[[153,153],153],[[153,153]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[154,154],[153,153],[149,149],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[153,153],44],0,0,0,0,0,0,0,0,0,[153,153],[[153,153],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],154],[[],153],[[],149],[[],155],[[],156],[[],157],[[],158],[[],159],[[],160],[[],161],[[153,153],153],0,0,0,0,0,0,0,0,[[],153],0,0,[[153,153],25],0,0,[[153,45]],0,0,0,0,0,0,0,[[153,5],6],[[153,5],6],[[153,5],6],[[153,5],6],[[153,5],6],[[156,5],6],[[163,5],6],[[164,5],6],[[165,5],6],[[166,5],6],[[159,5],6],[[162,5],6],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[12,[153]]]],[19,153],[19,153],[45,153],0,0,[[[0,[46,47]],48],27],[[153,49]],0,0,0,0,0,0,0,0,0,0,[[153,153]],[[153,153],153],[[153,153],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[158,167],[[]],[[]],[[]],[[]],[159,167],[[]],[160,167],[[]],[[]],[161,167],[[]],0,0,0,[153,25],[153,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[153,153],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[153,153],[[12,[44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[153,153]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[153,153,25]],0,0,0,0,0,0,0,0,0,0,[[153,153],153],[[153,153]],0,[[153,153],153],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[153,153]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[153,153],153],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[169,[168]]],122],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[19,1,1],1],0,0,[170,122],0,[[]],[[]],[[]],[[]],[[]],[170,19],0,0,[[]],[[]],[[]],[[]],[[]],[170,1],[[152,1,19],[[13,[[169,[168]],142]]]],[[152,1],[[13,[170,142]]]],[[[169,[171]]],[[12,[162]]]],0,0,0,0,[170,122],[[[169,[172]],167]],[[170,[173,[167]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[174,1],[175,15],[[],[[12,[[18,[176]]]]]],[[],[[12,[[18,[177]]]]]],[[],[[12,[[18,[178]]]]]],[[],[[12,[[18,[179]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],25],0,[180,180],[[]],[180],0,0,[1],[[[183,[[182,[[18,[181]]]]]],15,15]],[[175,180],15],0,0,0,0,[175,1],[175,184],[[[18,[181]]],[[12,[[18,[181]]]]]],[[]],[[]],[[15,15,15]],0,[[175,15],[[12,[180]]]],[[175,15],[[12,[[18,[181]]]]]],[[180,5],6],[[180,15,15,15]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[177,15],[178,15],[176,15],[179,15],0,0,0,[175,[[18,[185]]]],0,[[175,[18,[176]]]],[[175,[18,[177]]]],[[175,[18,[178]]]],[[175,[18,[179]]]],[[175,[18,[181]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[175,1,1],[[13,[1,186]]]],[[19,19],[[182,[187]]]],[[10,15,15,19,19,19,19,19,19,19,19,19,19,15],187],0,0,[[]],0,[[]],[[175,1,1,188],[[13,[189,186]]]],0,0,[[175,15],[[18,[177]]]],[[175,[18,[177]],[182,[[18,[177]]]],15],[[18,[178]]]],[[[18,[178]],[182,[[18,[178]]]],[182,[187]],190,15],[[18,[176]]]],[[15,180],[[18,[179]]]],[[],174],[[[18,[191]]],[[18,[175]]]],[[1,[182,[189]]],180],[[],[[18,[181]]]],[177,[[18,[181]]]],[178,[[18,[181]]]],[176,[[18,[181]]]],[179,[[18,[181]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[[]],[[]],[192,25],[[192,180]],[192],[192],[[192,15,15,15]],[[192,180,15,15,15]],[[]],[[]],[[]],[192],[192],[[],13],[[],13],[[],14],[193,25],[[],25],0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,0,0,[197,25],[[],25],0,0,0,[196,25],[[],25],0,0,[193,25],[[],25],0,0,0,0,[197,25],[[],25],0,0,[193,25],[[],25],0,0,0,[198,25],[[],25],[196,25],[[],25],0,0,0,0,0,0,0,0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,0,0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[197,25],[[],25],0,0,[196,25],[[],25],0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,[193,25],[[],25],0,0,[193,25],[[],25],0,0,[193,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,0,0,[193,25],[[],25],0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,[196,25],[[],25],0,0,[198,25],[[],25],0,0,0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,[198,25],[[],25],0,0,[193,25],[[],25],0,0,[193,25],[[],25],0,0,[193,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,[196,25],[[],25],0,0,[196,25],[[],25],0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,[193,25],[[],25],0,0,[198,25],[[],25],0,0,0,0,0,0,[197,25],[[],25],0,0,[193,25],[[],25],0,0,[193,25],[[],25],0,0,[193,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,[196,25],[[],25],0,0,0,[196,25],[[],25],0,0,[194,25],[[],25],[195,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],194],[[],197],[[],195],[[],198],[[],196],[[],193],0,[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[194,15],[197,2],[195,15],[198,15],[196,15],[193,15],0,0,0,0,0,0,[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[199,199],[200,200],[194,194],[197,197],[195,195],[198,198],[196,196],[193,193],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[194,194],44],[[197,197],44],[[195,195],44],[[198,198],44],[[196,196],44],[[193,193],44],[194,194],[197,197],[195,195],[198,198],[196,196],[193,193],[[194,194],25],[[197,197],25],[[195,195],25],[[198,198],25],[[196,196],25],[[193,193],25],0,0,[[],197],[[],201],[[],202],[203,25],[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],0,0,[[],194],[[],197],[[],195],[[],198],[[],196],[[],193],[[194,194],25],[[197,197],25],[[195,195],25],[[198,198],25],[[196,196],25],[[193,193],25],0,[[194,45]],[[197,45]],[[195,45]],[[198,45]],[[196,45]],[[193,45]],[[199,5],6],[[194,5],6],[[194,5],6],[[194,5],6],[[194,5],6],[[194,5],6],[[197,5],6],[[197,5],6],[[197,5],6],[[197,5],6],[[197,5],6],[[195,5],6],[[195,5],6],[[195,5],6],[[195,5],6],[[195,5],6],[[198,5],6],[[198,5],6],[[198,5],6],[[198,5],6],[[198,5],6],[[196,5],6],[[196,5],6],[[196,5],6],[[196,5],6],[[196,5],6],[[193,5],6],[[193,5],6],[[193,5],6],[[193,5],6],[[193,5],6],[[]],[[]],[[]],[[]],[204,199],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[12,[194]]]],[2,[[12,[197]]]],[15,[[12,[195]]]],[15,[[12,[198]]]],[15,[[12,[196]]]],[15,[[12,[193]]]],[15,194],[2,197],[15,195],[15,198],[15,196],[15,193],[15,194],[2,197],[15,195],[15,198],[15,196],[15,193],[45,194],[45,197],[45,195],[45,198],[45,196],[45,193],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[203],[205],[[206,114,115],25],[[194,49]],[[197,49]],[[195,49]],[[198,49]],[[196,49]],[[193,49]],[[]],[203,[[13,[199]]]],[203,[[13,[199]]]],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[[203,200,15]],[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],[[194,194],25],[[197,197],25],[[195,195],25],[[198,198],25],[[196,196],25],[[193,193],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37],[194,25],[197,25],[195,25],[198,25],[196,25],[193,25],[194,25],[197,25],[195,25],[198,25],[196,25],[193,25],0,0,[203],[205,207],0,[203,208],[112,[[13,[203,199]]]],[203,205],[[],[[18,[206]]]],[194,194],[197,197],[195,195],[198,198],[196,196],[193,193],[[194,194],[[12,[44]]]],[[197,197],[[12,[44]]]],[[195,195],[[12,[44]]]],[[198,198],[[12,[44]]]],[[196,196],[[12,[44]]]],[[193,193],[[12,[44]]]],[[208,2],15],[[203,200],15],[[203,15],15],[203,[[12,[209]]]],[205,209],[[203,1]],[[205,1]],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[[203,200,15]],[203],0,[203],0,[[203,[211,[210]]]],[[205,[211,[210]]]],[[194,194,25]],[[197,197,25]],[[195,195,25]],[[198,198,25]],[[196,196,25]],[[193,193,25]],[[198,2]],[[198,2]],0,0,[[206,112,121]],0,0,[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[194,194]],[[197,197]],[[195,195]],[[198,198]],[[196,196]],[[193,193]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[203],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[194,194],194],[[197,197],197],[[195,195],195],[[198,198],198],[[196,196],196],[[193,193],193],0,[[203,200,15]],[[203,15,15]],[212,25],[[],25],0,0,[212,25],[[],25],0,0,0,[212,25],[[],25],0,0,[212,25],[[],25],0,0,[212,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[212,25],[[],25],0,0,0,0,[212,25],[[],25],0,0,[212,25],[[],25],0,0,0,0,0,0,[[],[[18,[213]]]],[[],[[18,[213]]]],[[],212],[[212,212],212],[[212,212]],[[212,212],212],[[212,212]],[212,2],0,[[212,212],212],[[212,212]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[212,212],[214,214],[[]],[[]],[[212,212],44],[212,212],[[212,212],25],[215,[[18,[213]]]],[213,1],[213,184],[[212,212],212],[[],212],[[212,212],25],[[214,214],25],[[212,45]],[216],[[212,5],6],[[212,5],6],[[212,5],6],[[212,5],6],[[212,5],6],[[214,5],6],[[]],[[]],[[]],[[]],[[]],[2,[[12,[212]]]],[2,212],[2,212],[45,212],[[[0,[46,47]],48],27],[[212,49]],[213,[[18,[185]]]],[[212,212]],[[212,212],212],[[212,212],25],[[]],[[]],[[]],[[]],[[]],[212,25],[212,25],[37],0,[[],216],[[],[[18,[213]]]],[212,212],[[214,25]],[[213,214,25]],[[212,212],[[12,[44]]]],[[213,[12,[217]]],[[13,[218,186]]]],[[]],[[213,1],[[13,[1,186]]]],[[[18,[219]]]],0,[[212,212]],[[[18,[219]]]],[[212,212,25]],0,0,[[212,212],212],[[212,212]],[[212,212],212],[[]],[[]],[[212,212]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[212,212],212],0,0,0,0,[[]],[[]],[[]],[[]],[[220,15]],[[220,16]],[[]],[[]],[[221,19],2],[[221,19],15],[[]],[[]],[[]],[[221,19],19],[[221,1,1],2],[[221,19,2]],[[221,19,15]],[[221,19,19]],[[221,19,2,2,2,19],2],[[221,19,2,2,2,19],15],[[221,19,2,2,2,19],19],[[220,19,2,2,2,2],2],[[221,10,1],2],[[221,27]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[222,25],[[],25],0,0,0,0,0,[222,25],[[],25],0,0,[222,25],[[],25],0,0,0,0,0,0,0,[222,25],[[],25],0,0,[222,25],[[],25],0,0,[222,25],[[],25],0,0,[222,25],[[],25],0,0,[222,25],[[],25],0,0,0,0,0,[[],[[18,[223]]]],[[],[[18,[223]]]],[[],222],[[222,222],222],[[222,222]],[[222,222],222],[[222,222]],[222,2],0,[[222,222],222],[[222,222]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[222,222],[224,224],[[]],[[]],[[222,222],44],[222,222],[[222,222],25],[[],222],[[],224],[225,[[18,[223]]]],[223,1],[223,184],[[222,222],222],[[],222],[[222,222],25],[[222,45]],0,[[222,5],6],[[222,5],6],[[222,5],6],[[222,5],6],[[222,5],6],[[224,5],6],[[]],[[]],[[]],[[]],[2,[[12,[222]]]],[2,222],[2,222],[45,222],[[[0,[46,47]],48],27],[[222,49]],[223,[[18,[185]]]],[[222,222]],[[222,222],222],[[222,222],25],[[]],[[]],[[]],[[]],[37],[222,25],[222,25],0,[[],223],[222,222],0,[[222,222],[[12,[44]]]],[[223,[12,[217]]],[[13,[218,186]]]],[[223,2]],[[]],[[223,1],[[13,[1,186]]]],[[222,222]],[[222,222,25]],[[222,222],222],[[222,222]],[[222,222],222],[[]],[[]],[[222,222]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[222,222],222],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[226,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[226,25],[[],25],0,0,[226,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[226,25],[[],25],0,0,[226,25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],226],[112,15],[112,15],[112,15],[112,15],[112,15],[[226,226],226],[[226,226]],[[226,226],226],[[226,226]],[226,2],0,[[226,226],226],[[226,226]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,2],[112,227],[226,226],[228,228],[[]],[[]],[[226,226],44],[226,226],[[226,226],25],0,[112,2],[[226,226],226],[112],[[],226],[112],[112],[[226,226],25],[[229,229],25],[[115,115],25],[[114,114],25],[[226,45]],[[226,5],6],[[226,5],6],[[226,5],6],[[226,5],6],[[226,5],6],[[229,5],6],[[228,5],6],[[115,5],6],[[114,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[12,[226]]]],[2,226],[2,226],[45,226],[112,2],[[112,2],[[12,[228]]]],[112,115],[[[0,[46,47]],48],27],[112,2],[112,114],0,[[114,115],25],[112,25],[[226,49]],0,[121],0,[[226,226]],[112,2],[[226,226],226],[[226,226],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[226,25],[226,25],[230,25],[114,25],0,0,[112,[[12,[231]]]],[[112,15],231],[[112,15],227],[[2,2,2],112],[[],232],[[15,15],115],[15,114],[227,12],[226,226],0,[[226,226],[[12,[44]]]],[112,226],[[112,15],15],[[[18,[233]]]],[[226,226]],[[230,2,234]],[[231,2],1],[[226,226,25]],[[230,25]],[[112,121]],[[226,226],226],[[226,226]],[[226,226],226],0,[[]],[[]],[[226,226]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[226,226],226],[[112,15,15]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[18,[235]]]],[[],[[18,[235]]]],[[236,[18,[237]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],238],[239,[[18,[235]]]],0,[235,1],[235,184],[[238,[84,[[83,[82]]]],1],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[235,[[18,[185]]]],0,[[240,[18,[241]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[236,1,1],[[13,[1,186]]]],[[241,1,1],[[13,[1,186]]]],[[238,[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],0,[241,[[13,[242,186]]]],[238,[[13,[242,186]]]],[[],236],[[[18,[236]]],241],[[],235],[[],[[18,[240]]]],[[235,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[[236,[12,[217]]],[[13,[218,186]]]],[[241,[12,[217]]],[[13,[218,186]]]],[[]],[[236,1],[[13,[1,186]]]],[[241,1],[[13,[1,186]]]],[240,[[84,[[83,[82]]]]]],0,0,[241,[[13,[245,186]]]],[238,[[13,[245,186]]]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[238,[[12,[[247,[246]]]]]],0,0,[[236,1],[[13,[1,186]]]],[[241,1],[[13,[1,186]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[18,[248]]]],[[],[[183,[249]]]],[[],[[18,[248]]]],[[],[[183,[249]]]],[250],0,[[248,[18,[237]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[248,243]],0,[[251,252,25,253]],0,[254,[[18,[248]]]],[255,[[183,[249]]]],0,[248,1],[248,184],[[251,2]],[19,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[248,[[18,[185]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[248,1,1],[[13,[1,186]]]],[250,25],0,0,0,[[],250],[[],[[18,[248]]]],[[248,214,25]],[[248,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],0,[[248,[12,[217]]],[[13,[218,186]]]],[[251,253]],0,[[248,1],[[13,[1,186]]]],0,0,0,0,[250],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[248,1],[[13,[1,186]]]],0,[256,25],[[],25],0,0,[257,25],[[],25],0,0,0,0,[257,25],[[],25],0,0,[256,25],[[],25],0,0,[256,25],[[],25],0,0,[256,25],[[],25],0,0,0,0,0,0,0,[[],256],[[],257],[[256,256],256],[[257,257],257],[[256,256]],[[257,257]],[[256,256],256],[[257,257],257],[[256,256]],[[257,257]],[256,2],[257,2],0,0,[[256,256],256],[[257,257],257],[[256,256]],[[257,257]],[[]],[[]],[[]],[[]],[[]],[[]],[256,256],[257,257],[[]],[[]],[[256,256],44],[[257,257],44],[256,256],[257,257],[[256,256],25],[[257,257],25],[[256,256],256],[[257,257],257],[[],256],[[],257],[[256,256],25],[[257,257],25],[[256,45]],[[257,45]],[[256,5],6],[[256,5],6],[[256,5],6],[[256,5],6],[[256,5],6],[[257,5],6],[[257,5],6],[[257,5],6],[[257,5],6],[[257,5],6],[[]],[[]],[[]],[2,[[12,[256]]]],[2,[[12,[257]]]],[2,256],[2,257],[2,256],[2,257],[45,256],[45,257],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[256,49]],[[257,49]],[[]],[258,258],[[256,256]],[[257,257]],[[256,256],256],[[257,257],257],[[256,256],25],[[257,257],25],[[]],[[]],[[]],[256,25],[257,25],[256,25],[257,25],[258,257],[19,258],[256,256],[257,257],[[256,256],[[12,[44]]]],[[257,257],[[12,[44]]]],[[256,256]],[[257,257]],[[258,2]],0,0,[[256,256,25]],[[257,257,25]],[[256,256],256],[[257,257],257],[[256,256]],[[257,257]],[[256,256],256],[[257,257],257],[[]],[[]],[[256,256]],[[257,257]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[256,256],256],[[257,257],257],[[258,257]],[[258,10],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],259],[[],259],[260,10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[261,261],[[]],[260,262],[260,260],[263,259],0,0,[[186,186],25],[[264,264],25],0,0,0,0,[[259,[84,[[83,[82]]]]],[[13,[261,186]]]],[[186,5],6],[[260,5],6],[[264,5],6],[[]],[[]],[[]],[265,186],[[]],[204,186],[[]],[[],[[13,[186]]]],0,[[]],[[]],[[]],[[]],[[]],[260,25],[260,[[13,[[84,[[83,[82]]]],186]]]],[[[84,[[83,[82]]]],260,264],[[13,[[84,[[83,[82]]]],186]]]],[[260,264],[[13,[[84,[[83,[82]]]],186]]]],[[259,[84,[[83,[82]]]],[18,[246]]],[[13,[186]]]],[[],259],[10,260],0,[260],0,0,0,[[],[[84,[[83,[82]]]]]],[[],[[84,[[83,[82]]]]]],0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[18,[[267,[266]]]]]],[[],[[18,[[267,[266]]]]]],[[],1],[268,1],[269,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[266],[266,122],[266],[270],[271,[[18,[[267,[266]]]]]],[270],0,[266,[[18,[272]]]],0,0,[268,1],[268,184],0,[266],[[]],[[]],[[]],[[]],[[]],0,0,[268,[[18,[185]]]],[[[18,[268]]],[[13,[186]]]],[[]],[[]],[[]],[[]],[[]],[266,25],[[],[[13,[186]]]],[[[247,[272]],1]],[266],[268,184],0,[[[247,[272]],1],266],[[[247,[272]],1],270],[[184,[18,[273]]],[[18,[268]]]],[[1,1,[18,[273]]],[[18,[269]]]],0,0,0,0,[1,[[12,[1]]]],[1,[[12,[1]]]],[[268,1],[[12,[1]]]],[[269,1],[[12,[1]]]],[[1,122,1],[[12,[1]]]],[[268,1,122,1],[[12,[1]]]],[[269,1,122,1],[[12,[1]]]],0,[[],[[247,[272]]]],[268,[[247,[272]]]],0,[266],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[1,[[12,[1]]]],[1,[[12,[1]]]],[[268,1],[[12,[1]]]],[[269,1],[[12,[1]]]],[[1,122,1],[[12,[1]]]],[[268,1,122,1],[[12,[1]]]],[[269,1,122,1],[[12,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[274,274],[[]],0,0,0,0,[275],0,0,[[274,274],25],0,0,[[274,5],6],[[276,5],6],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[276,25],0,0,[[[18,[268]]],[[12,[275]]]],0,0,[276,184],0,0,0,0,[276,27],[276,27],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],184],[[[84,[[83,[82]]]]],184],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[277],[[[267,[278,[279,[278]]]]]],[[]],[[]],[[[84,[280]]],[[84,[280]]]],[[[281,[280]]],[[281,[280]]]],[[]],[[]],[[],[[18,[[267,[82]]]]]],[[],[[281,[280]]]],[[[84,[280]]]],[[[83,[278,[279,[278]]]]]],[277],[[[84,[280]]],[[281,[280]]]],[[[84,[280]]]],[18],[[[83,[278,[279,[278]]]],[18,[[83,[278,[279,[278]]]]]]]],[[]],[[[18,[280]]],[[84,[280]]]],[[]],[[]],[[]],[[]],[[]],[[[267,[278,[279,[278]]]],278],[[12,[[84,[[83,[278,[279,[278]]]]]]]]]],[[[267,[266]],[247,[272]],1],[[84,[[83,[266]]]]]],[[],[[18,[[267,[277]]]]]],0,[[]],[277,[[18,[185]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[83,[278,[279,[278]]]]],25],[[[267,[278,[279,[278]]]]]],[[[267,[278,[279,[278]]]],[279,[278]]],[[84,[[83,[278,[279,[278]]]]]]]],[[[267,[278,[279,[278]]]],[279,[278]]],[[84,[[83,[278,[279,[278]]]]]]]],[[[247,[246]],1]],[[[267,[278,[279,[278]]]],[84,[[83,[278,[279,[278]]]]]]]],[280,[[84,[280]]]],[[],[[281,[280]]]],[[[247,[[267,[278,[279,[278]]]]]],[279,[278]]],[[84,[[83,[278,[279,[278]]]]]]]],[[],[[18,[[267,[278,[279,[278]]]]]]]],[[[18,[185]]],277],[[[267,[278,[279,[278]]]],[84,[[83,[278,[279,[278]]]]]],282]],[[[267,[278,[279,[278]]]],278]],0,[[[83,[278,[279,[278]]]],25]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[[281,[280]]],[[12,[[84,[280]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[18,[283]]]],[[],[[18,[283]]]],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[284,[[18,[283]]]],[[],1],[285,1],[286,1],[287,1],[288,1],[[],184],[285,184],[286,184],[287,184],[288,184],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[13,[186]]]],[[],[[18,[185]]]],[285,[[18,[185]]]],[286,[[18,[185]]]],[287,[[18,[185]]]],[288,[[18,[185]]]],[[[18,[289]]],[[13,[186]]]],[[[84,[[83,[277]]]],[18,[289]]],[[13,[186]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[290,1,1],[[13,[1,186]]]],[[287,1,1],[[13,[1,186]]]],0,[[290,1,1,188],[[13,[189,186]]]],[[287,1,1,188],[[13,[189,186]]]],[1,[[13,[[18,[290]],186]]]],[[],[[18,[283]]]],[[],[[18,[285]]]],[[],[[18,[286]]]],[291,[[18,[287]]]],[[],[[18,[288]]]],[[290,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[[290,[12,[217]]],[[13,[218,186]]]],[[285,[12,[217]]],[[13,[218,186]]]],[[290,1],[[13,[1,186]]]],[[285,1],[[13,[1,186]]]],[[286,1],[[13,[1,186]]]],[[288,1],[[13,[1,186]]]],[283,[[84,[[83,[82]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[290,1],[[13,[1,186]]]],[[285,1],[[13,[1,186]]]],[[286,1],[[13,[1,186]]]],[[287,1],[[13,[1,186]]]],0,0,[[292,1,293],[[13,[75]]]],[[]],[[]],0,[[]],[[]],[[],[[18,[292]]]],[[292,1],[[13,[75]]]],[[],13],[[],13],[[],14],[[292,1,293],[[13,[75]]]],[[292,1,1],[[13,[1,186]]]],0,[[]],[[]],0,[[]],[[]],[[],[[18,[294]]]],[[294,[12,[217]]],[[13,[218,186]]]],[[294,1],[[13,[1,186]]]],[[],13],[[],13],[[],14],0,[[294,1],[[13,[1,186]]]],0,0,0,0,[[295,12],[[13,[[18,[296]],186]]]],[295,[[12,[1]]]],[295,[[13,[[18,[185]],186]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[295,297,1],[[13,[186]]]],[[295,[84,[[83,[82]]]],1],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],0,[[298,1,[12,[[18,[185]]]]],[[12,[[84,[[83,[277]]]]]]]],[[]],[[]],[[]],0,[[295,1],[[12,[15]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[295,10,[84,[[83,[82]]]]],[[13,[186]]]],[[295,1],[[13,[75]]]],[[295,[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[[295,[84,[[83,[82]]]],10,299],[[12,[[84,[[83,[82]]]]]]]],[[295,[18,[295]],2,10]],[[295,10,300,[12,[[18,[185]]]]],[[13,[[84,[[83,[277]]]],186]]]],[[295,10,[18,[185]]],[[13,[[84,[[83,[277]]]],186]]]],[295,[[13,[242,186]]]],[[295,10],[[13,[[84,[[83,[277]]]],186]]]],[[295,1,1,188],[[13,[189,186]]]],[[[247,[298]],1,[12,[[18,[185]]]]],[[12,[[84,[[83,[277]]]]]]]],[[[18,[295]]],301],[[[18,[268]]],[[12,[[18,[298]]]]]],[301,12],0,[[295,[12,[217]]],[[13,[218,186]]]],0,[[295,1],[[13,[1,186]]]],[[295,1],[[13,[1,186]]]],[[295,1],[[270,[47]]]],[[295,302],[[13,[1,186]]]],[[295,[84,[[83,[82]]]],10],[[13,[186]]]],[295,[[13,[184,186]]]],[298,[[84,[[83,[82]]]]]],[[295,302],[[13,[1,186]]]],[295,[[18,[295]]]],0,0,[295,[[13,[245,186]]]],0,[[295,[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[[295,1],[[13,[186]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[295,[[12,[[247,[246]]]]]],[[295,1],[[13,[1,186]]]],[[295,1],[[13,[1,186]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[303,1],[303,1],[300,19],0,0,0,[303,1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[303,303],[304,304],[299,299],[300,300],[305,305],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],305],0,0,[303,1],0,[[306,306],25],[[300,300],25],0,0,0,0,0,[305,300],0,0,0,0,0,[[306,5],6],[[303,5],6],[[304,5],6],[[299,5],6],[[305,5],6],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[303,306],[[305,300]],[[299,10]],[[305,19]],[[305,1]],[305,1],0,0,0,[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,[307,[[12,[1]]]],[308,[[12,[1]]]],[308,[[12,[1]]]],0,[[]],[[]],[[]],[[]],0,[307],0,[308,[[12,[1]]]],[308,[[12,[1]]]],[[308,1],[[12,[[86,[305]]]]]],[[]],[[]],0,[[]],[[]],[[[247,[298]],[18,[268]],303],[[12,[308]]]],[[[18,[298]],1],[[12,[307]]]],0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[309,1],25],[309],[309,309],[244,[[84,[[83,[82]]]]]],[[244,1,243],[[13,[[18,[244]],186]]]],[[309,1,310,243],[[13,[1,75]]]],0,0,[[]],[[]],[[]],[244,[[13,[1,186]]]],[[309,1],[[12,[[18,[244]]]]]],[244,[[84,[[83,[277]]]]]],0,[[]],[[]],[[]],[309],[[1,[84,[[83,[82]]]],243],244],[[],309],0,[[309,[84,[[83,[82]]]],243],[[13,[1,186]]]],[244,[[13,[1,186]]]],[[244,74,311],[[13,[1,186]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[244,[[13,[1,186]]]],0,0,0,0,0,0,0,[218,25],[[],25],0,0,0,0,0,[218,25],[[],25],0,0,0,0,0,[218,25],[[],25],0,0,0,0,0,0,0,0,0,0,[12,[[13,[[18,[296]],186]]]],[[],218],[[],[[13,[[18,[185]],186]]]],[[297,1],[[13,[186]]]],[[218,218],218],[[218,218]],[[218,218],218],[[218,218]],[218,1],0,[[218,218],218],[[218,218]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82],0,0,[218,218],[242,242],[312,312],[[]],[[]],[[]],[243],[[218,218],44],[218,218],[[297,1],[[13,[186]]]],[[218,218],25],0,[[],313],[[],217],[[],312],[[218,218],218],[[[84,[[83,[82]]]],1],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[[[18,[185]]],[[12,[[18,[185]]]]]],[217],[82],[[],218],[[218,218],25],[[312,312],25],[[218,45]],[[[84,[[83,[82]]]],184],[[12,[[84,[[83,[82]]]]]]]],[242,312],0,0,[[218,5],6],[[218,5],6],[[218,5],6],[[218,5],6],[[218,5],6],[[242,5],6],[[312,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[300,312],[1,[[12,[218]]]],[1,218],[1,218],[[[18,[185]],184],[[84,[[83,[82]]]]]],[45,218],[[[84,[[83,[82]]]],184,[18,[185]]],[[13,[[84,[[83,[82]]]],186]]]],[[[0,[46,47]],48],27],[[218,49]],[242,1],0,[82,[[84,[[83,[277]]]]]],0,[[217,314]],[[218,218]],[[218,218],218],[[218,218],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],[[13,[1,186]]]],[218,25],[242,25],[218,25],[242,25],[242,25],[242,25],[[10,[84,[[83,[82]]]]],[[13,[186]]]],[1,[[13,[75]]]],[[[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[[10,1],[[13,[[84,[[83,[277]]]],186]]]],[[10,[18,[185]]],[[13,[[84,[[83,[277]]]],186]]]],[10,[[13,[[84,[[83,[277]]]],186]]]],[[],[[13,[242,186]]]],[10,[[13,[[84,[[83,[277]]]],186]]]],[[1,1,188],[[13,[189,186]]]],[82,184],0,[[[84,[[83,[82]]]],[84,[[83,[277]]]],184],[[84,[[83,[82]]]]]],[[[84,[[83,[277]]]],184],[[84,[[83,[82]]]]]],[218,218],[[243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[82,[[12,[[84,[[83,[82]]]]]]]],0,[[218,218],[[12,[44]]]],[[[12,[217]]],[[13,[218,186]]]],0,[1,[[13,[1,186]]]],[302,[[13,[1,186]]]],[[218,218]],[[[84,[[83,[82]]]],10],[[13,[186]]]],[[],[[13,[184,186]]]],[10,[[13,[186]]]],[302,[[13,[1,186]]]],[[218,218,25]],[[82,10]],[[82,[84,[[83,[82]]]]]],0,[[],[[13,[245,186]]]],[[218,218],218],[[218,218]],[[218,218],218],[[]],[[]],[[]],[[218,218]],[[[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[1,[[13,[186]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[218,218],218],[10,[[13,[186]]]],[[],[[12,[[247,[246]]]]]],[1,[[13,[1,186]]]],0,[315,1],[[]],[[]],[[315,243]],[[]],0,[[]],[[],[[18,[315]]]],0,[[315,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[[315,[12,[217]]],[[13,[218,186]]]],0,[[315,1],[[13,[1,186]]]],0,[[],13],[[],13],[[],14],[[315,1],[[13,[1,186]]]],0,0,0,0,0,0,0,0,0,0,0,[[316,312,317],[[18,[318]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],317],[[],319],[[318,[84,[[83,[82]]]],1],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],0,0,[[]],[[]],[[]],[[]],[[],10],[[],10],0,[[],[[13,[186]]]],[[318,[281,[[83,[277]]]],[281,[[83,[277]]]],[247,[316]],312]],[[]],[[]],[[]],[[]],[[318,[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[[318,10,312,317],[[13,[[84,[[83,[277]]]],186]]]],[318,[[13,[242,186]]]],[319,318],[[],[[13,[[18,[316]],186]]]],0,0,0,[[320,10,[12,[184]]]],[[318,1],[[13,[1,186]]]],[316,[[84,[[83,[82]]]]]],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[318,[[12,[[247,[246]]]]]],0,0,0,[[321,312,313],[[18,[322]]]],[322,[[13,[[18,[185]],186]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],323],[[322,[84,[[83,[82]]]],1],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],0,0,[[]],[[]],[[]],0,[[322,[281,[[83,[277]]]],[281,[[83,[277]]]],[247,[321]],312]],[[]],[[]],[[]],[[322,1,1],[[13,[1,186]]]],[[322,10,[84,[[83,[82]]]]],[[13,[186]]]],[[322,[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[[322,10,1],[[13,[[84,[[83,[277]]]],186]]]],[[322,10,312,313],[[13,[[84,[[83,[277]]]],186]]]],[[322,10,[18,[185]]],[[13,[[84,[[83,[277]]]],186]]]],[[322,10],[[13,[[84,[[83,[277]]]],186]]]],[322,[[13,[242,186]]]],[[322,10],[[13,[[84,[[83,[277]]]],186]]]],[[322,1,1,188],[[13,[189,186]]]],[323,322],[[],[[18,[321]]]],0,0,[[322,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],0,[[322,[12,[217]]],[[13,[218,186]]]],[[322,1],[[13,[1,186]]]],[321,[[84,[[83,[82]]]]]],0,0,[322,[[13,[245,186]]]],[[322,[84,[[83,[82]]]],10],[[13,[[84,[[83,[82]]]],186]]]],[[322,1],[[13,[186]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[322,10],[[13,[186]]]],[322,[[12,[[247,[246]]]]]],[[322,1],[[13,[1,186]]]],0,0,0,0,0,[[]],[[]],[[324,325],25],[[],25],[324],[[]],[[]],[[],184],[[]],[[]],[[324,326]],0,[25],[[],13],[[],13],[[],14],0,0,[1,86],[[]],[[]],[327,189],0,[[]],[[]],[[],[[13,[327,[77,[76]]]]]],[327,121],[327,328],0,0,0,[327],[[],327],[[],13],[[],13],[[],14],0,0,0,[[1,1],3],[[329,330],2],[[331,330],2],[330,3],[[]],[[]],[[]],[[]],[[329,2,330]],[[331,2,330]],[[]],[[]],[[]],[[]],[[]],[[],329],[[],331],[[331,2,330,1],2],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,[332,25],[[],25],0,0,0,[332,25],[[],25],0,0,0,[332,25],[[],25],0,0,0,[332,25],[[],25],0,0,0,[332,25],[[],25],0,0,0,0,[[],328],0,[[],332],[[332,332],332],[[332,332]],[[332,332],332],[[332,332]],[332,27],0,[[332,332],332],[[332,332]],[[]],[[]],[332,332],[[]],[[332,332],44],[332,332],[[332,332],25],[[332,332],332],[[],332],[[332,332],25],[[332,45]],[[332,5],6],[[332,5],6],[[332,5],6],[[332,5],6],[[332,5],6],0,[[]],[27,[[12,[332]]]],[27,332],[27,332],[45,332],[[[0,[46,47]],48],27],[[332,49]],[[],[[13,[121,[77,[76]]]]]],[[332,332]],[[332,332],332],[[332,332],25],[[]],[332,25],[332,25],[[],25],0,[332,332],0,0,[[332,332],[[12,[44]]]],[[332,332]],[[332,332,25]],[[332,332],332],[[332,332]],[[332,332],332],[[]],[[332,332]],[[],13],[[],13],[[],14],[[332,332],332],0,0,0,0,0,0,[[9,1]],[[9,27]],[[122,1]],[[122,27]],[[9,1]],[[9,27]],[[122,1]],[[122,27]],[[27,27],27],[[9,[173,[27]]],9],[[122,[173,[27]]],122],[[27,27],27],[[9,[173,[27]]],9],[[122,[173,[27]]],122],[[9,1]],[9,122],[122,9],[9],[9],[9,27],[122,27],[122,[[12,[333]]]],[[9,1],[[12,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[122,122],[204,204],[[]],[[]],[[]],[[9,9],44],[[122,122],44],[[9,27],9],[[9,9],25],[[122,122],25],[[9,5],6],[[9,5],6],[[9,5],6],[[9,5],6],[[9,5],6],[[9,5],6],[[122,5],6],[[122,5],6],[[122,5],6],[[122,5],6],[[122,5],6],[[122,5],6],[[204,5],6],[[334,5],6],[[9,1],[[12,[9]]]],[[]],[[]],[[]],[[]],[[[0,[46,47]],48],27],[[122,49]],[[]],[[]],[[]],[[]],[[27,27],25],[[9,[173,[27]]],25],[[122,[173,[27]]],25],[27,9],[27,122],[27,122],[9,335],[9,335],[9,335],[9,335],[9,335],[9,336],[[9,9],[[12,[44]]]],[[122,122],[[12,[44]]]],[9,[[13,[47,204]]]],[[9,9],[[12,[1]]]],[[9,27]],[[9,1]],[[9,9]],[[122,122]],[[122,27]],[[122,1]],[[9,27]],[[9,1]],[[122,27]],[[122,1]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[9,[[13,[204]]]],[[],9],[[],122],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[337,1],[[12,[122]]]],[[337,1],[[12,[122]]]],[[338,330],[[13,[339,340]]]],[337,[[12,[[189,[76]]]]]],[337,[[12,[[189,[341]]]]]],[[342,1],[[12,[122]]]],[[343,1],2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[342,122,1],25],[338,338],[[]],0,0,[[338,[339,[2]],330]],[[337,[189,[341]]]],[[337,[189,[76]]]],[[342,122,1]],[333],0,[[344,344],25],[[342,1],[[12,[122]]]],[[342,122,27],1],[[345,5],6],[[344,5],6],[[338,5],6],[342,1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[342,122,1],1],[[342,122,1],122],[338,343],[[],[[12,[[182,[333]]]]]],[333],[337],[[]],0,[[342,122,122]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],343],[[],342],[[],333],[343,338],[[],337],[346,12],[27,1],[347,122],[333,1],0,[[342,122,1],25],0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[12,[189]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[349,[348]],350,351],[[13,[352]]]],[189],[189],[[[354,[353]]]],[[355,5],6],[[356,5],6],[[[354,[[0,[357,353]]]],5],6],[[[77,[[0,[357,353]]]],5],6],[[358,5],6],[[359,5],6],[[360,5],6],[[[361,[[0,[357,348]]]],5],6],[[[349,[[0,[357,348]]]],5],6],[[362,5],6],[[352,5],6],[[121,5],6],[[363,5],6],[121,[[13,[327,[77,[76]]]]]],[189,328],[[363,189],328],[[]],[[]],[[]],[352,[[77,[76]]]],[352,[[77,[364]]]],[[]],[352,[[77,[341]]]],[[]],[362,358],[[]],[362,359],[362,360],[[]],[[]],[[]],[365,362],[[]],[[]],[[]],[[]],[[[0,[47,[366,[353]]]],[189,[353]],351],[[13,[[354,[353]],[77,[353]]]]]],[[[354,[353]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[47,367,189,351],[[13,[354,77]]]],[[[361,[348]],[367,[341]],[189,[341]],351,351],[[13,[[354,[341]],[77,[341]]]]]],[[[361,[348]],[367,[76]],[189,[76]],351,351],[[13,[[354,[76]],[77,[76]]]]]],[[47,367,189,351,351],[[13,[354,77]]]],[[[361,[348]],[367,[341]],[189,[341]],351,351],[[13,[[354,[341]],[77,[341]]]]]],[[[361,[348]],[367,[76]],[189,[76]],351,351],[[13,[[354,[76]],[77,[76]]]]]],[[121,[367,[341]],[189,[341]],351,351],[[13,[[354,[341]],[77,[341]]]]]],[[121,[367,[76]],[189,[76]],351,351],[[13,[[354,[76]],[77,[76]]]]]],[[[367,[353]]],[[354,[353]]]],[[328,348],[[361,[348]]]],[348,[[349,[348]]]],[[328,9],121],[[[349,[348]],350],[[13,[328,362]]]],[[[349,[348]],350],[[13,[328,362]]]],0,[121,328],0,0,0,[356,27],[356,122],[9,355],[[[361,[348]],9],355],[[121,9],355],[9,[[12,[122]]]],[367,[[13,[189,360]]]],[[[361,[348]],[367,[76]]],[[13,[[189,[76]],360]]]],[[[361,[348]],[367,[341]]],[[13,[[189,[341]],360]]]],[[121,[367,[341]]],[[13,[[189,[341]],360]]]],[[121,[367,[76]]],[[13,[[189,[76]],360]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[367,[[13,[358]]]],[[[361,[348]],[367,[76]]],[[13,[358]]]],[[[361,[348]],[367,[341]]],[[13,[358]]]],[[121,[367,[341]]],[[13,[358]]]],[[121,[367,[76]]],[[13,[358]]]],[[121,[368,[9]],27],[[13,[358]]]],[[367,351],[[13,[354,359]]]],[[[361,[348]],[367,[341]],351],[[13,[[354,[341]],359]]]],[[[361,[348]],[367,[76]],351],[[13,[[354,[76]],359]]]],[[121,[367,[341]],351],[[13,[[354,[341]],359]]]],[[121,[367,[76]],351],[[13,[[354,[76]],359]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[367,[353]],27]],[[[189,[353]],27]],[[[367,[353]],27]],[[[189,[353]],27]],[[[189,[353]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,76],[341,341],[364,364],[[[367,[[0,[369,353]]]]],[[367,[[0,[369,353]]]]]],[[[370,[[0,[369,353]]]]],[[370,[[0,[369,353]]]]]],[[[189,[[0,[369,353]]]]],[[189,[[0,[369,353]]]]]],[[[371,[[0,[369,353]]]]],[[371,[[0,[369,353]]]]]],[[[372,[[0,[369,353]]]]],[[372,[[0,[369,353]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,76],44],[[341,341],44],[[364,364],44],[[[367,[[0,[373,353]]]],[367,[[0,[373,353]]]]],44],[[[189,[[0,[373,353]]]],[189,[[0,[373,353]]]]],44],[9,[[367,[353]]]],[122,[[189,[353]]]],0,0,0,[[76,76],25],[[341,341],25],[[364,364],25],[[[367,[[0,[374,353]]]],[367,[[0,[374,353]]]]],25],[[[370,[[0,[374,353]]]],[370,[[0,[374,353]]]]],25],[[[189,[[0,[374,353]]]],[189,[[0,[374,353]]]]],25],[[[371,[[0,[374,353]]]],[371,[[0,[374,353]]]]],25],[[[372,[[0,[374,353]]]],[372,[[0,[374,353]]]]],25],[[76,5],6],[[341,5],6],[[364,5],6],[[[367,[353]],5],6],[[[370,[353]],5],6],[[375,5],6],[[375,5],6],[[[189,[353]],5],6],[[[371,[353]],5],6],[[[372,[353]],5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,[[13,[[189,[353]],375]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[370,[353]]],12],[[[371,[353]]],12],[[[372,[353]]],12],[[[367,[76]]],335],[[[367,[376]]],335],[[[367,[353]]],335],[[[367,[353]]],335],[[[367,[353]]],335],[[76,76],[[12,[44]]]],[[341,341],[[12,[44]]]],[[364,364],[[12,[44]]]],[[[367,[[0,[377,353]]]],[367,[[0,[377,353]]]]],[[12,[44]]]],[[[189,[[0,[377,353]]]],[189,[[0,[377,353]]]]],[[12,[44]]]],[[[367,[353]],[367,[353]]],[[370,[353]]]],0,0,0,0,0,[[[367,[353]]],9],[[[189,[353]]],122],0,0,[[[367,[353]],27]],[[[367,[353]],[367,[353]]]],[[[189,[353]],27]],[[[189,[353]],[189,[353]]]],[[[367,[353]],27]],[[[189,[353]],27]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],184],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[351,25],[[],25],0,0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,0,0,[351,25],[[],25],0,0,0,0,0,0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,0,0,0,0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,[351,25],[[],25],0,0,0,0,[350,122],[[],351],[[351,351],351],[[351,351]],[[351,351],351],[[351,351]],[351,27],0,[[351,351],351],[[351,351]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[365,365],[350,350],[351,351],[328,328],[335,335],[336,336],[[]],[[]],[[]],[[]],[[]],[[]],[[351,351],44],[[335,335],44],[[336,336],44],[351,351],[[351,351],25],[[],328],[[351,351],351],[[],351],0,0,[[365,365],25],[[351,351],25],[[335,335],25],[[336,336],25],[[351,45]],[350,351],[[365,5],6],[[350,5],6],[[351,5],6],[[351,5],6],[[351,5],6],[[351,5],6],[[351,5],6],[[328,5],6],[[335,5],6],[[336,5],6],[[328,351,88],[[13,[[77,[76]]]]]],[[328,351,88],[[13,[[77,[76]]]]]],[350,[[13,[189,365]]]],[[]],[[]],[[]],[378,351],[[]],[[]],[[]],[27,[[12,[351]]]],[27,351],[27,351],[45,351],[350,27],[[[0,[46,47]],48],27],[[351,49]],[350],[[328,1]],[[328,335]],[[328,1]],[[328,335]],[[351,351]],[[351,351],351],[[351,351],25],[[]],[[]],[[]],[[]],[[]],[[]],[351,25],[351,25],[350,25],[[],350],[[],328],[19,335],[19,336],[19,335],[19,336],[351,351],[[351,351],[[12,[44]]]],[[335,335],[[12,[44]]]],[[336,336],[[12,[44]]]],[350],[[351,351]],[[351,351,25]],[[350,122,351]],[[350,27]],[[350,351]],[[350,189,351]],[350],[[351,351],351],[[351,351]],[[351,351],351],[[]],[[]],[[]],[[]],[[]],[[]],[[351,351]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[351,351],351],[350,25],[328],[[]],[[1,1]],[[]],0,0,0,0,0,0,[379,2],[380,379],[[]],[[]],[[]],[[]],[[]],[[]],[[379,2]],[379],0,[[]],[[]],[[]],[2,380],[381,381],[[]],[[]],[[]],[1,379],0,[379,1],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[[382,1],[[12,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[383,383],[[]],[[382,9,1]],[[],383],0,[[]],[[]],[[]],[[]],[[383,384]],[383],[383],[[],[[8,[382]]]],[[]],[[]],[[]],[[]],[[]],0,[383],0,[383],[[9,1],385],[[9,1],384],[[],382],[[],383],[383],0,0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[386,386],44],[[386,386],25],[[386,5],6],[[387,5],6],[[]],[[]],[[]],0,[[]],[[]],[[386,386],[[12,[44]]]],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[388],[[],9],[[[211,[389]]],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[211,[[0,[369,389]]]]],[[211,[[0,[369,389]]]]]],[[]],[[390,391,1],[[211,[392]]]],[[19,19,1,391],[[211,[393]]]],[[394,1],[[211,[210]]]],[[],395],[[],[[18,[388]]]],[388],[[[18,[396]]],[[12,[[18,[396]]]]]],[[],211],0,[209],0,[[209,5],6],[[[211,[[0,[357,389]]]],5],6],[[]],[[]],[[]],[[]],[[],25],[[]],[[]],[[],1],[[[211,[397]]],1],0,[[]],[[]],[[]],[[]],[[]],0,0,[[],1],[[[211,[389]]],1],0,[[],207],0,[[[18,[396]]],388],[[9,1],[[211,[389]]]],0,[[]],[[]],[[],209],[[[211,[393]]]],[[[211,[210]]]],[[[211,[392]]]],[1],[[]],[[[211,[210]]]],[[[211,[210]]]],[[[211,[392]]]],[[[211,[393]]]],[[388,391]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0,[[],211],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[391,[[12,[207]]]],[[398,391],[[12,[207]]]],[[]],[[398,391,207]],[[]],[[]],0,[207,399],[[],398],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,[[]],[[]],[47,15],[[],15],[[47,1],15],0,[[]],[[]],[15,[[400,[19]]]],[[],[[400,[19]]]],[401,402],0,0,0,[[],13],[[],13],0,[[],14],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[207,207],[210,210],[[]],[[]],[[207,207],44],[[],207],0,[[207,207],25],[[207,5],6],[[210,5],6],[[]],[[]],[[]],[[]],[[[0,[46,47]],48],27],[[207,49]],[[]],[[]],[[]],[[]],[[207,207],[[12,[44]]]],0,[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[391,391],[390,390],[392,392],[[]],[[]],[[]],[[391,391],44],[[],391],0,[[391,391],25],[[391,5],6],[[390,5],6],0,[[]],[[]],[[]],[[]],[[[0,[46,47]],48],27],[[391,49]],0,0,[[]],[[]],[[]],[[]],[401,[[400,[19]]]],0,[[],391],[[391,391],[[12,[44]]]],0,[[401,19]],0,[[]],[[]],[[]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,[[[18,[403]]],[[12,[19]]]],[[19,[18,[403]]]],[[]],[[]],[[]],[[]],[393,393],[[]],[[404,401]],[[391,19]],0,[404,[[400,[19]]]],0,[[]],[[]],[[]],[[]],0,[[[211,[393]]]],0,[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[184,10],184],[[184,10]],[1,[[13,[405]]]],[1,[[13,[405]]]],[[47,88],25],0,[[47,88],25],[47,[[406,[47]]]],[184],[[]],[184,10],[184,10],[184,[[182,[2,407]]]],[[]],[184],[184,10],[184,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[184,10],[[]],[184,10],[[]],[47,47],[[]],[[]],[[]],[184,1],0,0,0,[[47,45],[[408,[47]]]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[184],[[]],[184,184],[[]],[[184,184]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[],44],[[184,184],44],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],0,0,0,0,0,0,0,0,[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[47,1],[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[]],[[],184],[184,10],[184,10],0,0,[414,[[13,[184]]]],[[184,[415,[1]]],416],[[]],[[]],[47,[[417,[47]]]],0,[[],25],[[184,320],25],[[184,184],25],[[184,10],25],[[184,10],25],[[184,[418,[10]]],25],[[47,45],25],[[47,45,88],25],[45],[[184,45]],[[184,45]],[[184,45]],[[184,45]],[[184,45]],[[184,45]],[[184,[415,[1]]]],[[]],[[184,253]],[[184,[418,[10]]]],[[184,253]],[[184,184]],[[184,10]],[1],[[184,1]],[[184,1]],0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[47,88],12],[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[184,5],[[13,[423]]]],[[184,5],[[13,[423]]]],[[47,88]],[[47,88]],0,0,[[]],[[[418,[10]]],184],[[]],[[[86,[10,407]]],184],[10,184],[184,184],[10,184],[253,184],[45],[45,184],[45,184],[45,184],[45,184],[45,184],[45,184],[[2,1,1],184],[10,[[13,[184]]]],[[],[[13,[184,424]]]],[[],184],[[[182,[2,407]]],[[13,[184,425]]]],[[],[[418,[10]]]],[[[182,[2,407]]],184],[47,[[426,[47]]]],[[],25],[[47,45],25],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],0,[[],25],[[47,45],25],[[184,49]],0,0,0,[[184,[427,[1]]],10],[[184,428],10],[[184,[429,[1]]],10],[[184,[430,[1]]],10],[[184,[431,[1]]],10],[[184,[368,[1]]],10],[[184,[368,[1]]],10],[[184,[431,[1]]],10],[[184,[427,[1]]],10],[[184,[429,[1]]],10],[[184,[430,[1]]],10],[[184,428],10],[[184,1,253]],[[184,1,10]],[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[184,[[86,[10,407]]]],[184,[[182,[2,407]]]],[184,[[436,[435]]]],[[]],[184],[[184,10]],[[184,10],25],[184,25],[[],25],[[47,88],25],[[184,10],25],[47,25],[[47,88],25],[[47,88],25],[[184,10],25],[47,12],[[],25],[[47,45],25],[184,10],[184,1],[[],1],0,0,[[],25],[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],0,[[],25],[[184,10],25],[[184,[418,[10]]],25],[[184,10],25],[[47,45],25],[[],184],[[],12],[[],12],[47,[[13,[439]]]],[1,12],[1,12],0,[[],[[12,[44]]]],[[184,184],[[12,[44]]]],[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[47,[[441,[47]]]],[184,[[12,[253]]]],[[47,88],[[12,[1]]]],[47,442],[[184,253]],[[184,10]],[[47,88],12],[[184,1],253],[[184,443]],[[184,[415,[1]],10]],[[184,1]],[[184,1]],[[184,88]],[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[47,88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],[[184,447],13],[[184,1]],[184],[[]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],[[184,1],184],[[47,1],[[450,[47]]]],0,[[184,10],[[12,[10]]]],[[184,10],[[12,[10]]]],[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],0,0,[[]],[[],184],[184,184],0,[[184,1]],[47],[[47,88]],[[47,88],454],[[47,88],454],[[],13],[[],13],[[],13],[[],13],[[47,88]],[[184,1],[[13,[455]]]],[[184,1],[[13,[455]]]],[[47,88],454],0,[[],14],[[[0,[47,262]]]],0,[1,184],[[184,253],[[13,[423]]]],[[184,10],[[13,[423]]]],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[330,1],0,[[330,1],[[13,[330,457]]]],[330,2],[330,2],[330,[[13,[339,340]]]],[330,[[13,[339,340]]]],[1,[[13,[330,457]]]],[[]],[[]],[[]],[[]],[[]],[[]],[47,47],[330,330],[457,457],[340,340],[[]],[[]],[[]],[330,[[339,[2]]]],[[2,330]],[[[339,[2]],330]],[[330,330],25],[[457,457],25],[[340,340],25],[[330,330],[[13,[457]]]],[[330,330],[[13,[330,457]]]],[[330,5],[[13,[423]]]],[[457,5],[[13,[423]]]],[[457,5],[[13,[423]]]],[[340,5],[[13,[423]]]],[[340,5],[[13,[423]]]],[47,330],[[],330],[[]],[[]],[[]],[[1,1],[[13,[330,457]]]],[[1,1],330],[[[0,[46,47]],48],27],[[[339,[2]],330,330],[[13,[339,340]]]],[[[339,[2]],330,330],[[13,[339,340]]]],[[330,49]],[[]],[[]],[[]],[[],330],[330,330],[[330,1],1],[458],[458],[[2,330,1],2],[[330,1],[[13,[457]]]],[[330,1],[[13,[330,457]]]],[[[339,[2]],330,330],[[13,[339,340]]]],[330,1],0,[[]],[[]],[[]],[[],184],[[],184],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[[]],[[14,14],44],[459,[[12,[459]]]],[459,[[12,[459]]]],[459,[[12,[459]]]],[459,459],[459,459],[459,459],[459,[[12,[459]]]],[459,[[12,[459]]]],[459,[[12,[459]]]],[459,459],[459,459],[459,459],[[14,14],25],[[459,5],[[13,[423]]]],[[459,5],[[13,[423]]]],[[459,5],[[13,[423]]]],[[458,5],[[13,[423]]]],[[14,5],[[13,[423]]]],[[]],[[[0,[46,47]],48],27],[[14,49]],[[]],[459,25],[459,25],[459,25],[[],14],[[14,14],[[12,[44]]]],[458],[[458,47],458],[[458,282],458],[458,458],[[458,282],458],[460,[[12,[47]]]],[460,12],0,[[]],[[],13],[[],13],[[],14],[[],14],[[],14],[[],10],[47,10],[458,25],[458,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15],[15],[15],[15],[[15,15,15,15],36],[[461,461,461,461]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,462],[[15,15],462],[15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,27],[[2,15,15,15],2],[[2,27,27,27],2],[[2,15,15,15],2],[[2,27,27,27],2],[[15,15],15],[[27,27],27],[[15,15],15],[[27,27],27],[[15,15,15],15],[[27,15,15],27],[[36,36],2],[[463,463],2],[[36,36],2],[[463,463],2],[[36,36],2],[[463,463],2],[[36,36],2],[[463,463],2],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[36,36],[463,463],[[15,15],15],[[27,15],27],[2],[2],[2],[2],[[15,15],15],[[27,27],27],[[19,19],19],[[15,15],15],[[27,27],27],[[19,19],19],[[15,15],15],[[27,27],27],[19,19],[15,15],[27,27],[[19,19],19],[[15,15],15],[[27,27],27],[[19,19],19],[[15,15],15],[[27,27],27],[[19,19],19],[[15,15],15],[[27,27],27],[15,15],[27,27],[15,15],[27,27],[464,464],[464,464],[464,464],[464,464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],15],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464,464],464],[[465,465,465],465],[[466,466,466],466],[461,466],[467,464],[468,465],[461,466],[469,465],[470,466],[467,464],[467,464],[2,464],[19,464],[467,464],[468,465],[467,464],[461,466],[467,464],[464,464],[464,464],[468,465],[465,468],[465,466],[465,464],[461,466],[466,461],[466,465],[466,464],[467,464],[464,465],[464,466],[464,467],[465,465],[466,466],[[464,464],464],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[465,465],465],[[465,465],2],[[466,466],466],[[466,466],2],[[464,464],464],[[464,464],19],[[464,464],464],[[464,464],2],[[464,464],464],[[464,464],2],[[464,464],464],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],464],[[464,464],19],[[464,464],464],[[464,464],2],[[464,464],464],[[464,464],2],[[464,464],464],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[464,464],[464,464],[467,464],[467,464],[464,467],[464,467],[467,464],[464,467],[467,465],[464,466],[464,467],[464,467],[464,467],[467,464],[467,464],[467,464],[467,464],[467,464],[467,464],[467,465],[467,464],[467,464],[467,464],[[466,466],471],[466,472],[465,467],[465,467],[465,461],[467,466],[466,464],[466,464],[461,465],[466,467],[465,469],[464,467],[464,467],[464,467],[464,467],[464,467],[464,467],[464,36],[466,470],[465,467],[465,467],[466,464],[466,464],[464,467],[464,467],[464,467],[464,467],[464,467],[464,467],[[464,464],464],[[465,465],465],[[466,466],466],[[466,466],466],[[466,471,471],466],[[464,464,464],464],[[464,464,464],464],[[464,464,464],464],[[464,464,464],464],[464,36],[464,36],[464,463],[464,36],[465,468],[466,461],[464,467],[466,461],[464,467],[464,467],[[465,465,464],465],[[466,466,464],466],[465,465],[466,466],[[465,465,465],465],[[466,466,466],466],[[465,465,465],465],[[466,466,466],466],[[465,465,465],465],[[466,466,466],466],[[465,465,465],465],[[466,466,466],466],[[465,465,465],465],[[466,466,466],466],[[465,465,465],465],[[466,466,466],466],[465,465],[466,466],[465,465],[466,466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[36,464],464],[[463,467],464],[[469,467],465],[[470,464],466],[[36,464],467],[[463,464],464],[[469,464],465],[[470,464],461],[[464,473],464],[[464,36],464],[[464,463],464],[[464,474],464],[[465,468],465],[[466,461],466],[[464,467],464],[[466,461],466],[[464,467],464],[[464,467],464],[464,464],[36,464],[463,464],[469,465],[470,466],[464,464],[[470,470],466],[[469,469],465],[[467,467],464],[473,464],[36,464],[463,464],[474,464],[469,465],[470,466],[464,464],[464,464],[464,464],[[464,464,464],464],[[464,464,464],464],[[464,464],464],[[464,464],464],[[464,464,19,464],464],[[464,464,2,464],464],[[464,464,2,464],464],[[464,464,15,464],464],[[465,464,2,465],465],[[466,464,2,466],466],[[465,465,465,2],465],[[466,466,466,2],466],[[465,465,465,2],465],[[466,466,466,2],466],[[465,465,465,2],465],[[466,466,466,2],466],[[465,465,465,2],465],[[466,466,466,2],466],[[465,465,465,2],465],[[466,466,466,2],466],[[465,465,465,2],465],[[466,466,466,2],466],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,15,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464,464],464],[[464,15,464,464],464],[[464,19,464,464],464],[[464,15,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,19,464,464],464],[[464,15,464,464],464],[[15,464,464],15],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[466,2,461],466],[[464,2,467],464],[[464,15,467],464],[[464,2,467],464],[[464,2,467],464],[[465,2,468],465],[[466,2,461],466],[[464,19,467],464],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[2,465,465],2],[[2,466,466],2],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,15,464],464],[[465,2,465],465],[[466,2,466],466],[[2,19,464]],[[2,2,464]],[[2,2,464]],[[2,15,464]],[[2,2,465]],[[2,2,466]],[[464,2,464],464],[[464,2,464],464],[[467,2,466],467],[[464,2,467],464],[[464,2,467],464],[[467,19,464],467],[[474,19,464]],[[467,2,464],467],[[464,2,467],464],[[467,2,464],467],[[465,2,467],465],[[466,2,464],466],[[474,2,464]],[[474,2,464]],[[467,2,464],467],[[467,2,464],467],[[467,2,464],467],[[474,2,464]],[[474,2,464]],[[474,2,464]],[[464,19,467],464],[[464,2,467],464],[[464,2,467],464],[[464,2,467],464],[[464,2,467],464],[[464,2,467],464],[[465,2,467],465],[[464,19,467],464],[[464,2,467],464],[[464,2,467],464],[[471,19,466,466],471],[[472,2,466],472],[[467,2,465],467],[[467,2,465],467],[[461,2,465],461],[[466,2,467],466],[[464,2,466],464],[[464,2,466],464],[[467,2,466],467],[[467,19,464],467],[[474,19,464]],[[467,2,464],467],[[467,2,464],467],[[474,2,464]],[[474,2,464]],[[467,2,464],467],[[467,2,464],467],[[467,2,464],467],[[474,2,464]],[[474,2,464]],[[474,2,464]],[[467,2,465],467],[[467,2,465],467],[[464,2,466],464],[[464,2,466],464],[[467,19,464],467],[[474,19,464]],[[467,2,464],467],[[467,2,464],467],[[474,2,464]],[[474,2,464]],[[467,2,464],467],[[467,2,464],467],[[467,2,464],467],[[474,2,464]],[[474,2,464]],[[474,2,464]],[[464,19,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[466,2,471,471],466],[[464,2,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,15,464],464],[[465,2,465],465],[[466,2,466],466],[[464,19,473],464],[[464,2,36],464],[[464,2,463],464],[[464,15,474],464],[[465,2,469],465],[[466,2,470],466],[[461,2,466],461],[[467,2,464],467],[[465,2,465,464],465],[[466,2,466,464],466],[[465,2,465,465],465],[[466,2,466,466],466],[[465,2,465,465],465],[[466,2,466,466],466],[[465,2,465,465],465],[[466,2,466,466],466],[[465,2,465,465],465],[[466,2,466,466],466],[[465,2,465,465],465],[[466,2,466,466],466],[[465,2,465,465],465],[[466,2,466,466],466],[[465,2,465],465],[[466,2,466],466],[[465,2,465],465],[[466,2,466],466],[[464,15,464,464],464],[[464,15,464,464],464],[[464,15,464,464],464],[[464,36,464,464],464],[[464,463,467,464],464],[[465,469,467,465],465],[[466,470,464,466],466],[[467,36,464,467],467],[[464,463,464,464],464],[[465,469,464,465],465],[[461,470,464,461],461],[[466,2,466,461],466],[[464,2,464,467],464],[[464,2,36],464],[[464,2,463],464],[[465,2,469],465],[[466,2,470],466],[[464,19,473],464],[[464,2,36],464],[[464,2,463],464],[[464,15,474],464],[[465,2,469],465],[[466,2,470],466],[[464,2,464],464],[[464,2,464],464],[[464,2,464,464],464],[[464,19,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,15,464],464],[[465,2,465],465],[[466,2,466],466],[[465,2,465],465],[[466,2,466],466],[[466,2,466],466],[[464,2,464,464],464],[[464,2,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464,464],464],[[464,19,464,464],464],[[464,19,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[464,19,464,464],464],[[464,15,464,464],464],[[464,19,464,464],464],[[465,2,465],465],[[466,2,466],466],[[465,2,465,464],465],[[466,2,466,464],466],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,464,465],465],[[466,2,464,466],466],[[464,2,464],464],[[465,2,465],465],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,464,465],465],[[466,2,464,466],466],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,15,464],464],[[465,2,465],465],[[466,2,466],466],[[464,2,464],464],[[464,2,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,2,464],464],[[464,2,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[465,2,465],465],[[466,2,466],466],[[465,2,465],465],[[466,2,466],466],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,473],464],[[464,2,36],464],[[464,2,463],464],[[464,15,474],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,2,464],464],[[464,15,464,464],464],[[466,2,466,466],466],[[465,2,465,465],465],[[464,2,464,464],464],[[464,2,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464],464],[[464,19,464],464],[[464,19,464,467],464],[[464,2,464,467],464],[[464,2,464,467],464],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[465,2,465],465],[[466,2,466],466],[[464,19,464,467],464],[[464,2,464,467],464],[[464,2,464,467],464],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,19,464,467],464],[[464,2,464,467],464],[[464,2,464,467],464],[[464,19,464],464],[[464,2,464],464],[[464,2,464],464],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[36,2,464]],[[463,2,464]],[[469,2,465]],[[470,2,466]],[[473,19,464]],[[36,2,464]],[[463,2,464]],[[474,15,464]],[[469,2,465]],[[470,2,466]],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464,464],464],[[464,15,464,464],464],[[464,19,464,464],464],[[464,15,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[19,464,464],19],[[2,464,464],2],[[2,464,464],2],[[15,464,464],15],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,19,464,464],464],[[464,2,464,464],464],[[464,2,464,464],464],[[464,15,464,464],464],[[465,2,465,465],465],[[466,2,466,466],466],[[464,2,464,464],464],[[464,2,464,464],464],[[36,464],464],[[463,464],464],[[469,464],465],[[470,464],466],[[36,464,464]],[[463,464,464]],[[469,464,465]],[[470,464,466]],[[19,464],464],[[2,464],464],[[2,464],464],[[15,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464,464],464],[[15,464,464],464],[[19,464,464],464],[[15,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,464,464],464],[[2,464,464],464],[[2,464,464],464],[[2,464,464],464],[[19,464,464],464],[[15,464,464],464],[[2,461],466],[[2,467],464],[[15,467],464],[[2,467],464],[[2,467],464],[[2,468],465],[[2,461],466],[[19,467],464],[[19,464],464],[[2,464],464],[[2,464],464],[[15,464],464],[[2,465],465],[[2,466],466],[[2,464],464],[[2,464],464],[[2,466],467],[[2,467],464],[[2,467],464],[[19,464],467],[[2,464],467],[[2,467],464],[[2,464],467],[[2,467],465],[[2,464],466],[[2,464],467],[[2,464],467],[[2,464],467],[[19,467],464],[[2,467],464],[[2,467],464],[[2,467],464],[[2,467],464],[[2,467],464],[[2,467],465],[[19,467],464],[[2,467],464],[[2,467],464],[[19,466,466],471],[[2,466],472],[[2,465],467],[[2,465],467],[[2,465],461],[[2,467],466],[[2,466],464],[[2,466],464],[[2,466],467],[[19,464],467],[[2,464],467],[[2,464],467],[[2,464],467],[[2,464],467],[[2,464],467],[[2,465],467],[[2,465],467],[[2,466],464],[[2,466],464],[[19,464],467],[[2,464],467],[[2,464],467],[[2,464],467],[[2,464],467],[[2,464],467],[[19,464,464],464],[[2,465,465],465],[[2,466,466],466],[[2,466,471,471],466],[[2,464,464,464],464],[[2,464,464,464],464],[[2,464,464,464],464],[[2,464,464,464],464],[[19,464],464],[[2,464],464],[[2,464],464],[[15,464],464],[[2,465],465],[[2,466],466],[[19,473],464],[[2,36],464],[[2,463],464],[[15,474],464],[[2,469],465],[[2,470],466],[[2,466],461],[[2,464],467],[[2,465,465,464],465],[[2,466,466,464],466],[[2,465,465,465],465],[[2,466,466,466],466],[[2,465,465,465],465],[[2,466,466,466],466],[[2,465,465,465],465],[[2,466,466,466],466],[[2,465,465,465],465],[[2,466,466,466],466],[[2,465,465,465],465],[[2,466,466,466],466],[[2,465,465,465],465],[[2,466,466,466],466],[[2,465],465],[[2,466],466],[[2,465],465],[[2,466],466],[[15,464,464],464],[[15,464,464],464],[[15,464,464],464],[[2,466,461],466],[[2,464,467],464],[[2,36],464],[[2,463],464],[[2,469],465],[[2,470],466],[[19,473],464],[[2,36],464],[[2,463],464],[[15,474],464],[[2,469],465],[[2,470],466],[[2,464],464],[[2,464],464],[[2,464,464],464],[[19,464,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464],464],[[2,464],464],[[2,464],464],[[15,464],464],[[2,465],465],[[2,466],466],[[2,465],465],[[2,466],466],[[2,466],466],[[2,464,464],464],[[2,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464,464],464],[[19,464,464],464],[[19,464,464],464],[[19,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[19,464,464],464],[[15,464,464],464],[[19,464,464],464],[[2,465],465],[[2,466],466],[[2,465,464],465],[[2,466,464],466],[[19,464,464,464],464],[[2,464,464,464],464],[[2,464,464,464],464],[[15,464,464,464],464],[[2,465,464,465],465],[[2,466,464,466],466],[[2,464],464],[[2,465],465],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,464,465],465],[[2,464,466],466],[[19,464],464],[[2,464],464],[[2,464],464],[[15,464],464],[[2,465],465],[[2,466],466],[[2,464],464],[[2,464],464],[[2,464,464],464],[[2,464,464],464],[[2,464],464],[[2,464],464],[[2,464,464],464],[[2,464,464],464],[[2,465],465],[[2,466],466],[[2,465],465],[[2,466],466],[[2,465,465],465],[[2,466,466],466],[[19,473],464],[[2,36],464],[[2,463],464],[[15,474],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[19,464,464,464],464],[[2,464,464,464],464],[[2,464,464,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[19,464,464,464],464],[[2,464,464,464],464],[[2,464,464,464],464],[[2,464],464],[[15,464,464],464],[[2,466,466],466],[[2,465,465],465],[[2,464,464],464],[[2,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464],464],[[19,464],464],[[19,464,467],464],[[2,464,467],464],[[2,464,467],464],[[19,464],464],[[2,464],464],[[2,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[2,465],465],[[2,466],466],[[19,464,467],464],[[2,464,467],464],[[2,464,467],464],[[19,464],464],[[2,464],464],[[2,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[19,464,467],464],[[2,464,467],464],[[2,464,467],464],[[19,464],464],[[2,464],464],[[2,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464,464],464],[[15,464,464],464],[[19,464,464],464],[[15,464,464],464],[[2,464,464,464],464],[[2,464,464,464],464],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[19,464,464],464],[[2,464,464],464],[[2,464,464],464],[[15,464,464],464],[[2,465,465],465],[[2,466,466],466],[[2,464,464],464],[[2,464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[465,465],[466,466],[466,466],[464,36],[465,36],[466,36],[464,19],[464,15],[19,464],[15,464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[464,464],[465,465],[465,465],[466,466],[[464,464],464],[[466,464],466],[[465,464],465],[[466,464],466],[[464,464,464],464],[[464,464,464],464],[[464,464,464],464],[[464,464,464],464],[[465,464,465],465],[[466,464,466],466],[464,464],[465,465],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,465],465],[[464,466],466],[464,464],[464,464],[464,464],[464,464],[465,465],[466,466],[466,466],[464,464],[464,464],[[464,464],464],[[464,464],464],[464,464],[464,464],[[464,464],464],[[464,464],464],[465,465],[466,466],[465,465],[466,466],[466,466],[[464,464],464],[[465,465],465],[[466,466],466],[473,464],[36,464],[463,464],[474,464],[469,465],[470,466],[[473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473],464],[[36,36,36,36,36,36,36,36],464],[[463,463,463,463],464],[[474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474],464],[[461,461],466],[[468,468],465],[[467,467],464],[[469,469,469,469],465],[[470,470,470,470,470,470,470,470],466],[[473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473],464],[[36,36,36,36,36,36,36,36],464],[[463,463,463,463],464],[[474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474],464],[[461,461],466],[[468,468],465],[[467,467],464],[[469,469,469,469],465],[[470,470,470,470,470,470,470,470],466],[[],465],[[],466],[[],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464,464],464],[[464,464,464],464],[[464,464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464,464],464],[[464,464,464],464],[[464,464,464],464],[464,464],[[464,464],464],[[466,466],466],[[465,465],465],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[464,464],[464,464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,467],464],[[464,467],464],[[464,467],464],[464,464],[464,464],[464,464],[464,464],[[464,464],464],[[464,464],464],[[464,464],464],[465,465],[466,466],[[464,467],464],[[464,467],464],[[464,467],464],[464,464],[464,464],[464,464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,467],464],[[464,467],464],[[464,467],464],[464,464],[464,464],[464,464],[464,464],[[464,464],464],[[464,464],464],[[464,464],464],[[36,464]],[[463,464]],[[469,465]],[[470,466]],[[464,464]],[[470,470,466]],[[469,469,465]],[[467,467,464]],[[473,464]],[[36,464]],[[463,464]],[[474,464]],[[469,465]],[[470,466]],[[464,464]],[[469,465]],[[470,466]],[[464,464]],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464,464],464],[[464,464,464],464],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[465,465],36],[[466,466],36],[[464,464],36],[[464,464],19],[[464,464],2],[[464,464],2],[[464,464],15],[[465,465],36],[[466,466],36],[[464,464],36],[[465,465],36],[[466,466],36],[[464,464],36],[[],465],[[],466],[[],464],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[464,464],464],[[465,465],465],[[466,466],466],[[464,464],464],[[]],[[]],[468,465],[461,466],[467,464],[475,475],[475,475],[475,475],[475,475],[476,476],[477,477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],27],[461,477],[465,476],[467,475],[464,475],[467,475],[467,475],[2,475],[19,475],[467,475],[468,476],[461,477],[467,475],[475,475],[475,475],[468,476],[465,476],[476,468],[476,465],[476,477],[476,475],[461,477],[466,477],[477,461],[477,466],[477,476],[477,475],[467,475],[464,475],[475,476],[475,477],[475,467],[475,464],[[475,475],475],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[476,476],2],[[477,477],19],[[476,476],2],[[477,477],19],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[476,476],2],[[477,477],19],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[476,476],2],[[477,477],19],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[476,476],2],[[477,477],19],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[476,476],2],[[477,477],19],[[476,476],2],[[477,477],19],[[476,476],2],[[477,477],19],[[476,476],2],[[477,477],19],[[476,476],2],[[477,477],19],[475,475],[475,475],[475,477],[475,477],[476,464],[476,464],[476,466],[464,477],[477,475],[477,475],[466,476],[477,464],[464,475],[467,475],[475,464],[475,464],[464,475],[475,467],[464,476],[475,477],[475,476],[475,467],[475,464],[475,467],[464,475],[467,475],[467,475],[464,475],[467,475],[464,475],[464,476],[475,477],[475,476],[464,475],[467,475],[467,475],[[477,477],478],[477,471],[476,464],[476,464],[476,466],[476,477],[464,477],[477,475],[477,475],[466,476],[477,464],[477,476],[475,464],[475,464],[475,467],[475,467],[475,464],[475,467],[475,36],[476,464],[476,464],[477,475],[477,475],[476,464],[476,464],[477,475],[477,475],[475,464],[475,464],[475,467],[475,467],[475,464],[475,467],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[[477,478,478],477],[[475,475,475],475],[[475,475,475],475],[[475,475,475],475],[[475,475,475],475],[477,461],[476,465],[475,467],[475,464],[[476,476,475],476],[[477,477,475],477],[[476,476,475],476],[[477,477,475],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[[476,476,476],476],[[477,477,477],477],[476,476],[477,477],[476,476],[477,477],[476,476],[477,477],[476,476],[477,477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,2],475],[[464,2],475],[[464,2],476],[[475,2],477],[[2,475,475]],[[2,464,475]],[[2,464,476]],[[2,475,477]],[[475,2],464],[[475,2],475],[[475,2],476],[[475,2],466],[[2,475,464]],[[2,475,475]],[[2,475,476]],[[2,475,466]],[[477,461],477],[[476,465],476],[[475,467],475],[[475,464],475],[36,19],[[19,19],19],[[19,19],19],[19,19],[19,19],[[19,19],19],[[19,19],36],[[19,19],19],[[19,19],19],[[19,19],19],[36,475],[463,475],[469,476],[470,477],[36,475],[473,475],[36,475],[463,475],[474,475],[469,476],[470,477],[36,475],[475,475],[475,475],[[475,475,475],475],[[475,475,475],475],[[475,475],475],[[475,475],475],[[475,475,15,475],475],[[475,475,19,475],475],[[475,475,2,475],475],[[475,475,27,475],475],[[476,475,2,476],476],[[477,475,19,477],477],[19,36],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[476,476,476,2],476],[[477,477,477,19],477],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,27,475],475],[[476,2,476],476],[[477,19,477],477],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475,475],475],[[475,27,475,475],475],[[475,15,475,475],475],[[475,27,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,15,475,475],475],[[475,27,475,475],475],[[27,475,475],27],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[477,19,461],477],[[476,2,465],476],[[475,19,467],475],[[475,2,464],475],[[475,27,467],475],[[475,19,467],475],[[475,2,467],475],[[476,2,468],476],[[477,19,461],477],[[475,15,467],475],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[2,476,476],2],[[19,477,477],19],[[2,476,476],2],[[19,477,477],19],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[2,476,476],2],[[19,477,477],19],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[2,476,476],2],[[19,477,477],19],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[2,476,476],2],[[19,477,477],19],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[2,476,476],2],[[19,477,477],19],[[2,476,476],2],[[19,477,477],19],[[2,476,476],2],[[19,477,477],19],[[2,476,476],2],[[19,477,477],19],[[2,476,476],2],[[19,477,477],19],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,27,475],475],[[476,2,476],476],[[477,19,477],477],[[2,15,475]],[[2,19,475]],[[2,2,475]],[[2,27,475]],[[2,2,476]],[[2,19,477]],[[475,19,475],475],[[475,2,475],475],[[477,19,475],477],[[477,19,475],477],[[464,2,476],464],[[464,2,476],464],[[466,2,476],466],[[477,19,464],477],[[475,19,477],475],[[475,19,477],475],[[476,2,466],476],[[464,19,477],464],[[475,19,464],475],[[475,2,467],475],[[464,15,475],464],[[474,15,475]],[[464,19,475],464],[[475,2,464],475],[[467,19,475],467],[[476,2,464],476],[[477,19,475],477],[[474,19,475]],[[474,19,475]],[[476,2,475],476],[[467,2,475],467],[[464,2,475],464],[[467,2,475],467],[[474,2,475]],[[474,2,475]],[[474,2,475]],[[475,15,464],475],[[475,19,467],475],[[475,2,467],475],[[475,19,464],475],[[475,2,467],475],[[475,2,464],475],[[476,2,464],476],[[477,19,475],477],[[476,2,475],476],[[475,15,464],475],[[475,19,467],475],[[475,2,467],475],[[478,15,477,477],478],[[471,19,477],471],[[464,2,476],464],[[464,2,476],464],[[466,2,476],466],[[477,2,476],477],[[477,19,464],477],[[475,19,477],475],[[475,19,477],475],[[476,2,466],476],[[464,19,477],464],[[476,2,477],476],[[464,15,475],464],[[474,15,475]],[[464,19,475],464],[[467,19,475],467],[[474,19,475]],[[474,19,475]],[[467,2,475],467],[[464,2,475],464],[[467,2,475],467],[[474,2,475]],[[474,2,475]],[[474,2,475]],[[464,2,476],464],[[464,2,476],464],[[475,19,477],475],[[475,19,477],475],[[464,2,476],464],[[464,2,476],464],[[475,19,477],475],[[475,19,477],475],[[464,15,475],464],[[474,15,475]],[[464,19,475],464],[[467,19,475],467],[[474,19,475]],[[474,19,475]],[[467,2,475],467],[[464,2,475],464],[[467,2,475],467],[[474,2,475]],[[474,2,475]],[[474,2,475]],[[475,15,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[477,19,478,478],477],[[475,19,475,475],475],[[475,19,475,475],475],[[475,19,475,475],475],[[475,19,475,475],475],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,27,475],475],[[476,2,476],476],[[477,19,477],477],[[475,15,473],475],[[475,19,36],475],[[475,2,463],475],[[475,27,474],475],[[476,2,469],476],[[477,19,470],477],[[461,2,477],461],[[465,2,476],465],[[467,2,475],467],[[464,2,475],464],[[476,2,476,475],476],[[477,19,477,475],477],[[476,2,476,475],476],[[477,19,477,475],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[475,27,475,475],475],[[475,27,475,475],475],[[475,27,475,475],475],[[475,19,475,2],475],[[475,2,464,2],475],[[476,2,464,2],476],[[477,19,475,2],477],[[2,19,475,475]],[[2,2,464,475]],[[2,2,464,476]],[[2,19,475,477]],[[464,2,475,2],464],[[475,2,475,2],475],[[476,2,475,2],476],[[466,2,475,2],466],[[2,2,475,464]],[[2,2,475,475]],[[2,2,475,476]],[[2,2,475,466]],[[477,19,477,461],477],[[476,2,476,465],476],[[475,19,475,467],475],[[475,2,475,464],475],[[475,19,36],475],[[475,2,463],475],[[476,2,469],476],[[477,19,470],477],[[475,15,473],475],[[475,19,36],475],[[475,2,463],475],[[475,27,474],475],[[476,2,469],476],[[477,19,470],477],[[475,19,475],475],[[475,2,475],475],[[475,19,475,475],475],[[475,15,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,27,475],475],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[477,19,477],477],[[475,2,475,475],475],[[475,2,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475,475],475],[[475,15,475,475],475],[[475,15,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[475,15,475,475],475],[[475,27,475,475],475],[[475,15,475,475],475],[[476,2,476],476],[[477,19,477],477],[[475,19,475,475],475],[[476,2,476,475],476],[[477,19,477,475],477],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,475,476],476],[[477,19,475,477],477],[[475,2,475],475],[[476,2,476],476],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,475,476],476],[[477,19,475,477],477],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,27,475],475],[[476,2,476],476],[[477,19,477],477],[[19,475],36],[[2,475],463],[[2,476],469],[[19,477],470],[[19,475],36],[[2,475],463],[[19,475],36],[[2,475],463],[[19,475],15],[[2,475],27],[[2,476],469],[[19,477],470],[[19,475],36],[[2,475],463],[[19,475],15],[[2,475],27],[[2,476],469],[[19,477],470],[[19,475],36],[[2,475],463],[[2,476],469],[[19,477],470],[[19,475],36],[[2,475],463],[[475,19,475],475],[[475,2,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,19,475],475],[[475,2,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,473],475],[[475,19,36],475],[[475,2,463],475],[[475,27,474],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,19,475],475],[[475,27,475,475],475],[[477,19,477,477],477],[[476,2,476,476],476],[[475,19,475,475],475],[[475,2,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475],475],[[475,15,475],475],[[475,15,475,467],475],[[475,19,475,467],475],[[475,2,475,467],475],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[476,2,476],476],[[477,19,477],477],[[476,2,476],476],[[477,19,477],477],[[475,15,475,467],475],[[475,19,475,467],475],[[475,2,475,467],475],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,15,475,467],475],[[475,19,475,467],475],[[475,2,475,467],475],[[475,15,475],475],[[475,19,475],475],[[475,2,475],475],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[36,19,475]],[[463,2,475]],[[469,2,476]],[[470,19,477]],[[473,15,475]],[[36,19,475]],[[463,2,475]],[[474,27,475]],[[469,2,476]],[[470,19,477]],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475,475],475],[[475,27,475,475],475],[[475,15,475,475],475],[[475,27,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[15,475,475],15],[[19,475,475],19],[[2,475,475],2],[[27,475,475],27],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[475,15,475,475],475],[[475,19,475,475],475],[[475,2,475,475],475],[[475,27,475,475],475],[[476,2,476,476],476],[[477,19,477,477],477],[[475,19,475,475],475],[[475,2,475,475],475],[[15,475],475],[[19,475],475],[[2,475],475],[[27,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[15,475,475],475],[[27,475,475],475],[[15,475,475],475],[[27,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[19,475,475],475],[[2,475,475],475],[[19,475,475],475],[[2,475,475],475],[[15,475,475],475],[[27,475,475],475],[[19,461],477],[[2,465],476],[[19,467],475],[[2,464],475],[[27,467],475],[[19,467],475],[[2,467],475],[[2,468],476],[[19,461],477],[[15,467],475],[[15,475],475],[[19,475],475],[[2,475],475],[[27,475],475],[[2,476],476],[[19,477],477],[[19,475],475],[[2,475],475],[[19,475],477],[[19,475],477],[[2,476],464],[[2,476],464],[[2,476],466],[[19,464],477],[[19,477],475],[[19,477],475],[[2,466],476],[[19,477],464],[[19,464],475],[[2,467],475],[[15,475],464],[[19,475],464],[[2,464],475],[[19,475],467],[[2,464],476],[[19,475],477],[[2,475],467],[[2,475],464],[[2,475],467],[[15,464],475],[[19,467],475],[[2,467],475],[[19,464],475],[[2,467],475],[[2,464],475],[[2,464],476],[[19,475],477],[[15,464],475],[[19,467],475],[[2,467],475],[[15,477,477],478],[[19,477],471],[[2,476],464],[[2,476],464],[[2,476],466],[[19,464],477],[[19,477],475],[[19,477],475],[[2,466],476],[[19,477],464],[[15,475],464],[[19,475],464],[[19,475],467],[[2,475],467],[[2,475],464],[[2,475],467],[[2,476],464],[[2,476],464],[[19,477],475],[[19,477],475],[[2,476],464],[[2,476],464],[[19,477],475],[[19,477],475],[[15,475],464],[[19,475],464],[[19,475],467],[[2,475],467],[[2,475],464],[[2,475],467],[[15,475,475],475],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[19,477,478,478],477],[[19,475,475,475],475],[[19,475,475,475],475],[[19,475,475,475],475],[[19,475,475,475],475],[[15,475],475],[[19,475],475],[[2,475],475],[[27,475],475],[[2,476],476],[[19,477],477],[[15,473],475],[[19,36],475],[[2,463],475],[[27,474],475],[[2,469],476],[[19,470],477],[[2,477],461],[[2,476],465],[[2,475],467],[[2,475],464],[[2,476,476,475],476],[[19,477,477,475],477],[[2,476,476,475],476],[[19,477,477,475],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476,476,476],476],[[19,477,477,477],477],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[27,475,475],475],[[27,475,475],475],[[27,475,475],475],[[19,477,461],477],[[2,476,465],476],[[19,475,467],475],[[2,475,464],475],[[19,36],475],[[2,463],475],[[2,469],476],[[19,470],477],[[15,473],475],[[19,36],475],[[2,463],475],[[27,474],475],[[2,469],476],[[19,470],477],[[19,475],475],[[2,475],475],[[19,475,475],475],[[15,475,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[15,475],475],[[19,475],475],[[2,475],475],[[27,475],475],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[19,477],477],[[2,475,475],475],[[2,475,475],475],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[15,475,475],475],[[15,475,475],475],[[15,475,475],475],[[15,475,475],475],[[19,475,475],475],[[27,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[15,475,475],475],[[27,475,475],475],[[15,475,475],475],[[2,476],476],[[19,477],477],[[2,476,475],476],[[19,477,475],477],[[15,475,475,475],475],[[19,475,475,475],475],[[2,475,475,475],475],[[27,475,475,475],475],[[2,476,475,476],476],[[19,477,475,477],477],[[2,475],475],[[2,476],476],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,475,476],476],[[19,475,477],477],[[15,475],475],[[19,475],475],[[2,475],475],[[27,475],475],[[2,476],476],[[19,477],477],[[19,475],475],[[2,475],475],[[19,475,475],475],[[2,475,475],475],[[19,475],475],[[2,475],475],[[19,475,475],475],[[2,475,475],475],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[15,473],475],[[19,36],475],[[2,463],475],[[27,474],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[15,475,475,475],475],[[19,475,475,475],475],[[2,475,475,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[15,475,475,475],475],[[19,475,475,475],475],[[2,475,475,475],475],[[19,475],475],[[27,475,475],475],[[19,477,477],477],[[2,476,476],476],[[19,475,475],475],[[2,475,475],475],[[2,476,476],476],[[19,477,477],477],[[15,475],475],[[15,475],475],[[15,475,467],475],[[19,475,467],475],[[2,475,467],475],[[15,475],475],[[19,475],475],[[2,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[2,476],476],[[19,477],477],[[2,476],476],[[19,477],477],[[15,475,467],475],[[19,475,467],475],[[2,475,467],475],[[15,475],475],[[19,475],475],[[2,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[15,475,467],475],[[19,475,467],475],[[2,475,467],475],[[15,475],475],[[19,475],475],[[2,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[2,476,476],476],[[19,477,477],477],[[15,475,475],475],[[27,475,475],475],[[15,475,475],475],[[27,475,475],475],[[19,475,475,475],475],[[2,475,475,475],475],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[15,475,475],475],[[19,475,475],475],[[2,475,475],475],[[27,475,475],475],[[2,476,476],476],[[19,477,477],477],[[19,475,475],475],[[2,475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[476,476],[477,477],[477,477],[475,15],[475,27],[15,475],[27,475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[476,476],[477,477],[[475,475],475],[[476,475],476],[[477,475],477],[[475,475,475],475],[[475,475,475],475],[[475,475,475],475],[[475,475,475],475],[[476,475,476],476],[[477,475,477],477],[475,475],[476,476],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,476],476],[[475,477],477],[475,475],[475,475],[475,475],[475,475],[476,476],[477,477],[475,36],[475,463],[476,469],[477,470],[475,36],[475,463],[475,36],[475,463],[475,15],[475,27],[476,469],[477,470],[475,36],[475,463],[475,15],[475,27],[476,469],[477,470],[475,36],[475,463],[476,469],[477,470],[475,36],[475,463],[475,475],[475,475],[[475,475],475],[[475,475],475],[475,475],[475,475],[[475,475],475],[[475,475],475],[476,476],[477,477],[476,476],[477,477],[476,476],[477,477],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[473,475],[36,475],[463,475],[474,475],[469,476],[470,477],[[36,36,36,36],475],[[463,463,463,463],475],[[469,469,469,469],476],[[470,470,470,470],477],[[473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473,473],475],[[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36],475],[[463,463,463,463,463,463,463,463],475],[[474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474],475],[[469,469,469,469,469,469,469,469],476],[[470,470,470,470,470,470,470,470,470,470,470,470,470,470,470,470],477],[[36,36,36,36],475],[[463,463,463,463],475],[[469,469,469,469],476],[[470,470,470,470],477],[[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36],475],[[463,463,463,463,463,463,463,463],475],[[469,469,469,469,469,469,469,469],476],[[470,470,470,470,470,470,470,470,470,470,470,470,470,470,470,470],477],[[],477],[[],475],[[],476],[[],477],[[],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475,475],475],[[475,475,475],475],[[475,475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475,475],475],[[475,475,475],475],[[475,475,475],475],[475,475],[[475,475],475],[[477,477],477],[[476,476],476],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[475,475],[475,475],[[475,467],475],[[475,467],475],[[475,467],475],[475,475],[475,475],[475,475],[[475,475],475],[[475,475],475],[[475,475],475],[476,476],[477,477],[476,476],[477,477],[[475,467],475],[[475,467],475],[[475,467],475],[475,475],[475,475],[475,475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,467],475],[[475,467],475],[[475,467],475],[475,475],[475,475],[475,475],[[475,475],475],[[475,475],475],[[475,475],475],[[36,475]],[[463,475]],[[469,476]],[[470,477]],[[36,475]],[[473,475]],[[36,475]],[[463,475]],[[474,475]],[[469,476]],[[470,477]],[[36,475]],[[469,476]],[[470,477]],[[463,475]],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[476,476],476],[[477,477],477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475,475],475],[[475,475,475],475],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[475,475],15],[[475,475],19],[[475,475],2],[[475,475],27],[[],477],[[],475],[[],476],[[],477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[475,475],475],[[475,475],475],[[475,475],475],[[475,475],475],[[476,476],476],[[477,477],477],[[475,475],475],[[475,475],475],[[475,475],475],[468,476],[465,476],[461,477],[466,477],[467,475],[464,475],[467,467],[467,467],[467,467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[467,467],[467,467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],19],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467,467],467],[[468,468,468],468],[[461,461,461],461],[470,461],[467,467],[467,467],[2,467],[19,467],[467,467],[468,468],[461,461],[467,467],[467,467],[467,467],[468,461],[468,467],[461,468],[461,467],[467,468],[467,461],[468,468],[461,461],[[468,468],468],[[461,461],461],[2],[[467,467],467],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[468,468],2],[[461,461],461],[[461,461],2],[[468,468],2],[[461,461],2],[[468,468],468],[[468,468],2],[[461,461],461],[[461,461],2],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,36,467,36],36],[[467,36,467,36],36],[[467,36,467,36],36],[[467,36,467,36],467],[[467,36,467,36],36],[[467,36,467,36],36],[[467,36,467,36],36],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],36],[[467,467],36],[[467,467],36],[[467,467],467],[[467,467],36],[[467,467],36],[[467,467],36],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],2],[[467,467],467],[[467,467],2],[[467,467],2],[[467,467],467],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[467,467],[467,467],[[15,19],15],[[15,15],15],[[27,27],27],[[15,2],15],[[461,36],461],[[468,463],468],[[461,463],461],[468,36],[468,463],[468,36],[468,463],[[461,468],461],[468,15],[468,27],[[461,36],461],[[468,463],468],[[461,463],461],[461,36],[461,463],[[468,461],468],[461,36],[461,463],[461,15],[461,27],[[461,15],461],[[468,27],468],[[461,27],461],[[461,36],461],[461,36],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[467,468],[467,461],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[467,468],[467,467],[467,467],[467,467],[[468,36],468],[[461,36],461],[[468,463],468],[[461,463],461],[[461,461],472],[468,467],[468,467],[468,461],[467,461],[461,467],[461,467],[461,468],[461,467],[468,469],[468,36],[468,463],[468,36],[468,463],[468,463],[[461,468],461],[468,15],[468,27],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[467,36],[467,463],[467,463],[[468,36],468],[36,467],[[461,36],461],[[468,463],468],[463,467],[[461,463],461],[[468,463],468],[463,467],[461,470],[461,36],[461,463],[[468,461],468],[461,36],[461,463],[461,15],[461,27],[468,36],[468,463],[468,36],[468,463],[468,15],[468,27],[461,36],[461,463],[461,36],[461,463],[461,15],[461,27],[461,36],[468,467],[468,467],[461,467],[461,467],[468,36],[468,463],[468,36],[468,463],[468,463],[468,15],[468,27],[461,36],[461,463],[461,36],[461,463],[461,15],[461,27],[[468,15],468],[[461,15],461],[[468,27],468],[[461,27],461],[467,467],[467,467],[467,467],[467,467],[467,467],[467,467],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[461,472,472],461],[[467,467,467],467],[[467,467,467],467],[[467,467,467],467],[[467,467,467],467],[467,36],[467,36],[467,463],[467,36],[461,36],[[467,467],467],[[468,468,467],468],[[461,461,467],461],[[468,468,467],468],[[461,461,467],461],[[468,468,467],468],[[461,461,467],461],[468,468],[461,461],[[468,468],468],[[461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[468,468,468],468],[[461,461,461],461],[[],15],[468,468],[461,461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[468,468],[461,461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[36,467],467],[[463,467],467],[[469,467],468],[[470,467],461],[[36,467],467],[[463,467],467],[[469,467],468],[[470,467],461],[[467,36],467],[[467,36],467],[[467,463],467],[[467,36],467],[[461,461],461],[[467,467],467],[467,467],[[]],[469,468],[470,461],[36,467],[463,467],[469,468],[469,468],[470,461],[470,461],[469,468],[467,467],[470,461],[469,468],[[468,469],468],[467,467],[[468,469],468],[469,468],[470,461],[473,467],[36,467],[463,467],[474,467],[469,468],[470,461],[467,467],[2,467],[467,467],[467,467],[[467,467,467],467],[[467,467,467],467],[[467,467],467],[[467,467],467],[[467,467,2,467],467],[[467,467,2,467],467],[[467,467,2,467],467],[[467,467,19,467],467],[[468,467,2,468],468],[[461,467,2,461],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[468,468,468,2],468],[[461,461,461,2],461],[[467,2,467],467],[[467,2,467],467],[[467,19,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[19,467,467],19],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[467,19,467],467],[[467,2,467],467],[[467,2,467],467],[[461,2,461],461],[[467,2,467],467],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,468,468],2],[[2,461,461],2],[[2,468,468],2],[[2,461,461],2],[[2,468,468],2],[[2,461,461],2],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,19,467],467],[[468,2,468],468],[[461,2,461],461],[[2,2,467]],[[2,2,467]],[[2,2,467]],[[2,19,467]],[[2,2,468]],[[2,2,461]],[[467,2,467],467],[[467,2,467],467],[[467,2,461],467],[[461,2,461,468],461],[[468,2,468,461],468],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[468,2,467],468],[[461,2,467],461],[[474,2,467]],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[474,2,467]],[[474,2,467]],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[468,2,467],468],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[472,2,461,461],472],[[467,2,468],467],[[467,2,468],467],[[461,2,468],461],[[461,2,467],461],[[467,2,461],467],[[467,2,461],467],[[467,2,461],467],[[461,2,461,468],461],[[467,2,467],467],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[474,2,467]],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[474,2,467]],[[474,2,467]],[[474,2,467]],[[468,2,468,461],468],[[467,2,468],467],[[467,2,468],467],[[467,2,461],467],[[467,2,461],467],[[467,2,467],467],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[474,2,467]],[[474,2,467]],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[474,2,467]],[[474,2,467]],[[474,2,467]],[[467,2,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[461,2,472,472],461],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,19,467],467],[[468,2,468],468],[[461,2,461],461],[[467,2,473],467],[[467,2,36],467],[[467,2,463],467],[[467,19,474],467],[[468,2,469],468],[[461,2,470],461],[[468,2,468,467],468],[[461,2,461,467],461],[[468,2,468,467],468],[[461,2,461,467],461],[[468,2,468,467],468],[[461,2,461,467],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,19,467,467],467],[[467,19,467,467],467],[[467,19,467,467],467],[[467,36,467,467],467],[[467,463,467,467],467],[[468,469,467,468],468],[[461,470,467,461],461],[[467,36,467,467],467],[[467,463,467,467],467],[[468,469,467,468],468],[[461,470,467,461],461],[[467,2,36],467],[[467,2,463],467],[[468,2,469],468],[[461,2,470],461],[[467,2,473],467],[[467,2,36],467],[[467,2,463],467],[[467,19,474],467],[[468,2,469],468],[[461,2,470],461],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,19,467],467],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468],468],[[461,2,461],461],[[461,2,461],461],[[467,2,467,467],467],[[467,2,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[468,2,468],468],[[461,2,461],461],[[468,2,468,467],468],[[461,2,461,467],461],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,467,468],468],[[461,2,467,461],461],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,19,467],467],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,473],467],[[467,2,36],467],[[467,2,463],467],[[467,19,474],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[468,2,468],468],[[461,2,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[36,2,467]],[[463,2,467]],[[469,2,468]],[[470,2,461]],[[473,2,467]],[[36,2,467]],[[463,2,467]],[[474,19,467]],[[469,2,468]],[[470,2,461]],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[2,467,467],2],[[2,467,467],2],[[2,467,467],2],[[19,467,467],19],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,2,467,467],467],[[467,2,467,467],467],[[467,19,467,467],467],[[468,2,468,468],468],[[461,2,461,461],461],[[467,2,467,467],467],[[467,2,467,467],467],[[36,467],467],[[463,467],467],[[469,467],468],[[470,467],461],[[467,467,474]],[[36,467,467]],[[463,467,467]],[[469,467,468]],[[470,467,461]],[[2,467],467],[[2,467],467],[[19,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[19,467],467],[[2,467],467],[[2,467],467],[[2,461],461],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[19,467],467],[[2,468],468],[[2,461],461],[[2,467],467],[[2,467],467],[[2,461],467],[[2,461,468],461],[[2,468,461],468],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],468],[[2,467],461],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],468],[[2,467],467],[[2,467],467],[[2,467],467],[[2,461,461],472],[[2,468],467],[[2,468],467],[[2,468],461],[[2,467],461],[[2,461],467],[[2,461],467],[[2,461],467],[[2,461,468],461],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,468,461],468],[[2,468],467],[[2,468],467],[[2,461],467],[[2,461],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,461,472,472],461],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[19,467],467],[[2,468],468],[[2,461],461],[[2,473],467],[[2,36],467],[[2,463],467],[[19,474],467],[[2,469],468],[[2,470],461],[[2,468,468,467],468],[[2,461,461,467],461],[[2,468,468,467],468],[[2,461,461,467],461],[[2,468,468,467],468],[[2,461,461,467],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468,468,468],468],[[2,461,461,461],461],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[19,467,467],467],[[19,467,467],467],[[19,467,467],467],[[2,36],467],[[2,463],467],[[2,469],468],[[2,470],461],[[2,473],467],[[2,36],467],[[2,463],467],[[19,474],467],[[2,469],468],[[2,470],461],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467],467],[[2,467],467],[[2,467],467],[[19,467],467],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468],468],[[2,461],461],[[2,461],461],[[2,467,467],467],[[2,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[2,468],468],[[2,461],461],[[2,468,467],468],[[2,461,467],461],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[19,467,467,467],467],[[2,468,467,468],468],[[2,461,467,461],461],[[2,467,467],467],[[19,467,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[19,467],467],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,473],467],[[2,36],467],[[2,463],467],[[19,474],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,468],468],[[2,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467],467],[[2,467],467],[[2,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[19,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,467,467,467],467],[[2,467,467,467],467],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[2,467,467],467],[[2,467,467],467],[[19,467,467],467],[[2,468,468],468],[[2,461,461],461],[[2,467,467],467],[[2,467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[]],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[467,467],[467,467],[[468,468],468],[[461,461],461],[468,468],[461,461],[[461,461],461],[461,461],[[461,461],461],[467,36],[468,36],[461,36],[467,2],[467,19],[2,467],[19,467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[]],[468,468],[461,461],[[468,467],468],[[461,467],461],[[467,467,467],467],[[467,467,467],467],[[467,467,467],467],[[467,467,467],467],[[468,467,468],468],[[461,467,461],461],[[467,467],467],[[467,467],467],[467,467],[467,467],[467,467],[467,467],[474],[468,468],[461,461],[[468,468],468],[[461,461],461],[461,461],[461,461],[467,467],[467,467],[[467,467],467],[[467,467],467],[467,467],[467,467],[[467,467],467],[[467,467],467],[468,468],[461,461],[[468,468],468],[[461,461],461],[468,468],[461,461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[461,461],[461,461],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[473,467],[36,467],[463,467],[474,467],[469,468],[470,461],[[473,473,473,473,473,473,473,473],467],[[36,36,36,36],467],[[463,463],467],[[474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474],467],[[469,469],468],[469,468],[[470,470,470,470],461],[470,461],[469,468],[470,461],[15],[[473,473,473,473,473,473,473,473],467],[[36,36,36,36],467],[[474,474,474,474,474,474,474,474,474,474,474,474,474,474,474,474],467],[[469,469],468],[[470,470,470,470],461],[[],468],[[],461],[[],467],[[]],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467,467],467],[[467,467,467],467],[[467,467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467,467],467],[[467,467,467],467],[[467,467,467],467],[467,467],[[467,467],467],[[468,468],468],[[461,461],461],[467,467],[467,467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[467,467],[467,467],[467,467],[467,467],[[467,467],467],[[467,467],467],[[467,467],467],[468,468],[461,461],[[468,468],468],[[461,461],461],[[468,468],468],[461,461],[[467,467],467],[[467,467],467],[[467,467],467],[467,467],[467,467],[467,467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[467,467],[467,467],[467,467],[467,467],[[467,467],467],[[467,467],467],[[467,467],467],[[469,468]],[[470,461]],[[36,467]],[[463,467]],[[469,468]],[[469,468]],[[470,461]],[[470,461]],[[469,468]],[[467,467]],[[470,461]],[[469,468]],[[467,467]],[[469,468]],[[469,468]],[[470,461]],[[473,467]],[[36,467]],[[463,467]],[[474,467]],[[469,468]],[[470,461]],[[467,467]],[[469,468]],[[470,461]],[[469,468]],[[467,467]],[[36,36]],[[463,463]],[[470,461]],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467,467],467],[[467,467,467],467],[467,36],[[467,467],36],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[467,467],36],[[468,468],36],[[461,461],36],[[467,467],36],[[467,467],2],[[467,467],2],[[467,467],2],[[467,467],19],[[468,468],36],[[461,461],36],[[467,467],36],[[468,468],36],[[461,461],36],[[467,467],36],[15,36],[27,463],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[468,468],36],[[461,461],36],[[],468],[[],461],[[],467],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[467,467],467],[[468,468],468],[[461,461],461],[[467,467],467],[[15,15,15],15],[[27,27,27],27],[[15,15],15],[[27,27],27],[[15,15],15],[[27,27],27],[36,36],[463,36],[19,36],[15,36],[27,36],[19,36],[15,36],[27,36],[[],27],[[15,15]],[[27,27]],[[2,15,15,15],2],[[2,27,27,27],2],[15,15],[27,27],[15,15],[27,27],[15,15],[27,27],[[]],[15,15],[[],15],[[]],[15,27],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[2,27]],[[15,27]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[467,467],[461,461],[468,468],[464,464],[466,466],[465,465],[475,475],[477,477],[476,476],[472,472],[471,471],[478,478],[462,462],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[462,462],44],[[479,479,479,480,480],479],0,0,0,0,[[462,462],25],[[467,5],[[13,[423]]]],[[461,5],[[13,[423]]]],[[468,5],[[13,[423]]]],[[464,5],[[13,[423]]]],[[466,5],[[13,[423]]]],[[465,5],[[13,[423]]]],[[475,5],[[13,[423]]]],[[477,5],[[13,[423]]]],[[476,5],[[13,[423]]]],[[472,5],[[13,[423]]]],[[471,5],[[13,[423]]]],[[478,5],[[13,[423]]]],[[462,5],[[13,[423]]]],[[[481,[36]]],467],[[[481,[473]]],467],[[[481,[27]]],467],[[[481,[1]]],467],[[[481,[19]]],467],[[[481,[15]]],467],[[[481,[74]]],467],[[[481,[474]]],467],[[]],[[[481,[463]]],467],[[[481,[2]]],467],[[]],[[[481,[470]]],461],[[[481,[469]]],468],[[]],[[[481,[474]]],464],[[]],[[[481,[27]]],464],[[[481,[2]]],464],[[[481,[74]]],464],[[[481,[36]]],464],[[[481,[463]]],464],[[[481,[15]]],464],[[[481,[473]]],464],[[[481,[19]]],464],[[[481,[1]]],464],[[]],[[[481,[470]]],466],[[[481,[469]]],465],[[]],[[[481,[19]]],475],[[[481,[74]]],475],[[[481,[15]]],475],[[[481,[474]]],475],[[[481,[27]]],475],[[]],[[[481,[36]]],475],[[[481,[2]]],475],[[[481,[473]]],475],[[[481,[1]]],475],[[[481,[463]]],475],[[[481,[470]]],477],[[]],[[]],[[[481,[469]]],476],[[]],[[]],[[]],[[]],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[462,462],[[12,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],3],0,0,[[439,1],[[13,[405]]]],[[439,1],[[13,[405]]]],0,[439],[439],[[]],[[]],[[]],[[]],[[[439,[369]]],[[439,[369]]]],[482,482],[[]],[[]],[439,1],0,[482,10],[439],[[],439],[[[439,[357]],5],[[13,[423]]]],[[482,5],[[13,[423]]]],[[482,5],[[13,[423]]]],[[439,88]],[[]],[[]],[483,482],[88],[[]],[[]],[[]],[[]],[[]],[439,25],[439,12],[439,1],[[],439],[[[368,[1]]],439],[439,12],[439,12],[458],[[439,88]],[439],[[]],[[]],[[],184],[[],13],[[],13],[88],[[],13],[[],13],[[],14],[[],14],0,[[]],[[]],[484,484],[[]],0,[2,484],[[484,5],[[13,[423]]]],[[484,5],[[13,[423]]]],[[]],[[]],[[]],[484,[[12,[2]]]],[484,[[12,[2]]]],[484,[[12,[2]]]],0,[484],[[]],[[],184],[[],13],[[],13],[[],14],0,0,0,0,0,[[]],[[]],[[[485,[369]]],[[485,[369]]]],[[]],[[[485,[357]],5],[[13,[423]]]],[[]],[45,485],[[]],0,[[486,487],[[488,[12]]]],[[[486,[[485,[262]]]],487],[[488,[12]]]],[[]],[[[485,[262]]]],[[]],[[],13],[[],13],[[],14],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[489],[[[489,[47]]]],[[[490,[47]]]],[489],[[]],[[]],[[]],[[[490,[47]]],[[491,[47]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[[490,[47]]],[[492,[47]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[493,[369]]],[[493,[369]]]],[[[489,[494]]],[[489,[494]]]],[[[490,[369]]],[[490,[369]]]],[[[491,[47]]],[[491,[47]]]],[[[490,[369]],[490,[369]]]],[[]],[[]],[[]],[[[489,[[0,[373,494]]]],[489,[[0,[373,494]]]]],44],[[[490,[[0,[373,47]]]],[490,[[0,[373,47]]]]],44],[[],[[496,[495]]]],[[],493],[[],[[489,[495]]]],[[],[[490,[495]]]],[[],[[497,[495]]]],[[],[[498,[495]]]],[[[496,[282]]]],[[[491,[47]]],47],[[[492,[47]]],47],[[[492,[47]]],47],[499,10],[500,10],[414,[[13,[[489,[[0,[501,494]]]]]]]],[414,[[13,[[490,[501]]]]]],[[[493,[[374,[[374,[[374,[374]]]]]]]],[493,[[374,[[374,[[374,[374]]]]]]]]],25],[[[489,[[0,[[374,[[0,[[374,[[0,[[374,[[0,[374,494]]]],494]]]],494]]]],494]]]],[489,[[0,[[374,[[0,[[374,[[0,[[374,[[0,[374,494]]]],494]]]],494]]]],494]]]]],25],[[[490,[[0,[[374,[[0,[[374,[[0,[[374,[[0,[374,47]]]],47]]]],47]]]],47]]]],[490,[[0,[[374,[[0,[[374,[[0,[[374,[[0,[374,47]]]],47]]]],47]]]],47]]]]],25],[[[491,[47]],282],[[13,[[491,[47]],[491,[47]]]]]],[[[492,[47]],282],[[13,[[492,[47]],[492,[47]]]]]],[[[496,[357]],5],[[13,[423]]]],[[[493,[357]],5],[[13,[423]]]],[[[489,[[0,[494,357]]]],5],[[13,[423]]]],[[[490,[[0,[357,47]]]],5],[[13,[423]]]],[[499,5],[[13,[423]]]],[[499,5],[[13,[423]]]],[[500,5],[[13,[423]]]],[[500,5],[[13,[423]]]],[[[491,[[0,[502,47]]]],5],[[13,[423]]]],[[[491,[[0,[357,47]]]],5],[[13,[423]]]],[[[492,[[0,[502,47]]]],5],[[13,[423]]]],[[[492,[[0,[357,47]]]],5],[[13,[423]]]],[[[497,[47]],5],[[13,[423]]]],[[[498,[47]],5],[[13,[423]]]],[[[496,[282]]]],[[]],[[],493],[3],[[]],[[],489],[[]],[3],[[],490],[[]],[3],[[]],[[]],[[]],[[]],[3],[[]],[[],497],[[],498],[[]],[3],[47,[[489,[47]]]],[[[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]],[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]]],25],[[[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]],[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]]],25],[493,12],[[[489,[494]]],494],[[[497,[47]]]],[[[498,[47]]]],[493,12],[[[489,[47]]],47],[[[490,[47]]],47],[[[497,[47]]],47],[[[498,[47]]],47],[[493,282]],[[493,282],13],[[[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]],[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]]],25],[[[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]],[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]]],25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[493,12],[489],[490],[497],[498],[[[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]],[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]]],25],[[[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]],[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]]],25],[[[491,[47]]],47],[[[492,[47]]],47],[[[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]],[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]]],25],[[[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]],[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]]],25],[[[491,[47]],282],[[491,[47]]]],[[[492,[47]],282],[[492,[47]]]],[[[491,[47]],282]],[[[492,[47]],282]],0,[282,[[496,[282]]]],[[],493],[[],489],[[],490],[[],497],[[],498],[[[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]],[489,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,494]]]],494]]]],494]]]],494]]]]],[[12,[44]]]],[[[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]],[490,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]]],[[12,[44]]]],[458],[458],[497],[498],[489],[490],[[490,282]],[[[489,[[0,[503,494]]]],447],13],[[[490,[[0,[503,47]]]],447],13],[493,13],[489],0,[[489,489]],[[490,490]],[493,12],[[[489,[495]]],495],[[[490,[495]]],495],[[]],[[]],[[]],[[],184],[[],184],[[],184],[[],184],[[[490,[47]]],[[13,[[491,[47]],499]]]],[[[490,[47]]],[[13,[[492,[47]],500]]]],[[[490,[47]]],[[13,[47,499]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[[490,[47]]],47],[[[489,[494]],282],494],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[504,504],[505,505],[[[506,[[0,[369,262]]]]],[[506,[[0,[369,262]]]]]],[507,507],[508,508],[509,509],[510,510],[511,511],[512,512],[513,513],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[508,1],[509,1],[45,506],[504,10],[505,10],[507,10],[[504,504],25],[[505,505],25],[[507,507],25],[[513,513],25],[[504,5],[[13,[423]]]],[[504,5],[[13,[423]]]],[[505,5],[[13,[423]]]],[[505,5],[[13,[423]]]],[[[506,[[0,[357,262]]]],5],[[13,[423]]]],[[507,5],[[13,[423]]]],[[507,5],[[13,[423]]]],[[508,5],[[13,[423]]]],[[508,5],[[13,[423]]]],[[509,5],[[13,[423]]]],[[509,5],[[13,[423]]]],[[510,5],[[13,[423]]]],[[510,5],[[13,[423]]]],[[511,5],[[13,[423]]]],[[511,5],[[13,[423]]]],[[512,5],[[13,[423]]]],[[512,5],[[13,[423]]]],[[513,5],[[13,[423]]]],[[513,5],[[13,[423]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],[[12,[253]]]],[15,[[12,[253]]]],[15,253],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[508,[[12,[253]]]],[509,[[12,[253]]]],[508,1],[509,1],[[[506,[262]]],[[12,[[13,[253,507]]]]]],[508,[[12,[253]]]],[509,[[12,[253]]]],[510,[[12,[253]]]],[511,[[12,[253]]]],[512,[[12,[253]]]],[511,[[12,[253]]]],[512,[[12,[253]]]],[[509,1],[[12,[253]]]],[458],[458],[458],[458],[[[506,[262]]]],[508],[509],[510],[511],[512],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[507,19],0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[44,44],[[[514,[369]]],[[514,[369]]]],[[[514,[369]],[514,[369]]]],[[]],[[]],[[],44],[[44,44],44],[[[514,[373]],[514,[373]]],44],[[],[[514,[495]]]],[414,[[13,[[514,[501]]]]]],[[],25],[[44,44],25],[[[514,[[374,[[374,[[374,[374]]]]]]]],[514,[[374,[[374,[[374,[374]]]]]]]]],25],[[44,5],[[13,[423]]]],[[[514,[357]],5],[[13,[423]]]],[[]],[[]],[[],25],[[[514,[[377,[[377,[[377,[377]]]]]]]],[514,[[377,[[377,[[377,[377]]]]]]]]],25],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[],25],[[[514,[[377,[[377,[[377,[377]]]]]]]],[514,[[377,[[377,[[377,[377]]]]]]]]],25],[[44,49]],[[[514,[46]],49]],[[]],[[]],[44,25],[44,25],[44,25],[44,25],[44,25],[44,25],[[],25],[[[514,[[377,[[377,[[377,[377]]]]]]]],[514,[[377,[[377,[[377,[377]]]]]]]]],25],[[],25],[[[514,[[377,[[377,[[377,[377]]]]]]]],[514,[[377,[[377,[[377,[377]]]]]]]]],25],[[373,373],373],[[47,47],47],[282],[88],[[373,373],373],[[47,47],47],[282],[88],[[],25],[[],[[12,[44]]]],[[44,44],[[12,[44]]]],[[[514,[[377,[[377,[[377,[377]]]]]]]],[514,[[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[44,44],[[[514,[503]],447],13],[[44,44],44],[[44,282],44],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[483,483],[[]],[[483,483],44],[483,10],[[483,483],25],[[483,5],[[13,[423]]]],[[483,5],[[13,[423]]]],[[]],[3],[[]],[3,483],[[[0,[46,47]],48],27],[[483,49]],[[]],[[]],[[]],[[483,483],[[12,[44]]]],[458],[[]],[[],184],[[],13],[[],13],[[],13],[[],13],[[],14],0,0,[[],495],[[]],0,0,[[]],[[]],[[],[[12,[515]]]],[516,516],[[]],0,[[],10],[[[86,[515,407]]],[[13,[[86,[515,407]],[86,[515,407]]]]]],[[[86,[515,407]]],[[13,[[86,[515,407]],[86,[515,407]]]]]],[[[86,[515,407]]],[[13,[[86,[515,407]],[86,[515,407]]]]]],[515,[[12,[515]]]],[515,[[12,[515]]]],[515,[[12,[515]]]],[515,[[12,[515]]]],[515,[[12,[515]]]],[515,[[12,[515]]]],[[516,5],[[13,[423]]]],[[]],[[]],[[]],[515,25],[515,25],[515,25],[516,12],[458],[515,[[12,[47]]]],[515,[[12,[47]]]],[515,[[12,[47]]]],[515,12],[515,12],[515,12],[[],[[12,[515]]]],[515,516],[[]],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[517,518],[519,474],[519,519],[517,520],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[521,521],[522,522],[517,517],[[519,523]],[[]],[[]],[[]],[[519,519],44],[[],519],[520,517],[520,517],[521,10],[517],[[519,519],25],[[521,521],25],[[522,522],25],[[524,5],[[13,[423]]]],[[519,5],[[13,[423]]]],[[521,5],[[13,[423]]]],[[521,5],[[13,[423]]]],[[522,5],[[13,[423]]]],[[522,5],[[13,[423]]]],[[517,5],[[13,[423]]]],[[520,5],[[13,[423]]]],0,[[]],[[]],[[]],[[]],[[]],[[],[[13,[519,522]]]],[[],[[13,[519,521]]]],[[],519],[474,519],[[[0,[46,47]],48],27],0,[[519,49]],[[519,[430,[1]]],519],0,0,[[]],[[]],[[]],[[]],[[]],[[[86,[519,407]]],523],[519,25],0,0,[[519,519],[[12,[44]]]],[458],[458],0,[519],[519],[519,523],[[]],[[]],[[]],[519,[[13,[10,525]]]],[[],184],[[],184],[519,[[418,[10]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[517,282]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,[[12,[526]]]],0,[5,25],0,[527,[[12,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[526,526],[423,423],[527,527],[[]],[[]],[[]],[[423,423],44],[[5,[0,[502,47]]],[[13,[423]]]],[502,423],[5,528],[5,529],[5,530],[[5,10],531],[[5,10],532],[[],423],[423,10],0,[[530,45],530],[[528,45],528],[[529,45],529],[[530,357],530],[[528,357],528],[[529,357,357],529],[[526,526],25],[[423,423],25],[[531,10,357],531],[[532,357],532],0,[5,253],0,[531,[[13,[423]]]],[532,[[13,[423]]]],[530,[[13,[423]]]],[528,[[13,[423]]]],[529,[[13,[423]]]],[531,[[13,[423]]]],[5,15],0,[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[5,[[13,[423]]]],[[526,5],[[13,[423]]]],[[423,5],[[13,[423]]]],[[423,5],[[13,[423]]]],[[527,5],[[13,[423]]]],[[527,5],[[13,[423]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[46,47]],48],27],0,0,0,[[423,49]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[529,357],529],[[5,10],[[13,[423]]]],[[5,25,10,10],[[13,[423]]]],[[423,423],[[12,[44]]]],0,[5,[[12,[1]]]],0,[458],0,0,0,[[527,447],13],[[5,25],[[13,[423]]]],[5,[[13,[423]]]],[[5,253],[[13,[423]]]],[[5,470],[[13,[423]]]],[[5,469],[[13,[423]]]],[[5,533],[[13,[423]]]],[[5,473],[[13,[423]]]],[[5,36],[[13,[423]]]],[[5,463],[[13,[423]]]],[[5,474],[[13,[423]]]],[[5,[12,[1]]],[[13,[423]]]],[[5,10,[0,[503,47]]],[[13,[423]]]],[[5,10,15,10,[0,[503,47]]],[[13,[423]]]],[5,[[13,[423]]]],[[5,[12,[1]]],[[13,[423]]]],[[5,[0,[503,47]]],[[13,[423]]]],[[5,10],[[13,[423]]]],[[5,10,1],[[13,[423]]]],[[5,10,15,10,1],[[13,[423]]]],[[5,1],[[13,[423]]]],[[5,10,1],[[13,[423]]]],[[5,10,15,10,1],[[13,[423]]]],[[5,479],[[13,[423]]]],[[5,19],[[13,[423]]]],[[5,15],[[13,[423]]]],[[5,27],[[13,[423]]]],[[5,2],[[13,[423]]]],[5,[[13,[423]]]],[[5,10],[[13,[423]]]],[[5,10,15,10],[[13,[423]]]],[5,25],[5,25],[5,25],0,[[]],[[]],[[]],[[],184],[[],184],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[529,357],529],[5,[[12,[1]]]],0,[[534,527],[[13,[423]]]],[253,[[13,[423]]]],[[5,253],[[13,[423]]]],[527,[[13,[423]]]],[[5,527],[[13,[423]]]],[[5,527],[[13,[423]]]],[10,[[13,[423]]]],[[5,10],[[13,[423]]]],[[5,10],[[13,[423]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[535,535],[[[536,[369]]],[[536,[369]]]],[[]],[[]],0,[[535,5],[[13,[423]]]],[[537,5],[[13,[423]]]],[[[536,[357]],5],[[13,[423]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[536],0,[[],535],[[486,487],488],[[[486,[535]],487],488],[[[486,[[537,[88]]]],487],488],[[[486,[536]],487],488],[88,[[537,[88]]]],[[],536],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[538,[[0,[495,49]]]]],[[0,[495,49]]]],[538,538],[539,539],[[]],[[]],[[],538],[[],539],[[538,538],25],[[],27],[539,27],[[538,5],[[13,[423]]]],[[539,5],[[13,[423]]]],[[]],[[]],[49],[[47,46],27],[49],[[]],[[]],[[],539],[[27,27],539],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[]],[539],[533],[473],[36],[463],[474],[74],[1],[10],[[539,10]],[479],[19],[15],[27],[2],[1],[[]],[[]],[[]],[[],3],0,0,0,0,0,0,0,0,0,0,[[],3],[[494,494]],[74],[[]],[[]],[[]],[25],[494,494],[494,494],[494,494],[494,494],[494,494],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[494,494]],[[]],[[]],[[]],[[]],[[],494],[[],494],[[],494],[[],494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[[]],[[]],[[]],[[]],[494],[494],[494],[494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[494,494],[[]],[[]],[494,494],[[],540],[470,470],[469,469],[[1,1],2],[[2,1,1]],[[541,[282,[541]],[282,[541]]]],[1],[1],[[470,470],470],[[469,469],469],[470,470],[469,469],[494,494],[494,494],[494,494],[494,494],[494,494],[[]],[[]],[[494,494],494],[470,470],[469,469],[470,470],[469,469],[470,470],[469,469],[[494,494],494],[[494,494],494],[494,494],[470,470],[469,469],[[470,470,470],470],[[469,469,469],469],[[494,494],494],[47],[[494,494],494],[[494,494],494],[25,25],[470,470],[469,469],[470,470],[469,469],[470,470],[469,469],[[470,470],470],[[469,469],469],[[],1],[[],1],[[470,470],470],[[469,469],469],0,[[494,494]],[470,470],[469,469],[[],25],[[]],[74],[12],[[470,470],470],[[469,469],469],[[470,36],470],[[469,36],469],[[],1],[36],[36],[36],[36],[[],2],[1],[[],74],[[],1],[[],25],[[]],[470,470],[469,469],[[494,494],494],[[494,494],494],[470,470],[469,469],[470,470],[469,469],[[]],[[494,494],494],[[494,494],494],[470,470],[469,469],[[],1],[[],1],[470,470],[469,469],[[494,494]],[[]],[470,470],[469,469],[2,36],[[],27],[[],10],[[]],[[]],[[494,494],494],[[494,494],494],[[494,494],494],[[494,494],494],[[494,494],494],[[494,494],494],[[494,494],494],[25,25],[[],3],[[],1],[1],[1],[[]],[[2,1]],[[]],[[],1],[[],1],[[494,494],494],[[494,494],494],[[494,494],494],[[2,1]],0,[542],[[]],[[]],[[]],[[]],[542],[15],[542,542],[[],1],[[]],[[]],[[],542],[15],[[]],[[]],[[]],[[]],[[],542],[15],[[]],[[]],[[]],[[]],0,0,[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[421,[440,45,88]],1],[[13,[405]]]],[[[422,[440]],1],[[13,[405]]]],[1,[[13,[405]]]],[[[543,[440]],1],[[13,[405]]]],[[[408,[440,440]],1],[[13,[405]]]],[[[412,[440]],1],[[13,[405]]]],[[[417,[[0,[445,440]]]],1],[[13,[405]]]],[[[444,[440]],1],[[13,[405]]]],[[[448,[[0,[440,445]]]],1],[[13,[405]]]],[[[452,[[0,[440,445]]]],1],[[13,[405]]]],[[[544,[369]],1],[[13,[405]]]],[[[421,[262,45,88]],1],[[13,[405]]]],[[[422,[262]],1],[[13,[405]]]],[1,[[13,[405]]]],[[[543,[262]],1],[[13,[405]]]],[[[408,[262,262]],1],[[13,[405]]]],[[[412,[262]],1],[[13,[405]]]],[[[413,[[0,[369,262]]]],1],[[13,[405]]]],[[[417,[262]],1],[[13,[405]]]],[[[444,[440]],1],[[13,[405]]]],[[[448,[262]],1],[[13,[405]]]],[[[452,[262]],1],[[13,[405]]]],[[[544,[369]],1],[[13,[405]]]],[[47,88],25],[[47,88],25],[47,[[406,[47]]]],0,0,[1],[1,12],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,47],[[47,45],[[408,[47]]]],[[[421,[369,[0,[369,45]],369]]],[[421,[369,[0,[369,45]],369]]]],[[[422,[[0,[369,262]]]]],[[422,[[0,[369,262]]]]]],[[[434,[[0,[262,369]],369]]],[[434,[[0,[262,369]],369]]]],[545,545],[[[406,[[0,[369,262]]]]],[[406,[[0,[369,262]]]]]],[[[408,[369,369]]],[[408,[369,369]]]],[[[409,[369]]],[[409,[369]]]],[[[412,[369]]],[[412,[369]]]],[[[413,[369]]],[[413,[369]]]],[[[417,[369]]],[[417,[369]]]],[[[419,[369,369]]],[[419,[369,369]]]],[[[420,[369,369]]],[[420,[369,369]]]],[[[426,[369]]],[[426,[369]]]],[[[432,[369,369]]],[[432,[369,369]]]],[[[433,[[0,[369,262]]]]],[[433,[[0,[369,262]]]]]],[[[437,[369,369]]],[[437,[369,369]]]],[[[438,[369,369]]],[[438,[369,369]]]],[[[441,[[0,[369,262]]]]],[[441,[[0,[369,262]]]]]],[[[444,[369]]],[[444,[369]]]],[[[446,[369,369,369]]],[[446,[369,369,369]]]],[[[448,[369]]],[[448,[369]]]],[[[449,[369,369]]],[[449,[369,369]]]],[[[450,[369]]],[[450,[369]]]],[[[452,[369]]],[[452,[369]]]],[[[453,[369,369]]],[[453,[369,369]]]],[[[456,[369,369]]],[[456,[369,369]]]],[[[546,[369]]],[[546,[369]]]],[[[547,[369]]],[[547,[369]]]],[[[548,[369]]],[[548,[369]]]],[[[544,[369]]],[[544,[369]]]],[[[549,[369]]],[[549,[369]]]],[[[550,[369,369]]],[[550,[369,369]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[[[421,[262,45,88]]],1],[[[422,[262]]],1],[47,1],[[[406,[262]]],1],[[[408,[262,262]]],1],[[[412,[262]]],1],[[[417,[262]]],1],[[[419,[262,88]]],1],[[[426,[262]]],1],[[[441,[262]]],1],[[[448,[262]]],1],[[[544,[369]]],1],0,[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[],[[422,[[0,[495,262]]]]]],[[],545],[[],[[408,[495,495]]]],[[],[[409,[495]]]],[[],[[412,[495]]]],[[],[[417,[495]]]],[[],[[426,[495]]]],[[],[[444,[495]]]],0,[[],545],[47,[[417,[47]]]],[[47,45],25],[[47,45,88],25],[45],[[]],[1],0,0,0,0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[[408,[262,262]],88],12],[[[426,[262]],88],12],[[[444,[440]],88],12],[[47,88],12],0,0,0,[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[[421,[357,45]],5],[[13,[423]]]],[[[422,[[0,[357,262]]]],5],[[13,[423]]]],[[[434,[[0,[262,357]],357]],5],[[13,[423]]]],[[545,5],[[13,[423]]]],[[[406,[[0,[357,262]]]],5],[[13,[423]]]],[[[543,[357]],5],[[13,[423]]]],[[[408,[357,357]],5],[[13,[423]]]],[[[409,[357]],5],[[13,[423]]]],[[[412,[357]],5],[[13,[423]]]],[[[413,[357]],5],[[13,[423]]]],[[[417,[357]],5],[[13,[423]]]],[[[419,[357]],5],[[13,[423]]]],[[[420,[357]],5],[[13,[423]]]],[[[426,[357]],5],[[13,[423]]]],[[[432,[357]],5],[[13,[423]]]],[[[433,[[0,[357,262]]]],5],[[13,[423]]]],[[[437,[357]],5],[[13,[423]]]],[[[438,[357]],5],[[13,[423]]]],[[[441,[[0,[357,262]]]],5],[[13,[423]]]],[[[444,[357]],5],[[13,[423]]]],[[[446,[357,357]],5],[[13,[423]]]],[[[448,[357]],5],[[13,[423]]]],[[[449,[357]],5],[[13,[423]]]],[[[450,[357]],5],[[13,[423]]]],[[[452,[357]],5],[[13,[423]]]],[[[453,[357]],5],[[13,[423]]]],[[[456,[357,357]],5],[[13,[423]]]],[[546,5],[[13,[423]]]],[[[547,[357]],5],[[13,[423]]]],[[548,5],[[13,[423]]]],[[[544,[357]],5],[[13,[423]]]],[[549,5],[[13,[423]]]],[[[550,[357]],5],[[13,[423]]]],[[[421,[262,45,88]],88]],[[[422,[262]],88]],[[[434,[262,88]],88]],[[47,88]],[[[406,[262]],88]],[[[543,[262]],88]],[[[408,[262,262]],88]],[[[409,[262]],88]],[[[412,[262]],88]],[[[417,[262]],88]],[[[419,[262,88]],88]],[[[420,[262,88]],88]],[[[426,[262]],88]],[[[432,[262,88]],88]],[[[433,[262]],88]],[[[437,[262,88]],88]],[[[438,[262,88]],88]],[[[441,[262]],88]],[[[444,[440]],88]],[[[446,[262,88]],88]],[[[448,[262]],88]],[[[449,[262,88]],88]],[[[450,[262]],88]],[[[452,[262]],88]],[[[453,[262,88]],88]],[[47,88]],[[[452,[262]],88]],[1],[1,12],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88,[[546,[88]]]],[[[0,[551,552]]],[[553,[[0,[551,552]]]]]],[45],[47,[[426,[47]]]],[[47,45],25],0,[[47,45],25],0,0,0,0,[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[406,[262]]],[[12,[439]]]],[[],25],[[[406,[445]]],25],[[[409,[445]]],25],[[[412,[445]]],25],[[[417,[445]]],25],[[[426,[445]]],25],[[[432,[445,88]]],25],[[[437,[445,88]]],25],[[[444,[[0,[445,440]]]]],25],[[47,88],25],[47,25],[[47,88],25],[[47,88],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[421,[262,45,88]]],12],[[[422,[262]]],12],[47,12],[[[408,[262,262]]],12],[[[412,[262]]],[[12,[494]]]],[[[426,[262]]],12],[[[441,[262]]],12],[[[448,[262]]],12],[[[544,[369]]],[[12,[369]]]],[[47,45],25],[545,1],[[],1],[[[406,[445]]],1],[[[409,[445]]],1],[[[412,[445]]],1],[[[417,[445]]],1],[[[426,[445]]],1],[[[432,[445,88]]],1],[[[437,[445,88]]],1],[[[444,[[0,[445,440]]]]],1],[547,1],[[[548,[282]]],1],0,[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[47,12],[[47,88],12],[[47,88],12],[47,12],[[47,88],12],[[47,88],12],0,0,[[47,45],25],0,0,[[],12],[[[421,[262,45,88]]],12],[[[422,[262]]],12],[[[434,[262,88]]],12],[545,12],[[[406,[262]]],12],[[[543,[262]]],12],[[[408,[262,262]]],12],[[[409,[262]]],[[12,[369]]]],[[[412,[262]]],[[12,[494]]]],[[[413,[[0,[369,262]]]]],12],[[[417,[262]]],12],[[[419,[262,88]]],12],[[[420,[262,88]]],12],[[[426,[262]]],12],[[[432,[262,88]]],12],[[[433,[262]]],12],[[[437,[262,88]]],12],[[[438,[262,88]]],12],[[[441,[262]]],12],[[[444,[440]]],12],[[[446,[262,88]]],12],[[[448,[262]]],12],[[[449,[262,88]]],12],[[[450,[262]]],12],[[[452,[262]]],12],[[[453,[262,88]]],12],[[[456,[262,262]]],12],[[[546,[88]]],12],[547,12],[[[548,[282]]],12],[[[544,[369]]],[[12,[369]]]],[[[549,[88]]],12],[[[550,[88]]],12],0,[[],12],[[[421,[440,45,88]]],12],[[[422,[440]]],12],[545,12],[[[406,[[0,[440,445]]]]],12],[[[543,[440]]],12],[[[408,[440,440]]],12],[[[409,[440]]],[[12,[369]]]],[[[412,[440]]],[[12,[494]]]],[[[417,[[0,[445,440]]]]],12],[[[419,[440,88]]],12],[[[420,[440,88]]],12],[[[426,[440]]],12],[[[432,[440,88]]],12],[[[437,[440,88]]],12],[[[441,[440]]],12],[[[444,[440]]],12],[[[448,[[0,[440,445]]]]],12],[[[450,[[0,[440,445]]]]],12],[[[452,[[0,[440,445]]]]],12],[[[456,[[0,[440,445]],[0,[440,445]]]]],12],[547,12],[[[548,[282]]],12],[[[544,[369]]],[[12,[369]]]],[47,[[13,[439]]]],[[[412,[262]]],[[13,[439]]]],[[[441,[262]],282],12],[[[441,[262]],47],12],[1,12],[[[543,[262]],1],12],[[[408,[262,262]],1],12],[[[412,[262]],1],[[12,[494]]]],[[[417,[262]],1],12],[[[426,[262]],1],12],[[[441,[262]],1],12],[[[444,[440]],1],12],[[[448,[262]],1],12],[[[450,[262]],1],12],[[[452,[262]],1],12],[[[456,[262,262]],1],12],[[[544,[369]],1],[[12,[369]]]],[1,12],[[[543,[440]],1],12],[[[408,[440,440]],1],12],[[[417,[[0,[445,440]]]],1],12],[[[426,[440]],1],12],[[[444,[440]],1],12],[[[448,[[0,[440,445]]]],1],12],[[[450,[[0,[440,445]]]],1],12],[[[452,[[0,[440,445]]]],1],12],[[[544,[369]],1],[[12,[369]]]],[[],547],[282,[[548,[282]]]],0,[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[[[441,[262]]],12],[[[441,[262]]],12],[47,[[441,[47]]]],0,[[47,88],[[12,[1]]]],0,0,0,0,[262],[47,442],[[47,88],12],0,[369,[[544,[369]]]],[88,[[549,[88]]]],0,[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[[408,[440,440]],88],12],[[[426,[440]],88],12],[[[444,[440]],88],12],[[[421,[440,45,88]],88]],[[[422,[440]],88]],[[47,88]],[[[406,[[0,[440,445]]]],88]],[[[543,[440]],88]],[[[408,[440,440]],88]],[[[409,[440]],88]],[[[412,[440]],88]],[[[417,[[0,[445,440]]]],88]],[[[419,[440,88]],88]],[[[420,[440,88]],88]],[[[426,[440]],88]],[[[432,[440,88]],88]],[[[437,[440,88]],88]],[[[441,[440]],88]],[[[444,[440]],88]],[[[448,[[0,[440,445]]]],88]],[[[450,[[0,[440,445]]]],88]],[[[452,[[0,[440,445]]]],88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],0,0,[[[421,[262,45,88]]]],[[[422,[262]]]],[[[434,[262,88]]]],[545],[[]],[[[406,[262]]]],[[[543,[262]]]],[[[408,[262,262]]]],[[[409,[262]]]],[[[412,[262]]]],[[[413,[[0,[369,262]]]]]],[[[417,[262]]]],[[[419,[262,88]]]],[[[420,[262,88]]]],[[[426,[262]]]],[[[432,[262,88]]]],[[[433,[262]]]],[[[437,[262,88]]]],[[[438,[262,88]]]],[[[441,[262]]]],[[[444,[440]]]],[[[446,[262,88]]]],[[[448,[262]]]],[[[449,[262,88]]]],[[[450,[262]]]],[[[452,[262]]]],[[[453,[262,88]]]],[[[456,[262,262]]]],[547],[[[548,[282]]]],[[[544,[369]]]],[[[549,[88]]]],[[[550,[88]]]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],0,0,[[47,1],[[450,[47]]]],[[],[[12,[1]]]],0,[[12,88],[[550,[88]]]],[262],[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47],[[47,88]],[[[421,[262,45,88]],88],454],[[[422,[262]],88],454],[[47,88],454],[[[406,[262]],88],454],[[[543,[262]],88],454],[[[408,[262,262]],88],454],[[[409,[262]],88],454],[[[412,[262]],88],454],[[[413,[[0,[369,262]]]],88],454],[[[417,[262]],88],454],[[[419,[262,88]],88],454],[[[420,[262,88]],88],454],[[[426,[262]],88],454],[[[432,[262,88]],88],454],[[[437,[262,88]],88],454],[[[438,[262,88]],88],454],[[[441,[262]],88],454],[[[444,[440]],88],454],[[[446,[262,88]],88],454],[[[448,[262]],88],454],[[[449,[262,88]],88],454],[[[450,[262]],88],454],[[[452,[262]],88],454],[[[453,[262,88]],88],454],[[[549,[88]],88],454],[[47,88],454],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[47,88]],[[[421,[440,45,88]],88],454],[[[422,[440]],88],454],[[47,88],454],[[[406,[[0,[440,445]]]],88],454],[[[543,[440]],88],454],[[[408,[440,440]],88],454],[[[409,[440]],88],454],[[[412,[440]],88],454],[[[417,[[0,[445,440]]]],88],454],[[[419,[440,88]],88],454],[[[420,[440,88]],88],454],[[[426,[440]],88],454],[[[432,[440,88]],88],454],[[[437,[440,88]],88],454],[[[441,[440]],88],454],[[[444,[440]],88],454],[[[448,[[0,[440,445]]]],88],454],[[[450,[[0,[440,445]]]],88],454],[[[452,[[0,[440,445]]]],88],454],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[[0,[47,262]]]],[[45,45],456],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[554,[47]]],[[554,[47]]]],[555,555],[[]],[[]],[[[554,[47]],[554,[47]]],44],[[555,555],44],[[],[[554,[47]]]],[[],555],[414,[[13,[[554,[47]]]]]],[[[554,[501]],414],[[13,[501]]]],[[[554,[47]],[554,[47]]],25],[[555,555],25],[[[554,[47]],5],[[13,[423]]]],[[555,5],[[13,[423]]]],[[]],[[]],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[554,[47]],49]],[[555,49]],[[]],[[]],[[],25],[[],25],[[[554,[47]],[554,[47]]],[[12,[44]]]],[[555,555],[[12,[44]]]],[[[554,[47]],447],13],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[[556,556],556],[[],1],[47,1],[[],1],0,[[556,556],556],[[]],[557],[557],[557],[557],[557],[557],[557],[557],[557],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[556,556],556],[558,558],[[[559,[[0,[369,47]]]]],[[559,[[0,[369,47]]]]]],[[[557,[494]]],[[557,[494]]]],[556,556],[[]],[[]],[[]],[[]],[[[559,[[0,[373,47]]]],[559,[[0,[373,47]]]]],44],[494,494],[[],[[559,[[0,[495,47]]]]]],[[[559,[47]]],47],[[[559,[47]]],47],[[],558],[[]],[[[559,[47]]]],[[558,558],25],[[[559,[[0,[[374,[[0,[[374,[[0,[[374,[[0,[374,47]]]],47]]]],47]]]],47]]]],[559,[[0,[[374,[[0,[[374,[[0,[[374,[[0,[374,47]]]],47]]]],47]]]],47]]]]],25],[[556,556],25],[[558,5],[[13,[423]]]],[[[559,[[0,[357,47]]]],5],[[13,[423]]]],[[557,5],[[13,[423]]]],[[556,5],[[13,[423]]]],[[]],[47],[[]],[[]],[[]],[[]],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[558,49]],[[[559,[[0,[46,47]]]],49]],[[]],[[]],[[]],[[]],[559],[[],25],0,[[],1],[47,1],[[],25],[[],559],[[],557],[[[559,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]],[559,[[0,[[377,[[0,[[377,[[0,[[377,[[0,[377,47]]]],47]]]],47]]]],47]]]]],[[12,[44]]]],[[]],0,[[],1],[47,1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[556,556],556],[[]],[495,495],[559],[[]],[[]],[[]],[[]],[[]],[[]],[557],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],557],0,[[]],[[]],0,0,0,[[],1],[557],[[]],[[]],[[]],[[],557],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[560,560],[561,561],[562,562],[563,563],[564,564],[565,565],[566,566],[567,567],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[560,560],44],[[561,561],44],[[562,562],44],[[565,565],44],[[566,566],44],[[567,567],44],[564,10],[[560,562],25],[[560,561],25],[[560,560],25],[[561,560],25],[[561,561],25],[[562,560],25],[[562,562],25],[[563,563],25],[[564,564],25],[[565,565],25],[[566,566],25],[[567,567],25],[567,15],0,[[560,5],[[13,[423]]]],[[560,5],[[13,[423]]]],[[561,5],[[13,[423]]]],[[561,5],[[13,[423]]]],[[562,5],[[13,[423]]]],[[562,5],[[13,[423]]]],[[563,5],[[13,[423]]]],[[564,5],[[13,[423]]]],[[564,5],[[13,[423]]]],[[565,5],[[13,[423]]]],[[565,5],[[13,[423]]]],[[566,5],[[13,[423]]]],[[566,5],[[13,[423]]]],[[567,5],[[13,[423]]]],[[567,5],[[13,[423]]]],[561,560],[[],560],[562,560],[[],560],[[]],[[],560],[[]],[15,561],[[],561],[[],562],[[],562],[[]],[479,562],[[]],[[]],[[]],[566,565],[567,565],[[],565],[[]],[[]],[10,[[13,[560,564]]]],[10,[[13,[561,564]]]],[10,[[13,[562,564]]]],[10,[[13,[565,564]]]],[10,[[13,[566,564]]]],[10,[[13,[567,564]]]],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[560,49]],[[561,49]],[[562,49]],[[563,49]],[[565,49]],[[566,49]],[[567,49]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[565,560],[566,561],[567,562],0,0,[560,25],[561,25],[562,25],[561,25],[560,25],[561,25],[562,25],[560,25],[561,25],[562,25],[560,25],[565,25],[560,25],[565,25],[561,25],[560,25],[561,25],[562,25],[560,25],[561,25],[562,25],[561,25],[561,25],[561,25],[562,25],[562,25],[562,25],[562,25],[560,25],[561,25],[562,25],[562,[[12,[563]]]],[[2,2,2,2],561],[[19,19,19,19,19,19,19,19],562],[[560,19],565],[[561,19],566],[[562,19,15,15],567],[561],[562],0,0,[[],[[13,[560,564]]]],[[],[[13,[561,564]]]],[[],[[13,[562,564]]]],[[],[[13,[565,564]]]],[[],[[13,[566,564]]]],[[],[[13,[567,564]]]],[[560,561],[[12,[44]]]],[[560,562],[[12,[44]]]],[[560,560],[[12,[44]]]],[[561,561],[[12,[44]]]],[[561,560],[[12,[44]]]],[[562,560],[[12,[44]]]],[[562,562],[[12,[44]]]],[[565,565],[[12,[44]]]],[[566,566],[[12,[44]]]],[[567,567],[[12,[44]]]],[565,19],[566,19],[567,19],0,0,[458],[567,15],0,[562],[[567,15]],[[565,560]],[[566,561]],[[567,562]],[[565,19]],[[566,19]],[[567,19]],[[567,15]],[560,560],[562,560],[562,[[12,[561]]]],[562,[[12,[561]]]],[561,562],[561,562],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[568,568],[569,569],[570,570],[571,571],[572,572],[573,573],[[[574,[74]]],[[574,[74]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[463]]],[[574,[463]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[576]]],[[575,[576]]]],[[[575,[576]],[575,[576]]],[[575,[576]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[74]],[574,[74]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[2]],[574,[2]]]],[[[574,[2]],[574,[2]]]],[[[574,[479]],[574,[479]]]],[[[574,[15]],[574,[15]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[19]],[574,[19]]]],[[[574,[27]],[574,[27]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[36]],[574,[36]]]],[[[574,[533]],[574,[533]]]],[[[574,[19]],[574,[19]]]],[[[574,[463]],[574,[463]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[74]],[574,[74]]]],[[[574,[36]],[574,[36]]]],[[[574,[463]],[574,[463]]]],[[[574,[15]],[574,[15]]]],[[[574,[19]],[574,[19]]]],[[[574,[473]],[574,[473]]]],[[[574,[27]],[574,[27]]]],[[[574,[2]],[574,[2]]]],[[[574,[463]],[574,[463]]]],[[[574,[74]],[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[15]],[574,[15]]]],[[[574,[473]],[574,[473]]]],[[[574,[479]],[574,[479]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[473]],[574,[473]]]],[[[574,[474]],[574,[474]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[533]],[574,[533]]]],[[[574,[27]],[574,[27]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[474]],[574,[474]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],[574,[533]]]],[[[574,[1]],[574,[1]]]],[[[574,[1]],[574,[1]]]],[[[575,[1]],[575,[1]]]],[[[575,[479]],[575,[479]]]],[[[575,[74]],[575,[74]]]],[[[575,[479]],[575,[479]]]],[[[575,[533]],[575,[533]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[463]],[575,[463]]]],[[[575,[36]],[575,[36]]]],[[[575,[27]],[575,[27]]]],[[[575,[533]],[575,[533]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[474]],[575,[474]]]],[[[575,[463]],[575,[463]]]],[[[575,[27]],[575,[27]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[36]],[575,[36]]]],[[[575,[19]],[575,[19]]]],[[[575,[1]],[575,[1]]]],[[[575,[479]],[575,[479]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[27]],[575,[27]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[575,[74]],[575,[74]]]],[[[575,[474]],[575,[474]]]],[[[575,[36]],[575,[36]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]]],[[[575,[2]],[575,[2]]]],[[[575,[533]],[575,[533]]]],[[[575,[2]],[575,[2]]]],[[[575,[2]],[575,[2]]]],[[[575,[1]],[575,[1]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[473]],[575,[473]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[15]],[575,[15]]]],[[[575,[473]],[575,[473]]]],[[[575,[15]],[575,[15]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[15]],[575,[15]]]],[[[575,[19]],[575,[19]]]],[[[575,[19]],[575,[19]]]],[[[575,[474]],[575,[474]]]],[[[575,[473]],[575,[473]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[574,[36]],[574,[36]]]],[[[574,[15]],15]],[[[574,[473]],473]],[[[574,[74]],74]],[[[574,[2]],[574,[2]]]],[[[574,[19]],19]],[[[574,[473]],[574,[473]]]],[[[574,[27]],27]],[[[574,[533]],[574,[533]]]],[[[574,[479]],479]],[[[574,[463]],463]],[[[574,[463]],463]],[[[574,[2]],2]],[[[574,[15]],15]],[[[574,[2]],[574,[2]]]],[[[574,[474]],[574,[474]]]],[[[574,[474]],474]],[[[574,[463]],[574,[463]]]],[[[574,[74]],[574,[74]]]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[36]],36]],[[[574,[1]],[574,[1]]]],[[[574,[15]],[574,[15]]]],[[[574,[19]],19]],[[[574,[533]],533]],[[[574,[479]],[574,[479]]]],[[[574,[27]],[574,[27]]]],[[[574,[2]],2]],[[[574,[1]],[574,[1]]]],[[[574,[1]],1]],[[[574,[533]],[574,[533]]]],[[[574,[1]],1]],[[[574,[533]],533]],[[[574,[19]],[574,[19]]]],[[[574,[479]],479]],[[[574,[36]],[574,[36]]]],[[[574,[474]],[574,[474]]]],[[[574,[36]],36]],[[[574,[474]],474]],[[[574,[74]],74]],[[[574,[19]],[574,[19]]]],[[[574,[27]],27]],[[[574,[473]],473]],[[[574,[463]],[574,[463]]]],[[[574,[473]],[574,[473]]]],[[[574,[74]],[574,[74]]]],[[[574,[15]],[574,[15]]]],[[[575,[19]],19]],[[[575,[36]],36]],[[[575,[533]],[575,[533]]]],[[[575,[533]],533]],[[[575,[474]],[575,[474]]]],[[[575,[1]],[575,[1]]]],[[[575,[27]],[575,[27]]]],[[[575,[36]],[575,[36]]]],[[[575,[74]],[575,[74]]]],[[[575,[479]],479]],[[[575,[15]],[575,[15]]]],[[[575,[473]],473]],[[[575,[533]],533]],[[[575,[19]],19]],[[[575,[463]],463]],[[[575,[474]],474]],[[[575,[479]],[575,[479]]]],[[[575,[1]],1]],[[[575,[473]],[575,[473]]]],[[[575,[1]],[575,[1]]]],[[[575,[463]],463]],[[[575,[19]],[575,[19]]]],[[[575,[2]],2]],[[[575,[27]],[575,[27]]]],[[[575,[463]],[575,[463]]]],[[[575,[479]],479]],[[[575,[479]],[575,[479]]]],[[[575,[27]],27]],[[[575,[533]],[575,[533]]]],[[[575,[474]],[575,[474]]]],[[[575,[463]],[575,[463]]]],[[[575,[27]],27]],[[[575,[15]],15]],[[[575,[2]],2]],[[[575,[74]],74]],[[[575,[19]],[575,[19]]]],[[[575,[74]],74]],[[[575,[1]],1]],[[[575,[15]],[575,[15]]]],[[[575,[36]],36]],[[[575,[474]],474]],[[[575,[15]],15]],[[[575,[2]],[575,[2]]]],[[[575,[2]],[575,[2]]]],[[[575,[36]],[575,[36]]]],[[[575,[473]],[575,[473]]]],[[[575,[473]],473]],[[[575,[74]],[575,[74]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[1]],[574,[1]]]],[[[574,[2]],[574,[2]]]],[[[574,[1]],[574,[1]]]],[[[574,[1]],[574,[1]]]],[[[574,[474]],[574,[474]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[533]],[574,[533]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[2]],[574,[2]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],[574,[36]]]],[[[574,[15]],[574,[15]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[473]],[574,[473]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[15]],[574,[15]]]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[479]],[574,[479]]]],[[[574,[473]],[574,[473]]]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[74]],[574,[74]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[474]],[574,[474]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[533]],[574,[533]]]],[[[574,[36]],[574,[36]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[473]],[574,[473]]]],[[[574,[19]],[574,[19]]]],[[[574,[27]],[574,[27]]]],[[[574,[463]],[574,[463]]]],[[[574,[479]],[574,[479]]]],[[[574,[74]],[574,[74]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[19]],[574,[19]]]],[[[574,[533]],[574,[533]]]],[[[574,[27]],[574,[27]]]],[[[574,[19]],[574,[19]]]],[[[574,[2]],[574,[2]]]],[[[574,[15]],[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[463]],[574,[463]]]],[[[574,[463]],[574,[463]]]],[[[575,[474]],[575,[474]]]],[[[575,[74]],[575,[74]]]],[[[575,[1]],[575,[1]]]],[[[575,[474]],[575,[474]]]],[[[575,[463]],[575,[463]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[36]],[575,[36]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[479]],[575,[479]]]],[[[575,[473]],[575,[473]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[575,[463]],[575,[463]]]],[[[575,[1]],[575,[1]]]],[[[575,[15]],[575,[15]]]],[[[575,[15]],[575,[15]]]],[[[575,[27]],[575,[27]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[533]],[575,[533]]]],[[[575,[19]],[575,[19]]]],[[[575,[479]],[575,[479]]]],[[[575,[27]],[575,[27]]]],[[[575,[2]],[575,[2]]]],[[[575,[2]],[575,[2]]]],[[[575,[533]],[575,[533]]]],[[[575,[15]],[575,[15]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[463]],[575,[463]]]],[[[575,[474]],[575,[474]]]],[[[575,[2]],[575,[2]]]],[[[575,[74]],[575,[74]]]],[[[575,[36]],[575,[36]]]],[[[575,[27]],[575,[27]]]],[[[575,[19]],[575,[19]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[473]],[575,[473]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[36]],[575,[36]]]],[[[575,[1]],[575,[1]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[19]],[575,[19]]]],[[[575,[533]],[575,[533]]]],[[[575,[74]],[575,[74]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[473]],[575,[473]]]],[[[574,[36]],36]],[[[574,[36]],36]],[[[574,[2]],2]],[[[574,[474]],[574,[474]]]],[[[574,[479]],479]],[[[574,[463]],463]],[[[574,[473]],473]],[[[574,[473]],[574,[473]]]],[[[574,[15]],15]],[[[574,[74]],74]],[[[574,[473]],[574,[473]]]],[[[574,[36]],[574,[36]]]],[[[574,[27]],[574,[27]]]],[[[574,[533]],533]],[[[574,[474]],[574,[474]]]],[[[574,[19]],19]],[[[574,[27]],27]],[[[574,[36]],[574,[36]]]],[[[574,[1]],1]],[[[574,[2]],[574,[2]]]],[[[574,[474]],474]],[[[574,[74]],[574,[74]]]],[[[574,[473]],473]],[[[574,[479]],[574,[479]]]],[[[574,[1]],1]],[[[574,[1]],[574,[1]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],15]],[[[574,[463]],[574,[463]]]],[[[574,[479]],[574,[479]]]],[[[574,[479]],479]],[[[574,[463]],[574,[463]]]],[[[574,[15]],[574,[15]]]],[[[574,[533]],[574,[533]]]],[[[574,[27]],[574,[27]]]],[[[574,[74]],74]],[[[574,[474]],474]],[[[574,[27]],27]],[[[574,[2]],[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[74]],[574,[74]]]],[[[574,[2]],2]],[[[574,[533]],533]],[[[574,[19]],[574,[19]]]],[[[574,[15]],[574,[15]]]],[[[574,[463]],463]],[[[574,[1]],[574,[1]]]],[[[574,[19]],19]],[[[575,[473]],[575,[473]]]],[[[575,[2]],[575,[2]]]],[[[575,[36]],[575,[36]]]],[[[575,[27]],[575,[27]]]],[[[575,[2]],2]],[[[575,[1]],1]],[[[575,[2]],2]],[[[575,[479]],479]],[[[575,[15]],15]],[[[575,[463]],463]],[[[575,[19]],19]],[[[575,[74]],74]],[[[575,[15]],15]],[[[575,[15]],[575,[15]]]],[[[575,[27]],27]],[[[575,[474]],474]],[[[575,[1]],[575,[1]]]],[[[575,[474]],474]],[[[575,[1]],[575,[1]]]],[[[575,[19]],19]],[[[575,[474]],[575,[474]]]],[[[575,[27]],[575,[27]]]],[[[575,[473]],[575,[473]]]],[[[575,[19]],[575,[19]]]],[[[575,[473]],473]],[[[575,[474]],[575,[474]]]],[[[575,[36]],[575,[36]]]],[[[575,[533]],[575,[533]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],[575,[479]]]],[[[575,[15]],[575,[15]]]],[[[575,[533]],533]],[[[575,[463]],463]],[[[575,[533]],533]],[[[575,[533]],[575,[533]]]],[[[575,[74]],[575,[74]]]],[[[575,[27]],27]],[[[575,[479]],479]],[[[575,[19]],[575,[19]]]],[[[575,[74]],74]],[[[575,[473]],473]],[[[575,[1]],1]],[[[575,[2]],[575,[2]]]],[[[575,[36]],36]],[[[575,[36]],36]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]]],[[[575,[463]],[575,[463]]]],[[577,577]],[[577,2]],[[578,578]],[[578,19]],[[579,15]],[[579,579]],[[580,27]],[[580,580]],[[581,479]],[[581,581]],[[405,405]],[[405,1]],[[568,474]],[[568,568]],[[569,569]],[[569,473]],[[570,570]],[[570,36]],[[571,571]],[[571,463]],[[572,572]],[[572,533]],[[573,573]],[[573,74]],[[[574,[15]],[574,[15]]]],[[[574,[463]],[574,[463]]]],[[[574,[473]],[574,[473]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[36]],[574,[36]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[463]],[574,[463]]]],[[[574,[15]],[574,[15]]]],[[[574,[479]],[574,[479]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[1]],[574,[1]]]],[[[574,[473]],[574,[473]]]],[[[574,[36]],[574,[36]]]],[[[574,[74]],[574,[74]]]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[27]],[574,[27]]]],[[[574,[533]],[574,[533]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[479]],[574,[479]]]],[[[574,[1]],[574,[1]]]],[[[574,[74]],[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[19]],[574,[19]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[533]],[574,[533]]]],[[[574,[2]],[574,[2]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[463]],[574,[463]]]],[[[574,[36]],[574,[36]]]],[[[574,[533]],[574,[533]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[15]],[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[27]],[574,[27]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[2]],[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[473]],[574,[473]]]],[[[574,[2]],[574,[2]]]],[[[575,[19]],[575,[19]]]],[[[575,[36]],[575,[36]]]],[[[575,[474]],[575,[474]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[15]],[575,[15]]]],[[[575,[533]],[575,[533]]]],[[[575,[36]],[575,[36]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[27]],[575,[27]]]],[[[575,[74]],[575,[74]]]],[[[575,[74]],[575,[74]]]],[[[575,[19]],[575,[19]]]],[[[575,[473]],[575,[473]]]],[[[575,[1]],[575,[1]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[27]],[575,[27]]]],[[[575,[1]],[575,[1]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[2]],[575,[2]]]],[[[575,[473]],[575,[473]]]],[[[575,[533]],[575,[533]]]],[[[575,[2]],[575,[2]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[479]],[575,[479]]]],[[[575,[463]],[575,[463]]]],[[[575,[1]],[575,[1]]]],[[[575,[19]],[575,[19]]]],[[[575,[479]],[575,[479]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[27]],[575,[27]]]],[[[575,[15]],[575,[15]]]],[[[575,[473]],[575,[473]]]],[[[575,[533]],[575,[533]]]],[[[575,[463]],[575,[463]]]],[[[575,[2]],[575,[2]]]],[[[575,[474]],[575,[474]]]],[[[575,[36]],[575,[36]]]],[[[575,[15]],[575,[15]]]],[[[575,[474]],[575,[474]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[577,577]],[[577,2]],[[578,578]],[[578,19]],[[579,15]],[[579,579]],[[580,27]],[[580,580]],[[581,479]],[[581,581]],[[405,1]],[[405,405]],[[568,568]],[[568,474]],[[569,473]],[[569,569]],[[570,36]],[[570,570]],[[571,571]],[[571,463]],[[572,572]],[[572,533]],[[573,74]],[[573,573]],[[[574,[2]],[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],15]],[[[574,[19]],19]],[[[574,[479]],[574,[479]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],36]],[[[574,[2]],[574,[2]]]],[[[574,[463]],[574,[463]]]],[[[574,[15]],[574,[15]]]],[[[574,[36]],[574,[36]]]],[[[574,[463]],[574,[463]]]],[[[574,[74]],74]],[[[574,[19]],19]],[[[574,[36]],36]],[[[574,[474]],[574,[474]]]],[[[574,[1]],1]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[2]],2]],[[[574,[27]],[574,[27]]]],[[[574,[15]],15]],[[[574,[533]],[574,[533]]]],[[[574,[533]],533]],[[[574,[74]],74]],[[[574,[463]],463]],[[[574,[473]],[574,[473]]]],[[[574,[473]],[574,[473]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],479]],[[[574,[27]],27]],[[[574,[19]],[574,[19]]]],[[[574,[474]],474]],[[[574,[479]],[574,[479]]]],[[[574,[473]],473]],[[[574,[1]],1]],[[[574,[74]],[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[463]],463]],[[[574,[473]],473]],[[[574,[479]],479]],[[[574,[533]],533]],[[[574,[15]],[574,[15]]]],[[[574,[474]],474]],[[[574,[2]],2]],[[[574,[27]],27]],[[[574,[27]],[574,[27]]]],[[[575,[463]],[575,[463]]]],[[[575,[2]],2]],[[[575,[474]],474]],[[[575,[74]],74]],[[[575,[473]],[575,[473]]]],[[[575,[74]],[575,[74]]]],[[[575,[74]],74]],[[[575,[2]],[575,[2]]]],[[[575,[36]],[575,[36]]]],[[[575,[463]],[575,[463]]]],[[[575,[473]],[575,[473]]]],[[[575,[27]],27]],[[[575,[15]],[575,[15]]]],[[[575,[1]],1]],[[[575,[15]],15]],[[[575,[15]],[575,[15]]]],[[[575,[19]],[575,[19]]]],[[[575,[19]],19]],[[[575,[19]],[575,[19]]]],[[[575,[473]],473]],[[[575,[1]],[575,[1]]]],[[[575,[479]],479]],[[[575,[473]],473]],[[[575,[533]],533]],[[[575,[1]],1]],[[[575,[474]],[575,[474]]]],[[[575,[2]],[575,[2]]]],[[[575,[36]],36]],[[[575,[15]],15]],[[[575,[474]],[575,[474]]]],[[[575,[463]],463]],[[[575,[479]],479]],[[[575,[27]],[575,[27]]]],[[[575,[463]],463]],[[[575,[533]],[575,[533]]]],[[[575,[36]],[575,[36]]]],[[[575,[479]],[575,[479]]]],[[[575,[533]],[575,[533]]]],[[[575,[474]],474]],[[[575,[27]],27]],[[[575,[27]],[575,[27]]]],[[[575,[36]],36]],[[[575,[19]],19]],[[[575,[74]],[575,[74]]]],[[[575,[2]],2]],[[[575,[1]],[575,[1]]]],[[[575,[533]],533]],[[[575,[479]],[575,[479]]]],[[[574,[1]],[574,[1]]]],[[[574,[15]],[574,[15]]]],[[[574,[19]],[574,[19]]]],[[[574,[27]],[574,[27]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[474]],[574,[474]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]]],[[[574,[474]],[574,[474]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[473]],[574,[473]]]],[[[574,[533]],[574,[533]]]],[[[574,[473]],[574,[473]]]],[[[574,[463]],[574,[463]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[74]],[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[2]],[574,[2]]]],[[[574,[533]],[574,[533]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[36]],[574,[36]]]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[463]],[574,[463]]]],[[[574,[19]],[574,[19]]]],[[[574,[36]],[574,[36]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[2]],[574,[2]]]],[[[574,[463]],[574,[463]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[2]],[574,[2]]]],[[[574,[74]],[574,[74]]]],[[[574,[473]],[574,[473]]]],[[[574,[19]],[574,[19]]]],[[[574,[36]],[574,[36]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],[574,[533]]]],[[[574,[74]],[574,[74]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[15]],[574,[15]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[27]],[574,[27]]]],[[[574,[15]],[574,[15]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[2]],[575,[2]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[27]],[575,[27]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[1]],[575,[1]]]],[[[575,[2]],[575,[2]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[74]],[575,[74]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[36]],[575,[36]]]],[[[575,[74]],[575,[74]]]],[[[575,[15]],[575,[15]]]],[[[575,[1]],[575,[1]]]],[[[575,[474]],[575,[474]]]],[[[575,[19]],[575,[19]]]],[[[575,[533]],[575,[533]]]],[[[575,[463]],[575,[463]]]],[[[575,[474]],[575,[474]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[74]],[575,[74]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[19]],[575,[19]]]],[[[575,[2]],[575,[2]]]],[[[575,[27]],[575,[27]]]],[[[575,[479]],[575,[479]]]],[[[575,[473]],[575,[473]]]],[[[575,[36]],[575,[36]]]],[[[575,[1]],[575,[1]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[15]],[575,[15]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[19]],[575,[19]]]],[[[575,[15]],[575,[15]]]],[[[575,[533]],[575,[533]]]],[[[575,[36]],[575,[36]]]],[[[575,[479]],[575,[479]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[474]],[575,[474]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[575,[479]],[575,[479]]]],[[[575,[463]],[575,[463]]]],[[[575,[27]],[575,[27]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[473]],[575,[473]]]],[[[575,[463]],[575,[463]]]],[[[575,[533]],[575,[533]]]],[[[575,[473]],[575,[473]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],533]],[[[574,[2]],[574,[2]]]],[[[574,[15]],[574,[15]]]],[[[574,[463]],[574,[463]]]],[[[574,[19]],[574,[19]]]],[[[574,[474]],474]],[[[574,[2]],2]],[[[574,[2]],[574,[2]]]],[[[574,[36]],[574,[36]]]],[[[574,[463]],463]],[[[574,[533]],533]],[[[574,[27]],[574,[27]]]],[[[574,[473]],473]],[[[574,[15]],15]],[[[574,[1]],1]],[[[574,[19]],19]],[[[574,[36]],[574,[36]]]],[[[574,[74]],[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[36]],36]],[[[574,[27]],27]],[[[574,[1]],[574,[1]]]],[[[574,[15]],[574,[15]]]],[[[574,[533]],[574,[533]]]],[[[574,[19]],19]],[[[574,[479]],479]],[[[574,[473]],[574,[473]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],15]],[[[574,[474]],474]],[[[574,[27]],27]],[[[574,[27]],[574,[27]]]],[[[574,[2]],2]],[[[574,[36]],36]],[[[574,[473]],473]],[[[574,[479]],479]],[[[574,[74]],74]],[[[574,[463]],[574,[463]]]],[[[574,[479]],[574,[479]]]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[1]],1]],[[[574,[474]],[574,[474]]]],[[[574,[463]],463]],[[[574,[19]],[574,[19]]]],[[[574,[74]],74]],[[[574,[473]],[574,[473]]]],[[[575,[463]],463]],[[[575,[15]],15]],[[[575,[2]],[575,[2]]]],[[[575,[36]],36]],[[[575,[15]],[575,[15]]]],[[[575,[479]],[575,[479]]]],[[[575,[2]],2]],[[[575,[474]],[575,[474]]]],[[[575,[533]],533]],[[[575,[27]],[575,[27]]]],[[[575,[473]],[575,[473]]]],[[[575,[474]],474]],[[[575,[19]],19]],[[[575,[36]],[575,[36]]]],[[[575,[19]],[575,[19]]]],[[[575,[27]],[575,[27]]]],[[[575,[479]],479]],[[[575,[27]],27]],[[[575,[36]],[575,[36]]]],[[[575,[2]],2]],[[[575,[473]],[575,[473]]]],[[[575,[473]],473]],[[[575,[1]],[575,[1]]]],[[[575,[74]],[575,[74]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],479]],[[[575,[1]],[575,[1]]]],[[[575,[15]],[575,[15]]]],[[[575,[74]],[575,[74]]]],[[[575,[533]],533]],[[[575,[473]],473]],[[[575,[15]],15]],[[[575,[474]],474]],[[[575,[463]],463]],[[[575,[463]],[575,[463]]]],[[[575,[36]],36]],[[[575,[27]],27]],[[[575,[2]],[575,[2]]]],[[[575,[1]],1]],[[[575,[474]],[575,[474]]]],[[[575,[19]],[575,[19]]]],[[[575,[533]],[575,[533]]]],[[[575,[19]],19]],[[[575,[1]],1]],[[[575,[533]],[575,[533]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],74]],[[[575,[74]],74]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[568,[[12,[568]]]],[569,[[12,[569]]]],[570,[[12,[570]]]],[571,[[12,[571]]]],[572,[[12,[572]]]],[573,[[12,[573]]]],[[577,2],[[12,[577]]]],[[578,19],[[12,[578]]]],[[579,15],[[12,[579]]]],[[580,27],[[12,[580]]]],[[581,479],[[12,[581]]]],[[405,1],[[12,[405]]]],[[577,577],[[12,[577]]]],[[578,578],[[12,[578]]]],[[579,579],[[12,[579]]]],[[580,580],[[12,[580]]]],[[581,581],[[12,[581]]]],[[405,405],[[12,[405]]]],[[568,568],[[12,[568]]]],[[569,569],[[12,[569]]]],[[570,570],[[12,[570]]]],[[571,571],[[12,[571]]]],[[572,572],[[12,[572]]]],[[573,573],[[12,[573]]]],[568,[[12,[568]]]],[569,[[12,[569]]]],[570,[[12,[570]]]],[571,[[12,[571]]]],[572,[[12,[572]]]],[573,[[12,[573]]]],[577,[[12,[577]]]],[578,[[12,[578]]]],[579,[[12,[579]]]],[580,[[12,[580]]]],[581,[[12,[581]]]],[405,[[12,[405]]]],[[577,15],[[12,[577]]]],[[578,15],[[12,[578]]]],[[579,15],[[12,[579]]]],[[580,15],[[12,[580]]]],[[581,15],[[12,[581]]]],[[405,15],[[12,[405]]]],[[568,15],[[12,[568]]]],[[569,15],[[12,[569]]]],[[570,15],[[12,[570]]]],[[571,15],[[12,[571]]]],[[572,15],[[12,[572]]]],[[573,15],[[12,[573]]]],[582,582],[583,583],[91,91],[584,584],[577,577],[578,578],[579,579],[580,580],[581,581],[405,405],[568,568],[569,569],[570,570],[571,571],[572,572],[573,573],[[[574,[369]]],[[574,[369]]]],[[[575,[369]]],[[575,[369]]]],[585,585],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[577,577],44],[[578,578],44],[[579,579],44],[[580,580],44],[[581,581],44],[[405,405],44],[[568,568],44],[[569,569],44],[[570,570],44],[[571,571],44],[[572,572],44],[[573,573],44],[[[574,[373]],[574,[373]]],44],[[[575,[373]],[575,[373]]],44],[[[574,[74]]],15],[[[574,[474]]],15],[[[574,[473]]],15],[[[574,[36]]],15],[[[574,[479]]],15],[[[574,[1]]],15],[[[574,[463]]],15],[[[574,[533]]],15],[[[574,[19]]],15],[[[574,[27]]],15],[[[574,[15]]],15],[[[574,[2]]],15],[[[575,[27]]],15],[[[575,[479]]],15],[[[575,[463]]],15],[[[575,[1]]],15],[[[575,[2]]],15],[[[575,[36]]],15],[[[575,[19]]],15],[[[575,[473]]],15],[[[575,[474]]],15],[[[575,[74]]],15],[[[575,[15]]],15],[[[575,[533]]],15],[[[574,[479]]],15],[[[574,[533]]],15],[[[574,[74]]],15],[[[574,[2]]],15],[[[574,[474]]],15],[[[574,[473]]],15],[[[574,[1]]],15],[[[574,[463]]],15],[[[574,[27]]],15],[[[574,[36]]],15],[[[574,[15]]],15],[[[574,[19]]],15],[[[575,[463]]],15],[[[575,[2]]],15],[[[575,[474]]],15],[[[575,[533]]],15],[[[575,[473]]],15],[[[575,[36]]],15],[[[575,[1]]],15],[[[575,[74]]],15],[[[575,[479]]],15],[[[575,[27]]],15],[[[575,[15]]],15],[[[575,[19]]],15],[[],[[574,[495]]]],[[],[[575,[495]]]],[582,10],[583,10],[91,10],[414,[[13,[577]]]],[414,[[13,[578]]]],[414,[[13,[579]]]],[414,[[13,[580]]]],[414,[[13,[581]]]],[414,[[13,[405]]]],[414,[[13,[568]]]],[414,[[13,[569]]]],[414,[[13,[570]]]],[414,[[13,[571]]]],[414,[[13,[572]]]],[414,[[13,[573]]]],[414,[[13,[[575,[501]]]]]],[[[574,[463]],[574,[463]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[473]],[574,[473]]]],[[[574,[533]],[574,[533]]]],[[[574,[463]],[574,[463]]]],[[[574,[74]],[574,[74]]]],[[[574,[36]],[574,[36]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[19]],[574,[19]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[479]],[574,[479]]]],[[[574,[15]],[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[27]],[574,[27]]]],[[[574,[36]],[574,[36]]]],[[[574,[2]],[574,[2]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[2]],[574,[2]]]],[[[574,[474]],[574,[474]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]]],[[[574,[473]],[574,[473]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[19]],[574,[19]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[15]],[574,[15]]]],[[[574,[74]],[574,[74]]]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[2]],[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[473]],[574,[473]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[533]],[574,[533]]]],[[[574,[533]],[574,[533]]]],[[[574,[1]],[574,[1]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[27]],[574,[27]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[463]],[574,[463]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[15]],[574,[15]]]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[575,[2]],[575,[2]]]],[[[575,[36]],[575,[36]]]],[[[575,[36]],[575,[36]]]],[[[575,[474]],[575,[474]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[15]],[575,[15]]]],[[[575,[479]],[575,[479]]]],[[[575,[1]],[575,[1]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[19]],[575,[19]]]],[[[575,[36]],[575,[36]]]],[[[575,[474]],[575,[474]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[463]],[575,[463]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[479]],[575,[479]]]],[[[575,[473]],[575,[473]]]],[[[575,[74]],[575,[74]]]],[[[575,[74]],[575,[74]]]],[[[575,[479]],[575,[479]]]],[[[575,[533]],[575,[533]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[533]],[575,[533]]]],[[[575,[27]],[575,[27]]]],[[[575,[463]],[575,[463]]]],[[[575,[473]],[575,[473]]]],[[[575,[533]],[575,[533]]]],[[[575,[27]],[575,[27]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[2]],[575,[2]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[27]],[575,[27]]]],[[[575,[15]],[575,[15]]]],[[[575,[19]],[575,[19]]]],[[[575,[1]],[575,[1]]]],[[[575,[74]],[575,[74]]]],[[[575,[19]],[575,[19]]]],[[[575,[463]],[575,[463]]]],[[[575,[473]],[575,[473]]]],[[[575,[474]],[575,[474]]]],[[[575,[15]],[575,[15]]]],[[[575,[2]],[575,[2]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[575,[1]],[575,[1]]]],[[[574,[2]],[574,[2]]]],[[[574,[474]],[574,[474]]]],[[[574,[74]],[574,[74]]]],[[[574,[479]],479]],[[[574,[533]],[574,[533]]]],[[[574,[19]],19]],[[[574,[36]],36]],[[[574,[27]],[574,[27]]]],[[[574,[27]],27]],[[[574,[15]],[574,[15]]]],[[[574,[479]],[574,[479]]]],[[[574,[473]],[574,[473]]]],[[[574,[36]],[574,[36]]]],[[[574,[479]],479]],[[[574,[19]],19]],[[[574,[1]],1]],[[[574,[463]],463]],[[[574,[533]],533]],[[[574,[1]],1]],[[[574,[463]],[574,[463]]]],[[[574,[2]],2]],[[[574,[2]],[574,[2]]]],[[[574,[533]],[574,[533]]]],[[[574,[74]],74]],[[[574,[474]],[574,[474]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]]],[[[574,[74]],[574,[74]]]],[[[574,[533]],533]],[[[574,[463]],463]],[[[574,[474]],474]],[[[574,[27]],27]],[[[574,[19]],[574,[19]]]],[[[574,[473]],473]],[[[574,[19]],[574,[19]]]],[[[574,[1]],[574,[1]]]],[[[574,[27]],[574,[27]]]],[[[574,[15]],15]],[[[574,[15]],[574,[15]]]],[[[574,[74]],74]],[[[574,[36]],[574,[36]]]],[[[574,[36]],36]],[[[574,[473]],473]],[[[574,[474]],474]],[[[574,[2]],2]],[[[574,[473]],[574,[473]]]],[[[574,[15]],15]],[[[574,[463]],[574,[463]]]],[[[575,[1]],[575,[1]]]],[[[575,[19]],[575,[19]]]],[[[575,[27]],[575,[27]]]],[[[575,[19]],[575,[19]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],479]],[[[575,[533]],533]],[[[575,[15]],15]],[[[575,[2]],2]],[[[575,[74]],[575,[74]]]],[[[575,[2]],2]],[[[575,[27]],27]],[[[575,[1]],1]],[[[575,[74]],74]],[[[575,[473]],473]],[[[575,[473]],[575,[473]]]],[[[575,[15]],15]],[[[575,[463]],[575,[463]]]],[[[575,[27]],27]],[[[575,[19]],19]],[[[575,[474]],[575,[474]]]],[[[575,[463]],463]],[[[575,[533]],533]],[[[575,[463]],463]],[[[575,[479]],[575,[479]]]],[[[575,[19]],19]],[[[575,[27]],[575,[27]]]],[[[575,[36]],36]],[[[575,[473]],473]],[[[575,[463]],[575,[463]]]],[[[575,[1]],[575,[1]]]],[[[575,[1]],1]],[[[575,[479]],479]],[[[575,[36]],[575,[36]]]],[[[575,[15]],[575,[15]]]],[[[575,[474]],474]],[[[575,[474]],[575,[474]]]],[[[575,[36]],36]],[[[575,[473]],[575,[473]]]],[[[575,[2]],[575,[2]]]],[[[575,[15]],[575,[15]]]],[[[575,[74]],[575,[74]]]],[[[575,[474]],474]],[[[575,[533]],[575,[533]]]],[[[575,[533]],[575,[533]]]],[[[575,[2]],[575,[2]]]],[[[575,[36]],[575,[36]]]],[[[575,[74]],74]],[[582,582],25],[[583,583],25],[[91,91],25],[[584,584],25],[[577,577],25],[[578,578],25],[[579,579],25],[[580,580],25],[[581,581],25],[[405,405],25],[[568,568],25],[[569,569],25],[[570,570],25],[[571,571],25],[[572,572],25],[[573,573],25],[[[574,[[374,[[374,[[374,[374]]]]]]]],[574,[[374,[[374,[[374,[374]]]]]]]]],25],[[[575,[[374,[[374,[[374,[374]]]]]]]],[575,[[374,[[374,[[374,[374]]]]]]]]],25],[[585,585],25],[[582,5],[[13,[423]]]],[[582,5],[[13,[423]]]],[[583,5],[[13,[423]]]],[[583,5],[[13,[423]]]],[[91,5],[[13,[423]]]],[[91,5],[[13,[423]]]],[[584,5],[[13,[423]]]],[[577,5],[[13,[423]]]],[[577,5],[[13,[423]]]],[[577,5],[[13,[423]]]],[[577,5],[[13,[423]]]],[[577,5],[[13,[423]]]],[[577,5],[[13,[423]]]],[[578,5],[[13,[423]]]],[[578,5],[[13,[423]]]],[[578,5],[[13,[423]]]],[[578,5],[[13,[423]]]],[[578,5],[[13,[423]]]],[[578,5],[[13,[423]]]],[[579,5],[[13,[423]]]],[[579,5],[[13,[423]]]],[[579,5],[[13,[423]]]],[[579,5],[[13,[423]]]],[[579,5],[[13,[423]]]],[[579,5],[[13,[423]]]],[[580,5],[[13,[423]]]],[[580,5],[[13,[423]]]],[[580,5],[[13,[423]]]],[[580,5],[[13,[423]]]],[[580,5],[[13,[423]]]],[[580,5],[[13,[423]]]],[[581,5],[[13,[423]]]],[[581,5],[[13,[423]]]],[[581,5],[[13,[423]]]],[[581,5],[[13,[423]]]],[[581,5],[[13,[423]]]],[[581,5],[[13,[423]]]],[[405,5],[[13,[423]]]],[[405,5],[[13,[423]]]],[[405,5],[[13,[423]]]],[[405,5],[[13,[423]]]],[[405,5],[[13,[423]]]],[[405,5],[[13,[423]]]],[[568,5],[[13,[423]]]],[[568,5],[[13,[423]]]],[[568,5],[[13,[423]]]],[[568,5],[[13,[423]]]],[[568,5],[[13,[423]]]],[[568,5],[[13,[423]]]],[[569,5],[[13,[423]]]],[[569,5],[[13,[423]]]],[[569,5],[[13,[423]]]],[[569,5],[[13,[423]]]],[[569,5],[[13,[423]]]],[[569,5],[[13,[423]]]],[[570,5],[[13,[423]]]],[[570,5],[[13,[423]]]],[[570,5],[[13,[423]]]],[[570,5],[[13,[423]]]],[[570,5],[[13,[423]]]],[[570,5],[[13,[423]]]],[[571,5],[[13,[423]]]],[[571,5],[[13,[423]]]],[[571,5],[[13,[423]]]],[[571,5],[[13,[423]]]],[[571,5],[[13,[423]]]],[[571,5],[[13,[423]]]],[[572,5],[[13,[423]]]],[[572,5],[[13,[423]]]],[[572,5],[[13,[423]]]],[[572,5],[[13,[423]]]],[[572,5],[[13,[423]]]],[[572,5],[[13,[423]]]],[[573,5],[[13,[423]]]],[[573,5],[[13,[423]]]],[[573,5],[[13,[423]]]],[[573,5],[[13,[423]]]],[[573,5],[[13,[423]]]],[[573,5],[[13,[423]]]],[[[574,[586]],5],[[13,[423]]]],[[[574,[502]],5],[[13,[423]]]],[[[574,[587]],5],[[13,[423]]]],[[[574,[588]],5],[[13,[423]]]],[[[574,[589]],5],[[13,[423]]]],[[[574,[357]],5],[[13,[423]]]],[[[575,[587]],5],[[13,[423]]]],[[[575,[588]],5],[[13,[423]]]],[[[575,[357]],5],[[13,[423]]]],[[[575,[586]],5],[[13,[423]]]],[[[575,[502]],5],[[13,[423]]]],[[[575,[589]],5],[[13,[423]]]],[[585,5],[[13,[423]]]],[[]],[3,583],[[]],[3],[483,583],[[]],[[]],[[]],[[]],[577,578],[578,579],[[]],[577,579],[577,580],[[]],[579,580],[578,580],[580,581],[578,581],[577,581],[[]],[579,581],[[]],[590,405],[577,405],[578,405],[[]],[577,569],[[]],[568,569],[568,570],[[]],[577,570],[578,570],[569,570],[569,571],[578,571],[577,571],[570,571],[568,571],[579,571],[[]],[569,572],[580,572],[577,572],[571,572],[[]],[579,572],[578,572],[568,572],[570,572],[577,573],[[]],[568,573],[569,573],[[]],[591,[[12,[[575,[592]]]]]],[[]],[[]],[[[574,[15]]],[[574,[15]]]],[[[574,[1]]],[[574,[1]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[27]]],[[574,[27]]]],[[[574,[2]]],[[574,[2]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[19]]],[[574,[19]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[463]]],[[575,[463]]]],[470,[[12,[[575,[593]]]]]],[469,[[12,[[575,[593]]]]]],[473,[[12,[[575,[593]]]]]],[36,[[12,[[575,[593]]]]]],[463,[[12,[[575,[593]]]]]],[474,[[12,[[575,[593]]]]]],[74,[[12,[[575,[593]]]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[15]]],[[574,[15]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[2]]],[[574,[2]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[1]]],[[574,[1]]]],[[[574,[19]]],[[574,[19]]]],[[[574,[27]]],[[574,[27]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[474]]],[[574,[474]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[1]]],[[575,[1]]]],[10,[[13,[577]]]],[10,[[13,[578]]]],[10,[[13,[579]]]],[10,[[13,[580]]]],[10,[[13,[581]]]],[10,[[13,[405]]]],[10,[[13,[568]]]],[10,[[13,[569]]]],[10,[[13,[570]]]],[10,[[13,[571]]]],[10,[[13,[572]]]],[10,[[13,[573]]]],[[10,15],[[13,[[575,[594]]]]]],[19,[[12,[[575,[593]]]]]],[15,[[12,[[575,[593]]]]]],[27,[[12,[[575,[593]]]]]],[2,[[12,[[575,[593]]]]]],[1,[[12,[[575,[593]]]]]],[577,2],[578,19],[579,15],[580,27],[581,479],[405,1],[568,474],[569,473],[570,36],[571,463],[572,533],[573,74],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[577,49]],[[578,49]],[[579,49]],[[580,49]],[[581,49]],[[405,49]],[[568,49]],[[569,49]],[[570,49]],[[571,49]],[[572,49]],[[573,49]],[[[574,[46]],49]],[[[575,[46]],49]],[577,15],[578,15],[579,15],[580,15],[581,15],[405,15],[577,15],[578,15],[579,15],[580,15],[581,15],[405,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[568,25],[569,25],[570,25],[571,25],[572,25],[573,25],[[[574,[533]]],25],[[[574,[463]]],25],[[[574,[36]]],25],[[[574,[473]]],25],[[[574,[474]]],25],[[[574,[74]]],25],[[[575,[474]]],25],[[[575,[463]]],25],[[[575,[533]]],25],[[[575,[473]]],25],[[[575,[74]]],25],[[[575,[36]]],25],[[[575,[576]]],25],[[[574,[473]]],25],[[[574,[463]]],25],[[[574,[74]]],25],[[[574,[533]]],25],[[[574,[36]]],25],[[[574,[474]]],25],[[[575,[576]]],25],[[[575,[36]]],25],[[[575,[463]]],25],[[[575,[473]]],25],[[[575,[533]]],25],[[[575,[474]]],25],[[[575,[74]]],25],[577,25],[578,25],[579,25],[580,25],[581,25],[405,25],[[[574,[19]]],25],[[[574,[479]]],25],[[[574,[1]]],25],[[[574,[27]]],25],[[[574,[2]]],25],[[[574,[15]]],25],[[[575,[27]]],25],[[[575,[19]]],25],[[[575,[479]]],25],[[[575,[1]]],25],[[[575,[15]]],25],[[[575,[2]]],25],[[],25],[[[575,[595]]],25],[91,584],0,0,[577,15],[578,15],[579,15],[580,15],[581,15],[405,15],[568,15],[569,15],[570,15],[571,15],[572,15],[573,15],[[[574,[533]]],15],[[[574,[479]]],15],[[[574,[473]]],15],[[[574,[36]]],15],[[[574,[474]]],15],[[[574,[74]]],15],[[[574,[1]]],15],[[[574,[463]]],15],[[[574,[2]]],15],[[[574,[19]]],15],[[[574,[15]]],15],[[[574,[27]]],15],[[[575,[533]]],15],[[[575,[27]]],15],[[[575,[19]]],15],[[[575,[2]]],15],[[[575,[1]]],15],[[[575,[479]]],15],[[[575,[474]]],15],[[[575,[15]]],15],[[[575,[463]]],15],[[[575,[74]]],15],[[[575,[36]]],15],[[[575,[473]]],15],[[]],[[],[[575,[596]]]],[[]],[[],[[575,[596]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[19]],[574,[19]]]],[[[574,[533]],[574,[533]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[2]],[574,[2]]]],[[[574,[15]],[574,[15]]]],[[[574,[473]],[574,[473]]]],[[[574,[479]],[574,[479]]]],[[[574,[2]],[574,[2]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],[574,[15]]]],[[[574,[463]],[574,[463]]]],[[[574,[15]],[574,[15]]]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[1]],[574,[1]]]],[[[574,[27]],[574,[27]]]],[[[574,[19]],[574,[19]]]],[[[574,[74]],[574,[74]]]],[[[574,[474]],[574,[474]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[19]],[574,[19]]]],[[[574,[474]],[574,[474]]]],[[[574,[473]],[574,[473]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[2]],[574,[2]]]],[[[574,[74]],[574,[74]]]],[[[574,[27]],[574,[27]]]],[[[574,[473]],[574,[473]]]],[[[574,[36]],[574,[36]]]],[[[574,[463]],[574,[463]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[463]],[574,[463]]]],[[[574,[533]],[574,[533]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[36]],[574,[36]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[1]],[574,[1]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[74]],[574,[74]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[2]],[575,[2]]]],[[[575,[1]],[575,[1]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],[575,[479]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[474]],[575,[474]]]],[[[575,[474]],[575,[474]]]],[[[575,[479]],[575,[479]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[15]],[575,[15]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[15]],[575,[15]]]],[[[575,[27]],[575,[27]]]],[[[575,[473]],[575,[473]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[1]],[575,[1]]]],[[[575,[74]],[575,[74]]]],[[[575,[474]],[575,[474]]]],[[[575,[36]],[575,[36]]]],[[[575,[27]],[575,[27]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[2]],[575,[2]]]],[[[575,[463]],[575,[463]]]],[[[575,[19]],[575,[19]]]],[[[575,[36]],[575,[36]]]],[[[575,[19]],[575,[19]]]],[[[575,[19]],[575,[19]]]],[[[575,[27]],[575,[27]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[533]],[575,[533]]]],[[[575,[2]],[575,[2]]]],[[[575,[1]],[575,[1]]]],[[[575,[473]],[575,[473]]]],[[[575,[15]],[575,[15]]]],[[[575,[533]],[575,[533]]]],[[[575,[36]],[575,[36]]]],[[[575,[473]],[575,[473]]]],[[[575,[533]],[575,[533]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[574,[1]],[574,[1]]]],[[[574,[19]],[574,[19]]]],[[[574,[533]],533]],[[[574,[19]],[574,[19]]]],[[[574,[36]],[574,[36]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],15]],[[[574,[473]],473]],[[[574,[463]],[574,[463]]]],[[[574,[463]],463]],[[[574,[463]],[574,[463]]]],[[[574,[479]],479]],[[[574,[474]],474]],[[[574,[19]],19]],[[[574,[473]],[574,[473]]]],[[[574,[36]],[574,[36]]]],[[[574,[2]],2]],[[[574,[479]],479]],[[[574,[74]],[574,[74]]]],[[[574,[474]],474]],[[[574,[1]],1]],[[[574,[27]],[574,[27]]]],[[[574,[27]],27]],[[[574,[479]],[574,[479]]]],[[[574,[27]],27]],[[[574,[74]],74]],[[[574,[473]],[574,[473]]]],[[[574,[27]],[574,[27]]]],[[[574,[533]],533]],[[[574,[15]],[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],15]],[[[574,[74]],[574,[74]]]],[[[574,[19]],19]],[[[574,[36]],36]],[[[574,[1]],1]],[[[574,[474]],[574,[474]]]],[[[574,[2]],[574,[2]]]],[[[574,[2]],2]],[[[574,[36]],36]],[[[574,[74]],74]],[[[574,[463]],463]],[[[574,[15]],[574,[15]]]],[[[574,[473]],473]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]]],[[[574,[2]],[574,[2]]]],[[[575,[15]],15]],[[[575,[74]],[575,[74]]]],[[[575,[473]],473]],[[[575,[1]],1]],[[[575,[533]],533]],[[[575,[27]],[575,[27]]]],[[[575,[463]],463]],[[[575,[74]],74]],[[[575,[74]],[575,[74]]]],[[[575,[36]],[575,[36]]]],[[[575,[474]],[575,[474]]]],[[[575,[474]],474]],[[[575,[463]],[575,[463]]]],[[[575,[27]],27]],[[[575,[2]],2]],[[[575,[533]],[575,[533]]]],[[[575,[19]],19]],[[[575,[36]],36]],[[[575,[479]],[575,[479]]]],[[[575,[19]],[575,[19]]]],[[[575,[15]],[575,[15]]]],[[[575,[1]],[575,[1]]]],[[[575,[473]],[575,[473]]]],[[[575,[479]],479]],[[[575,[473]],[575,[473]]]],[[[575,[15]],15]],[[[575,[463]],463]],[[[575,[36]],[575,[36]]]],[[[575,[2]],2]],[[[575,[2]],[575,[2]]]],[[[575,[479]],479]],[[[575,[19]],19]],[[[575,[1]],[575,[1]]]],[[[575,[1]],1]],[[[575,[27]],27]],[[[575,[36]],36]],[[[575,[15]],[575,[15]]]],[[[575,[19]],[575,[19]]]],[[[575,[474]],474]],[[[575,[74]],74]],[[[575,[27]],[575,[27]]]],[[[575,[474]],[575,[474]]]],[[[575,[479]],[575,[479]]]],[[[575,[533]],533]],[[[575,[473]],473]],[[[575,[463]],[575,[463]]]],[[[575,[2]],[575,[2]]]],[[[575,[533]],[575,[533]]]],[[[574,[473]]]],[[[574,[36]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[74]]]],[[[574,[463]]]],[[[574,[533]]]],[[[574,[474]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[36]]],[[574,[36]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[474]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[19]]]],[[[575,[463]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[15]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[2]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[479]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[36]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[473]]]],[[[575,[1]]]],[[[575,[74]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[27]]]],[[[575,[533]]]],[2,[[12,[577]]]],[19,[[12,[578]]]],[15,[[12,[579]]]],[27,[[12,[580]]]],[479,[[12,[581]]]],[1,[[12,[405]]]],[474,[[12,[568]]]],[473,[[12,[569]]]],[36,[[12,[570]]]],[463,[[12,[571]]]],[533,[[12,[572]]]],[74,[[12,[573]]]],[2,577],[19,578],[15,579],[27,580],[479,581],[1,405],[474,568],[473,569],[36,570],[463,571],[533,572],[74,573],[[[575,[479]]],[[575,[479]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[15]]],[[575,[15]]]],[[[574,[15]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[474]]]],[[[574,[15]]],[[574,[15]]]],[[[574,[19]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[479]]]],[[[574,[533]]]],[[[574,[2]]],[[574,[2]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[463]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[74]]]],[[[574,[473]]]],[[[574,[27]]]],[[[574,[36]]]],[[[574,[27]]],[[574,[27]]]],[[[574,[19]]],[[574,[19]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[1]]]],[[[574,[2]]]],[[[574,[1]]],[[574,[1]]]],[[[575,[15]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[463]]]],[[[575,[473]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[1]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[36]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[479]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[2]]]],[[[575,[74]]]],[[[575,[533]]]],[[[575,[27]]]],[[[575,[474]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[19]]]],[[],[[575,[597]]]],[568],[569],[570],[571],[572],[573],[568],[569],[570],[571],[572],[573],[[577,577],[[12,[44]]]],[[578,578],[[12,[44]]]],[[579,579],[[12,[44]]]],[[580,580],[[12,[44]]]],[[581,581],[[12,[44]]]],[[405,405],[[12,[44]]]],[[568,568],[[12,[44]]]],[[569,569],[[12,[44]]]],[[570,570],[[12,[44]]]],[[571,571],[[12,[44]]]],[[572,572],[[12,[44]]]],[[573,573],[[12,[44]]]],[[[574,[[377,[[377,[[377,[377]]]]]]]],[574,[[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[[[575,[[377,[[377,[[377,[377]]]]]]]],[575,[[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[[[574,[463]],15],[[574,[463]]]],[[[574,[36]],15],[[574,[36]]]],[[[574,[1]],15],[[574,[1]]]],[[[574,[2]],15],[[574,[2]]]],[[[574,[533]],15],[[574,[533]]]],[[[574,[479]],15],[[574,[479]]]],[[[574,[27]],15],[[574,[27]]]],[[[574,[474]],15],[[574,[474]]]],[[[574,[74]],15],[[574,[74]]]],[[[574,[19]],15],[[574,[19]]]],[[[574,[15]],15],[[574,[15]]]],[[[574,[473]],15],[[574,[473]]]],[[[575,[74]],2],[[575,[74]]]],[[[575,[463]],2],[[575,[463]]]],[[[575,[36]],15],[[575,[36]]]],[[[575,[74]],1],[[575,[74]]]],[[[575,[473]],15],[[575,[473]]]],[[[575,[474]],1],[[575,[474]]]],[[[575,[474]],15],[[575,[474]]]],[[[575,[463]],1],[[575,[463]]]],[[[575,[1]],1],[[575,[1]]]],[[[575,[474]],2],[[575,[474]]]],[[[575,[2]],1],[[575,[2]]]],[[[575,[473]],1],[[575,[473]]]],[[[575,[74]],15],[[575,[74]]]],[[[575,[2]],2],[[575,[2]]]],[[[575,[1]],1],[[575,[1]]]],[[[575,[2]],2],[[575,[2]]]],[[[575,[74]],1],[[575,[74]]]],[[[575,[36]],1],[[575,[36]]]],[[[575,[2]],15],[[575,[2]]]],[[[575,[27]],1],[[575,[27]]]],[[[575,[19]],2],[[575,[19]]]],[[[575,[27]],2],[[575,[27]]]],[[[575,[27]],2],[[575,[27]]]],[[[575,[27]],1],[[575,[27]]]],[[[575,[27]],2],[[575,[27]]]],[[[575,[19]],1],[[575,[19]]]],[[[575,[463]],1],[[575,[463]]]],[[[575,[474]],1],[[575,[474]]]],[[[575,[1]],2],[[575,[1]]]],[[[575,[473]],1],[[575,[473]]]],[[[575,[74]],1],[[575,[74]]]],[[[575,[74]],2],[[575,[74]]]],[[[575,[19]],1],[[575,[19]]]],[[[575,[36]],2],[[575,[36]]]],[[[575,[19]],2],[[575,[19]]]],[[[575,[15]],2],[[575,[15]]]],[[[575,[473]],1],[[575,[473]]]],[[[575,[1]],2],[[575,[1]]]],[[[575,[463]],2],[[575,[463]]]],[[[575,[74]],2],[[575,[74]]]],[[[575,[473]],2],[[575,[473]]]],[[[575,[15]],1],[[575,[15]]]],[[[575,[479]],15],[[575,[479]]]],[[[575,[19]],2],[[575,[19]]]],[[[575,[463]],1],[[575,[463]]]],[[[575,[15]],1],[[575,[15]]]],[[[575,[1]],2],[[575,[1]]]],[[[575,[27]],1],[[575,[27]]]],[[[575,[36]],2],[[575,[36]]]],[[[575,[36]],1],[[575,[36]]]],[[[575,[474]],2],[[575,[474]]]],[[[575,[15]],2],[[575,[15]]]],[[[575,[463]],2],[[575,[463]]]],[[[575,[27]],1],[[575,[27]]]],[[[575,[1]],2],[[575,[1]]]],[[[575,[27]],2],[[575,[27]]]],[[[575,[36]],2],[[575,[36]]]],[[[575,[473]],2],[[575,[473]]]],[[[575,[474]],2],[[575,[474]]]],[[[575,[473]],2],[[575,[473]]]],[[[575,[36]],1],[[575,[36]]]],[[[575,[27]],15],[[575,[27]]]],[[[575,[15]],2],[[575,[15]]]],[[[575,[36]],1],[[575,[36]]]],[[[575,[1]],1],[[575,[1]]]],[[[575,[15]],1],[[575,[15]]]],[[[575,[2]],1],[[575,[2]]]],[[[575,[533]],15],[[575,[533]]]],[[[575,[19]],2],[[575,[19]]]],[[[575,[473]],1],[[575,[473]]]],[[[575,[74]],2],[[575,[74]]]],[[[575,[463]],15],[[575,[463]]]],[[[575,[15]],15],[[575,[15]]]],[[[575,[463]],1],[[575,[463]]]],[[[575,[19]],1],[[575,[19]]]],[[[575,[474]],2],[[575,[474]]]],[[[575,[2]],1],[[575,[2]]]],[[[575,[1]],15],[[575,[1]]]],[[[575,[473]],2],[[575,[473]]]],[[[575,[15]],1],[[575,[15]]]],[[[575,[463]],2],[[575,[463]]]],[[[575,[36]],2],[[575,[36]]]],[[[575,[1]],1],[[575,[1]]]],[[[575,[2]],2],[[575,[2]]]],[[[575,[19]],15],[[575,[19]]]],[[[575,[474]],1],[[575,[474]]]],[[[575,[2]],1],[[575,[2]]]],[[[575,[19]],1],[[575,[19]]]],[[[575,[474]],1],[[575,[474]]]],[[[575,[74]],1],[[575,[74]]]],[[[575,[2]],2],[[575,[2]]]],[[[575,[15]],2],[[575,[15]]]],[262,[[575,[74]]]],[262,[[575,[474]]]],[262,[[575,[2]]]],[262,[[575,[473]]]],[262,[[575,[1]]]],[262,[[575,[533]]]],[262,[[575,[463]]]],[262,[[575,[463]]]],[262,[[575,[74]]]],[262,[[575,[473]]]],[262,[[575,[36]]]],[262,[[575,[533]]]],[262,[[575,[474]]]],[262,[[575,[2]]]],[262,[[575,[19]]]],[262,[[575,[479]]]],[262,[[575,[15]]]],[262,[[575,[19]]]],[262,[[575,[27]]]],[262,[[575,[1]]]],[262,[[575,[15]]]],[262,[[575,[27]]]],[262,[[575,[479]]]],[262,[[575,[36]]]],[458],[458],[458],[[[574,[1]],[574,[1]]]],[[[574,[74]],[574,[74]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],[574,[533]]]],[[[574,[533]],[574,[533]]]],[[[574,[36]],[574,[36]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[15]],[574,[15]]]],[[[574,[27]],[574,[27]]]],[[[574,[473]],[574,[473]]]],[[[574,[19]],[574,[19]]]],[[[574,[27]],[574,[27]]]],[[[574,[2]],[574,[2]]]],[[[574,[474]],[574,[474]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[473]],[574,[473]]]],[[[574,[479]],[574,[479]]]],[[[574,[15]],[574,[15]]]],[[[574,[15]],[574,[15]]]],[[[574,[463]],[574,[463]]]],[[[574,[36]],[574,[36]]]],[[[574,[2]],[574,[2]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[36]],[574,[36]]]],[[[574,[19]],[574,[19]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[463]],[574,[463]]]],[[[574,[474]],[574,[474]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[473]],[574,[473]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[27]],[574,[27]]]],[[[574,[474]],[574,[474]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[2]],[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[463]],[574,[463]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[74]],[574,[74]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[1]],[574,[1]]]],[[[575,[15]],[575,[15]]]],[[[575,[15]],[575,[15]]]],[[[575,[36]],[575,[36]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[463]],[575,[463]]]],[[[575,[473]],[575,[473]]]],[[[575,[19]],[575,[19]]]],[[[575,[2]],[575,[2]]]],[[[575,[74]],[575,[74]]]],[[[575,[27]],[575,[27]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[479]],[575,[479]]]],[[[575,[533]],[575,[533]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[533]],[575,[533]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[74]],[575,[74]]]],[[[575,[1]],[575,[1]]]],[[[575,[36]],[575,[36]]]],[[[575,[473]],[575,[473]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[479]],[575,[479]]]],[[[575,[479]],[575,[479]]]],[[[575,[2]],[575,[2]]]],[[[575,[1]],[575,[1]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[27]],[575,[27]]]],[[[575,[19]],[575,[19]]]],[[[575,[2]],[575,[2]]]],[[[575,[1]],[575,[1]]]],[[[575,[474]],[575,[474]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[474]],[575,[474]]]],[[[575,[19]],[575,[19]]]],[[[575,[15]],[575,[15]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[474]],[575,[474]]]],[[[575,[533]],[575,[533]]]],[[[575,[27]],[575,[27]]]],[[[575,[36]],[575,[36]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[74]],[575,[74]]]],[[[575,[463]],[575,[463]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[473]],[575,[473]]]],[[[574,[474]],474]],[[[574,[74]],74]],[[[574,[479]],[574,[479]]]],[[[574,[473]],473]],[[[574,[1]],[574,[1]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],[574,[36]]]],[[[574,[1]],1]],[[[574,[19]],19]],[[[574,[74]],[574,[74]]]],[[[574,[15]],15]],[[[574,[479]],479]],[[[574,[463]],[574,[463]]]],[[[574,[36]],36]],[[[574,[27]],27]],[[[574,[533]],[574,[533]]]],[[[574,[474]],[574,[474]]]],[[[574,[473]],473]],[[[574,[2]],[574,[2]]]],[[[574,[533]],533]],[[[574,[473]],[574,[473]]]],[[[574,[15]],15]],[[[574,[27]],27]],[[[574,[474]],474]],[[[574,[2]],[574,[2]]]],[[[574,[19]],[574,[19]]]],[[[574,[74]],[574,[74]]]],[[[574,[2]],2]],[[[574,[474]],[574,[474]]]],[[[574,[479]],479]],[[[574,[27]],[574,[27]]]],[[[574,[15]],[574,[15]]]],[[[574,[533]],533]],[[[574,[19]],[574,[19]]]],[[[574,[1]],1]],[[[574,[473]],[574,[473]]]],[[[574,[463]],[574,[463]]]],[[[574,[19]],19]],[[[574,[27]],[574,[27]]]],[[[574,[479]],[574,[479]]]],[[[574,[1]],[574,[1]]]],[[[574,[463]],463]],[[[574,[533]],[574,[533]]]],[[[574,[36]],36]],[[[574,[74]],74]],[[[574,[2]],2]],[[[574,[15]],[574,[15]]]],[[[574,[463]],463]],[[[575,[533]],[575,[533]]]],[[[575,[533]],533]],[[[575,[1]],[575,[1]]]],[[[575,[463]],[575,[463]]]],[[[575,[1]],1]],[[[575,[2]],[575,[2]]]],[[[575,[474]],474]],[[[575,[474]],474]],[[[575,[74]],[575,[74]]]],[[[575,[19]],[575,[19]]]],[[[575,[36]],36]],[[[575,[15]],[575,[15]]]],[[[575,[74]],74]],[[[575,[463]],463]],[[[575,[533]],533]],[[[575,[15]],15]],[[[575,[19]],19]],[[[575,[15]],[575,[15]]]],[[[575,[27]],[575,[27]]]],[[[575,[27]],[575,[27]]]],[[[575,[463]],463]],[[[575,[1]],1]],[[[575,[474]],[575,[474]]]],[[[575,[2]],2]],[[[575,[1]],[575,[1]]]],[[[575,[473]],473]],[[[575,[473]],[575,[473]]]],[[[575,[36]],[575,[36]]]],[[[575,[74]],[575,[74]]]],[[[575,[2]],[575,[2]]]],[[[575,[479]],479]],[[[575,[463]],[575,[463]]]],[[[575,[27]],27]],[[[575,[473]],473]],[[[575,[479]],[575,[479]]]],[[[575,[19]],[575,[19]]]],[[[575,[473]],[575,[473]]]],[[[575,[74]],74]],[[[575,[36]],[575,[36]]]],[[[575,[533]],[575,[533]]]],[[[575,[479]],479]],[[[575,[474]],[575,[474]]]],[[[575,[19]],19]],[[[575,[27]],27]],[[[575,[2]],2]],[[[575,[479]],[575,[479]]]],[[[575,[15]],15]],[[[575,[36]],36]],[[[574,[533]]],[[574,[533]]]],[[[574,[27]]],[[574,[27]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[1]]],[[574,[1]]]],[[[574,[15]]],[[574,[15]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[19]]],[[574,[19]]]],[[[574,[2]]],[[574,[2]]]],[[[574,[36]]],[[574,[36]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[19]]],[[575,[19]]]],[[[574,[74]],15],[[574,[74]]]],[[[574,[473]],15],[[574,[473]]]],[[[574,[36]],15],[[574,[36]]]],[[[574,[474]],15],[[574,[474]]]],[[[574,[1]],15],[[574,[1]]]],[[[574,[2]],15],[[574,[2]]]],[[[574,[27]],15],[[574,[27]]]],[[[574,[479]],15],[[574,[479]]]],[[[574,[533]],15],[[574,[533]]]],[[[574,[19]],15],[[574,[19]]]],[[[574,[15]],15],[[574,[15]]]],[[[574,[463]],15],[[574,[463]]]],[[[575,[27]],15],[[575,[27]]]],[[[575,[36]],15],[[575,[36]]]],[[[575,[74]],15],[[575,[74]]]],[[[575,[2]],15],[[575,[2]]]],[[[575,[1]],15],[[575,[1]]]],[[[575,[533]],15],[[575,[533]]]],[[[575,[479]],15],[[575,[479]]]],[[[575,[19]],15],[[575,[19]]]],[[[575,[15]],15],[[575,[15]]]],[[[575,[474]],15],[[575,[474]]]],[[[575,[463]],15],[[575,[463]]]],[[[575,[473]],15],[[575,[473]]]],[[[574,[479]],15],[[574,[479]]]],[[[574,[2]],15],[[574,[2]]]],[[[574,[474]],15],[[574,[474]]]],[[[574,[473]],15],[[574,[473]]]],[[[574,[74]],15],[[574,[74]]]],[[[574,[27]],15],[[574,[27]]]],[[[574,[19]],15],[[574,[19]]]],[[[574,[463]],15],[[574,[463]]]],[[[574,[533]],15],[[574,[533]]]],[[[574,[15]],15],[[574,[15]]]],[[[574,[36]],15],[[574,[36]]]],[[[574,[1]],15],[[574,[1]]]],[[[575,[36]],15],[[575,[36]]]],[[[575,[15]],15],[[575,[15]]]],[[[575,[474]],15],[[575,[474]]]],[[[575,[74]],15],[[575,[74]]]],[[[575,[19]],15],[[575,[19]]]],[[[575,[463]],15],[[575,[463]]]],[[[575,[27]],15],[[575,[27]]]],[[[575,[2]],15],[[575,[2]]]],[[[575,[473]],15],[[575,[473]]]],[[[575,[533]],15],[[575,[533]]]],[[[575,[479]],15],[[575,[479]]]],[[[575,[1]],15],[[575,[1]]]],[568,568],[569,569],[570,570],[571,571],[572,572],[573,573],[[577,2],577],[[578,19],578],[[579,15],579],[[580,27],580],[[581,479],581],[[405,1],405],[[577,577],577],[[578,578],578],[[579,579],579],[[580,580],580],[[581,581],581],[[405,405],405],[[568,568],568],[[569,569],569],[[570,570],570],[[571,571],571],[[572,572],572],[[573,573],573],[568,568],[569,569],[570,570],[571,571],[572,572],[573,573],[[577,15],577],[[578,15],578],[[579,15],579],[[580,15],580],[[581,15],581],[[405,15],405],[[568,15],568],[[569,15],569],[[570,15],570],[[571,15],571],[[572,15],572],[[573,15],573],[[577,447],13],[[578,447],13],[[579,447],13],[[580,447],13],[[581,447],13],[[405,447],13],[[568,447],13],[[569,447],13],[[570,447],13],[[571,447],13],[[572,447],13],[[573,447],13],[[[575,[503]],447],13],[[[575,[597]]]],[[[575,[595]]]],[[[574,[479]],1]],[[[574,[474]],1]],[[[574,[533]],1]],[[[574,[463]],1],[[574,[463]]]],[[[574,[19]],1]],[[[574,[15]],1]],[[[574,[474]],1],[[574,[474]]]],[[[574,[2]],1]],[[[574,[19]],1]],[[[574,[463]],1]],[[[574,[15]],1]],[[[574,[27]],1]],[[[574,[36]],1]],[[[574,[533]],1],[[574,[533]]]],[[[574,[1]],1],[[574,[1]]]],[[[574,[36]],1],[[574,[36]]]],[[[574,[74]],1]],[[[574,[473]],1]],[[[574,[2]],1]],[[[574,[15]],1],[[574,[15]]]],[[[574,[36]],1]],[[[574,[479]],1]],[[[574,[1]],1]],[[[574,[36]],1]],[[[574,[2]],1],[[574,[2]]]],[[[574,[15]],1]],[[[574,[463]],1]],[[[574,[27]],1]],[[[574,[473]],1]],[[[574,[19]],1]],[[[574,[1]],1]],[[[574,[474]],1]],[[[574,[1]],1]],[[[574,[479]],1]],[[[574,[27]],1]],[[[574,[479]],1],[[574,[479]]]],[[[574,[74]],1]],[[[574,[473]],1],[[574,[473]]]],[[[574,[474]],1]],[[[574,[2]],1]],[[[574,[27]],1],[[574,[27]]]],[[[574,[533]],1]],[[[574,[74]],1],[[574,[74]]]],[[[574,[19]],1],[[574,[19]]]],[[[574,[533]],1]],[[[574,[463]],1]],[[[574,[74]],1]],[[[574,[473]],1]],[[[575,[15]],1],[[575,[15]]]],[[[575,[479]],1]],[[[575,[74]],1]],[[[575,[463]],1],[[575,[463]]]],[[[575,[533]],1],[[575,[533]]]],[[[575,[19]],1],[[575,[19]]]],[[[575,[463]],1]],[[[575,[479]],1]],[[[575,[473]],1]],[[[575,[36]],1]],[[[575,[27]],1]],[[[575,[74]],1]],[[[575,[27]],1]],[[[575,[1]],1]],[[[575,[2]],1]],[[[575,[36]],1]],[[[575,[2]],1],[[575,[2]]]],[[[575,[74]],1]],[[[575,[1]],1]],[[[575,[474]],1]],[[[575,[27]],1],[[575,[27]]]],[[[575,[474]],1]],[[[575,[19]],1]],[[[575,[473]],1]],[[[575,[19]],1]],[[[575,[1]],1]],[[[575,[474]],1]],[[[575,[1]],1],[[575,[1]]]],[[[575,[2]],1]],[[[575,[15]],1]],[[[575,[36]],1]],[[[575,[533]],1]],[[[575,[15]],1]],[[[575,[479]],1]],[[[575,[463]],1]],[[[575,[36]],1],[[575,[36]]]],[[[575,[474]],1],[[575,[474]]]],[[[575,[533]],1]],[[[575,[74]],1],[[575,[74]]]],[[[575,[473]],1]],[[[575,[15]],1]],[[[575,[27]],1]],[[[575,[473]],1],[[575,[473]]]],[[[575,[479]],1],[[575,[479]]]],[[[575,[533]],1]],[[[575,[2]],1]],[[[575,[463]],1]],[[[575,[19]],1]],[[[574,[2]],1]],[[[574,[473]],1]],[[[574,[74]],1]],[[[574,[27]],1]],[[[574,[474]],1]],[[[574,[74]],1]],[[[574,[1]],1]],[[[574,[479]],1]],[[[574,[36]],1]],[[[574,[533]],1]],[[[574,[15]],1]],[[[574,[15]],1]],[[[574,[474]],1]],[[[574,[479]],1]],[[[574,[463]],1]],[[[574,[19]],1]],[[[574,[2]],1]],[[[574,[473]],1]],[[[574,[463]],1]],[[[574,[533]],1]],[[[574,[27]],1]],[[[574,[1]],1]],[[[574,[36]],1]],[[[574,[19]],1]],[[[575,[479]],1]],[[[575,[36]],1]],[[[575,[463]],1]],[[[575,[74]],1]],[[[575,[27]],1]],[[[575,[1]],1]],[[[575,[15]],1]],[[[575,[479]],1]],[[[575,[36]],1]],[[[575,[2]],1]],[[[575,[533]],1]],[[[575,[473]],1]],[[[575,[15]],1]],[[[575,[27]],1]],[[[575,[463]],1]],[[[575,[2]],1]],[[[575,[473]],1]],[[[575,[19]],1]],[[[575,[533]],1]],[[[575,[1]],1]],[[[575,[474]],1]],[[[575,[474]],1]],[[[575,[19]],1]],[[[575,[74]],1]],[[[574,[474]],1],[[574,[474]]]],[[[574,[1]],1],[[574,[1]]]],[[[574,[479]],1]],[[[574,[19]],1]],[[[574,[1]],1]],[[[574,[463]],1]],[[[574,[473]],1],[[574,[473]]]],[[[574,[19]],1],[[574,[19]]]],[[[574,[479]],1]],[[[574,[533]],1],[[574,[533]]]],[[[574,[74]],1]],[[[574,[36]],1]],[[[574,[533]],1]],[[[574,[533]],1]],[[[574,[74]],1]],[[[574,[473]],1]],[[[574,[27]],1],[[574,[27]]]],[[[574,[15]],1]],[[[574,[1]],1]],[[[574,[2]],1],[[574,[2]]]],[[[574,[2]],1]],[[[574,[463]],1]],[[[574,[15]],1]],[[[574,[533]],1]],[[[574,[36]],1],[[574,[36]]]],[[[574,[473]],1]],[[[574,[474]],1]],[[[574,[463]],1],[[574,[463]]]],[[[574,[479]],1],[[574,[479]]]],[[[574,[473]],1]],[[[574,[474]],1]],[[[574,[15]],1]],[[[574,[1]],1]],[[[574,[463]],1]],[[[574,[27]],1]],[[[574,[15]],1],[[574,[15]]]],[[[574,[36]],1]],[[[574,[74]],1],[[574,[74]]]],[[[574,[479]],1]],[[[574,[2]],1]],[[[574,[74]],1]],[[[574,[27]],1]],[[[574,[2]],1]],[[[574,[474]],1]],[[[574,[19]],1]],[[[574,[19]],1]],[[[574,[36]],1]],[[[574,[27]],1]],[[[575,[463]],1],[[575,[463]]]],[[[575,[533]],1],[[575,[533]]]],[[[575,[463]],1]],[[[575,[474]],1],[[575,[474]]]],[[[575,[15]],1]],[[[575,[2]],1],[[575,[2]]]],[[[575,[473]],1]],[[[575,[473]],1],[[575,[473]]]],[[[575,[19]],1],[[575,[19]]]],[[[575,[2]],1]],[[[575,[533]],1]],[[[575,[479]],1]],[[[575,[463]],1]],[[[575,[2]],1]],[[[575,[19]],1]],[[[575,[533]],1]],[[[575,[74]],1]],[[[575,[74]],1]],[[[575,[1]],1]],[[[575,[473]],1]],[[[575,[27]],1]],[[[575,[474]],1]],[[[575,[15]],1]],[[[575,[36]],1]],[[[575,[27]],1]],[[[575,[1]],1],[[575,[1]]]],[[[575,[2]],1]],[[[575,[27]],1]],[[[575,[36]],1]],[[[575,[479]],1]],[[[575,[1]],1]],[[[575,[463]],1]],[[[575,[1]],1]],[[[575,[533]],1]],[[[575,[27]],1],[[575,[27]]]],[[[575,[473]],1]],[[[575,[15]],1]],[[[575,[479]],1]],[[[575,[36]],1],[[575,[36]]]],[[[575,[19]],1]],[[[575,[36]],1]],[[[575,[474]],1]],[[[575,[74]],1]],[[[575,[474]],1]],[[[575,[479]],1],[[575,[479]]]],[[[575,[19]],1]],[[[575,[74]],1],[[575,[74]]]],[[[575,[15]],1],[[575,[15]]]],[[[574,[463]],1]],[[[574,[27]],1]],[[[574,[2]],1]],[[[574,[1]],1]],[[[574,[463]],1]],[[[574,[15]],1]],[[[574,[36]],1]],[[[574,[74]],1]],[[[574,[533]],1]],[[[574,[474]],1]],[[[574,[74]],1]],[[[574,[473]],1]],[[[574,[19]],1]],[[[574,[2]],1]],[[[574,[479]],1]],[[[574,[1]],1]],[[[574,[533]],1]],[[[574,[19]],1]],[[[574,[36]],1]],[[[574,[473]],1]],[[[574,[479]],1]],[[[574,[15]],1]],[[[574,[474]],1]],[[[574,[27]],1]],[[[575,[36]],1]],[[[575,[533]],1]],[[[575,[473]],1]],[[[575,[474]],1]],[[[575,[474]],1]],[[[575,[1]],1]],[[[575,[1]],1]],[[[575,[15]],1]],[[[575,[473]],1]],[[[575,[15]],1]],[[[575,[19]],1]],[[[575,[74]],1]],[[[575,[533]],1]],[[[575,[27]],1]],[[[575,[479]],1]],[[[575,[74]],1]],[[[575,[36]],1]],[[[575,[19]],1]],[[[575,[2]],1]],[[[575,[27]],1]],[[[575,[2]],1]],[[[575,[479]],1]],[[[575,[463]],1]],[[[575,[463]],1]],[[[574,[74]]],[[574,[74]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[533]]],[[574,[533]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[576]]],[[575,[576]]]],[[[574,[2]],[574,[2]]]],[[[574,[479]],[574,[479]]]],[[[574,[533]],[574,[533]]]],[[[574,[1]],[574,[1]]],[[574,[1]]]],[[[574,[2]],[574,[2]]]],[[[574,[1]],[574,[1]]]],[[[574,[19]],[574,[19]]],[[574,[19]]]],[[[574,[473]],[574,[473]]],[[574,[473]]]],[[[574,[474]],[574,[474]]]],[[[574,[473]],[574,[473]]]],[[[574,[463]],[574,[463]]]],[[[574,[36]],[574,[36]]]],[[[574,[74]],[574,[74]]]],[[[574,[1]],[574,[1]]]],[[[574,[474]],[574,[474]]]],[[[574,[19]],[574,[19]]]],[[[574,[463]],[574,[463]]]],[[[574,[474]],[574,[474]]],[[574,[474]]]],[[[574,[463]],[574,[463]]]],[[[574,[36]],[574,[36]]]],[[[574,[533]],[574,[533]]]],[[[574,[473]],[574,[473]]]],[[[574,[2]],[574,[2]]]],[[[574,[27]],[574,[27]]]],[[[574,[36]],[574,[36]]],[[574,[36]]]],[[[574,[15]],[574,[15]]],[[574,[15]]]],[[[574,[74]],[574,[74]]],[[574,[74]]]],[[[574,[27]],[574,[27]]],[[574,[27]]]],[[[574,[74]],[574,[74]]]],[[[574,[36]],[574,[36]]]],[[[574,[19]],[574,[19]]]],[[[574,[15]],[574,[15]]]],[[[574,[479]],[574,[479]]]],[[[574,[1]],[574,[1]]]],[[[574,[479]],[574,[479]]]],[[[574,[27]],[574,[27]]]],[[[574,[2]],[574,[2]]],[[574,[2]]]],[[[574,[463]],[574,[463]]],[[574,[463]]]],[[[574,[15]],[574,[15]]]],[[[574,[479]],[574,[479]]],[[574,[479]]]],[[[574,[474]],[574,[474]]]],[[[574,[473]],[574,[473]]]],[[[574,[74]],[574,[74]]]],[[[574,[19]],[574,[19]]]],[[[574,[27]],[574,[27]]]],[[[574,[533]],[574,[533]]],[[574,[533]]]],[[[574,[533]],[574,[533]]]],[[[574,[15]],[574,[15]]]],[[[575,[533]],[575,[533]]]],[[[575,[27]],[575,[27]]]],[[[575,[1]],[575,[1]]]],[[[575,[474]],[575,[474]]],[[575,[474]]]],[[[575,[1]],[575,[1]]]],[[[575,[36]],[575,[36]]]],[[[575,[19]],[575,[19]]],[[575,[19]]]],[[[575,[463]],[575,[463]]],[[575,[463]]]],[[[575,[36]],[575,[36]]]],[[[575,[474]],[575,[474]]]],[[[575,[15]],[575,[15]]]],[[[575,[27]],[575,[27]]]],[[[575,[533]],[575,[533]]]],[[[575,[479]],[575,[479]]],[[575,[479]]]],[[[575,[473]],[575,[473]]]],[[[575,[19]],[575,[19]]]],[[[575,[36]],[575,[36]]],[[575,[36]]]],[[[575,[74]],[575,[74]]],[[575,[74]]]],[[[575,[1]],[575,[1]]]],[[[575,[1]],[575,[1]]],[[575,[1]]]],[[[575,[27]],[575,[27]]]],[[[575,[474]],[575,[474]]]],[[[575,[474]],[575,[474]]]],[[[575,[19]],[575,[19]]]],[[[575,[2]],[575,[2]]]],[[[575,[27]],[575,[27]]],[[575,[27]]]],[[[575,[2]],[575,[2]]],[[575,[2]]]],[[[575,[473]],[575,[473]]],[[575,[473]]]],[[[575,[473]],[575,[473]]]],[[[575,[19]],[575,[19]]]],[[[575,[479]],[575,[479]]]],[[[575,[533]],[575,[533]]],[[575,[533]]]],[[[575,[74]],[575,[74]]]],[[[575,[463]],[575,[463]]]],[[[575,[74]],[575,[74]]]],[[[575,[463]],[575,[463]]]],[[[575,[2]],[575,[2]]]],[[[575,[533]],[575,[533]]]],[[[575,[463]],[575,[463]]]],[[[575,[473]],[575,[473]]]],[[[575,[479]],[575,[479]]]],[[[575,[15]],[575,[15]]]],[[[575,[2]],[575,[2]]]],[[[575,[74]],[575,[74]]]],[[[575,[36]],[575,[36]]]],[[[575,[15]],[575,[15]]]],[[[575,[479]],[575,[479]]]],[[[575,[15]],[575,[15]]],[[575,[15]]]],[[[574,[1]],[574,[1]]]],[[[574,[27]],[574,[27]]]],[[[574,[27]],27]],[[[574,[474]],[574,[474]]]],[[[574,[479]],[574,[479]]]],[[[574,[2]],2]],[[[574,[1]],1]],[[[574,[474]],474]],[[[574,[19]],19]],[[[574,[473]],[574,[473]]]],[[[574,[479]],479]],[[[574,[463]],463]],[[[574,[463]],463]],[[[574,[533]],533]],[[[574,[533]],533]],[[[574,[2]],[574,[2]]]],[[[574,[463]],[574,[463]]]],[[[574,[533]],[574,[533]]]],[[[574,[2]],2]],[[[574,[74]],[574,[74]]]],[[[574,[27]],[574,[27]]]],[[[574,[36]],36]],[[[574,[15]],[574,[15]]]],[[[574,[474]],[574,[474]]]],[[[574,[19]],[574,[19]]]],[[[574,[19]],[574,[19]]]],[[[574,[36]],[574,[36]]]],[[[574,[36]],36]],[[[574,[1]],1]],[[[574,[15]],15]],[[[574,[474]],474]],[[[574,[15]],15]],[[[574,[479]],[574,[479]]]],[[[574,[2]],[574,[2]]]],[[[574,[36]],[574,[36]]]],[[[574,[473]],473]],[[[574,[473]],[574,[473]]]],[[[574,[74]],74]],[[[574,[19]],19]],[[[574,[74]],[574,[74]]]],[[[574,[479]],479]],[[[574,[463]],[574,[463]]]],[[[574,[74]],74]],[[[574,[473]],473]],[[[574,[27]],27]],[[[574,[533]],[574,[533]]]],[[[574,[15]],[574,[15]]]],[[[574,[1]],[574,[1]]]],[[[575,[473]],473]],[[[575,[15]],15]],[[[575,[15]],[575,[15]]]],[[[575,[533]],533]],[[[575,[463]],[575,[463]]]],[[[575,[479]],[575,[479]]]],[[[575,[74]],74]],[[[575,[533]],[575,[533]]]],[[[575,[27]],[575,[27]]]],[[[575,[2]],2]],[[[575,[36]],36]],[[[575,[27]],[575,[27]]]],[[[575,[2]],[575,[2]]]],[[[575,[1]],[575,[1]]]],[[[575,[36]],36]],[[[575,[533]],533]],[[[575,[2]],[575,[2]]]],[[[575,[15]],15]],[[[575,[479]],479]],[[[575,[473]],473]],[[[575,[27]],27]],[[[575,[27]],27]],[[[575,[1]],1]],[[[575,[474]],[575,[474]]]],[[[575,[1]],[575,[1]]]],[[[575,[463]],463]],[[[575,[463]],463]],[[[575,[15]],[575,[15]]]],[[[575,[36]],[575,[36]]]],[[[575,[463]],[575,[463]]]],[[[575,[474]],[575,[474]]]],[[[575,[19]],19]],[[[575,[74]],[575,[74]]]],[[[575,[19]],[575,[19]]]],[[[575,[473]],[575,[473]]]],[[[575,[479]],[575,[479]]]],[[[575,[74]],74]],[[[575,[473]],[575,[473]]]],[[[575,[19]],[575,[19]]]],[[[575,[474]],474]],[[[575,[474]],474]],[[[575,[479]],479]],[[[575,[36]],[575,[36]]]],[[[575,[533]],[575,[533]]]],[[[575,[74]],[575,[74]]]],[[[575,[2]],2]],[[[575,[19]],19]],[[[575,[1]],1]],[262,[[575,[533]]]],[262,[[575,[74]]]],[262,[[575,[474]]]],[262,[[575,[27]]]],[262,[[575,[479]]]],[262,[[575,[15]]]],[262,[[575,[2]]]],[262,[[575,[479]]]],[262,[[575,[1]]]],[262,[[575,[463]]]],[262,[[575,[473]]]],[262,[[575,[474]]]],[262,[[575,[36]]]],[262,[[575,[1]]]],[262,[[575,[19]]]],[262,[[575,[15]]]],[262,[[575,[473]]]],[262,[[575,[74]]]],[262,[[575,[2]]]],[262,[[575,[533]]]],[262,[[575,[19]]]],[262,[[575,[27]]]],[262,[[575,[463]]]],[262,[[575,[36]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[27]]],[[574,[27]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[15]]],[[574,[15]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[1]]],[[574,[1]]]],[[[574,[2]]],[[574,[2]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[19]]],[[574,[19]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[474]]],[[575,[474]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[19]]],[[574,[19]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[1]]],[[574,[1]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[27]]],[[574,[27]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[15]]],[[574,[15]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[2]]],[[574,[2]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[36]]],[[575,[36]]]],[[[575,[591]]],[[12,[470]]]],[[[575,[591]]],[[12,[469]]]],[[[575,[591]]],[[12,[473]]]],[[[575,[591]]],[[12,[36]]]],[[[575,[591]]],[[12,[463]]]],[[[575,[591]]],[[12,[474]]]],[[[575,[591]]],[[12,[74]]]],[[[574,[19]]],[[574,[19]]]],[[[574,[479]]],[[574,[479]]]],[[[574,[463]]],[[574,[463]]]],[[[574,[1]]],[[574,[1]]]],[[[574,[533]]],[[574,[533]]]],[[[574,[474]]],[[574,[474]]]],[[[574,[2]]],[[574,[2]]]],[[[574,[36]]],[[574,[36]]]],[[[574,[15]]],[[574,[15]]]],[[[574,[74]]],[[574,[74]]]],[[[574,[473]]],[[574,[473]]]],[[[574,[27]]],[[574,[27]]]],[[[575,[19]]],[[575,[19]]]],[[[575,[474]]],[[575,[474]]]],[[[575,[479]]],[[575,[479]]]],[[[575,[463]]],[[575,[463]]]],[[[575,[27]]],[[575,[27]]]],[[[575,[15]]],[[575,[15]]]],[[[575,[473]]],[[575,[473]]]],[[[575,[1]]],[[575,[1]]]],[[[575,[533]]],[[575,[533]]]],[[[575,[2]]],[[575,[2]]]],[[[575,[74]]],[[575,[74]]]],[[[575,[36]]],[[575,[36]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[],184],[[[575,[591]]],[[12,[19]]]],[[[575,[591]]],[[12,[15]]]],[[[575,[591]]],[[12,[27]]]],[[[575,[591]]],[[12,[2]]]],[[[575,[591]]],[[12,[1]]]],[577,15],[578,15],[579,15],[580,15],[581,15],[405,15],[568,15],[569,15],[570,15],[571,15],[572,15],[573,15],[[[574,[473]]],15],[[[574,[463]]],15],[[[574,[474]]],15],[[[574,[15]]],15],[[[574,[19]]],15],[[[574,[533]]],15],[[[574,[479]]],15],[[[574,[1]]],15],[[[574,[27]]],15],[[[574,[2]]],15],[[[574,[36]]],15],[[[574,[74]]],15],[[[575,[27]]],15],[[[575,[74]]],15],[[[575,[463]]],15],[[[575,[1]]],15],[[[575,[2]]],15],[[[575,[533]]],15],[[[575,[19]]],15],[[[575,[15]]],15],[[[575,[474]]],15],[[[575,[479]]],15],[[[575,[473]]],15],[[[575,[36]]],15],[[],13],[[],13],[[],13],[[],13],[578,[[13,[577]]]],[571,[[13,[577]]]],[572,[[13,[577]]]],[568,[[13,[577]]]],[[],13],[570,[[13,[577]]]],[579,[[13,[577]]]],[581,[[13,[577]]]],[573,[[13,[577]]]],[405,[[13,[577]]]],[569,[[13,[577]]]],[2,[[13,[577]]]],[580,[[13,[577]]]],[572,[[13,[578]]]],[573,[[13,[578]]]],[571,[[13,[578]]]],[580,[[13,[578]]]],[570,[[13,[578]]]],[19,[[13,[578]]]],[579,[[13,[578]]]],[[],13],[569,[[13,[578]]]],[581,[[13,[578]]]],[568,[[13,[578]]]],[405,[[13,[578]]]],[580,[[13,[579]]]],[571,[[13,[579]]]],[15,[[13,[579]]]],[573,[[13,[579]]]],[570,[[13,[579]]]],[405,[[13,[579]]]],[569,[[13,[579]]]],[581,[[13,[579]]]],[568,[[13,[579]]]],[[],13],[572,[[13,[579]]]],[572,[[13,[580]]]],[570,[[13,[580]]]],[581,[[13,[580]]]],[571,[[13,[580]]]],[405,[[13,[580]]]],[27,[[13,[580]]]],[[],13],[568,[[13,[580]]]],[573,[[13,[580]]]],[569,[[13,[580]]]],[568,[[13,[581]]]],[569,[[13,[581]]]],[405,[[13,[581]]]],[[],13],[572,[[13,[581]]]],[570,[[13,[581]]]],[571,[[13,[581]]]],[573,[[13,[581]]]],[479,[[13,[581]]]],[572,[[13,[405]]]],[580,[[13,[405]]]],[569,[[13,[405]]]],[570,[[13,[405]]]],[581,[[13,[405]]]],[579,[[13,[405]]]],[571,[[13,[405]]]],[573,[[13,[405]]]],[[],13],[1,[[13,[405]]]],[568,[[13,[405]]]],[579,[[13,[568]]]],[577,[[13,[568]]]],[[],13],[578,[[13,[568]]]],[572,[[13,[568]]]],[581,[[13,[568]]]],[571,[[13,[568]]]],[474,[[13,[568]]]],[569,[[13,[568]]]],[580,[[13,[568]]]],[570,[[13,[568]]]],[573,[[13,[568]]]],[405,[[13,[568]]]],[581,[[13,[569]]]],[573,[[13,[569]]]],[580,[[13,[569]]]],[572,[[13,[569]]]],[570,[[13,[569]]]],[473,[[13,[569]]]],[578,[[13,[569]]]],[579,[[13,[569]]]],[405,[[13,[569]]]],[[],13],[571,[[13,[569]]]],[573,[[13,[570]]]],[405,[[13,[570]]]],[581,[[13,[570]]]],[579,[[13,[570]]]],[571,[[13,[570]]]],[572,[[13,[570]]]],[[],13],[580,[[13,[570]]]],[36,[[13,[570]]]],[581,[[13,[571]]]],[572,[[13,[571]]]],[405,[[13,[571]]]],[580,[[13,[571]]]],[[],13],[573,[[13,[571]]]],[463,[[13,[571]]]],[581,[[13,[572]]]],[533,[[13,[572]]]],[405,[[13,[572]]]],[[],13],[573,[[13,[572]]]],[570,[[13,[573]]]],[405,[[13,[573]]]],[579,[[13,[573]]]],[580,[[13,[573]]]],[571,[[13,[573]]]],[74,[[13,[573]]]],[581,[[13,[573]]]],[572,[[13,[573]]]],[[],13],[578,[[13,[573]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[577,2],577],[[578,19],578],[[579,15],579],[[580,27],580],[[581,479],581],[[405,1],405],[[577,577],577],[[578,578],578],[[579,579],579],[[580,580],580],[[581,581],581],[[405,405],405],[[568,568],568],[[569,569],569],[[570,570],570],[[571,571],571],[[572,572],572],[[573,573],573],[568,577],[569,578],[570,579],[571,580],[572,581],[573,405],[568,568],[569,569],[570,570],[571,571],[572,572],[573,573],[[[575,[598]],[575,[598]]],[[575,[598]]]],[[[575,[599]],[575,[599]]],[[575,[599]]]],[568,568],[569,569],[570,570],[571,571],[572,572],[573,573],[[[575,[600]]],[[575,[600]]]],[[[575,[601]],15],[[575,[601]]]],[[[575,[602]],15],[[575,[602]]]],[[[575,[603]],[575,[603]]],[[575,[603]]]],[[],[[575,[595]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[368,[604]],1],[[13,[405]]]],[[[368,[604]],1],[[13,[405]]]],[605,605],[605,605],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],606],[606,606],[606,12],[[]],[[]],[[]],[[[606,[369,369]]],[[606,[369,369]]]],[[[607,[369,369]]],[[607,[369,369]]]],[428,428],[[[368,[369]]],[[368,[369]]]],[[[430,[369]]],[[430,[369]]]],[[[431,[369]]],[[431,[369]]]],[[[427,[369]]],[[427,[369]]]],[[[429,[369]]],[[429,[369]]]],[[[605,[369]]],[[605,[369]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[605,[369]]],[[605,[369]]]],[[[607,[373,373]],[607,[373,373]]],44],[[[0,[[377,[[377,[[0,[[377,[[377,[[0,[377,47]]]]]],47]]]]]],47]]],25],[[[368,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],[0,[[377,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],47]]],25],[[[430,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],[0,[[377,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],47]]],25],[[[431,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],[0,[[377,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],47]]],25],[[[427,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],[0,[[377,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],47]]],25],[[[429,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],[0,[[377,[[377,[[0,[[377,[[377,[[0,[377,47]]]],[377,[377,377]]]],47]]]],[377,[[377,[[0,[[377,[377,377]],47]]]],[377,[[377,[[0,[377,47]]]],[377,[377,377]]]]]]]],47]]],25],[606,12],[[],428],[[],[[368,[495]]]],[[]],[[]],[414,[[13,[[368,[501]]]]]],[414,[[13,[[427,[501]]]]]],[414,[[13,[[605,[501]]]]]],[[]],[[]],[[]],[427],0,0,0,0,[[],605],[428,[[605,[47]]]],[368,605],[368,605],[430,605],[430,605],[431,605],[431,605],[427,605],[427,605],[429,605],[429,605],[[[606,[[374,[[374,[[374,[374]]]]]],[374,[[374,[[374,[374]]]]]]]],[606,[[374,[[374,[[374,[374]]]]]],[374,[[374,[[374,[374]]]]]]]]],25],[[[607,[[374,[[374,[[374,[374]]]]]],[374,[[374,[[374,[374]]]]]]]],[607,[[374,[[374,[[374,[374]]]]]],[374,[[374,[[374,[374]]]]]]]]],25],[[428,428],25],[[[368,[[374,[[374,[[374,[374]]]]]]]],[368,[[374,[[374,[[374,[374]]]]]]]]],25],[[[430,[[374,[[374,[[374,[374]]]]]]]],[430,[[374,[[374,[[374,[374]]]]]]]]],25],[[[431,[[374,[[374,[[374,[374]]]]]]]],[431,[[374,[[374,[[374,[374]]]]]]]]],25],[[[427,[[374,[[374,[[374,[374]]]]]]]],[427,[[374,[[374,[[374,[374]]]]]]]]],25],[[[429,[[374,[[374,[[374,[374]]]]]]]],[429,[[374,[[374,[[374,[374]]]]]]]]],25],[[[605,[[374,[[374,[[374,[374]]]]]]]],[605,[[374,[[374,[[374,[374]]]]]]]]],25],0,[[[606,[357,357]],5],[[13,[423]]]],[[[607,[357,357]],5],[[13,[423]]]],[[428,5],[[13,[423]]]],[[[368,[357]],5],[[13,[423]]]],[[[430,[357]],5],[[13,[423]]]],[[[431,[357]],5],[[13,[423]]]],[[[427,[357]],5],[[13,[423]]]],[[[429,[357]],5],[[13,[423]]]],[[[605,[357]],5],[[13,[423]]]],[[[608,[357]],5],[[13,[423]]]],[[[427,[604]],88]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],606],[[]],[[[606,[483]]],606],[428,12],[[428,10],12],[[[368,[1]],10],12],[[[368,[1]]],12],[[[430,[1]]],12],[[[430,[1]],10],12],[[[431,[1]],10],12],[[[431,[1]]],12],[[[427,[1]],10],12],[[[427,[1]]],12],[[[429,[1]],10],12],[[[429,[1]]],12],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[428,10],12],[428,12],[[[368,[1]]],12],[[[368,[1]],10],12],[[[430,[1]],10],12],[[[430,[1]]],12],[[[431,[1]],10],12],[[[431,[1]]],12],[[[427,[1]]],12],[[[427,[1]],10],12],[[[429,[1]]],12],[[[429,[1]],10],12],[[428,10]],[428],[[[368,[1]],10]],[[[368,[1]]]],[[[430,[1]],10]],[[[430,[1]]]],[[[431,[1]]]],[[[431,[1]],10]],[[[427,[1]]]],[[[427,[1]],10]],[[[429,[1]]]],[[[429,[1]],10]],[428],[[428,10]],[[[368,[1]]]],[[[368,[1]],10]],[[[430,[1]],10]],[[[430,[1]]]],[[[431,[1]],10]],[[[431,[1]]]],[[[427,[1]],10]],[[[427,[1]]]],[[[429,[1]],10]],[[[429,[1]]]],[[[606,[46,46]],49]],[[[607,[46,46]],49]],[[428,49]],[[[368,[46]],49]],[[[430,[46]],49]],[[[431,[46]],49]],[[[427,[46]],49]],[[[429,[46]],49]],[[[605,[46]],49]],[[]],[[428,10]],[428],[[[368,[1]]]],[[[368,[1]],10]],[[[430,[1]]]],[[[430,[1]],10]],[[[431,[1]],10]],[[[431,[1]]]],[[[427,[1]],10]],[[[427,[1]]]],[[[429,[1]],10]],[[[429,[1]]]],[[]],[428],[[428,10]],[[[368,[1]],10]],[[[368,[1]]]],[[[430,[1]]]],[[[430,[1]],10]],[[[431,[1]],10]],[[[431,[1]]]],[[[427,[1]],10]],[[[427,[1]]]],[[[429,[1]]]],[[[429,[1]],10]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[427],[[]],[[]],[[]],[606,25],[606,25],[[[368,[[377,[[377,[[377,[377]]]]]]]]],25],[[[427,[[377,[[377,[[377,[377]]]]]]]]],25],[[[368,[604]]],25],[[[427,[604]]],25],[[[368,[604]]],[[12,[604]]]],[[[427,[604]]],[[12,[604]]]],[[605,282],605],[[606,282],606],[[606,282],606],[[[368,[604]]],[[12,[604]]]],[[[427,[604]]],[[12,[604]]]],[[[368,[604]]],[[12,[604]]]],[[[427,[604]]],[[12,[604]]]],[[]],[[]],[[]],[[],427],[[[368,[604]]],[[12,[604]]]],[[[430,[604]]],[[12,[604]]]],[[[427,[604]]],[[12,[604]]]],[[[368,[604]]],[[12,[604]]]],[[[427,[604]]],[[12,[604]]]],[[]],[[[368,[604]],1],[[12,[604]]]],[[[430,[604]],1],[[12,[604]]]],[[[427,[604]],1],[[12,[604]]]],[[[368,[604]],1],[[12,[604]]]],[[[427,[604]],1],[[12,[604]]]],[[[607,[[377,[[377,[[377,[377]]]]]],[377,[[377,[[377,[377]]]]]]]],[607,[[377,[[377,[[377,[377]]]]]],[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[[]],[[]],[486,607],[[[427,[604]],88]],[[[368,[503]],447],13],[[[427,[503]],447],13],[[[605,[503]],447],13],[[]],[[]],[[]],[[]],[[[368,[604]]]],[[[430,[604]]]],[[[427,[604]]]],[427],0,0,0,[[],605],[428,[[605,[47]]]],[368,605],[368,605],[430,605],[430,605],[431,605],[431,605],[427,605],[427,605],[429,605],[429,605],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[427,[604]],88],454],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[427,[604]],88],454],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,[[12,12],12],[[12,282],12],[[[12,[609]]],12],[[[12,[610]]],12],[12,12],[12],[[[486,[12]]],[[12,[486]]]],[[[486,[12]]],[[12,[486]]]],[12,12],[12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,606],[[[12,[369]]],[[12,[369]]]],[611,611],[[[612,[369]]],[[612,[369]]]],[[[12,[369]],[12,[369]]]],[[]],[[]],[[]],[[[12,[369]]],[[12,[369]]]],[[[12,[369]]],[[12,[369]]]],[[[12,[373]],[12,[373]]],44],[[[12,[494]]],[[12,[494]]]],[[[12,[494]]],[[12,[494]]]],[[],12],[414,[[13,[[12,[501]]]]]],[[[12,[[374,[[374,[[374,[374]]]]]]]],[12,[[374,[[374,[[374,[374]]]]]]]]],25],[[12,10]],[[12,282],12],[[[12,[12]]],12],[[[12,[357]],5],[[13,[423]]]],[[[611,[357]],5],[[13,[423]]]],[[[613,[357]],5],[[13,[423]]]],[[[612,[357]],5],[[13,[423]]]],[3],[[]],[12,12],[[],12],[12,12],[[]],[[]],[[]],[45,[[12,[410]]]],[[],12],[[[12,[483]]],12],[608,12],[[[0,[46,47]],48],27],[12],[[[12,[495]]],495],[[12,282]],[[[12,[46]],49]],0,0,0,[12],[[12,282],12],[[]],[[]],[[]],[[]],[12,611],[12,613],[12,612],[[]],[[]],[[]],[12,25],[12,25],[[12,282],25],[[],25],[12,611],[12,613],[[12,282],12],[[12,282]],[[12,282,282]],[611,12],[613,12],[612,12],[611,12],[613,12],[612,12],[12,13],[[12,282],13],[[12,12],12],[[12,282],12],[[[12,[[377,[[377,[[377,[377]]]]]]]],[12,[[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[262,[[12,[442]]]],[12,12],[[[12,[503]],447],13],[611],[613],[612],[262,[[12,[451]]]],[12,12],[[]],[[]],[[]],[[[12,[13]]],[[13,[12]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[12],[12],[[[12,[495]]],495],[[12,282]],[12],[12],[[12,12],12],[[12,12],12],[[12,12,282],12],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[614,[282]]]],[[],540],[615,25],0,[540,540],[[]],[[540,540],44],0,[540,15],[[],[[614,[495]]]],[614],[614],[[540,540],25],[540,10],0,[[[614,[357]],5],[[13,[423]]]],[[540,5],[[13,[423]]]],[[540,5],[[13,[423]]]],[[615,5],[[13,[423]]]],[[615,5],[[13,[423]]]],[[]],[[]],[[]],[[[0,[46,47]],48],27],[[540,49]],[[]],[[]],[[]],[[]],[540,15],0,[615,[[12,[540]]]],0,[615,[[12,[527]]]],0,[[540,540],[[12,[44]]]],[615,459],0,[[[486,[[614,[616]]]],487],488],[[[486,[[614,[617]]]],487],[[488,[12]]]],[[[614,[617]]]],[[]],[[],184],[[],184],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[527,3],[10,3],[502,3],[527,3],[10,3],[527,3],[10,3],[502,3],0,[[[486,[[486,[610]]]]],486],[[[486,[610]]],486],[[[486,[609]]],486],[[]],[[]],[[[486,[369]]],[[486,[369]]]],[[]],[[[486,[609]],[486,[609]]],44],[[[486,[609]]]],[[[486,[610]]]],[[[486,[609]],[486,[609]]],25],[[[486,[618]],5],[[13,[423]]]],[[[486,[502]],5],[[13,[423]]]],[[[486,[357]],5],[[13,[423]]]],[[[86,[47,619]]],[[486,[[86,[47,619]]]]]],[[]],[[[486,[609]],[486,[609]]],25],[[[0,[46,47]],48],27],[[[486,[552,47]]],[552,47]],[[[486,[47]]],47],[[[486,[47]]],47],[[[486,[609]],[486,[609]]],25],[[[486,[609]],49]],[[]],[[]],[[[486,[609]]],609],[[[486,[609]]],609],[[[486,[47]]],[[486,[47]]]],[[[486,[609]],[486,[609]]],25],[[[486,[609]],[486,[609]]],25],[[[486,[47]],282],[[486,[47]]]],[[[486,[47]],282],[[486,[47]]]],[[[486,[609]],[486,[609]]],25],[609,[[486,[609]]]],[609,[[486,[609]]]],[[[486,[609]],[486,[609]]],[[12,[44]]]],0,[[[486,[[486,[610]]]],487],488],[[[486,[[486,[610]]]],487],[[488,[12]]]],[[[486,[[486,[[86,[[0,[551,47]],619]]]]]]],607],[[[486,[[486,[[0,[551,47]]]]]]],607],[[[486,[610]]]],[[[486,[610]]]],[47,[[486,[47]]]],[47,[[486,[47]]]],[[]],[[],184],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[13,[405]]]],[1,[[13,[405]]]],[[47,88],25],0,[[47,88],25],[47,[[406,[47]]]],[[]],[[]],0,0,[47,47],[[]],[[]],[[]],0,0,0,[[47,45],[[408,[47]]]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[],44],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],0,0,0,0,0,[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[47,1],[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[]],0,0,[[]],[[]],[47,[[417,[47]]]],0,[[],25],[[47,45],25],[[47,45,88],25],[45],[[]],[1],0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[47,88],12],[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[47,88]],[[47,88]],0,0,[[]],[47,[[426,[47]]]],[[],25],[[47,45],25],0,[[],25],[[47,45],25],0,0,0,[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[[],25],[[47,88],25],[47,25],[[47,88],25],[[47,88],25],[47,12],[[],25],[[47,45],25],[[],1],0,0,[[],25],[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],0,[[],25],[[47,45],25],[[],12],[[],12],[47,[[13,[439]]]],[1,12],[1,12],0,[[],[[12,[44]]]],[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[47,[[441,[47]]]],[[47,88],[[12,[1]]]],[47,442],[[47,88],12],[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[47,88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],[[]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],[[47,1],[[450,[47]]]],0,[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],0,0,0,[47],[[47,88]],[[47,88],454],[[47,88],454],[[47,88]],[[47,88],454],0,[[[0,[47,262]]]],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[13,[405]]]],[1,[[13,[405]]]],[[47,88],25],0,[[47,88],25],[47,[[406,[47]]]],[[]],[[]],0,0,[47,47],[[]],[[]],[[]],0,0,0,[[47,45],[[408,[47]]]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[],44],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],0,0,0,0,0,[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[47,1],[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[]],0,0,[[]],[[]],[47,[[417,[47]]]],0,[[],25],[[47,45],25],[[47,45,88],25],[45],[[]],[1],0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[47,88],12],[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[47,88]],[[47,88]],0,0,[[]],[47,[[426,[47]]]],[[],25],[[47,45],25],0,[[],25],[[47,45],25],0,0,0,[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[[],25],[[47,88],25],[47,25],[[47,88],25],[[47,88],25],[47,12],[[],25],[[47,45],25],[[],1],0,0,[[],25],[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],0,[[],25],[[47,45],25],[[],12],[[],12],[47,[[13,[439]]]],[1,12],[1,12],0,[[],[[12,[44]]]],[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[47,[[441,[47]]]],[[47,88],[[12,[1]]]],[47,442],[[47,88],12],[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[47,88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],[[]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],[[47,1],[[450,[47]]]],0,[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],0,0,0,[47],[[47,88]],[[47,88],454],[[47,88],454],[[47,88]],[[47,88],454],0,[[[0,[47,262]]]],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[13,[405]]]],[1,[[13,[405]]]],[[47,88],25],0,[[47,88],25],[47,[[406,[47]]]],[[]],[[]],0,0,[47,47],[[]],[[]],[[]],0,0,0,[[47,45],[[408,[47]]]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[],44],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],0,0,0,0,0,[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[47,1],[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[]],0,0,[[]],[[]],[47,[[417,[47]]]],0,[[],25],[[47,45],25],[[47,45,88],25],[45],[[]],[1],0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[47,88],12],[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[47,88]],[[47,88]],0,0,[[]],[45],[47,[[426,[47]]]],[[],25],[[47,45],25],0,[[],25],[[47,45],25],0,0,0,[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[[],25],[[47,88],25],[47,25],[[47,88],25],[[47,88],25],[47,12],[[],25],[[47,45],25],[[],1],0,0,[[],25],[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],0,[[],25],[[47,45],25],[[],12],[[],12],[47,[[13,[439]]]],[1,12],[1,12],0,[[],[[12,[44]]]],[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[47,[[441,[47]]]],[[47,88],[[12,[1]]]],[47,442],[[47,88],12],[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[47,88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],[[]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],[[47,1],[[450,[47]]]],0,[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],0,0,0,[47],[[47,88]],[[47,88],454],[[47,88],454],[[],13],[[],13],[[47,88]],[[47,88],454],0,[[[0,[47,262]]]],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[13,[405]]]],[1,[[13,[405]]]],[[47,88],25],0,[[47,88],25],[47,[[406,[47]]]],[[]],[[]],0,0,[47,47],[[]],[[]],[[]],0,0,0,[[47,45],[[408,[47]]]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[],44],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],0,0,0,0,0,[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[47,1],[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[]],0,0,[[]],[[]],[47,[[417,[47]]]],0,[[],25],[[47,45],25],[[47,45,88],25],[45],[[]],[1],0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[47,88],12],[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[47,88]],[[47,88]],0,0,[[]],[45],[47,[[426,[47]]]],[[],25],[[47,45],25],0,[[],25],[[47,45],25],0,0,0,[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[[],25],[[47,88],25],[47,25],[[47,88],25],[[47,88],25],[47,12],[[],25],[[47,45],25],[[],1],0,0,[[],25],[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],0,[[],25],[[47,45],25],[[],12],[[],12],[47,[[13,[439]]]],[1,12],[1,12],0,[[],[[12,[44]]]],[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[47,[[441,[47]]]],[[47,88],[[12,[1]]]],[47,442],[[47,88],12],[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[47,88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],[[]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],[[47,1],[[450,[47]]]],0,[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],0,0,0,[47],[[47,88]],[[47,88],454],[[47,88],454],[[],13],[[],13],[[47,88]],[[47,88],454],0,[[[0,[47,262]]]],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[13,[405]]]],[1,[[13,[405]]]],[[47,88],25],0,[[47,88],25],[47,[[406,[47]]]],[[]],[[]],0,0,[47,47],[[]],[[]],[[]],0,0,0,[[47,45],[[408,[47]]]],[[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]],[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]],[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,[377,[[0,[47,377]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[[0,[47,262]]],[[409,[[0,[47,262]]]]]],[[],44],[[47,45],44],[[47,45,88],44],[47,410],[[47,411],411],0,0,0,0,0,[[[0,[47,262]]],[[412,[[0,[47,262]]]]]],[47,1],[[[0,[47,369]]],[[413,[[0,[47,369]]]]]],[[]],0,0,[[]],[[]],[47,[[417,[47]]]],0,[[],25],[[47,45],25],[[47,45,88],25],[45],[[]],[1],0,[[47,88],[[419,[47,88]]]],[[47,88],[[420,[47,88]]]],[[47,88],12],[[47,88],12],[[47,88],[[421,[47,45,88]]]],[47,[[422,[47]]]],[[47,88]],[[47,88]],0,0,[[]],[47,[[426,[47]]]],[[],25],[[47,45],25],0,[[],25],[[47,45],25],0,0,0,[[47,88],[[432,[47,88]]]],[47,[[433,[47]]]],[[47,88],[[434,[47,88]]]],[[]],[[]],[[],25],[[47,88],25],[47,25],[[47,88],25],[[47,88],25],[47,12],[[],25],[[47,45],25],[[],1],0,0,[[],25],[[47,45],25],[[47,88],[[437,[47,88]]]],[[47,88],[[438,[47,88]]]],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],[[47,47],47],[47,12],[[47,88],12],[[47,88],12],0,[[],25],[[47,45],25],[[],12],[[],12],[47,[[13,[439]]]],[1,12],[1,12],0,[[],[[12,[44]]]],[[47,45],[[12,[44]]]],[[47,45,88],[[12,[44]]]],[[47,88]],[[[0,[47,440]],88],1],[47,[[441,[47]]]],[[47,88],[[12,[1]]]],[47,442],[[47,88],12],[[[0,[47,440]]],[[444,[[0,[47,440]]]]]],[[47,88],12],[[47,88]],[[[0,[47,445,440]],88],[[12,[1]]]],[[47,88],[[446,[47,88]]]],[[]],[[47,1],[[448,[47]]]],[[47,88],[[449,[47,88]]]],[[47,1],[[450,[47]]]],0,[47,451],[[47,1],[[452,[47]]]],[[47,88],[[453,[47,88]]]],0,0,0,[47],[[47,88]],[[47,88],454],[[47,88],454],[[47,88]],[[47,88],454],0,[[[0,[47,262]]]],[[47,45],[[456,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[339,[47]]],405],0,0,[[[620,[47]]],1],[[[339,[47]]],47],[339],[339,339],[590,405],[[[339,[47]]]],[[[339,[47]]],47],[339,557],[339,557],[339],[339],[590,1],[[]],[[]],[[]],[[]],[[]],[[]],[[[339,[47]]],339],[[[620,[47]]],[[620,[47]]]],[[[339,[47]]],[[339,[47]]]],[590,590],[[]],[[]],[[]],[[[620,[47]],[620,[47]]],44],[[[339,[47]],[339,[47]]],44],[[590,590],44],[1],[1],[[],339],[[]],[[],25],[[[620,[47]],[620,[47]]],25],[[[339,[47]],[339,[47]]],25],[[590,590],25],[[[620,[47]],5],[[13,[423]]]],[[[339,[47]],5],[[13,[423]]]],[[[339,[47]],5],[[13,[423]]]],[[590,5],[[13,[423]]]],[[]],[47,[[339,[47]]]],[47,[[339,[47]]]],[[]],[[]],[1],[1],[47],[[]],[339,[[339,[47]]]],[[]],[47],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[339,621],339],[49],[[[620,[47]],49]],[[[339,[47]],49]],[[590,49]],[[]],[[]],[[]],[1],[1],[[[620,[47]]],330],[339,1],[590,15],[[[339,[47]],282],[[339,[47]]]],[[]],[[],[[12,[[339,[47]]]]]],[1,[[12,[590]]]],[[],[[339,[47]]]],[1,590],[[]],[[]],[[],590],[[[620,[47]],[620,[47]]],[[12,[44]]]],[[[339,[47]],[339,[47]]],[[12,[44]]]],[[590,590],[[12,[44]]]],0,0,[[]],[[]],[[]],[[]],[[[620,[47]]],1],[1],[[339,1],339],[1],[[]],[1],[[]],[[]],[[]],[[[339,[47]]]],[[],13],[[],13],[405,[[13,[590]]]],[[],13],[1,[[13,[590]]]],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,[[[339,[47]],405],[[339,[47]]]],[[]],[[2,1]],[[]],[[]],0,0,0,0,0,0,[[13,13],13],[[13,282],13],[[[13,[609]]],13],[[[13,[610]]],13],[13,13],[13,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,606],[[[13,[369,369]]],[[13,[369,369]]]],[622,622],[[[623,[369]]],[[623,[369]]]],[[[13,[369,369]],[13,[369,369]]]],[[]],[[]],[[]],[[[13,[369]]],[[13,[369]]]],[[[13,[369]]],[[13,[369]]]],[[[13,[373,373]],[13,[373,373]]],44],[[[13,[494]]],[[13,[494]]]],[[[13,[494]]],[[13,[494]]]],[414,[[13,[[13,[501,501]]]]]],[[[13,[[374,[[374,[[374,[374]]]]]],[374,[[374,[[374,[374]]]]]]]],[13,[[374,[[374,[[374,[374]]]]]],[374,[[374,[[374,[374]]]]]]]]],25],[13,12],[[[13,[357]],10]],[[[13,[357]],10]],[[[13,[13]]],13],[[[13,[357,357]],5],[[13,[423]]]],[[[622,[357]],5],[[13,[423]]]],[[[624,[357]],5],[[13,[423]]]],[[[623,[357]],5],[[13,[423]]]],[[]],[[]],[[]],[[]],[45,[[13,[410]]]],[[],13],[[[13,[483]]],[[13,[625]]]],[608,[[13,[625]]]],[[[0,[46,47]],48],27],[[[13,[46,46]],49]],0,0,0,[[13,282],13],[[13,282],13],[[]],[[]],[[]],[[]],[[[13,[[173,[3]]]]]],[13,624],[13,622],[13,623],[[]],[[]],[[]],[[[13,[[173,[3]]]]]],[13,25],[[13,282],25],[13,25],[[13,282],25],[13,622],[13,624],[[13,282],13],[[13,282],13],[[13,282]],[[13,282,282]],[622,12],[624,12],[623,12],[622,12],[624,12],[623,12],[13,12],[[13,13],13],[[13,282],13],[[[13,[[377,[[377,[[377,[377]]]]]],[377,[[377,[[377,[377]]]]]]]],[13,[[377,[[377,[[377,[377]]]]]],[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[262,[[13,[442]]]],[[[13,[503,503]],447],13],[622],[624],[623],[262,[[13,[451]]]],[[]],[[]],[[]],[[[13,[12]]],[[12,[13]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[[13,[357]]]],[[[13,[357]]]],[13],[13],[[[13,[495]]],495],[[13,282]],[13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[481,[469]]],[[481,[469]]]],[[[481,[463]]],[[481,[463]]]],[[[481,[470]]],[[481,[470]]]],[[[481,[473]]],[[481,[473]]]],[[[481,[474]]],[[481,[474]]]],[[[481,[74]]],[[481,[74]]]],[[[481,[36]]],[[481,[36]]]],[[[481,[27]],[481,[27]]]],[[[481,[626]],[481,[626]]]],[[[481,[1]],[481,[1]]]],[[[481,[473]],[481,[473]]]],[[[481,[626]],[481,[626]]]],[[[481,[474]],[481,[474]]]],[[[481,[463]],[481,[463]]]],[[[481,[626]],[481,[626]]]],[[[481,[469]],[481,[469]]]],[[[481,[2]],[481,[2]]]],[[[481,[74]],[481,[74]]]],[[[481,[15]],[481,[15]]]],[[[481,[19]],[481,[19]]]],[[[481,[36]],[481,[36]]]],[[[481,[470]],[481,[470]]]],[[[481,[626]]]],[[[628,[627]]],25],[[[628,[627]]],25],[[[481,[626]]]],[[[481,[626]]]],[[[481,[626]]]],[[[481,[626]]]],[[[481,[626]]]],[[[481,[626]]]],[[[628,[627]],25],[[628,[627]]]],[[[628,[627]],[628,[627]]],[[628,[627]]]],[[[481,[36]],[481,[36]]]],[[[481,[2]],[481,[2]]]],[[[481,[626]],[481,[626]]]],[[[481,[74]],[481,[74]]]],[[[481,[474]],[481,[474]]]],[[[481,[473]],[481,[473]]]],[[[481,[463]],[481,[463]]]],[[[481,[19]],[481,[19]]]],[[[481,[626]],[481,[626]]]],[[[481,[1]],[481,[1]]]],[[[481,[27]],[481,[27]]]],[[[481,[15]],[481,[15]]]],[[[481,[626]],[481,[626]]]],[[[628,[627]],[628,[627]]]],[[[628,[627]],25]],[[[481,[626]]]],[[[628,[627]],25],[[628,[627]]]],[[[628,[627]],[628,[627]]],[[628,[627]]]],[[[481,[19]],[481,[19]]]],[[[481,[27]],[481,[27]]]],[[[481,[626]],[481,[626]]]],[[[481,[626]],[481,[626]]]],[[[481,[463]],[481,[463]]]],[[[481,[626]],[481,[626]]]],[[[481,[2]],[481,[2]]]],[[[481,[15]],[481,[15]]]],[[[481,[1]],[481,[1]]]],[[[481,[74]],[481,[74]]]],[[[481,[473]],[481,[473]]]],[[[481,[36]],[481,[36]]]],[[[481,[474]],[481,[474]]]],[[[628,[627]],[628,[627]]]],[[[628,[627]],25]],[[[481,[626]]]],[[[628,[627]],[628,[627]]]],[[[628,[627]],25]],[[[481,[27]],[481,[27]]]],[[[481,[463]],[481,[463]]]],[[[481,[74]],[481,[74]]]],[[[481,[626]],[481,[626]]]],[[[481,[474]],[481,[474]]]],[[[481,[36]],[481,[36]]]],[[[481,[1]],[481,[1]]]],[[[481,[2]],[481,[2]]]],[[[481,[19]],[481,[19]]]],[[[481,[626]],[481,[626]]]],[[[481,[473]],[481,[473]]]],[[[481,[15]],[481,[15]]]],[[[481,[626]],[481,[626]]]],[[[628,[627]],[628,[627]]]],[[[628,[627]],25]],[[[481,[626]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[628,[627]]],[[628,[627]]]],[[[481,[626]]],[[481,[626]]]],[[[628,[627]]],[[628,[627]]]],[[[481,[626]]],[[481,[626]]]],[629,629],[[]],[[]],[[]],[[[481,[[0,[626,373]]]],[481,[[0,[626,373]]]]],44],[[629,629],44],[[]],[[[481,[470]],[481,[470]]],[[481,[470]]]],[[[481,[469]],[481,[469]]],[[481,[469]]]],[[],[[628,[627]]]],[[],[[481,[[0,[626,495]]]]]],[[[481,[626]],[481,[626]]]],[[[481,[1]],[481,[1]]]],[[[481,[473]],[481,[473]]]],[[[481,[19]],[481,[19]]]],[[[481,[2]],[481,[2]]]],[[[481,[27]],[481,[27]]]],[[[481,[474]],[481,[474]]]],[[[481,[36]],[481,[36]]]],[[[481,[15]],[481,[15]]]],[[[481,[463]],[481,[463]]]],[[[481,[626]],[481,[626]]]],[[[481,[470]],[481,[470]]]],[[[481,[626]],[481,[626]]]],[[[481,[469]],[481,[469]]]],[[[481,[74]],[481,[74]]]],[[[481,[626]],[481,[626]]]],[[[481,[626]]]],[[[628,[[0,[627,[374,[[0,[627,[374,[[0,[627,[374,[[0,[627,374]]]]]]]]]]]]]]]],[628,[[0,[627,[374,[[0,[627,[374,[[0,[627,[374,[[0,[627,374]]]]]]]]]]]]]]]]],25],[[[481,[[0,[626,[374,[[0,[626,[374,[[0,[626,[374,[[0,[626,374]]]]]]]]]]]]]]]],[481,[[0,[626,[374,[[0,[626,[374,[[0,[626,[374,[[0,[626,374]]]]]]]]]]]]]]]]],25],[[629,629],25],0,0,0,0,0,0,0,[[[628,[[0,[627,357]]]],5],[[13,[423]]]],[[[481,[[0,[626,589]]]],5],[[13,[423]]]],[[[481,[[0,[626,357]]]],5],[[13,[423]]]],[[[481,[[0,[626,630]]]],5],[[13,[423]]]],[[[481,[[0,[626,586]]]],5],[[13,[423]]]],[[[481,[[0,[626,587]]]],5],[[13,[423]]]],[[[481,[[0,[626,631]]]],5],[[13,[423]]]],[[[481,[[0,[626,588]]]],5],[[13,[423]]]],[[629,5],[[13,[423]]]],[[]],[[[628,[463]]],[[628,[36]]]],[[[628,[74]]],[[628,[474]]]],[[],[[628,[627]]]],[[[628,[474]]],[[628,[36]]]],[[[628,[463]]],[[628,[74]]]],[[[628,[74]]],[[628,[36]]]],[[[628,[36]]],[[628,[463]]]],[[[628,[474]]],[[628,[463]]]],[[[628,[74]]],[[628,[463]]]],[[[628,[36]]],[[628,[474]]]],[[[628,[473]]],[[628,[474]]]],[[[628,[473]]],[[628,[36]]]],[[[628,[36]]],[[628,[473]]]],[[]],[[[628,[36]]],[[628,[74]]]],[[[628,[463]]],[[628,[474]]]],[[[628,[463]]],[[628,[473]]]],[[[628,[74]]],[[628,[473]]]],[[[628,[474]]],[[628,[473]]]],[[[628,[473]]],[[628,[74]]]],[[[628,[474]]],[[628,[74]]]],[[[628,[473]]],[[628,[463]]]],[476,[[481,[469]]]],[467,[[481,[1]]]],[[],[[481,[626]]]],[467,[[481,[27]]]],[467,[[481,[463]]]],[461,[[481,[470]]]],[467,[[481,[74]]]],[467,[[481,[19]]]],[475,[[481,[27]]]],[464,[[481,[27]]]],[475,[[481,[463]]]],[464,[[481,[2]]]],[475,[[481,[1]]]],[464,[[481,[463]]]],[465,[[481,[469]]]],[468,[[481,[469]]]],[464,[[481,[36]]]],[464,[[481,[19]]]],[[[632,[627]]],[[481,[627]]]],[464,[[481,[474]]]],[464,[[481,[74]]]],[475,[[481,[74]]]],[475,[[481,[36]]]],[467,[[481,[474]]]],[475,[[481,[2]]]],[464,[[481,[1]]]],[464,[[481,[15]]]],[[]],[477,[[481,[470]]]],[475,[[481,[19]]]],[467,[[481,[36]]]],[467,[[481,[15]]]],[467,[[481,[473]]]],[467,[[481,[2]]]],[475,[[481,[473]]]],[475,[[481,[15]]]],[464,[[481,[473]]]],[466,[[481,[470]]]],[475,[[481,[474]]]],[[]],[[],[[628,[627]]]],[[],[[481,[626]]]],[[]],[2,[[628,[627]]]],[15,[[628,[627]]]],[2,[[628,[627]]]],[2,[[628,[627]]]],[2,[[628,[627]]]],[27,[[628,[627]]]],[19,[[628,[627]]]],[[]],[[[481,[15]]],[[481,[470]]]],[[[481,[27]]],[[481,[469]]]],[[[481,[627]]],[[628,[627]]]],[[[481,[627]]],[[628,[627]]]],[[],[[481,[626]]]],[[[481,[1]],[481,[626]]],[[481,[626]]]],[[[481,[1]]],[[481,[495,626]]]],[[[628,[74]],[481,[1]],[481,[626]]],[[481,[626]]]],[[[628,[74]],[481,[1]],[481,[626]]],[[481,[626]]]],[[[0,[46,47]],48],27],[[[0,[46,47]],48],27],[[[481,[[0,[626,46]]]],49]],[[629,49]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[481,[626]],621]],[[[481,[626]],621]],[[[481,[626]],[481,[626]]]],[[]],[[]],[[]],[[]],[[]],[[[481,[470]]]],[[[481,[469]]]],[[]],[[[481,[469]]]],[[[481,[470]]]],[[]],[[[481,[469]]]],[[[481,[470]]]],[[]],[[[481,[474]]]],[[[481,[463]]]],[[[481,[74]]]],[[[481,[473]]]],[[[481,[36]]]],[[]],[[[481,[469]]]],[[[481,[470]]]],[[]],[[[481,[473]]]],[[[481,[36]]]],[[[481,[74]]]],[[[481,[474]]]],[[[481,[463]]]],[[]],[[[481,[469]]]],[[[481,[470]]]],[[]],[[[481,[469]]]],[[[481,[470]]]],[[]],[[[481,[469]]]],[[[481,[470]]]],0,0,0,[[[481,[626]]],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[481,[19]],[481,[19]]]],[[[481,[2]],[481,[2]]]],[[[481,[474]],[481,[474]]]],[[[481,[74]],[481,[74]]]],[[[481,[473]],[481,[473]]]],[[[481,[463]],[481,[463]]]],[[[481,[27]],[481,[27]]]],[[[481,[36]],[481,[36]]]],[[[481,[626]],[481,[626]]]],[[[481,[626]],[481,[626]]]],[[[481,[1]],[481,[1]]]],[[[481,[626]],[481,[626]]]],[[[481,[470]],[481,[470]]]],[[[481,[15]],[481,[15]]]],[[[481,[469]],[481,[469]]]],[[[481,[626]]]],[[[481,[[0,[626,[374,[[0,[626,[374,[[0,[626,[374,[[0,[626,374]]]]]]]]]]]]]]]],[481,[[0,[626,[374,[[0,[626,[374,[[0,[626,[374,[[0,[626,374]]]]]]]]]]]]]]]]],25],[[[481,[469]]]],[[[481,[474]]]],[[[481,[74]]]],[[[481,[470]]]],[[[481,[473]]]],[[[481,[463]]]],[[[481,[36]]]],[[[628,[627]]]],[[[481,[15]]]],[[[481,[36]]]],[[[481,[74]]]],[[[481,[19]]]],[[[481,[473]]]],[[[481,[2]]]],[[[481,[463]]]],[[[481,[1]]]],[[[481,[474]]]],[[[481,[27]]]],[[[628,[[0,[627,[377,[[0,[627,[377,[[0,[627,[377,[[0,[627,377]]]]]]]]]]]]]]]],[628,[[0,[627,[377,[[0,[627,[377,[[0,[627,[377,[[0,[627,377]]]]]]]]]]]]]]]]],[[12,[44]]]],[[[481,[[0,[626,[377,[[0,[626,[377,[[0,[626,[377,[[0,[626,377]]]]]]]]]]]]]]]],[481,[[0,[626,[377,[[0,[626,[377,[[0,[626,[377,[[0,[626,377]]]]]]]]]]]]]]]]],[[12,[44]]]],[[629,629],[[12,[44]]]],[262,[[481,[469]]]],[262,[[481,[470]]]],[262,[[481,[27]]]],[262,[[481,[473]]]],[262,[[481,[74]]]],[262,[[481,[1]]]],[262,[[481,[2]]]],[262,[[481,[474]]]],[262,[[481,[15]]]],[262,[[481,[19]]]],[262,[[481,[74]]]],[262,[[481,[27]]]],[262,[[481,[15]]]],[262,[[481,[19]]]],[262,[[481,[463]]]],[262,[[481,[470]]]],[262,[[481,[2]]]],[262,[[481,[469]]]],[262,[[481,[474]]]],[262,[[481,[36]]]],[262,[[481,[473]]]],[262,[[481,[1]]]],[262,[[481,[36]]]],[262,[[481,[463]]]],[[]],[[[481,[469]]],[[481,[469]]]],[[[481,[470]]],[[481,[470]]]],[[]],[[]],[[[481,[474]]]],[[[481,[473]]]],[[[481,[36]]]],[[[481,[19]]]],[[[481,[74]]]],[[[481,[15]]]],[[[481,[463]]]],[[[481,[2]]]],[[[481,[27]]]],[[[481,[1]]]],[[]],[[]],[[]],[[[481,[1]]]],[[[481,[74]]]],[[[481,[2]]]],[[[481,[474]]]],[[[481,[469]]]],[[[481,[19]]]],[[[481,[36]]]],[[[481,[463]]]],[[[481,[473]]]],[[[481,[470]]]],[[[481,[15]]]],[[[481,[27]]]],[[]],[[]],[[]],[[[481,[1]]]],[[[481,[74]]]],[[[481,[19]]]],[[[481,[27]]]],[[[481,[470]]]],[[[481,[15]]]],[[[481,[473]]]],[[[481,[2]]]],[[[481,[36]]]],[[[481,[463]]]],[[[481,[474]]]],[[[481,[469]]]],[[]],[[]],[[[481,[27]]]],[[[481,[1]]]],[[[481,[474]]]],[[[481,[19]]]],[[[481,[2]]]],[[[481,[36]]]],[[[481,[74]]]],[[[481,[15]]]],[[[481,[473]]]],[[[481,[463]]]],[[]],[[]],[[]],[[[481,[2]]]],[[[481,[474]]]],[[[481,[27]]]],[[[481,[1]]]],[[[481,[19]]]],[[[481,[473]]]],[[[481,[470]]]],[[[481,[469]]]],[[[481,[463]]]],[[[481,[74]]]],[[[481,[15]]]],[[[481,[36]]]],[[]],[[]],[[]],[[[481,[474]]]],[[[481,[36]]]],[[[481,[74]]]],[[[481,[2]]]],[[[481,[27]]]],[[[481,[463]]]],[[[481,[1]]]],[[[481,[470]]]],[[[481,[15]]]],[[[481,[19]]]],[[[481,[473]]]],[[[481,[469]]]],[[]],[[]],[[[481,[15]]]],[[[481,[1]]]],[[[481,[474]]]],[[[481,[2]]]],[[[481,[19]]]],[[[481,[473]]]],[[[481,[27]]]],[[[481,[74]]]],[[[481,[36]]]],[[[481,[463]]]],[[[481,[626]],[481,[626]]]],[[[481,[1]],[481,[1]]]],[[[481,[19]],[481,[19]]]],[[[481,[74]],[481,[74]]]],[[[481,[626]],[481,[626]]]],[[[481,[470]],[481,[470]]]],[[[481,[474]],[481,[474]]]],[[[481,[469]],[481,[469]]]],[[[481,[36]],[481,[36]]]],[[[481,[2]],[481,[2]]]],[[[481,[15]],[481,[15]]]],[[[481,[27]],[481,[27]]]],[[[481,[626]],[481,[626]]]],[[[481,[463]],[481,[463]]]],[[[481,[473]],[481,[473]]]],[[[481,[626]]]],[[[481,[626]]],[[481,[626]]]],[[[481,[626]]],[[481,[626]]]],[[[481,[626]]],[[481,[626]]]],[[]],[[[481,[473]]],[[481,[473]]]],[[[481,[474]]],[[481,[474]]]],[[[481,[463]]],[[481,[463]]]],[[[481,[36]]],[[481,[36]]]],[[[481,[74]]],[[481,[74]]]],[[]],[[]],[[[481,[74]],[481,[74]]],[[481,[74]]]],[[[481,[27]],[481,[27]]],[[481,[27]]]],[[[481,[1]],[481,[1]]],[[481,[1]]]],[[[481,[474]],[481,[474]]],[[481,[474]]]],[[[481,[473]],[481,[473]]],[[481,[473]]]],[[[481,[36]],[481,[36]]],[[481,[36]]]],[[[481,[19]],[481,[19]]],[[481,[19]]]],[[[481,[15]],[481,[15]]],[[481,[15]]]],[[[481,[2]],[481,[2]]],[[481,[2]]]],[[[481,[463]],[481,[463]]],[[481,[463]]]],[[]],[[[481,[74]]],[[481,[74]]]],[[[481,[474]]],[[481,[474]]]],[[[481,[36]]],[[481,[36]]]],[[[481,[463]]],[[481,[463]]]],[[[481,[473]]],[[481,[473]]]],[[]],[[]],[[[481,[74]],[481,[74]]],[[481,[74]]]],[[[481,[474]],[481,[474]]],[[481,[474]]]],[[[481,[36]],[481,[36]]],[[481,[36]]]],[[[481,[27]],[481,[27]]],[[481,[27]]]],[[[481,[19]],[481,[19]]],[[481,[19]]]],[[[481,[473]],[481,[473]]],[[481,[473]]]],[[[481,[463]],[481,[463]]],[[481,[463]]]],[[[481,[2]],[481,[2]]],[[481,[2]]]],[[[481,[15]],[481,[15]]],[[481,[15]]]],[[[481,[1]],[481,[1]]],[[481,[1]]]],[[[481,[626]],[481,[1]]]],[[[481,[626]],[628,[74]],[481,[1]]]],[[[481,[626]],[628,[74]],[481,[1]]]],[[[628,[627]],[481,[626]],[481,[626]]],[[481,[626]]]],[[[628,[627]],[628,[627]],[628,[627]]],[[628,[627]]]],[[[628,[627]],1,25]],[[[628,[627]],1,25]],[[[481,[74]],[481,[74]]]],[[[481,[15]],[481,[15]]]],[[[481,[626]],[481,[626]]]],[[[481,[1]],[481,[1]]]],[[[481,[473]],[481,[473]]]],[[[481,[19]],[481,[19]]]],[[[481,[36]],[481,[36]]]],[[[481,[626]],[481,[626]]]],[[[481,[2]],[481,[2]]]],[[[481,[474]],[481,[474]]]],[[[481,[463]],[481,[463]]]],[[[481,[626]],[481,[626]]]],[[[481,[27]],[481,[27]]]],[[[481,[626]]]],[[[481,[626]],[481,[626]]]],[[[481,[626]],[481,[626]]]],[[[481,[463]],[481,[463]]]],[[[481,[36]],[481,[36]]]],[[[481,[473]],[481,[473]]]],[[[481,[2]],[481,[2]]]],[[[481,[15]],[481,[15]]]],[[[481,[27]],[481,[27]]]],[[[481,[74]],[481,[74]]]],[[[481,[19]],[481,[19]]]],[[[481,[626]],[481,[626]]]],[[[481,[474]],[481,[474]]]],[[[481,[1]],[481,[1]]]],[[[481,[626]]]],[[]],[[]],[[[481,[473]]],[[481,[473]]]],[[[481,[470]]],[[481,[470]]]],[[[481,[36]]],[[481,[36]]]],[[[481,[469]]],[[481,[469]]]],[[[481,[74]]],[[481,[74]]]],[[[481,[474]]],[[481,[474]]]],[[[481,[463]]],[[481,[463]]]],[[]],[[]],[[[628,[74]],[628,[74]],[628,[74]]],[[628,[74]]]],[[[628,[474]],[628,[474]],[628,[474]]],[[628,[474]]]],[[[628,[473]],[628,[473]],[628,[473]]],[[628,[473]]]],[[[628,[463]],[628,[463]],[628,[463]]],[[628,[463]]]],[[[628,[36]],[628,[36]],[628,[36]]],[[628,[36]]]],[[[481,[473]],[481,[473]],[481,[473]]],[[481,[473]]]],[[[481,[1]],[481,[1]],[481,[1]]],[[481,[1]]]],[[[481,[74]],[481,[74]],[481,[74]]],[[481,[74]]]],[[[481,[463]],[481,[463]],[481,[463]]],[[481,[463]]]],[[[481,[2]],[481,[2]],[481,[2]]],[[481,[2]]]],[[[481,[15]],[481,[15]],[481,[15]]],[[481,[15]]]],[[[481,[36]],[481,[36]],[481,[36]]],[[481,[36]]]],[[[481,[19]],[481,[19]],[481,[19]]],[[481,[19]]]],[[[481,[474]],[481,[474]],[481,[474]]],[[481,[474]]]],[[[481,[27]],[481,[27]],[481,[27]]],[[481,[27]]]],[[[481,[470]],[481,[470]],[481,[470]]],[[481,[470]]]],[[[481,[469]],[481,[469]],[481,[469]]],[[481,[469]]]],[[]],[[[628,[474]],[628,[474]]]],[[[628,[74]],[628,[74]]]],[[[628,[463]],[628,[463]]]],[[[628,[473]],[628,[473]]]],[[[628,[36]],[628,[36]]]],[[[481,[74]],[481,[74]]]],[[[481,[1]],[481,[1]]]],[[[481,[15]],[481,[15]]]],[[[481,[469]],[481,[469]]]],[[[481,[2]],[481,[2]]]],[[[481,[36]],[481,[36]]]],[[[481,[470]],[481,[470]]]],[[[481,[473]],[481,[473]]]],[[[481,[474]],[481,[474]]]],[[[481,[27]],[481,[27]]]],[[[481,[463]],[481,[463]]]],[[[481,[19]],[481,[19]]]],[[]],[[[628,[74]],[628,[74]]]],[[[628,[463]],[628,[463]]]],[[[628,[474]],[628,[474]]]],[[[628,[473]],[628,[473]]]],[[[628,[36]],[628,[36]]]],[[[481,[473]],[481,[473]]]],[[[481,[27]],[481,[27]]]],[[[481,[470]],[481,[470]]]],[[[481,[474]],[481,[474]]]],[[[481,[15]],[481,[15]]]],[[[481,[469]],[481,[469]]]],[[[481,[2]],[481,[2]]]],[[[481,[19]],[481,[19]]]],[[[481,[36]],[481,[36]]]],[[[481,[74]],[481,[74]]]],[[[481,[463]],[481,[463]]]],[[[481,[1]],[481,[1]]]],[[]],[[[628,[36]],[628,[36]]]],[[[628,[74]],[628,[74]]]],[[[628,[474]],[628,[474]]]],[[[628,[463]],[628,[463]]]],[[[628,[473]],[628,[473]]]],[[[481,[1]],[481,[1]]]],[[[481,[469]],[481,[469]]]],[[[481,[470]],[481,[470]]]],[[[481,[473]],[481,[473]]]],[[[481,[2]],[481,[2]]]],[[[481,[19]],[481,[19]]]],[[[481,[74]],[481,[74]]]],[[[481,[463]],[481,[463]]]],[[[481,[36]],[481,[36]]]],[[[481,[15]],[481,[15]]]],[[[481,[474]],[481,[474]]]],[[[481,[27]],[481,[27]]]],[[]],[[[628,[474]],[628,[474]]]],[[[628,[74]],[628,[74]]]],[[[628,[463]],[628,[463]]]],[[[628,[473]],[628,[473]]]],[[[628,[36]],[628,[36]]]],[[[481,[474]],[481,[474]]]],[[[481,[1]],[481,[1]]]],[[[481,[463]],[481,[463]]]],[[[481,[27]],[481,[27]]]],[[[481,[470]],[481,[470]]]],[[[481,[15]],[481,[15]]]],[[[481,[469]],[481,[469]]]],[[[481,[36]],[481,[36]]]],[[[481,[473]],[481,[473]]]],[[[481,[74]],[481,[74]]]],[[[481,[2]],[481,[2]]]],[[[481,[19]],[481,[19]]]],[[]],[[[628,[473]],[628,[473]]]],[[[628,[74]],[628,[74]]]],[[[628,[36]],[628,[36]]]],[[[628,[474]],[628,[474]]]],[[[628,[463]],[628,[463]]]],[[[481,[2]],[481,[2]]]],[[[481,[1]],[481,[1]]]],[[[481,[19]],[481,[19]]]],[[[481,[74]],[481,[74]]]],[[[481,[27]],[481,[27]]]],[[[481,[15]],[481,[15]]]],[[[481,[473]],[481,[473]]]],[[[481,[36]],[481,[36]]]],[[[481,[463]],[481,[463]]]],[[[481,[469]],[481,[469]]]],[[[481,[470]],[481,[470]]]],[[[481,[474]],[481,[474]]]],[[]],[[]],[[[628,[74]],[628,[74]]],[[628,[74]]]],[[[628,[473]],[628,[473]]],[[628,[473]]]],[[[628,[474]],[628,[474]]],[[628,[474]]]],[[[628,[463]],[628,[463]]],[[628,[463]]]],[[[628,[36]],[628,[36]]],[[628,[36]]]],[[[481,[19]],[481,[19]]],[[481,[19]]]],[[[481,[74]],[481,[74]]],[[481,[74]]]],[[[481,[15]],[481,[15]]],[[481,[15]]]],[[[481,[36]],[481,[36]]],[[481,[36]]]],[[[481,[470]],[481,[470]]],[[481,[470]]]],[[[481,[463]],[481,[463]]],[[481,[463]]]],[[[481,[2]],[481,[2]]],[[481,[2]]]],[[[481,[473]],[481,[473]]],[[481,[473]]]],[[[481,[1]],[481,[1]]],[[481,[1]]]],[[[481,[469]],[481,[469]]],[[481,[469]]]],[[[481,[27]],[481,[27]]],[[481,[27]]]],[[[481,[474]],[481,[474]]],[[481,[474]]]],[[]],[[]],[[[628,[474]],[628,[474]]],[[628,[474]]]],[[[628,[74]],[628,[74]]],[[628,[74]]]],[[[628,[36]],[628,[36]]],[[628,[36]]]],[[[628,[473]],[628,[473]]],[[628,[473]]]],[[[628,[463]],[628,[463]]],[[628,[463]]]],[[[481,[74]],[481,[74]]],[[481,[74]]]],[[[481,[1]],[481,[1]]],[[481,[1]]]],[[[481,[474]],[481,[474]]],[[481,[474]]]],[[[481,[36]],[481,[36]]],[[481,[36]]]],[[[481,[19]],[481,[19]]],[[481,[19]]]],[[[481,[15]],[481,[15]]],[[481,[15]]]],[[[481,[463]],[481,[463]]],[[481,[463]]]],[[[481,[2]],[481,[2]]],[[481,[2]]]],[[[481,[470]],[481,[470]]],[[481,[470]]]],[[[481,[473]],[481,[473]]],[[481,[473]]]],[[[481,[469]],[481,[469]]],[[481,[469]]]],[[[481,[27]],[481,[27]]],[[481,[27]]]],[[]],[[[628,[474]],[628,[474]]]],[[[628,[74]],[628,[74]]]],[[[628,[473]],[628,[473]]]],[[[628,[36]],[628,[36]]]],[[[628,[463]],[628,[463]]]],[[[481,[36]],[481,[36]]]],[[[481,[19]],[481,[19]]]],[[[481,[474]],[481,[474]]]],[[[481,[27]],[481,[27]]]],[[[481,[2]],[481,[2]]]],[[[481,[463]],[481,[463]]]],[[[481,[74]],[481,[74]]]],[[[481,[469]],[481,[469]]]],[[[481,[470]],[481,[470]]]],[[[481,[473]],[481,[473]]]],[[[481,[15]],[481,[15]]]],[[[481,[1]],[481,[1]]]],0,[25,[[628,[627]]]],[626,[[481,[626]]]],[[[481,[474]],[481,[474]]]],[[[481,[1]],[481,[1]]]],[[[481,[469]],[481,[469]]]],[[[481,[74]],[481,[74]]]],[[[481,[473]],[481,[473]]]],[[[481,[626]],[481,[626]]]],[[[481,[470]],[481,[470]]]],[[[481,[15]],[481,[15]]]],[[[481,[2]],[481,[2]]]],[[[481,[463]],[481,[463]]]],[[[481,[36]],[481,[36]]]],[[[481,[626]],[481,[626]]]],[[[481,[626]],[481,[626]]]],[[[481,[19]],[481,[19]]]],[[[481,[27]],[481,[27]]]],[[[481,[626]]]],[262,[[481,[463]]]],[262,[[481,[463]]]],[262,[[481,[474]]]],[262,[[481,[469]]]],[262,[[481,[19]]]],[262,[[481,[473]]]],[262,[[481,[36]]]],[262,[[481,[2]]]],[262,[[481,[473]]]],[262,[[481,[74]]]],[262,[[481,[15]]]],[262,[[481,[19]]]],[262,[[481,[27]]]],[262,[[481,[74]]]],[262,[[481,[1]]]],[262,[[481,[474]]]],[262,[[481,[15]]]],[262,[[481,[469]]]],[262,[[481,[2]]]],[262,[[481,[1]]]],[262,[[481,[470]]]],[262,[[481,[470]]]],[262,[[481,[27]]]],[262,[[481,[36]]]],[[[481,[626]]],[[481,[626]]]],[[[481,[626]],[481,[626]]],[[481,[626]]]],[[[628,[627]],1],25],[[[628,[627]],1],25],[[[628,[627]]]],[[[481,[626]]]],[[]],[[[628,[627]]],2],[[[628,[627]]],27],[[[628,[627]]],15],[[[628,[627]]],2],[[[628,[627]]],19],[[[628,[627]]],2],[[[628,[627]]],2],[[]],[[[481,[470]]],[[481,[15]]]],[[[481,[469]]],[[481,[27]]]],[[]],[[[481,[470]]],[[481,[470]]]],[[[481,[469]]],[[481,[469]]]],[[[628,[627]]],[[481,[627]]]],[[[481,[[633,[626]],626]]],[[481,[626]]]],[[]],[[]],[[]],[[]],[[[481,[470]]],[[481,[470]]]],[[[481,[469]]],[[481,[469]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[634,1],[[13,[405]]]],[[635,1],[[13,[405]]]],[[634,1],[[13,[405]]]],[[635,1],[[13,[405]]]],[[634,88],25],[[635,88],25],[[634,88],25],[[635,88],25],[635],[634],[635],[[]],[634],[635],[[[636,[88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[634,634],[[[636,[[0,[369,88]]]]],[[636,[[0,[369,88]]]]]],[[[637,[[0,[369,88]]]]],[[637,[[0,[369,88]]]]]],[[[638,[[0,[369,88]]]]],[[638,[[0,[369,88]]]]]],[639,639],[640,640],[641,641],[642,642],[[[643,[369]]],[[643,[369]]]],[644,644],[645,645],[646,646],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[634,1],[635,1],[640,1],[641,1],[647,1],[642,1],[648,1],[643,1],[644,1],[649,1],[645,1],[650,1],[646,1],[651,1],[[],634],[[],635],0,0,[[634,88],12],[[635,88],12],[[634,88],12],[[635,88],12],0,0,0,0,[[[634,[357]],5],[[13,[423]]]],[[[635,[357]],5],[[13,[423]]]],[[[636,[357,88]],5],[[13,[423]]]],[[[637,[357,88]],5],[[13,[423]]]],[[[652,[357,88]],5],[[13,[423]]]],[[[653,[357,88]],5],[[13,[423]]]],[[[638,[357,88]],5],[[13,[423]]]],[[[654,[357,88]],5],[[13,[423]]]],[[[655,[357,88]],5],[[13,[423]]]],[[[656,[357,88]],5],[[13,[423]]]],[[[657,[357,88]],5],[[13,[423]]]],[[[658,[357,88]],5],[[13,[423]]]],[[[659,[357]],5],[[13,[423]]]],[[[660,[357]],5],[[13,[423]]]],[[661,5],[[13,[423]]]],[[661,5],[[13,[423]]]],[[639,5],[[13,[423]]]],[[639,5],[[13,[423]]]],[[[640,[357]],5],[[13,[423]]]],[[[641,[357]],5],[[13,[423]]]],[[[647,[357]],5],[[13,[423]]]],[[[642,[357]],5],[[13,[423]]]],[[[648,[357]],5],[[13,[423]]]],[[[643,[357]],5],[[13,[423]]]],[[[644,[357]],5],[[13,[423]]]],[[[649,[357]],5],[[13,[423]]]],[[[645,[357]],5],[[13,[423]]]],[[[650,[357]],5],[[13,[423]]]],[[[646,[357]],5],[[13,[423]]]],[[[651,[357]],5],[[13,[423]]]],[[639,88]],[[634,88]],[[635,88]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[368],[368],[1],[1],[[]],[[],12],[[],12],[[]],[[]],[88],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[648],[649],[651],[635],[634,25],[635,25],[642,25],[648,25],[643,25],[644,25],[649,25],[646,25],[651,25],[[634,88],25],0,0,[634,12],[635,12],[[[659,[88]]],12],[[[660,[88]]],12],[639,[[12,[2]]]],[640,12],[641,12],[647,12],[642,12],[648,12],[643,12],[644,12],[649,12],[645,12],[650,12],[646,12],[651,12],[634,1],[635,1],0,0,[634,12],[635,12],[[[636,[88]]],12],[[[637,[88]]],12],[[[652,[88]]],12],[[[653,[88]]],12],[[[638,[88]]],12],[[[654,[88]]],12],[[[655,[88]]],12],[[[656,[88]]],12],[[[657,[88]]],12],[[[658,[88]]],12],[[[659,[88]]],12],[[[660,[88]]],12],[639,[[12,[2]]]],[640,12],[641,12],[647,12],[642,12],[648,12],[643,12],[644,12],[649,12],[645,12],[650,12],[646,12],[651,12],[634,12],[635,12],[[[636,[88]]],12],[[[637,[88]]],12],[[[652,[88]]],12],[[[653,[88]]],12],[[[638,[88]]],12],[[[654,[88]]],12],[[[659,[88]]],12],[[[660,[88]]],12],[639,[[12,[2]]]],[640,12],[641,12],[647,12],[642,12],[648,12],[643,12],[644,12],[649,12],[645,12],[650,12],[646,12],[651,12],[[634,1],12],[[635,1],12],[[640,1],12],[[641,1],12],[[647,1],12],[[642,1],12],[[648,1],12],[[643,1],12],[[644,1],12],[[649,1],12],[[645,1],12],[[650,1],12],[[646,1],12],[[651,1],12],[[634,1],12],[[635,1],12],[[640,1],12],[[641,1],12],[[647,1],12],[[642,1],12],[[648,1],12],[[643,1],12],[[644,1],12],[[649,1],12],[[645,1],12],[[650,1],12],[[646,1],12],[[651,1],12],0,[[634,88],[[12,[1]]]],[[635,88],[[12,[1]]]],0,0,0,0,0,0,[458],0,0,[[[415,[1]],[431,[1]]],[[368,[1]]]],0,0,0,0,0,0,[642],[644],[646],[[634,88],[[12,[1]]]],[[635,88],[[12,[1]]]],0,[634],[635],[[[636,[88]]]],[[[637,[88]]]],[[[652,[88]]]],[[[653,[88]]]],[[[638,[88]]]],[[[654,[88]]]],[[[655,[88]]]],[[[656,[88]]]],[[[657,[88]]]],[[[658,[88]]]],[[[659,[88]]]],[[[660,[88]]]],[639],[640],[641],[647],[642],[648],[643],[644],[649],[645],[650],[646],[651],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],184],[[],184],[[639,88],454],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,[2,[[12,[1]]]],[2,[[12,[1]]]],0,[[]],[[]],[662,662],[[]],[[662,5],[[13,[423]]]],[[]],[88],[[]],0,[[88,663,663,663,663]],[[1,88]],[88],0,[[]],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[664,88],25],[[664,88],25],[665,10],[666,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[667,[443]]],[[667,[443]]]],[525,525],[668,668],[665,665],[666,666],[664,664],[[[669,[443]]],[[669,[443]]]],[[[670,[443]]],[[670,[443]]]],[[[671,[443]]],[[671,[443]]]],[[[672,[443]]],[[672,[443]]]],[[[673,[443]]],[[673,[443]]]],[[[674,[443]]],[[674,[443]]]],[[[675,[443]]],[[675,[443]]]],[[[676,[443]]],[[676,[443]]]],[[[677,[443]]],[[677,[443]]]],[[[678,[443]]],[[678,[443]]]],[679,679],[680,680],[681,681],[682,682],[683,683],[684,684],[685,685],[686,686],[687,687],[688,688],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[665,1],[666,1],[664,1],[525,10],[668,10],[[525,525],25],[[668,668],25],[[687,687],25],[525,[[12,[1]]]],0,0,[[664,88],12],[[[667,[443]],5],[[13,[423]]]],[[525,5],[[13,[423]]]],[[525,5],[[13,[423]]]],[[668,5],[[13,[423]]]],[[668,5],[[13,[423]]]],[[665,5],[[13,[423]]]],[[666,5],[[13,[423]]]],[[664,5],[[13,[423]]]],[[[669,[443]],5],[[13,[423]]]],[[[670,[443]],5],[[13,[423]]]],[[[671,[443]],5],[[13,[423]]]],[[[672,[443]],5],[[13,[423]]]],[[[673,[443]],5],[[13,[423]]]],[[[674,[443]],5],[[13,[423]]]],[[[675,[443]],5],[[13,[423]]]],[[[676,[443]],5],[[13,[423]]]],[[[677,[443]],5],[[13,[423]]]],[[[678,[443]],5],[[13,[423]]]],[[679,5],[[13,[423]]]],[[680,5],[[13,[423]]]],[[681,5],[[13,[423]]]],[[682,5],[[13,[423]]]],[[683,5],[[13,[423]]]],[[684,5],[[13,[423]]]],[[684,5],[[13,[423]]]],[[685,5],[[13,[423]]]],[[685,5],[[13,[423]]]],[[686,5],[[13,[423]]]],[[686,5],[[13,[423]]]],[[687,5],[[13,[423]]]],[[688,5],[[13,[423]]]],[[684,88]],[[685,88]],[[686,88]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,13],[[],[[13,[10,525]]]],[[],[[13,[10,525]]]],[[],10],[[],10],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[687],0,[664,25],0,0,[665,[[12,[253]]]],[666,12],[664,12],[679,[[12,[10]]]],[681,[[12,[10]]]],[682,[[12,[10]]]],[664,1],[[],688],[[[667,[443]]],[[12,[10]]]],[665,[[12,[253]]]],[666,12],[664,[[12,[2]]]],[[[669,[443]]],[[12,[10]]]],[[[670,[443]]],[[12,[10]]]],[[[671,[443]]],[[12,[10]]]],[[[672,[443]]],[[12,[10]]]],[[[673,[443]]],[[12,[10]]]],[[[674,[443]]],[[12,[10]]]],[[[675,[443]]],12],[[[676,[443]]],12],[[[677,[443]]],[[12,[10]]]],[[[678,[443]]],[[12,[10]]]],[679,[[12,[10]]]],[680,[[12,[10]]]],[681,[[12,[10]]]],[682,[[12,[10]]]],[683,[[12,[19]]]],[684,[[12,[253]]]],[685,[[12,[253]]]],[686,[[12,[253]]]],[688,[[12,[687]]]],[[[667,[443]]],[[12,[10]]]],[665,[[12,[253]]]],[666,12],[664,[[12,[2]]]],[[[669,[443]]],[[12,[10]]]],[[[670,[443]]],[[12,[10]]]],[[[671,[443]]],[[12,[10]]]],[[[672,[443]]],[[12,[10]]]],[[[675,[443]]],12],[[[676,[443]]],12],[[[677,[443]]],[[12,[10]]]],[[[678,[443]]],[[12,[10]]]],[679,[[12,[10]]]],[680,[[12,[10]]]],[681,[[12,[10]]]],[682,[[12,[10]]]],[262,[[12,[15]]]],[[664,1],12],[[664,1],12],[666,1],0,[[664,88],[[12,[1]]]],[458],[458],[[[667,[443]]],[[12,[10]]]],[[[669,[443]]],[[12,[10]]]],[[[670,[443]]],[[12,[10]]]],[[[671,[443]]],[[12,[10]]]],[[[672,[443]]],[[12,[10]]]],[[[673,[443]]],[[12,[10]]]],[[[674,[443]]],[[12,[10]]]],[681,[[12,[10]]]],[682,[[12,[10]]]],[[664,88],12],[[664,88],[[12,[1]]]],[665],[666],[664],[679],[680],[681],[682],[683],[684],[685],[686],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],184],[[],184],[[],184],[[],184],[[],184],[[684,88],454],[[685,88],454],[[686,88],454],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[2,1],[687,10],0,[525,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[689,689],[690,690],[691,691],[692,692],[693,693],[[[694,[[0,[369,88]]]]],[[694,[[0,[369,88]]]]]],[695,695],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[689,689],25],0,0,[[689,5],[[13,[423]]]],[[690,5],[[13,[423]]]],[[691,5],[[13,[423]]]],[[692,5],[[13,[423]]]],[[693,5],[[13,[423]]]],[[[694,[88]],5],[[13,[423]]]],[[695,5],[[13,[423]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[690,10],[691,10],[692,10],[693,10],[[[694,[88]]],10],[695,10],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10],[10,25],[10,25],[10,25],0,0,[[],689],[690,689],[691,689],[692,689],[693,689],[[[694,[88]]],689],[695,689],[[],689],[690,689],[691,689],[692,689],[693,689],[[[694,[88]]],689],[695,689],[[],12],[690,12],[691,12],[692,12],[693,12],[[[694,[88]]],12],[695,12],[[],12],[690,12],[691,12],[692,12],[693,12],[[[694,[88]]],12],[695,12],[[],12],[691,12],[692,12],[693,12],[[[694,[88]]],12],[[],12],[691,12],[692,12],[693,12],[[[694,[88]]],12],0,[10,[[12,[10]]]],[10,[[12,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,[[]],[[]],[[],[[696,[[0,[495,47]]]]]],[[[696,[47]],5],[[13,[423]]]],[[]],[3],[[],696],[47,[[696,[47]]]],[[[486,[47]]],[[486,[[696,[47]]]]]],[[[696,[47]]],47],[[[486,[[696,[47]]]]],[[486,[47]]]],0,[[]],[[]],[696],[[],696],[[[486,[[696,[[0,[616,47]]]]]],487],488],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[697,25],[698],[699,474],[700,2],[701,473],[702,19],[703,36],[704,15],[705,463],[706,27],[707,74],[708,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[480,480],[[]],[[697,25,25,480],25],[[698,480]],[[699,474,474,480],474],[[700,2,2,480],2],[[701,473,473,480],473],[[702,19,19,480],19],[[703,36,36,480],36],[[704,15,15,480],15],[[705,463,463,480],463],[[706,27,27,480],27],[[707,74,74,480],74],[[708,1,1,480],1],[[697,25,25,480,480],[[13,[25,25]]]],[[698,480,480],13],[[699,474,474,480,480],[[13,[474,474]]]],[[700,2,2,480,480],[[13,[2,2]]]],[[701,473,473,480,480],[[13,[473,473]]]],[[702,19,19,480,480],[[13,[19,19]]]],[[703,36,36,480,480],[[13,[36,36]]]],[[704,15,15,480,480],[[13,[15,15]]]],[[705,463,463,480,480],[[13,[463,463]]]],[[706,27,27,480,480],[[13,[27,27]]]],[[707,74,74,480,480],[[13,[74,74]]]],[[708,1,1,480,480],[[13,[1,1]]]],[[697,25,25,480,480],[[13,[25,25]]]],[[698,480,480],13],[[699,474,474,480,480],[[13,[474,474]]]],[[700,2,2,480,480],[[13,[2,2]]]],[[701,473,473,480,480],[[13,[473,473]]]],[[702,19,19,480,480],[[13,[19,19]]]],[[703,36,36,480,480],[[13,[36,36]]]],[[704,15,15,480,480],[[13,[15,15]]]],[[705,463,463,480,480],[[13,[463,463]]]],[[706,27,27,480,480],[[13,[27,27]]]],[[707,74,74,480,480],[[13,[74,74]]]],[[708,1,1,480,480],[[13,[1,1]]]],[480],[[],697],[[],698],[[],699],[[],700],[[],701],[[],702],[[],703],[[],704],[[],705],[[],706],[[],707],[[],708],[[480,480],25],[480],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[697,25,480],25],[[698,1,480]],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[698,1,480]],[[698,1,480]],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[697,25,480],25],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[697,480],25],[[697,25,480],25],[[698,1,480]],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[698,1,480]],[[698,1,480]],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[697,480,480,88],[[13,[25,25]]]],[[698,480,480,88],13],[[699,480,480,88],[[13,[474,474]]]],[[700,480,480,88],[[13,[2,2]]]],[[701,480,480,88],[[13,[473,473]]]],[[702,480,480,88],[[13,[19,19]]]],[[703,480,480,88],[[13,[36,36]]]],[[704,480,480,88],[[13,[15,15]]]],[[705,480,480,88],[[13,[463,463]]]],[[706,480,480,88],[[13,[27,27]]]],[[707,480,480,88],[[13,[74,74]]]],[[708,480,480,88],[[13,[1,1]]]],[[697,25,480],25],[[698,1,480]],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[697,5],[[13,[423]]]],[[698,5],[[13,[423]]]],[[698,5],[[13,[423]]]],[[480,5],[[13,[423]]]],[[699,5],[[13,[423]]]],[[700,5],[[13,[423]]]],[[701,5],[[13,[423]]]],[[702,5],[[13,[423]]]],[[703,5],[[13,[423]]]],[[704,5],[[13,[423]]]],[[705,5],[[13,[423]]]],[[706,5],[[13,[423]]]],[[707,5],[[13,[423]]]],[[708,5],[[13,[423]]]],[[]],[25,697],[[]],[[],698],[[]],[[]],[474,699],[2,700],[[]],[473,701],[[]],[19,702],[[]],[[]],[36,703],[15,704],[[]],[[]],[463,705],[27,706],[[]],[74,707],[[]],[1,708],[[]],[25,697],[[],698],[474,699],[2,700],[473,701],[19,702],[36,703],[15,704],[463,705],[27,706],[74,707],[1,708],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,697],[[],698],[474,699],[2,700],[473,701],[19,702],[36,703],[15,704],[463,705],[27,706],[74,707],[1,708],[[[0,[46,47]],48],27],[697,25],[698],[699,474],[700,2],[701,473],[702,19],[703,36],[704,15],[705,463],[706,27],[707,74],[708,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[480,49]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[697,25],[698],[699,474],[700,2],[701,473],[702,19],[703,36],[704,15],[705,463],[706,27],[707,74],[708,1],[[697,480],25],[[698,480]],[[699,480],474],[[700,480],2],[[701,480],473],[[702,480],19],[[703,480],36],[[704,480],15],[[705,480],463],[[706,480],27],[[707,480],74],[[708,480],1],[25,697],[[],698],[474,699],[2,700],[473,701],[19,702],[36,703],[15,704],[463,705],[27,706],[74,707],[1,708],0,[[]],[[697,25,480]],[[698,480]],[[699,474,480]],[[700,2,480]],[[701,473,480]],[[702,19,480]],[[703,36,480]],[[704,15,480]],[[705,463,480]],[[706,27,480]],[[707,74,480]],[[708,1,480]],[[697,25,480],25],[[698,480]],[[699,474,480],474],[[700,2,480],2],[[701,473,480],473],[[702,19,480],19],[[703,36,480],36],[[704,15,480],15],[[705,463,480],463],[[706,27,480],27],[[707,74,480],74],[[708,1,480],1],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[709,710],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[711,606],[[[488,[13]]],606],[[[488,[[12,[13]]]]],606],[709,709],[[[488,[369]]],[[488,[369]]]],[712,712],0,[[]],[[]],[[]],[[[488,[373]],[488,[373]]],44],[710],0,[709],0,[[[488,[[374,[[374,[[374,[374]]]]]]]],[488,[[374,[[374,[[374,[374]]]]]]]]],25],[[710,710],25],[[712,712],25],[[487,5],[[13,[423]]]],[[709,5],[[13,[423]]]],[[711,5],[[13,[423]]]],[[[488,[357]],5],[[13,[423]]]],[[710,5],[[13,[423]]]],[[712,5],[[13,[423]]]],[[]],[[[18,[[0,[713,714,715]]]]],709],[[]],[[]],[[],488],[[]],[3],[[[18,[[0,[713,714,715]]]]],710],[[]],[[]],[[],711],[[],[[488,[[12,[13]]]]]],[[],[[488,[13]]]],[710,709],[[[711,[483]]],711],[[[711,[483]]],488],[[[13,[483]]],[[488,[[12,[[13,[625]]]]]]]],[[[13,[483]]],[[488,[[13,[625]]]]]],[709,487],[[[0,[46,47]],48],27],[[[488,[46]],49]],[[]],[[]],[[]],[[]],[[]],[[]],[488,25],[488,25],[[488,282],488],[[[488,[13]],282],[[488,[13]]]],[[[488,[[12,[13]]]],282],[[488,[[12,[13]]]]]],[[[488,[[12,[13]]]],282],[[488,[[12,[13]]]]]],[[[488,[13]],282],[[488,[13]]]],[712,710],[[],712],[[[488,[[377,[[377,[[377,[377]]]]]]]],[488,[[377,[[377,[[377,[377]]]]]]]]],[[12,[44]]]],[488,711],0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[710,712],0,[709],0,[709],0,[487,709],0,0,[[709,709],25],0,0,0,0,0,0,0,0,[[716,716],716],[[716,716]],[716,479],[716,479],[716,479],[716,27],[716,470],[716,469],[[]],[[]],[[]],[[]],[[716,716],[[12,[716]]]],[[716,15],[[12,[716]]]],[[716,15],[[12,[716]]]],[[716,716],[[12,[716]]]],[716,716],[717,717],[[]],[[]],[[716,716],44],[[],716],[414,[[13,[716]]]],[[716,15],716],[[716,15]],[[716,716],470],[[716,716],469],[[716,470],716],[[716,469],716],[[716,716],25],[[717,717],25],[[716,5],[[13,[423]]]],[[717,5],[[13,[423]]]],[[717,5],[[13,[423]]]],[[]],[[]],[27,716],[27,716],[27,716],[27,716],[470,716],[469,716],[[[0,[46,47]],48],27],[[716,49]],[[]],[[]],[716,25],0,[[716,15],716],[[716,15]],[[716,470],716],[[716,469],716],0,[[27,15],716],[[716,716],[[12,[44]]]],[458],[[716,716],716],[[716,15],716],[[716,716],716],0,[[716,447],13],[[716,716],716],[[716,716]],[716,15],[716,15],[716,15],[262,716],[262,716],[[]],[[]],[[],184],[[],13],[[],13],[470,[[13,[716,717]]]],[469,[[13,[716,717]]]],[[],13],[[],13],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[253,25],[253,25],0,0,[253],[253],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[718],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[718,25]],[25],[719,719],[720,720],[721,721],[722,722],[291,291],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[718],[718],[[719,719],25],[[720,720],25],[[721,721],25],[[722,722],25],0,[[719,5],6],[[720,5],6],[[721,5],6],[[722,5],6],[[291,5],6],[[723,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[718,[12,[723]]]],[[718,723,1,1,1,1,663]],[721,15],[[]],[721,15],[718],[[],291],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[724,90]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[718,723,1,1,1,1]],[[718,723,1,1,1,1]],0,[[291,90],718],[[15,15],721],[718],0,0,0,0,[[],723],0,0,[[718,1,1,719]],[[718,1,1,15]],0,0,[[718,719,1,1]],0,0,[[718,253]],0,0,0,0,[[]],0,[718],[25],[[718,25]],[[1,1]],[[718,1,1]],[25],[15],[[15,15]],[15],0,0,[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[718,253]],[[718,10],6],[[718,10]],0,0,0,0,0,0,0,[297,[[12,[725]]]],[297,[[12,[726]]]],[[]],[[]],[[297,5],6],[[]],[[9,15],[[13,[297,75]]]],0,[[]],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,[[727,297,1],[[13,[186]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[727,297,1],[[13,[186]]]],[[],728],[[],729],[727,725],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[727,1,1],[[13,[1,186]]]],[727,25],[727,[[13,[242,186]]]],[[730,731],[[13,[[18,[727]],75]]]],[[727,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[[727,[12,[217]]],[[13,[218,186]]]],0,[[727,[211,[393]]]],[[727,302],[[13,[1,186]]]],[[727,302],[[13,[1,186]]]],[[727,725]],[[727,728]],[727,[[12,[19]]]],[727,[[18,[727]]]],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,[[296,12],[[13,[[18,[296]],186]]]],0,0,[[296,297,1],[[13,[186]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[296,297,1],[[13,[186]]]],[[[84,[[83,[82]]]],[84,[[83,[82]]]]],[[13,[186]]]],0,[[],732],[[],733],[[],734],[[],735],[[732,5],6],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[734,25],[736,25],[733,25],[296,25],[[296,1],[[13,[75]]]],0,[296,[[13,[242,186]]]],[1,736],[[],[[18,[296]]]],[[[182,[2]]],732],[[296,243,[18,[244]]],[[13,[[12,[[84,[[83,[82]]]]]],186]]]],[726,[[13,[260,186]]]],[[296,[12,[217]]],[[13,[218,186]]]],[736,[[12,[[18,[296]]]]]],[[736,[18,[296]]],[[13,[75]]]],[734,[[12,[736]]]],[733,1],[[296,1],[[13,[1,186]]]],[[296,302],[[13,[1,186]]]],[[736,1],[[13,[75]]]],0,[296,[[18,[296]]]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[733],[[296,1],[[13,[1,186]]]],0,0,[[737,502],737],[[737,357],737],0,[[]],[[]],[[]],[[]],[[],85],[[1,1],85],[85],[737],[[]],[[]],0,0,[[1,1,1,1,1,1,1],1],0,[[]],[[]],0,0,0,[10,737],0,[85],[[85,738],[[182,[27]]]],0,[[737,[13,[1,75]]],737],0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,[[1,1,1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[[12,[87]]],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1,1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[260,260],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,260],[[13,[1,75]]]],[1,[[13,[1,75]]]],[10,[[13,[1,75]]]],[[1,260,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[10,[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1,293],[[13,[1,75]]]],[1,[[13,[1,75]]]],[260,[[13,[1,75]]]],[[260,245],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,245],[[13,[1,75]]]],[[1,260,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[260,260],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,260,1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,245],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[1,[[13,[1,75]]]],[260,[[13,[1,75]]]],[[260,245],[[13,[1,75]]]],[1,[[13,[1,75]]]],[1,[[13,[1,75]]]],[1,[[13,[1,75]]]],[10,[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,260],[[13,[1,75]]]],[10,[[13,[1,75]]]],[[],[[13,[1,75]]]],[[260,260],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,260,1],[[13,[1,75]]]],[[1,1,1,293],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,260,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,260,1],[[13,[1,75]]]],[[260,260],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],0,0,[9,[[12,[122]]]],[[]],[[]],[[1,1,87],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[]],0,[[739,122],[[12,[[18,[314]]]]]],[[739,122],[[18,[314]]]],[[],739],[[]],[[],739],[1,[[13,[1,75]]]],[[1,1,87],[[13,[1,75]]]],[[],13],[[],13],[[],14],[9,[[13,[75]]]],[[1,1,1],[[13,[1,75]]]],[[739,9,15,87],[[13,[75]]]],[1,[[13,[1,75]]]],[[739,9],[[13,[75]]]],0,0,0,[[],[[13,[1,75]]]],0,[[]],[[]],[[]],[[]],0,[[],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[]],[[]],0,[[1,740],[[13,[1,75]]]],[[]],[[]],[[],741],0,[[1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[[84,[[83,[82]]]],75]]]],[[1,302,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,302,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[9,[[13,[297,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,302,1],[[13,[1,75]]]],[[1,302,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],0,[[],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[10,[[13,[1,75]]]],[[],[[13,[1,75]]]],[[260,1,1,1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[742,[[13,[1,75]]]],[[],[[13,[1,75]]]],[743,[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1,1,1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,744,1,744],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,27,27],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,15,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1,1,1,1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[1,[[13,[[18,[237]],75]]]],[[],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[745,[184]]]],[1,[[13,[1,75]]]],[10],[[1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,1,1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[10,[[13,[1,75]]]],[1,[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[743,[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,27,27],[[13,[1,75]]]],[[1,15,1],[[13,[1,75]]]],[742,[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,744,1,744],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1,1,1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[],[[13,[1,75]]]],[1,[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],0,0,0,[[]],[[1,87],[[13,[1,75]]]],[[1,746,1],[[13,[1,75]]]],[[1,746],[[13,[1,75]]]],[87,[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1],[[13,[1,75]]]],[[1,1,1],[[13,[1,75]]]],[1,[[13,[1,75]]]],[87,[[13,[1,75]]]],[[1,87],[[13,[1,75]]]],[[1,746],[[13,[1,75]]]],[[1,746,1],[[13,[1,75]]]],0,0,0,[1,3],[[]],[[]],[[]],[[]],0,[747,748],[[]],[615,3],[[],3],[25],[[],13],[[],13],[[],14],[[]],[[],[[13,[186]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[13,[265]]]],[[]],[[]],[[]],[[]],[[]],[[]],[749,749],[[]],[750,[[18,[237]]]],[[],[[18,[237]]]],[[],[[12,[[18,[237]]]]]],[[[18,[751]]],[[12,[[18,[751]]]]]],[[750,[84,[[83,[82]]]],[12,[85]],[12,[85]]]],[749,3],[[750,749],3],[[750,752],[[12,[[18,[237]]]]]],[[749,5],6],[[]],[[]],[[]],[[],750],[[]],[[]],0,[[]],[[]],[[]],[[],25],[750],[[],753],[[],750],[[]],[[[18,[237]]]],[[753,752,[18,[237]]]],[[750,[18,[237]]]],[[753,[18,[237]]]],0,[37],[[[12,[1]]],[[13,[265]]]],0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[[18,[237]]]],0,0,[754,[[13,[265]]]],0,[[]],[[]],[[]],[[]],0,[754,[[12,[[18,[237]]]]]],0,0,0,[[754,749],3],[[]],[[]],0,[754],[[]],[[]],[[],755],[[],[[18,[754]]]],[754],0,[[]],[[755,[18,[237]]]],[[755,[18,[237]]]],[[755,[18,[237]],1]],[[755,[18,[237]]]],0,[[754,[18,[237]]]],0,[754],[754],[[754,[12,[1]]],[[13,[265]]]],[754],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[754,[18,[237]]]],0,0,0,0,0,0,0,0,0,0,0,0,[756,27],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,25],[[],12],[756],[[756,27]],[[757,27]],[756,756],[758,758],[757,757],[[]],[[]],[[]],[[756,756]],0,[[],758],[[],757],[756,[[8,[757]]]],0,0,[[265,265],25],[758,759],0,[[265,5],6],[[758,5],6],[[]],[[]],[[]],[[]],[[]],[[744,1],[[13,[758,75]]]],[758,760],0,[756,25],[[757,1]],[[757,1]],[[]],[[]],[[]],[[]],[[]],[758,744],[[756,1],25],[[756,27],25],0,[[],756],[756,27],[757,27],0,[[756,761,[12,[27]],[12,[27]]]],[[756,27,25]],[[757,27]],[[756,1,[12,[758]],[12,[744]]]],[758,1],0,[756,27],0,[[]],[[]],[[]],[[756,1,25],762],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,[1,763],[[]],[[]],[763,763],[[]],[[763,763],25],[[]],[1],[[]],[1],[1],[1],[[]],[[],13],[[],13],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,[[237,[18,[237]]]],[[764,[18,[237]]]],[[],752],[237,78],0,[237,78],[752,1],[[237,[18,[765]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[752,752],[766,766],[767,767],[768,768],[[]],[[]],[[]],[[]],[[237,1,1],[[18,[237]]]],[[752,752],44],0,0,[237,[[84,[[83,[82]]]]]],[[],767],[[],768],[237],[[752,752],25],[[766,766],25],[[237,[84,[[83,[82]]]],[12,[85]],[12,[85]]],[[13,[[77,[76]]]]]],0,[237,749],0,0,0,[[752,5],6],[[766,5],6],[769,769],[237,[[18,[237]]]],[[]],[[]],[[]],[[]],[[]],[2,766],[[]],[[]],[237,184],[[[0,[46,47]],48],27],[767],[768],[237,[[12,[[18,[237]]]]]],[767],[768],0,[237,1],[237,25],[[752,49]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[237],[237,25],[237,25],[237,25],0,[767],[768],0,0,[767],[768],0,[237,1],[[237,[497,[78]]],[[18,[237]]]],0,[[],769],[[],764],[1,752],[[],767],[[],768],[[],[[18,[237]]]],[25,[[18,[237]]]],0,[237,752],[[752,752],[[12,[44]]]],[237,[[12,[184]]]],0,[237,752],0,[767],[768],0,0,[237,[[18,[237]]]],[[237,237]],[237,1],0,[[237,[84,[[83,[82]]]]]],[[237,1]],[[237,[12,[[18,[237]]]]]],[[237,25]],[[237,1]],[[237,1]],0,[[237,1],25],[237,756],0,0,0,[237,766],0,[237,25],0,[237,[[18,[237]]]],[237,752],0,[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[237,766]],[237,[[18,[81]]]],0,[[764,15,770],[[13,[1,265]]]],[[237,74,15,770],[[13,[1,265]]]],[237],0,0,0,0,0,0,0,[[],771],[[],771],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[771,[18,[237]]]],[772,771],[[773,[18,[237]]],[[12,[[18,[774]]]]]],[[771,[18,[237]]],[[12,[[18,[774]]]]]],[[]],[[]],[[]],[[]],0,[774,1],0,[[]],[[]],[[]],[[]],[774,25],[773,25],[[771,[18,[237]]]],[[[18,[237]]],[[18,[774]]]],[[[18,[237]]],[[18,[773]]]],[[774,[18,[237]]]],[[773,[18,[237]]]],[[771,[18,[237]]]],[[774,[18,[237]]]],[[773,[18,[237]]]],[[771,[18,[237]]]],[[774,1]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0,0,[[[18,[237]]]],[[]],[[]],0,[775,[[12,[[18,[774]]]]]],0,[[]],[[]],[775,25],[[],775],[775,[[13,[1,265]]]],[[775,[18,[237]]]],[[],13],[[],13],[[],14],[775,314],0,[775],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[776],[81],[777,777],[778,778],[[]],[[]],[[[84,[[83,[82]]]]],[[13,[25,779]]]],0,0,0,0,0,0,0,0,[[776,9,1],12],[[776,9,1],12],0,[[779,5],6],[[776,81]],[[81,81]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[778,121,9,25],25],[[776,332,9],25],[[81,332,9],25],[[778,121,332,9],25],[[778,121,332,9],25],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[776,[84,[[83,[82]]]],[12,[85]],[12,[85]]],[[13,[780,779]]]],[[81,[84,[[83,[82]]]],[12,[85]],[12,[85]]],[[13,[780,779]]]],[[121,[367,[76]],378],[[13,[[77,[76]]]]]],0,[[776,9,1,378,188,1,[12,[[84,[[83,[82]]]]]]],[[12,[9]]]],[[81,9,1,378,188,1,[12,[[84,[[83,[82]]]]]]],[[12,[9]]]],[[776,9,1,378],25],[[81,9,1,378]],[[776,9,1],25],[[81,9,1],25],[[184,184],[[13,[781,779]]]],[[[84,[[83,[82]]]]],[[13,[782,779]]]],[[783,[84,[[83,[82]]]]],784],[[],776],[[],81],[[[84,[[83,[82]]]],1,1],777],[784,12],0,0,[[[84,[[83,[82]]]]],[[13,[783,779]]]],[[[84,[[83,[82]]]],783,19],[[13,[785,779]]]],[[[84,[[83,[82]]]]],[[13,[[12,[781]],779]]]],[782,784],0,0,[778,1],0,[[778,9,9]],0,[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[778,121,9,9],[[13,[786,358]]]],0,0,0,0,0,[738],[18,[[18,[459]]]],[787],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,0,[[]],[[]],[[]],[[[788,[494]]],494],[787],[738,47],[[738,27]],[787],[[]],[[]],[[]],[[],787],[27,738],[[],787],[738,47],0,[[[788,[494]],494]],[[738,27]],[[]],0,[738,27],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],[[13,[204]]]],[[],[[13,[204]]]],[[],[[13,[204]]]],[1,[[13,[204]]]],[1,[[13,[204]]]],[[2,1],[[13,[10,204]]]],0,[[738,47]],[738],[738],0,0,0,[[]],[[]],[1,1],[619,[[789,[619]]]],[[[789,[619]]],[[12,[1]]]],[[[789,[619]]],[[12,[1]]]],[[[789,[[0,[357,619]]]],5],6],[[]],[[]],[[[789,[619]],1],25],[[619,1],[[789,[619]]]],[[[789,[619]],1,25]],[[],13],[[],13],[[],14],0,0,[[[792,[[0,[790,791]]]],2]],[[]],[[]],[[]],[[]],[[[792,[[0,[790,791]]]]]],0,[[[792,[[0,[790,791]]]]],10],[[[792,[[0,[357,790,791]]]],5],6],[[]],[[]],[793,25],[[]],[[]],[[],793],[[[0,[790,791]]],[[792,[[0,[790,791]]]]]],0,[793,1],[[[792,[[0,[790,791]]]]]],0,[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[793,1],[[[792,[[0,[790,791]]]],10],6],0,0,0,[[[794,[47]]],122],[[795,330],[[13,[339,340]]]],[794,794],[[]],[[]],[[]],[[]],[[795,[339,[2]],330]],[[[794,[47]]],47],[[[794,[47]]],47],[[[794,[[0,[47,357]]]],5],6],[[]],[[]],[[]],[[]],[1,794],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],794],0,0,0,0,0,0,[[314,183,88],[[13,[8,265]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[796,[47]]],47],[[[8,[47]]],47],[[[796,[47]]],47],[[[8,[47]]],47],[797],[[[796,[47]]]],[[[8,[47]]]],[183],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[314,[18,[237]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[314,25],[798,796],[183,8],[183,8],0,0,[[],314],[[],797],[[],798],[[],183],[314],0,[[314,[18,[237]]]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0],"c":[9642,9643,9644,9645,9646,9651,9681,9682,9683,9684,9685,9686,9690,9697,15075,15681,15685,15716,15717,15718,15719,15720,15721,15722,15723,15724,15725,15726,15727,15728,15729,15750,15751,15752,15753,15754,15755,15756,15757,15758,15759,15760,15761,15762,15763,15999,16193,16218,16219,16249,16250,16251,16252,16253,16254,16255,16256,16257,16258,16389,16520,16521,17533,17534,17576,24644,25278,25279,25280,25281,25282,25283,25284,25285,25286,25287,25288,25347,25348,25349,25350,25351,25352,25353,25354,25355,25356,25357,25358,25653,25933,25934,25935,25936,25937,25938,25939,25940,25941,25942,25949,25950],"p":[[15,"usize"],[15,"u8"],[15,"never"],[3,"GenericAddressStructure"],[3,"Formatter"],[6,"Result"],[3,"AcpiTable"],[3,"MutexGuard"],[3,"VirtAddr"],[15,"str"],[3,"Sdt"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"SleepState"],[8,"AmlSubsystem"],[3,"Arc"],[15,"u16"],[3,"Hpet"],[3,"EntryHeader"],[3,"Madt"],[3,"MadtIterator"],[3,"Mcfg"],[15,"bool"],[3,"Rsdt"],[15,"u64"],[4,"RsdtAddress"],[3,"Rsdp10"],[3,"Rsdp20"],[8,"RsdtHeader"],[3,"SmpInfo"],[3,"LocalApic"],[4,"ApicType"],[3,"FeatureInfo"],[15,"i32"],[3,"InterruptStack"],[3,"RFlags"],[3,"Cr0Flags"],[3,"XCr0Flags"],[3,"Cr4Flags"],[3,"MxCsr"],[3,"Cr3Flags"],[4,"Ordering"],[8,"IntoIterator"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[3,"GdtEntryFlags"],[3,"SegmentSelector"],[4,"Ring"],[3,"GdtEntry"],[3,"Kpcr"],[3,"Tss"],[3,"GdtDescriptor"],[3,"PicController"],[3,"ApicController"],[3,"InterruptController"],[3,"PIC_CONTROLLER"],[3,"APIC_CONTROLLER"],[3,"INTERRUPT_CONTROLLER"],[3,"InterruptErrorStack"],[3,"IDTFlags"],[3,"IdtEntry"],[3,"ScratchRegisters"],[3,"PreservedRegisters"],[3,"IretRegisters"],[4,"IrqHandler"],[3,"IdtDescriptor"],[3,"BasedPort"],[8,"InOut"],[3,"SignalFrame"],[15,"isize"],[4,"SyscallError"],[4,"Size4KiB"],[4,"MapToError"],[3,"ArchTask"],[4,"AuxvType"],[3,"Context"],[3,"Vm"],[3,"DirEntry"],[3,"CacheItem"],[3,"CacheArc"],[3,"ExecArgs"],[3,"Box"],[3,"TimeSpec"],[8,"FnMut"],[3,"PerCpuData"],[3,"CommandLine"],[3,"ParseIntError"],[3,"HbaCmdHeaderFlags"],[3,"HbaHostCont"],[3,"HbaPortCmd"],[3,"HbaCapabilities2"],[3,"HbaEnclosureCtrl"],[3,"HbaBohc"],[3,"HbaCapabilities"],[3,"HbaPortIE"],[3,"HbaPortIS"],[3,"DmaRequest"],[3,"HbaCmdTbl"],[3,"FisRegH2D"],[4,"AtaCommand"],[4,"FisType"],[3,"HbaSataStatus"],[3,"HbaPort"],[3,"HbaCmdHeader"],[3,"DmaBuffer"],[4,"HbaPortDd"],[3,"AhciProtected"],[3,"PciHeader"],[3,"AhciDriver"],[4,"Vendor"],[4,"DeviceType"],[3,"HbaMemory"],[3,"AhciPortProtected"],[4,"HbaPortIpm"],[3,"AhciPort"],[3,"HbaPrdtEntry"],[3,"OffsetPageTable"],[3,"PhysAddr"],[3,"IdeDrive"],[3,"Ide"],[3,"IdeDevice"],[3,"IdeChannel"],[3,"IdeChannelData"],[3,"PrdTable"],[3,"PrdEntry"],[3,"BaseErrorReg"],[3,"BaseStatusReg"],[3,"BMIdeStatus"],[3,"BMIdeCmd"],[3,"CtrlDriveAddrReg"],[3,"CtrlDevCtrlReg"],[3,"BusMasterReg"],[3,"DevBaseReg"],[3,"DevCtrlReg"],[3,"BaseDriveSelReg"],[3,"CommandSetsSupported"],[3,"Controller"],[4,"Error"],[3,"ControllerStatus"],[3,"Capability"],[3,"Handler"],[3,"ControllerConfig"],[3,"Version"],[3,"Namespace"],[4,"CommandOpcode"],[4,"ArbitrationMechanism"],[4,"CommandSet"],[3,"Registers"],[3,"CommandFlags"],[4,"IdentifyCns"],[4,"AdminOpcode"],[3,"DataPointer"],[3,"CommonCommand"],[3,"IdentifyCommand"],[3,"ReadWriteCommand"],[3,"CreateSQCommand"],[3,"CreateCQCommand"],[3,"CompletionEntry"],[3,"PowerState"],[3,"IdentifyController"],[3,"LbaFormat"],[3,"IdentifyNamespace"],[19,"Command"],[8,"QueueType"],[3,"Queue"],[3,"QueuePair"],[3,"Completion"],[3,"Submission"],[8,"Into"],[3,"IdAllocator"],[3,"Drm"],[3,"Connector"],[3,"Crtc"],[3,"Encoder"],[3,"Framebuffer"],[3,"BufferObject"],[8,"ModeObject"],[3,"Vec"],[3,"Mutex"],[3,"String"],[8,"INodeInterface"],[4,"FileSystemError"],[3,"DrmModeInfo"],[3,"MMapFlags"],[3,"PhysFrame"],[4,"DrmModeConStatus"],[8,"DrmDevice"],[3,"RawFramebuffer"],[3,"InterruptFlags"],[3,"ControlFlags"],[3,"ECtl"],[3,"RCtl"],[3,"TStatus"],[3,"TCtl"],[4,"Error"],[4,"Register"],[3,"TxDescriptor"],[3,"RxDescriptor"],[3,"E1000"],[4,"ReadErr"],[3,"Device"],[3,"Handler"],[3,"MacAddr"],[3,"Eeprom"],[3,"RecvPacket"],[3,"Eth"],[3,"Packet"],[3,"ConfigFlags"],[3,"KeyboardDevice"],[4,"KeyCode"],[3,"KEYBOARD"],[3,"Ps2KeyboardState"],[3,"PollTable"],[3,"PollFlags"],[8,"KeyboardListener"],[3,"LaiSubsystem"],[3,"LaiHost"],[3,"MouseFlags"],[3,"Mouse"],[3,"Packet"],[3,"MOUSE"],[3,"ProgramInterface"],[3,"CapabilityIter"],[4,"Bar"],[4,"Capability"],[3,"Message"],[3,"Msix"],[3,"PciTable"],[8,"PciDeviceHandle"],[4,"DeliveryMode"],[3,"Ptmx"],[3,"Master"],[3,"Task"],[3,"PtsINode"],[3,"PTMX"],[3,"PtsFs"],[3,"Slave"],[3,"Metadata"],[3,"OpenFlags"],[3,"FileHandle"],[3,"Stat"],[8,"FileSystem"],[3,"Weak"],[3,"Tty"],[3,"Termios"],[3,"StdinBuffer"],[3,"AnsiEscape"],[3,"Params"],[15,"char"],[3,"TTY"],[3,"TERMIOS"],[3,"InterruptEnable"],[3,"LineStatus"],[3,"SerialPort"],[3,"MountManager"],[3,"Path"],[3,"MountPoint"],[8,"Iterator"],[3,"MOUNT_MANAGER"],[4,"LookupMode"],[4,"SignalError"],[3,"CachedPage"],[3,"Cache"],[3,"BlockDevice"],[3,"PartitionBlockDevice"],[3,"DirtyRef"],[3,"PAGE_CACHE"],[8,"CachedAccess"],[8,"BlockDeviceInterface"],[3,"GptGuid"],[3,"Gpt"],[3,"GptEntry"],[3,"CachedINode"],[8,"CacheKey"],[8,"Cacheable"],[8,"CacheDropper"],[3,"CacheWeak"],[8,"FnOnce"],[3,"DevFs"],[3,"DEV_FILESYSTEM"],[3,"DevNull"],[3,"DevKmsg"],[3,"DevFb"],[3,"DevUrandom"],[8,"Device"],[3,"DevINode"],[3,"RendyInfo"],[3,"EPoll"],[3,"EPollEvent"],[3,"EventFd"],[3,"INode"],[3,"UnixSocket"],[4,"SocketAddr"],[3,"Ext2"],[3,"DirEntry"],[4,"FileType"],[3,"DirEntryIter"],[3,"MessageHeader"],[3,"SuperBlock"],[3,"GroupDescriptor"],[3,"INode"],[4,"Revision"],[3,"Bitmap"],[3,"GroupDescriptors"],[3,"FileTable"],[4,"DuplicateHint"],[4,"SeekWhence"],[4,"FileType"],[4,"FileContents"],[3,"BlockQueue"],[3,"Pipe"],[3,"ProcFs"],[4,"FileContents"],[3,"LockedProcINode"],[3,"ProcINode"],[4,"Value"],[3,"RamFs"],[3,"LockedRamINode"],[3,"RamINode"],[3,"AeroLogger"],[3,"Metadata"],[3,"Record"],[3,"AddressSpace"],[3,"PageTable"],[3,"Allocator"],[3,"Layout"],[3,"LockedHeap"],[3,"PageFaultErrorCode"],[3,"VmFrame"],[3,"PhysAddrNotValid"],[3,"PageTableIndex"],[3,"PageOffset"],[3,"LockedFrameAllocator"],[3,"BootAllocRef"],[3,"NonNull"],[3,"AllocError"],[4,"Size2MiB"],[3,"GlobalFrameAllocator"],[3,"BootAlloc"],[4,"MemoryRangeType"],[3,"MemoryRange"],[3,"RangeMemoryIter"],[4,"BuddyOrdering"],[8,"PageTableFrameMapping"],[3,"PageTableWalker"],[3,"PageTableEntry"],[3,"PageTableFlags"],[4,"PageTableCreateError"],[8,"PageSize"],[3,"MapperFlush"],[4,"TranslateResult"],[4,"MappedFrame"],[8,"Debug"],[4,"UnmapError"],[4,"FlagUpdateError"],[4,"TranslateError"],[3,"MappedPageTable"],[4,"PageTableWalkError"],[3,"PhysOffset"],[4,"Size1GiB"],[4,"FrameError"],[8,"Mapper"],[3,"Page"],[3,"Range"],[8,"Clone"],[3,"PageRange"],[3,"PhysFrameRange"],[3,"PhysFrameRangeInclusive"],[8,"Ord"],[8,"PartialEq"],[3,"AddressNotAligned"],[8,"NotGiantPageSize"],[8,"PartialOrd"],[3,"MMapProt"],[3,"SmallSlab"],[3,"SlabHeader"],[3,"BufCtl"],[3,"Vmalloc"],[3,"VmallocAreaAdaptor"],[3,"VmallocArea"],[3,"VmallocAreaProtected"],[4,"ModuleType"],[3,"Module"],[3,"NetworkDevice"],[8,"PacketKind"],[4,"Type"],[3,"Ipv4Addr"],[3,"Ipv4"],[3,"Udp"],[4,"Type"],[3,"Metadata"],[8,"NetworkDriver"],[8,"ConstPacketKind"],[3,"Cache"],[3,"Entry"],[3,"BigEndian"],[3,"Header"],[3,"PseudoHeader"],[8,"UdpHandler"],[3,"Header"],[3,"NonZeroUsize"],[3,"ArrayChunks"],[3,"Global"],[3,"Chain"],[3,"Cloned"],[8,"FromIterator"],[8,"Extend"],[3,"Copied"],[3,"Cycle"],[8,"Deserializer"],[8,"RangeBounds"],[3,"Drain"],[3,"Enumerate"],[4,"Cow"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"Flatten"],[3,"Error"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[3,"Fuse"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"RangeToInclusive"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Inspect"],[3,"Intersperse"],[3,"IntersperseWith"],[8,"Error"],[3,"StringDeserializer"],[3,"Map"],[3,"MapWhile"],[3,"IntoIter"],[8,"DoubleEndedIterator"],[3,"Peekable"],[8,"Product"],[8,"Pattern"],[3,"Rev"],[8,"ExactSizeIterator"],[3,"Scan"],[8,"Serializer"],[3,"Skip"],[3,"SkipWhile"],[3,"StepBy"],[8,"Sum"],[3,"Take"],[3,"TakeWhile"],[8,"Try"],[3,"TryReserveError"],[3,"Zip"],[3,"LayoutError"],[3,"Demand"],[8,"Any"],[8,"Provider"],[3,"__m128"],[3,"CpuidResult"],[15,"i64"],[3,"__m256i"],[3,"__m256d"],[3,"__m256"],[3,"__m128i"],[3,"__m128d"],[15,"f64"],[15,"f32"],[3,"__m256bh"],[3,"__m128bh"],[15,"i16"],[15,"i8"],[3,"__m512i"],[3,"__m512d"],[3,"__m512"],[3,"__m512bh"],[15,"u128"],[4,"Ordering"],[3,"Simd"],[3,"TryFromSliceError"],[4,"Infallible"],[3,"EscapeDefault"],[3,"FromIter"],[3,"Pin"],[3,"Context"],[4,"Poll"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"OnceCell"],[8,"Copy"],[8,"Default"],[3,"LazyCell"],[3,"UnsafeCell"],[3,"SyncUnsafeCell"],[3,"BorrowError"],[3,"BorrowMutError"],[8,"Deserialize"],[8,"Display"],[8,"Serialize"],[3,"ParseCharError"],[3,"CharTryFromError"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EscapeDebug"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"TryFromCharError"],[3,"Reverse"],[8,"Error"],[3,"Source"],[3,"VaListImpl"],[8,"VaArgSafe"],[3,"CStr"],[3,"VaList"],[3,"FromBytesWithNulError"],[3,"FromBytesUntilNulError"],[3,"CString"],[4,"c_void"],[3,"Utf8Error"],[4,"Alignment"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[15,"i128"],[8,"Write"],[3,"Pending"],[3,"Ready"],[3,"PollFn"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Location"],[8,"Tuple"],[3,"BasicBlock"],[3,"ByRefSized"],[3,"Repeat"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"RepeatWith"],[3,"Successors"],[8,"Generator"],[8,"Unpin"],[3,"FromGenerator"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"Assume"],[19,"MaybeUninit"],[3,"Discriminant"],[3,"ManuallyDrop"],[4,"IpAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"Ipv6MulticastScope"],[3,"AddrParseError"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"NonZeroI8"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI128"],[3,"NonZeroIsize"],[3,"Saturating"],[3,"Wrapping"],[8,"Signed"],[3,"NonZeroU8"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU128"],[3,"ParseFloatError"],[3,"TryFromIntError"],[4,"IntErrorKind"],[4,"FpCategory"],[8,"Binary"],[8,"Octal"],[8,"UpperHex"],[8,"LowerHex"],[3,"Alignment"],[8,"ToPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"Num"],[8,"Zero"],[8,"Bounded"],[8,"One"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Step"],[4,"Bound"],[4,"ControlFlow"],[4,"GeneratorState"],[3,"Yeet"],[8,"Deref"],[8,"DerefMut"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"AssertUnwindSafe"],[3,"PanicInfo"],[8,"Future"],[8,"AsyncIterator"],[8,"Pointer"],[8,"Allocator"],[3,"DynMetadata"],[8,"SliceIndex"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[8,"From"],[8,"SimdElement"],[8,"MaskElement"],[3,"Mask"],[4,"Which"],[8,"LowerExp"],[8,"UpperExp"],[3,"Mask"],[8,"FloatToInt"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitInclusive"],[3,"RSplit"],[3,"EscapeAscii"],[3,"Windows"],[3,"Chunks"],[3,"ChunksExact"],[3,"ArrayWindows"],[3,"ArrayChunks"],[3,"RChunks"],[3,"RChunksExact"],[3,"ChunksMut"],[3,"ChunksExactMut"],[3,"ArrayChunksMut"],[3,"RChunksMut"],[3,"RChunksExactMut"],[3,"SplitMut"],[3,"SplitInclusiveMut"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"GroupBy"],[3,"GroupByMut"],[3,"GetManyMutError"],[3,"TimSortRun"],[8,"Fn"],[3,"Bytes"],[3,"Chars"],[3,"CharIndices"],[3,"SplitInclusive"],[3,"ParseBoolError"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"EncodeUtf16"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Chunk"],[3,"Utf8Chunks"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharArraySearcher"],[3,"CharArrayRefSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Exclusive"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Waker"],[3,"RawWaker"],[3,"Ready"],[3,"RawWakerVTable"],[8,"Wake"],[8,"Send"],[8,"Sync"],[3,"Duration"],[3,"TryFromFloatSecsError"],[3,"DebugRendy"],[3,"Character"],[3,"QueueCharacter"],[3,"ColorCode"],[4,"PixelFormat"],[3,"Image"],[3,"Framebuffer"],[3,"SocketAddrInet"],[3,"SocketAddrUnix"],[3,"InetSocket"],[4,"SocketState"],[3,"InetSocketInner"],[4,"SocketType"],[4,"IpProtocol"],[3,"Message"],[3,"MessageQueue"],[4,"UnixSocketState"],[3,"UnixSocketInner"],[3,"AcceptQueue"],[3,"SysLog"],[3,"StackHelper"],[3,"FutexContainer"],[3,"Message"],[3,"MessageQueue"],[3,"Utsname"],[3,"SysInfo"],[3,"SigAction"],[6,"Mutex"],[3,"ITimerVal"],[3,"ElfFile"],[3,"UnwindInfo"],[4,"ExitStatus"],[3,"Scheduler"],[8,"SchedulerInterface"],[3,"TaskId"],[3,"TaskContainer"],[3,"RoundRobin"],[3,"TaskQueue"],[3,"Signals"],[3,"Entries"],[3,"SignalEntry"],[3,"SignalFlags"],[4,"SignalHandler"],[4,"SigProcMask"],[4,"TriggerResult"],[4,"Action"],[3,"Zombies"],[8,"TerminalDevice"],[4,"TaskState"],[3,"SchedTaskAdapter"],[3,"TaskAdapter"],[3,"Cwd"],[3,"WaitPidFlags"],[3,"SessionList"],[3,"SESSIONS"],[3,"Session"],[3,"Group"],[3,"LineDiscipline"],[3,"VmProtected"],[3,"MMapFile"],[3,"Mapping"],[4,"ElfLoadError"],[3,"LoadedBinary"],[3,"Shebang"],[3,"Elf"],[3,"Header"],[3,"ProgramHeaderIter"],[4,"ProgramHeader"],[4,"UnmapResult"],[3,"PerCpu"],[3,"VolatileCell"],[3,"Bitmap"],[8,"AsRef"],[8,"AsMut"],[3,"RingBuffer"],[3,"Buffer"],[3,"Dma"],[3,"DmaAllocator"],[3,"BMutexGuard"],[3,"IrqGuard"],[3,"BMutex"],[4,"AcpiHeader"],[3,"Fadt"],[4,"MadtEntry"],[3,"MadtLocalApic"],[3,"MadtIntSrcOverride"],[3,"IoApicHeader"],[3,"DeviceConfig"],[8,"RsdtTyp"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[3,"GdtAccessFlags"],[3,"GdtEntryType"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[3,"CpuInfo"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[4,"DmaCommand"],[3,"AhciCommand"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[3,"DoorBell"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[3,"PciDevice"],[13,"Memory32"],[13,"Memory64"],[3,"SlaveInner"],[4,"ParsedColor"],[3,"TtyState"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"__BitFlags"],[3,"GptTableHeader"],[8,"DirCacheImpl"],[3,"CacheIndex"],[8,"__BitFlags"],[8,"__BitFlags"],[3,"DirProtectedData"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"FrameAllocator"],[8,"FrameDeallocator"],[8,"Translate"],[13,"Mapped"],[8,"__BitFlags"],[8,"__BitFlags"],[8,"PacketBaseTrait"],[8,"PacketTrait"],[8,"PacketDownHierarchy"],[8,"PacketHeader"],[8,"PacketUpHierarchy"],[3,"Header"],[8,"TryInto"],[8,"TryFrom"],[8,"Drop"],[8,"GlobalAlloc"],[8,"Borrow"],[8,"BorrowMut"],[8,"IntoFuture"],[8,"DiscriminantKind"],[8,"FnPtr"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"Residual"],[8,"AddAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"DivAssign"],[8,"FromResidual"],[8,"IndexMut"],[8,"MulAssign"],[8,"RemAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"SubAssign"],[8,"Pointee"],[3,"LaneCount"],[8,"ToBitMask"],[8,"SimdFloat"],[8,"Swizzle"],[8,"Swizzle2"],[8,"SimdInt"],[8,"SimdPartialEq"],[8,"SimdUint"],[8,"SimdOrd"],[8,"SimdPartialOrd"],[8,"SlicePattern"],[8,"FromStr"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"BmpHeader"],[8,"Downcastable"],[8,"CeilDiv"]],"a":{"!":[21329],"!=":[9275,9300,15555,15563,21979,22001,22162,22184,22345,22370,22536,22561,22727,22749],"%":[21353,21354],"%=":[21354],"&":[21298],"&*":[21310],"&=":[21299],"*":[21310,21311,21326,21327],"*=":[21327],"+":[21296,21297],"+=":[21297],"-":[21328,21362,21363],"-=":[21363],"..":[21346,21348,21349,21351],"..=":[21350,21352],"/":[21313,21314],"/=":[21314],"<":[9297,9302,15560,15565,21998,22003,22181,22186,22367,22372,22558,22563,22746,22751],"<<":[21358],"<<=":[21359],"<=":[9297,9302,15560,15565,21998,22003,22181,22186,22367,22372,22558,22563,22746,22751],"==":[9275,9300,15555,15563,21979,22001,22162,22184,22345,22370,22536,22561,22727,22749],">":[9297,9302,15560,15565,21998,22003,22181,22186,22367,22372,22558,22563,22746,22751],">=":[9297,9302,15560,15565,21998,22003,22181,22186,22367,22372,22558,22563,22746,22751],">>":[21360],">>=":[21361],"?":[9306,9681,17411,21365,22007,22190,22376,22567,22755],"?sized":[9306,17411,22007,22190,22376,22567,22755],"[":[21324,21325],"[]":[21324,21325],"]":[21324,21325],"^":[21302],"^=":[21303],"compare_and_swap":[25359,25371],"drop_while":[9567,17208,22133,22316,22505,22696,22881],"foldl":[9433,16824,22066,22249,22437,22628,22814],"foldr":[9559,17153,22128,22311,22500,22691,22876],"in6addr_any":[17605],"in6addr_any_init":[17605],"in6addr_loopback":[17596],"in6addr_loopback_init":[17596],"inaddr_any":[17604],"inject":[9433,16824,22066,22249,22437,22628,22814],"memcpy":[16378,22954],"memmove":[16377,22953],"memset":[16490,23035],"popcnt":[18962,18963,18964,18965,18966,18967,18968,18969,18970,18971,18972,18973,18974,18975,18976,18977,18978,18979,18980,18981,18982,18983,18984,18985],"popcount":[18962,18963,18964,18965,18966,18967,18968,18969,18970,18971,18972,18973,18974,18975,18976,18977,18978,18979,18980,18981,18982,18983,18984,18985],"reverse":[9557,17146,22126,22309,22498,22689,22874],"stream":[15116],"synccell":[25256],"syncwrapper":[25256],"unique":[25256],"{:?}":[15919],"{}":[15926],"|":[21300],"|=":[21301]}},\
"aero_syscall":{"doc":"","t":"RRRRRRRRNSSSSNSSSSSSSSSSSSSSNNNNNNNNNNNNNNNNNNNNNSSSSSSSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSNNNSSSSSSSSSSSSSSSNNNDNENNSSSSDDNDSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDSSSRRRRRRRSSSSSNNNSSSSSSSSSSSSSSSSSSSSSSSSSSNNNNENNIDDDEDNNDEDESSSSSRRRRRSNDDDDDDNNNDRRRRRRRRRRRRRRRSSSRRSSSSSSDDSMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLMMLMLMLLLLLLLLLLMMMLLLLLLLLLLMMAMMLMLLLLLLLLLLLLLLLLLLLLMAMAMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAFMALLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMSSSRRRTDDDSSSSDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDSSSSDTSSSSSSSSDDSSSSSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDSSSSMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLMMLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLMLMMLLLLLMLLLLLMMMMLLLLLMMMMMMMLLLLLMMMMLLLLLLLLLLLLLLLMLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMMLLLLLMMMMMMMMMMMMMMCNNNNSSSSSSSSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNDEDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLFFFFFFFRRRDDLLLLLLLLLLLLMMLLLLMMLL","n":["AF_BRIDGE","AF_INET","AF_INET6","AF_LOCAL","AF_NETLINK","AF_UNIX","AF_UNSPEC","AT_FDCWD","Ah","BRKINT","BS0","BS1","BSDLY","BlockDevice","CLOCAL","CLOEXEC","CR0","CR1","CR2","CR3","CRDLY","CREAD","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CharDevice","Comp","Dccp","Dccp","Default","Dgram","Directory","Dstopts","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EALREADY","EBADF","EBADFD","EBADMSG","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELOOP","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENOPROTOOPT","ENOSPC","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EROFS","ESHUTDOWN","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETXTBSY","EXDEV","Esp","FF0","FF1","FFDLY","FLUSHO","Fifo","File","Gre","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INLCR","INPCK","ISIG","ISTRIP","IXANY","IXOFF","IXON","Icmp","Icmpv6","Igmp","InAddr","Ip","IpProtocol","Ipip","Ipv6","MAP_ANONYOMUS","MAP_FIXED","MAP_PRIVATE","MAP_SHARED","MMapFlags","MMapProt","Max","Mode","NL0","NL1","NLDLY","NOFLSH","NONBLOCK","OCRNL","OFDEL","OFILL","ONLCR","ONLRET","ONOCR","OPOST","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXEC","O_LARGEFILE","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SEARCH","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","OpenFlags","PARENB","PARMRK","PARODD","PF_BRIDGE","PF_INET","PF_INET6","PF_LOCAL","PF_NETLINK","PF_UNIX","PF_UNSPEC","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","RDM","Raw","Raw","Routing","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","Sctp","SeekCur","SeekEnd","SeekSet","SeekWhence","SeqPacket","Socket","SocketAddr","SocketAddrInet","SocketAddrUnix","SocketFlags","SocketType","Stat","Stream","Symlink","SysDirEntry","SysFileType","SysInfo","SyscallError","TAB0","TAB1","TAB2","TAB3","TABDLY","TCGETS","TCSETSF","TIOCGWINSZ","TIOCSCTTY","TIOCSWINSZ","TOSTOP","Tcp","Termios","TermiosCFlag","TermiosIFlag","TermiosLFlag","TermiosOFlag","TimeSpec","Udp","Unknown","Unknown","Utsname","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WEXITED","WNOHANG","WNOWAIT","WSTOPPED","WUNTRACED","WaitPidFlags","WinSize","XTABS","_f","addr","addr","all","all","all","all","all","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bufferram","c_cc","c_cflag","c_iflag","c_ispeed","c_lflag","c_line","c_oflag","c_ospeed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","complement","complement","complement","complement","consts","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","default","default","default","default","default","default","default","default","default","default","default","difference","difference","difference","difference","difference","difference","difference","difference","difference","difference","domainname","empty","empty","empty","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","family","family","file_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freehigh","freeram","freeswap","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_i64","from_i64","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_u64","from_u64","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","inode","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","isize_as_syscall_result","loads","machine","machine","mem_unit","name","name","nodename","nodename","not","not","not","not","not","not","not","not","not","not","offset","pad","padding","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","port","prelude","procs","reclen","release","release","remove","remove","remove","remove","remove","remove","remove","remove","remove","remove","set","set","set","set","set","set","set","set","set","set","sharedram","signal","sin_addr","socket","st_atim","st_blksize","st_blocks","st_ctim","st_dev","st_gid","st_ino","st_mode","st_mtim","st_nlink","st_rdev","st_size","st_uid","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","sys_access","sys_chdir","sys_clone","sys_close","sys_dup","sys_dup2","sys_exec","sys_exit","sys_fcntl","sys_fork","sys_fstat","sys_getcwd","sys_getdents","sys_gethostname","sys_getpid","sys_gettid","sys_gettime","sys_info","sys_ioctl","sys_ipc_become_root","sys_ipc_discover_root","sys_ipc_recv","sys_ipc_send","sys_listen","sys_log","sys_mkdir","sys_mkdirat","sys_mmap","sys_munmap","sys_open","sys_pipe","sys_read","sys_rmdir","sys_seek","sys_sethostname","sys_shutdown","sys_sigaction","sys_sigprocmask","sys_sigreturn","sys_sleep","sys_socket","sys_stat","sys_uname","sys_unlink","sys_waitpid","sys_write","syscall","syscall_result_as_usize","sysname","time","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","toggle","totalhigh","totalram","totalswap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tv_nsec","tv_sec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","union","union","union","union","uptime","version","version","ws_col","ws_row","ws_xpixel","ws_ypixel","CLOEXEC","CLOEXEC","CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPollData","EPollEvent","EPollEventFlags","EPollFlags","ERR","ERR","ET","EXCLUSIVE","EventFdFlags","FBIOGETCMAP","FBIOGET_FSCREENINFO","FBIOGET_VSCREENINFO","FBIOPUTCMAP","FBIOPUT_VSCREENINFO","FB_ACTIVATE_MASK","FB_ACTIVATE_NOW","FB_ACTIVATE_NXTOPEN","FB_ACTIVATE_TEST","FB_TYPE_FOURCC","FB_TYPE_INTERLEAVED_PLANES","FB_TYPE_PACKED_PIXELS","FB_TYPE_PLANES","FB_TYPE_TEXT","FB_TYPE_VGA_PLANES","FB_VISUAL_DIRECTCOLOR","FB_VISUAL_FOURCC","FB_VISUAL_MONO01","FB_VISUAL_MONO10","FB_VISUAL_PSEUDOCOLOR","FB_VISUAL_STATIC_PSEUDOCOLOR","FB_VISUAL_TRUECOLOR","FB_VMODE_DOUBLE","FB_VMODE_INTERLACED","FB_VMODE_MASK","FB_VMODE_NONINTERLACED","FB_VMODE_ODD_FLD_FIRST","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","FdFlags","FramebufferBitField","FramebufferCmap","FramebufferFScreenInfo","FramebufferVScreenInfo","HUP","HUP","IN","IN","IfReq","IfrIfru","MSG","NONBLOCK","NVAL","ONESHOT","OUT","OUT","PRI","PRI","PollEventFlags","PollFd","RDBAND","RDHUP","RDHUP","RDNORM","SEMAPHORE","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCSIFADDR","SYS_ACCEPT","SYS_ACCESS","SYS_ARCH_PRCTL","SYS_BACKTRACE","SYS_BIND","SYS_CHDIR","SYS_CLONE","SYS_CLOSE","SYS_CONNECT","SYS_DUP","SYS_DUP2","SYS_EPOLL_CREATE","SYS_EPOLL_CTL","SYS_EPOLL_PWAIT","SYS_EVENT_FD","SYS_EXEC","SYS_EXIT","SYS_EXIT_THREAD","SYS_FCNTL","SYS_FORK","SYS_FSTAT","SYS_FUTEX_WAIT","SYS_FUTEX_WAKE","SYS_GETCWD","SYS_GETDENTS","SYS_GETHOSTNAME","SYS_GETITIMER","SYS_GETPGID","SYS_GETPID","SYS_GETPPID","SYS_GETTID","SYS_GETTIME","SYS_INFO","SYS_IOCTL","SYS_IPC_BECOME_ROOT","SYS_IPC_DISCOVER_ROOT","SYS_IPC_RECV","SYS_IPC_SEND","SYS_KILL","SYS_LINK","SYS_LISTEN","SYS_LOG","SYS_MKDIR","SYS_MKDIR_AT","SYS_MMAP","SYS_MPROTECT","SYS_MUNMAP","SYS_OPEN","SYS_PIPE","SYS_POLL","SYS_READ","SYS_READ_LINK","SYS_REBOOT","SYS_RENAME","SYS_RMDIR","SYS_SEEK","SYS_SETHOSTNAME","SYS_SETITIMER","SYS_SETPGID","SYS_SETSID","SYS_SHUTDOWN","SYS_SIGACTION","SYS_SIGPROCMASK","SYS_SIGRETURN","SYS_SLEEP","SYS_SOCKET","SYS_SOCKET_PAIR","SYS_SOCK_RECV","SYS_SOCK_SEND","SYS_STAT","SYS_TRACE","SYS_UNAME","SYS_UNLINK","SYS_WAITPID","SYS_WRITE","SockAddrStorage","WAKEUP","WRBAND","WRNORM","WRNORM","accel","accel_flags","activate","addr","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits_per_pixel","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","blue","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","colorspace","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","data","data","data","default","default","default","default","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","events","events","extend","extend","extend","extend","extend","fd","fd","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","grayscale","green","green","hash","hash","hash","hash","hash","height","hsync_len","id","ifindex","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","left_margin","len","length","line_length","lower_margin","metric","mmio_len","mmio_start","msb_right","mtu","name","name","new","newname","nonstd","not","not","not","not","not","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pixclock","ptr","red","red","remove","remove","remove","remove","remove","reserved","reserved","revents","right_margin","rotate","sa_data","sa_family","set","set","set","set","set","slave","smem_len","smem_start","start","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","sync","toggle","toggle","toggle","toggle","toggle","transp","transp","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_aux","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typee","u32","u64","union","union","union","union","union","upper_margin","visual","vmode","vsync_len","width","xoffset","xpanstep","xres","xres_virtual","yoffset","ypanstep","yres","yres_virtual","ywrapstep","SyscallError","Block","Default","Handle","Ignore","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_RESTORER","SA_SIGINFO","SIGABRT","SIGALRM","SIGBUS","SIGCANCEL","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","Set","SigAction","SigProcMask","SignalFlags","SignalHandler","Unblock","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","complement","contains","default","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","new","not","partial_cmp","remove","sa_flags","sa_handler","sa_mask","sa_sigaction","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","IoVec","MessageHeader","as_slice","as_slice_mut","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","iovecs","iovecs_mut","len","name_mut","try_from","try_from","try_into","try_into","type_id","type_id","syscall0","syscall1","syscall2","syscall3","syscall4","syscall5","syscall6","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","ITimerVal","TimeVal","borrow","borrow","borrow_mut","borrow_mut","default","default","eq","eq","from","from","into","into","it_interval","it_value","try_from","try_from","try_into","try_into","tv_sec","tv_usec","type_id","type_id"],"q":[[0,"aero_syscall"],[1053,"aero_syscall::consts"],[1616,"aero_syscall::prelude"],[1617,"aero_syscall::signal"],[1761,"aero_syscall::socket"],[1785,"aero_syscall::syscall"],[1792,"aero_syscall::time"]],"deturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Memory used by buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Available memory size.","Swap space still available.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Inner helper function that converts the syscall result …","1, 5, and 15 minute load averages","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Amount of shared memory.","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","Total usable main memory size.","Total swap space size.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Seconds since boot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","There is an exceptional condition on the file descriptor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","Get the interface name, e.g. “en0”. <code>None</code> is returned …","interface name, e.g. “en0”","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the length of the I/O vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,20,6,9,9,9,29,8,10,9,9,9,9,9,8,8,8,8,8,8,8,29,20,20,21,20,21,29,20,14,14,14,14,14,14,14,14,14,14,14,14,14,7,7,7,7,7,7,7,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,20,9,9,9,7,29,29,20,8,7,6,7,6,6,6,7,6,6,7,6,6,6,6,20,20,20,0,20,0,20,20,3,3,3,3,0,0,20,0,9,9,9,7,10,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,8,6,8,0,0,0,0,0,0,0,2,2,2,2,10,20,21,20,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,20,30,30,30,0,21,29,0,0,0,0,0,0,21,29,0,0,0,0,9,9,9,9,9,0,0,0,0,0,7,20,0,0,0,0,0,0,20,14,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,0,0,5,5,5,5,5,5,0,0,9,31,1,19,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,65,2,3,4,5,14,29,24,15,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,65,2,3,4,5,14,29,24,15,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,31,17,17,17,17,17,17,17,17,2,3,4,5,14,15,16,6,7,8,9,17,18,19,1,20,21,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,0,2,3,4,5,6,7,8,9,10,11,24,15,16,6,7,8,9,17,18,11,25,2,3,4,5,6,7,8,9,10,11,24,2,3,4,5,6,7,8,9,10,11,2,3,4,5,14,6,7,8,9,20,21,10,11,2,3,4,5,6,7,8,9,10,11,18,1,65,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,14,29,24,15,30,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,17,31,18,19,1,20,21,10,10,10,10,10,11,11,11,11,11,25,31,31,31,65,2,3,4,4,5,14,29,24,15,30,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,20,21,2,3,4,5,6,7,8,9,10,11,20,21,2,3,4,5,6,7,8,9,10,11,65,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,65,2,3,4,5,14,29,24,15,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,0,31,24,24,31,24,65,24,24,2,3,4,5,6,7,8,9,10,11,65,31,1,2,3,4,5,6,7,8,9,10,11,18,1,0,31,65,24,24,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,31,0,1,0,25,25,25,25,25,25,25,25,25,25,25,25,25,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,2,3,4,5,6,7,8,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,2,3,4,5,6,7,8,9,10,11,31,31,31,65,2,3,4,5,14,29,24,15,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,65,2,3,4,5,14,29,24,15,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,15,15,65,2,3,4,5,14,29,24,15,30,16,6,7,8,9,17,31,18,19,1,20,21,10,11,25,2,3,4,5,6,7,8,9,10,11,31,24,24,16,16,16,16,43,44,47,0,0,0,0,0,0,0,45,46,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,45,46,0,0,45,47,46,45,45,46,45,46,0,0,45,45,46,45,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,46,53,52,52,66,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,52,43,44,45,46,47,43,44,45,46,47,55,52,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,53,43,44,49,45,50,46,47,51,52,53,54,43,44,45,46,47,52,43,44,45,46,47,43,44,45,46,47,66,57,50,51,55,52,53,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,50,56,43,44,45,46,47,49,56,66,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,50,56,46,46,46,46,46,47,47,47,47,47,51,55,52,53,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,52,55,52,43,44,45,46,47,52,52,53,66,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,43,44,45,46,47,43,44,45,46,47,52,55,51,53,52,66,53,53,51,66,57,57,51,66,52,43,44,45,46,47,51,43,44,45,46,47,52,49,55,52,43,44,45,46,47,52,53,56,52,52,54,54,43,44,45,46,47,66,53,53,55,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,52,43,44,45,46,47,55,52,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,53,66,57,43,44,49,45,50,56,46,47,51,55,52,53,54,53,49,49,43,44,45,46,47,52,53,52,52,52,52,53,52,52,52,53,52,52,53,0,41,59,59,59,58,58,58,58,58,58,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,0,41,58,58,58,58,58,58,58,58,59,40,58,41,59,40,58,41,59,40,58,58,58,58,59,58,58,58,59,58,58,59,40,58,58,58,58,58,41,59,59,40,58,41,41,58,58,58,58,58,58,58,58,59,40,58,41,58,58,40,58,58,58,40,40,40,40,58,58,58,58,58,59,40,58,41,59,40,58,41,59,40,58,41,58,0,0,60,60,61,60,61,60,61,60,61,60,61,60,61,61,60,61,61,60,61,60,61,60,0,0,0,0,0,0,0,0,0,0,0,0,63,64,63,64,63,64,63,64,63,64,63,64,64,64,63,64,63,64,63,63,63,64],"fc":[],"p":[[3,"SocketAddrInet"],[3,"MMapProt"],[3,"MMapFlags"],[3,"OpenFlags"],[3,"WaitPidFlags"],[3,"TermiosIFlag"],[3,"TermiosLFlag"],[3,"TermiosCFlag"],[3,"TermiosOFlag"],[3,"SocketFlags"],[3,"Mode"],[15,"usize"],[15,"u32"],[4,"SyscallError"],[3,"TimeSpec"],[3,"WinSize"],[3,"Termios"],[3,"SocketAddrUnix"],[3,"InAddr"],[4,"IpProtocol"],[4,"SocketType"],[4,"Ordering"],[15,"bool"],[3,"Utsname"],[3,"Stat"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"SysFileType"],[4,"SeekWhence"],[3,"SysInfo"],[4,"Option"],[15,"i64"],[15,"u64"],[8,"Hasher"],[15,"isize"],[4,"Result"],[15,"str"],[15,"never"],[3,"SigAction"],[4,"SigProcMask"],[3,"TypeId"],[3,"FdFlags"],[3,"EPollFlags"],[3,"EPollEventFlags"],[3,"PollEventFlags"],[3,"EventFdFlags"],[15,"i16"],[19,"EPollData"],[3,"EPollEvent"],[3,"FramebufferBitField"],[3,"FramebufferVScreenInfo"],[3,"FramebufferFScreenInfo"],[3,"SockAddrStorage"],[3,"FramebufferCmap"],[3,"PollFd"],[3,"IfReq"],[3,"SignalFlags"],[4,"SignalHandler"],[3,"IoVec"],[3,"MessageHeader"],[8,"SocketAddr"],[3,"TimeVal"],[3,"ITimerVal"],[3,"SysDirEntry"],[19,"IfrIfru"]]},\
"ahash":{"doc":"AHash is a hashing algorithm is intended to be a high …","t":"DIDLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLL","n":["AHasher","CallHasher","RandomState","borrow","borrow","borrow_mut","borrow_mut","build_hasher","clone","clone","clone_into","clone_into","default","default","finish","fmt","fmt","from","from","generate_with","get_hash","into","into","new","new_with_keys","set_random_source","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_seed","with_seeds","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":[[0,"ahash"]],"d":["A <code>Hasher</code> for hashing an arbitrary stream of bytes.","Provides a way to get an optimized hasher for a given data …","Provides a Hasher factory. This is typically used (e.g. by …","","","","","Constructs a new AHasher with keys based on this …","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Allows for supplying seeds, but each time it is called the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Use randomly generated keys","Creates a new hasher keyed to the provided key.","Provides an optional way to manually supply a source of …","","","","","","","","","Allows for explicitly setting a seed to used.","Allows for explicitly setting the seeds to used.","","","","","","",""],"i":[0,0,0,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,1,19,2,1,1,2,1,2,1,2,1,2,1,2,1,1,1,2,2,2,2,2,2,2],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],[2,2],[1,1],[[]],[[]],[[],2],[[],1],[2,3],[[2,4],5],[[1,4],5],[[]],[[]],[[3,3,3,3],1],[[[0,[6,7]],8],3],[[]],[[]],[[],1],[[9,9],2],[[[0,[0,10,11]]],[[13,[12]]]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[15,1],[[3,3,3,3],1],[2],[[2,9]],[[2,16]],[[2,17]],[[2,3]],[[2,18]],[[2,15]]],"c":[],"p":[[3,"RandomState"],[3,"AHasher"],[15,"u64"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u128"],[8,"Send"],[8,"Sync"],[15,"bool"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u16"],[15,"u32"],[15,"u8"],[8,"CallHasher"]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":"DDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write_char","write_str","zero_filled"],"q":[[0,"arrayvec"]],"d":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,2,1,1,2,1,2,1,1,6,11,2,2,7,1,1,6,11,2,7,1,2,1,2,1,6,2,7,1,2,1,2,7,1,2,1,2,1,2,1,1,6,11,7,1,1,2,2,7,1,1,6,2,2,7,7,1,1,6,11,2,2,7,2,1,2,1,2,2,1,2,2,1,2,1,1,6,11,2,7,1,1,1,1,1,6,11,1,2,1,2,1,2,2,1,2,1,2,2,1,2,7,1,2,6,11,6,11,1,2,2,7,1,2,1,1,2,2,1,1,2,1,2,1,1,2,7,6,11,1,1,1,1,2,1,1,1,6,11,2,2,2,7,1,1,6,11,2,7,1,2,2,1,6,11,2,7,2,2,2],"f":[0,0,0,0,0,[1],[1],[1],[2,3],[1],[1],[2,3],[1],[2,3],[[]],[1],[[]],[[]],[[]],[2,3],[[]],[[]],[1],[[]],[[]],[[]],[[]],[1,4],[2,4],[1],[2],[[[1,[5]]],[[1,[5]]]],[[[6,[5]]],[[6,[5]]]],[2,2],[[[7,[5]]],[[7,[5]]]],[[[1,[5]],[1,[5]]]],[[2,2]],[[[1,[8]],[1,[8]]],9],[[2,2],9],[[[7,[8]],[7,[8]]],9],[[],1],[[],2],[1],[2,3],[1],[2,3],[[1,[10,[4]]],11],[1],[6],[11],[7],[[[1,[12]]],13],[[[1,[12]],[1,[12]]],13],[[2,2],13],[[2,3],13],[[[7,[12]],[7,[12]]],13],[[1,14]],[[[1,[15]],16],17],[[[6,[15]],16],17],[[2,16],17],[[2,16],17],[[7,16],17],[[7,16],17],[[]],[[],1],[[]],[[]],[[]],[3,[[18,[2,[7,[3]]]]]],[[]],[[],[[18,[2,19]]]],[14,1],[3,[[18,[2]]]],[[[1,[20]],[1,[20]]],13],[[2,2],13],[[2,3],13],[[[1,[20]],[1,[20]]],13],[[2,3],13],[[2,2],13],[[[1,[21]],22]],[[2,22]],[[1,4]],[[]],[[]],[[]],[[]],[[]],[1,[[18,[1]]]],[1],[1,6],[1],[1],[[]],[[]],[1,13],[2,13],[1,13],[2,13],[[[1,[20]],[1,[20]]],13],[[2,2],13],[[2,3],13],[1,4],[2,4],[[[1,[20]],[1,[20]]],13],[[2,2],13],[[2,3],13],[[],1],[[],2],[[],7],[[],1],[[],2],[6,23],[11,23],[6,23],[11,23],[[[1,[20]],[1,[20]]],[[23,[9]]]],[[2,2],[[23,[9]]]],[[2,3],[[23,[9]]]],[[[7,[20]],[7,[20]]],[[23,[9]]]],[1,23],[2,[[23,[24]]]],[[1,4],23],[1],[[2,24]],[[2,3]],[1],[1,4],[2,4],[[1,4]],[[2,4],24],[[1,25]],[[1,4]],[[2,4]],[7,7],[6],[11],[[1,4],23],[[1,4]],[1,1],[[1,4]],[[2,4]],[[[1,[26]]],[[18,[7]]]],[[],[[18,[[1,[5]]]]]],[[],18],[[],18],[[],18],[3,[[18,[2]]]],[27,[[18,[2]]]],[[],18],[[],18],[[1,4],[[18,[7]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[1,[[18,[7]]]],[[2,24],[[18,[[7,[24]]]]]],[[2,3],[[18,[[7,[3]]]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[2,24],17],[[2,3],17],[[],2]],"c":[],"p":[[3,"ArrayVec"],[3,"ArrayString"],[15,"str"],[15,"usize"],[8,"Clone"],[3,"IntoIter"],[3,"CapacityError"],[8,"Ord"],[4,"Ordering"],[8,"RangeBounds"],[3,"Drain"],[8,"PartialEq"],[15,"bool"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Utf8Error"],[8,"PartialOrd"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[15,"char"],[8,"FnMut"],[8,"Copy"],[3,"Arguments"],[3,"TypeId"]]},\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":"SIIKKKKKKKKK","n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":[[0,"bit_field"]],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[4,0,0,5,4,5,4,5,4,5,4,5],"f":[0,0,0,[[],1],[1,2],[1,2],[[[3,[1]]]],[[[3,[1]]]],[[1,2]],[[1,2]],[[[3,[1]]]],[[[3,[1]]]]],"c":[],"p":[[15,"usize"],[15,"bool"],[8,"RangeBounds"],[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIILLFFFFFFFALLLLLFFLLLLLLOOLLLLLLLLLLFFFFFFFFLFFLFLLLLLLLLLLLLLQIENNLLFFFFFLLLLLLFFLLKFFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":[[0,"bytemuck"],[78,"bytemuck::checked"]],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-[<code>Pod</code>] cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[3,0,0,0,14,14,14,0,3,0,0,0,3,3,0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,14,14,3,3,14,14,0,0,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,3,0,0,3,0,3,15,15,15,15,15,15,15,15,15,15,16,16,12,0,0,13,13,13,13,0,0,0,0,0,13,13,13,13,13,13,0,0,13,13,12,0,0,0,0,0,0,13,0,0,13,0,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[[[0,[1,2]]]],[1,2],[[[0,[1,2]]],[[0,[1,2]]]],[1,2],[[]],[[]],0,[3,3],[[3,3],4],[[3,5],6],[[3,5],6],[[]],[[],2],[[],[[0,[1,2]]]],[[],7],[[],7],[[3,8]],[[]],[[]],[[]],0,0,[9,9],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[1,[[10,[2,3]]]],[[[0,[1,2]]],[[10,[[0,[1,2]],3]]]],[1,[[10,[2,3]]]],[[],[[10,[3]]]],[[],[[10,[3]]]],[[],10],[[],[[10,[2,3]]]],[[],[[10,[[0,[1,2]],3]]]],[[],10],[[],[[10,[2,3]]]],[[],11],[9,9],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[1,12],[[[0,[1,2]]],[[0,[1,12]]]],[1,12],[[]],[[]],[13,13],[[13,13],4],[[13,5],6],[[13,5],6],[3,13],[[]],[[],12],[[],[[0,[1,12]]]],[[13,8]],[[]],[[],4],[[],2],[1,[[10,[12,13]]]],[[[0,[1,2]]],[[10,[[0,[12,1]],13]]]],[1,[[10,[12,13]]]],[[],[[10,[13]]]],[[],[[10,[13]]]],[[],10],[[],[[10,[12,13]]]],[[],[[10,[[0,[12,1]],13]]]],[[],10],[[],[[10,[12,13]]]],[[],11]],"c":[],"p":[[8,"NoUninit"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hasher"],[8,"Sized"],[4,"Result"],[3,"TypeId"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"Zeroable"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,22,1,2,22,1,2,22,22,22,22,22,1,2,22,1,2,22,1,2,22,1,2,1,2,1,2,1,2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,1,2,22,1,2,22,1,2,22,1,2,22,22,1,2,22,1,2,22,22,1,2,22,1,2,22,1,2,22,1,2,1,2,1,2,1,2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,1,2,22,1,2,22,1,2,22,1,2,22,22,1,2,22,1,2,22,22,1,2,22,1,2,22,1,2,22,1,2],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,7]],[[2,7]],[[]],[[]],[[1,1],[[8,[3]]]],[[2,2],[[8,[3]]]],[[],9],[[]],[[]],[[],10],[[]],[[]],[[],11],[[]],[[],12],[[]],[[],13],[[],13],[[]],[[],14],[[],14],[[]],[15,14],[15,11],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[15,19],[15,19],[15,19],[15,16],[15,16],[15,16],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[9],[[]],[10],[[]],[11],[[]],[12],[[]],[13],[13],[[]],[14],[14],[[]],[[]],[[14,15]],[[11,15]],[16],[16],[16],[[]],[[]],[[]],[17],[17],[17],[[]],[[]],[[]],[18],[18],[18],[18],[[]],[[]],[[]],[19],[19],[19],[19],[[]],[[]],[[]],[[19,15]],[[19,15]],[[19,15]],[[16,15]],[[16,15]],[[16,15]]],"c":[53,56],"p":[[4,"BigEndian"],[4,"LittleEndian"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"usize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[4,"Result"],[3,"TypeId"],[8,"ByteOrder"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"cpio_reader":{"doc":"<code>cpio_reader</code>","t":"SSSDSSSDSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLL","n":["BLOCK_SPECIAL_DEVICE","CHARACTER_SPECIAL_DEVICE","DIRECTORY","Entry","GROUP_EXECUTABLE","GROUP_READABLE","GROUP_WRITABLE","Mode","NAMED_PIPE_FIFO","REGULAR_FILE","SGID","SOCKET","STICKY","SUID","SYMBOLIK_LINK","USER_EXECUTABLE","USER_READABLE","USER_WRITABLE","WORLD_EXECUTABLE","WORLD_READABLE","WORLD_WRITABLE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","complement","contains","dev","devmajor","devminor","difference","empty","eq","eq","extend","file","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","gid","hash","hash","ino","insert","intersection","intersects","into","into","is_all","is_empty","iter_files","mode","mtime","name","nlink","not","partial_cmp","partial_cmp","rdev","rdevmajor","rdevminor","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_into","try_into","type_id","type_id","uid","union"],"q":[[0,"cpio_reader"]],"d":["Block special device.","Character special device.","Directory.","An entry of a cpio file.","Group executable bit.","Group readable bit.","Group writable bit.","File information.","Named pipe or FIFO.","Regular file.","SGID bit.","Socket.","Sticky bit.","SUID bit.","Symbolik link.","User executable bit.","User readable bit.","User writable bit.","Executable bit for the other groups.","Readable bit for the other groups.","Writable bit for the other groups.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the device number of the device which contained …","Returns the major number of the device which contained the …","Returns the minor number of the device which contained the …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","Returns the content of this file.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Returns the group id of the owner of the file.","","","Returns the inode number of the file.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns an iterator that iterates over each content of the …","Returns the <code>Mode</code> value of the file, which contains the file…","Returns the modification time of this file.","Returns the filename.","Returns the number of links to this file.","Returns the complement of this set of flags.","","","Returns the associated device number if the entry is block …","Returns the associated device major number if the entry is …","Returns the associated device minor number if the entry is …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","Returns the user id of the owner of the file.","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,3,1,3,1,1,1,3,3,3,1,1,3,1,1,3,3,1,1,1,1,1,3,1,1,1,1,1,3,3,1,3,1,1,1,3,1,1,1,0,3,3,3,3,1,3,1,3,3,3,1,1,1,1,1,1,3,1,3,1,3,1,3,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[1,2],[[1,1],1],[[1,1]],[[]],[[]],[[]],[[]],[3,3],[1,1],[[3,3],4],[[1,1],4],[1,1],[[1,1],5],[3,[[6,[2]]]],[3,[[6,[2]]]],[3,[[6,[2]]]],[[1,1],1],[[],1],[[3,3],5],[[1,1],5],[[1,7]],[3],[[3,8],9],[[1,8],9],[[1,8],9],[[1,8],9],[[1,8],9],[[1,8],9],[[]],[[]],[2,[[6,[1]]]],[2,1],[2,1],[7,1],[3,2],[[3,10]],[[1,10]],[3,2],[[1,1]],[[1,1],1],[[1,1],5],[[]],[[]],[1,5],[1,5],[[],11],[3,1],[3,12],[3,13],[3,2],[1,1],[[3,3],[[6,[4]]]],[[1,1],[[6,[4]]]],[3,[[6,[2]]]],[3,[[6,[2]]]],[3,[[6,[2]]]],[[1,1]],[[1,1,5]],[[1,1],1],[[1,1]],[[1,1],1],[[1,1]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[3,2],[[1,1],1]],"c":[],"p":[[3,"Mode"],[15,"u32"],[3,"Entry"],[4,"Ordering"],[15,"bool"],[4,"Option"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[8,"Iterator"],[15,"u64"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNDDELLLLLLLAALLLLLMGDDEEDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDDDEDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","EntryRef","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","entry_ref","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in","Difference","Drain","DrainFilter","Entry","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in"],"q":[[0,"hashbrown"],[19,"hashbrown::TryReserveError"],[20,"hashbrown::hash_map"],[417,"hashbrown::hash_set"]],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Calls <code>U::from(self)</code>.","","","","","The layout of the allocation request that failed.","Default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","Creates an empty <code>HashMap</code>.","Creates an empty <code>HashMap</code> using the given allocator.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity using …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A view into a single entry in a set, which may either be …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","Gets the given value’s corresponding entry in the set …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","Creates an empty <code>HashSet</code>.","Creates an empty <code>HashSet</code>.","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity.","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …"],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,63,0,0,0,0,0,0,0,0,0,0,0,0,9,11,13,0,0,0,0,0,0,0,0,9,11,13,0,0,0,0,8,9,11,13,9,11,13,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,8,8,8,16,17,18,8,8,16,17,18,8,8,8,8,25,8,43,8,8,8,8,8,8,16,30,31,32,33,17,18,23,34,35,9,36,37,38,11,39,40,13,41,42,43,43,8,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,35,38,8,35,38,35,38,8,36,39,41,8,36,8,36,8,8,8,8,8,36,39,41,8,8,8,9,36,37,11,39,40,13,41,42,37,36,8,37,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,8,8,8,16,30,31,32,33,17,18,23,25,34,36,40,42,36,8,36,39,41,8,8,8,8,36,11,39,40,13,41,42,36,8,8,16,30,31,32,33,17,18,23,34,8,8,16,30,31,32,33,17,18,23,25,34,11,13,9,11,13,9,11,13,11,13,8,8,8,36,39,41,8,36,39,41,39,41,36,39,41,39,41,8,8,8,8,16,30,31,32,33,17,18,23,25,34,8,16,17,18,43,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,8,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,8,8,16,30,31,32,33,17,18,23,25,34,35,9,36,37,38,11,39,40,13,41,42,43,43,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,58,0,0,0,58,0,50,50,50,50,50,51,59,56,57,52,53,54,55,58,60,61,50,51,59,56,57,52,53,54,55,58,60,61,50,50,50,51,52,53,54,55,50,50,51,52,53,54,55,50,50,50,50,50,57,50,50,50,50,50,51,59,56,52,53,54,55,58,60,61,50,50,50,51,59,56,57,52,53,54,55,58,60,61,50,50,58,60,61,50,50,50,50,50,58,61,50,50,50,51,59,56,57,52,53,54,55,58,60,61,50,50,51,59,56,57,52,53,54,55,61,50,50,50,50,50,50,51,59,56,50,50,51,59,56,57,52,53,54,55,58,50,60,50,60,50,50,50,50,51,59,56,57,52,53,54,55,50,50,50,50,51,52,53,54,55,50,51,59,56,57,52,53,54,55,58,60,61,50,51,59,56,57,52,53,54,55,58,60,61,50,50,51,59,56,57,52,53,54,55,58,60,61,50,50,50,50,50,50,50],"f":[0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],0,0,[[]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[[0,[0,7]]]]],[[0,[0,7]]]],[[[9,[[0,[0,7]]]],10],[[9,[[0,[0,7]]]]]],[[[11,[[0,[0,7]]]],10],[[11,[[0,[0,7]]]]]],[[[13,[12,[0,[0,7]]]],10],[[13,[12,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]],10],[[9,[[0,[0,7]]]]]],[[[11,[[0,[0,7]]]],10],[[11,[[0,[0,7]]]]]],[[[13,[[14,[12]],12,[0,[0,7]]]],10],[[13,[[14,[12]],12,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],15],[[[8,[[0,[0,7]]]]]],[[[8,[7,7,7,[0,[0,7]]]]],[[8,[7,7,7,[0,[0,7]]]]]],[16,16],[17,17],[18,18],[[[8,[7,7,7,[0,[0,7]]]],[8,[7,7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],2],[[],[[8,[22,[0,[22,0,7]]]]]],[[[8,[[0,[0,7]]]]],[[23,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]],24],[[25,[24,[0,[0,7]]]]]],[[[25,[24,[0,[0,7]]]]]],[[[8,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],[[11,[[0,[20,19]],21,[0,[0,7]]]]]],0,[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],[[13,[[14,[[0,[19,20,12]]]],[0,[20,19]],[0,[19,20,12]],21,[0,[0,7]]]]]],[[[8,[[0,[20,19]],26,21,[0,[0,7]]]],[8,[[0,[20,19]],26,21,[0,[0,7]]]]],2],[[[8,[[0,[20,19,27]],27,21,[0,[0,7]]]],28]],[[[8,[[0,[20,19]],21,[0,[0,7]]]],28]],[[[8,[[0,[20,19,27]],27,21,[0,[0,7]]]],28]],[[[8,[29,29,[0,[0,7]]]],3],4],[[[16,[29,29]],3],4],[[[30,[29,29]],3],4],[[[31,[29,29,[0,[0,7]]]],3],4],[[[32,[29,29,[0,[0,7]]]],3],4],[[[33,[29,[0,[0,7]]]],3],4],[[[17,[29]],3],4],[[[18,[29]],3],4],[[[23,[29,29,[0,[0,7]]]],3],4],[[[34,[29]],3],4],[[[35,[[0,[0,7]]]],3],4],[[[9,[29,29,[0,[0,7]]]],3],4],[[[36,[29,29,[0,[0,7]]]],3],4],[[[37,[[0,[0,7]]]],3],4],[[[38,[[0,[0,7]]]],3],4],[[[11,[29,29,[0,[0,7]]]],3],4],[[[39,[29,29,[0,[0,7]]]],3],4],[[[40,[29,[0,[0,7]]]],3],4],[[[13,[[14,[[0,[12,29]]]],[0,[12,29]],29,[0,[0,7]]]],3],4],[[[41,[[14,[[0,[12,29]]]],[0,[12,29]],29,[0,[0,7]]]],3],4],[[[42,[[14,[[0,[12,29]]]],[0,[12,29]],[0,[0,7]]]],3],4],[[[43,[29,29,[0,[0,7]]]],3],4],[[[43,[29,29,[0,[0,7]]]],3],4],[[]],[[],[[8,[[0,[20,19]],44,[0,[22,0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[[0,[0,7]]]],45,24],[[9,[[0,[0,7]]]]]],[[[38,[[0,[0,7]]]],45,24],46],[28,[[8,[[0,[20,19]],[0,[21,22]],[0,[22,0,7]]]]]],[[[35,[[14,[[0,[19,20,12]]]],21,[0,[0,7]]]],[0,[19,20,12]]],[[9,[[14,[[0,[19,20,12]]]],21,[0,[0,7]]]]]],[[[38,[[14,[[0,[19,20,12]]]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[35,[[14,[[0,[20,12]]]],[0,[0,7]]]],45,[0,[20,12]]],[[9,[[14,[[0,[20,12]]]],[0,[0,7]]]]]],[[[38,[[14,[[0,[20,12]]]],[0,[0,7]]]],45,[0,[20,12]]],46],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[12,[0,[0,7]]]]]],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[36,[[0,[0,7]]]]]],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[36,[[0,[0,7]]]]]],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]]],46],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]]],46],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]]],46],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]]],46],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[12,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]]],[[[8,[[0,[20,19,[14,[[0,[20,19,12]]]]]],21,[0,[0,7]]]],[0,[20,19,12]]]],[[[8,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],46],[[[9,[19,21,[0,[0,7]]]],19],[[36,[19,21,[0,[0,7]]]]]],[[[36,[[0,[0,7]]]]]],[[[37,[19,21,[0,[0,7]]]],19]],[[[11,[19,21,[0,[0,7]]]]],[[39,[19,21,[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[40,[19,21,[0,[0,7]]]]]],[[[13,[[0,[19,[47,[12]]]],12,21,[0,[0,7]]]]],[[41,[[0,[19,[47,[12]]]],12,21,[0,[0,7]]]]]],[[[41,[12,[0,[0,7]]]]]],[[[42,[[0,[19,[47,[12]]]],12,21,[0,[0,7]]]]]],[[[37,[19,21,[0,[0,7]]]],45,19]],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]]],[[[37,[[0,[0,7]]]],45,48]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],16],[[[8,[[0,[0,7]]]]],30],[[[8,[[0,[0,7]]]]],[[31,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]]],[[[42,[[47,[12]],12,[0,[0,7]]]]],[[47,[12]]]],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[32,[[0,[0,7]]]]]],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[12,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[33,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],2],[[[8,[[0,[0,7]]]]],16],[[[8,[[0,[0,7]]]]],30],[[[36,[[0,[0,7]]]]]],[[[11,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]]],[[[13,[[14,[12]],12,[0,[0,7]]]]],12],[[[41,[[14,[12]],12,[0,[0,7]]]]],12],[[[42,[[14,[12]],12,[0,[0,7]]]]],12],[[[36,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],17],[[[8,[[0,[0,7]]]]],15],[16,15],[30,15],[[[31,[[0,[0,7]]]]],15],[[[32,[[0,[0,7]]]]],15],[[[33,[[0,[0,7]]]]],15],[17,15],[18,15],[[[23,[[0,[0,7]]]]],15],[34,15],[[],[[8,[44]]]],[[[0,[0,7]]],[[8,[44,[0,[0,7]]]]]],[16,46],[30,46],[[[31,[[0,[0,7]]]]],46],[[[32,[[0,[0,7]]]]],46],[[[33,[[0,[0,7]]]]],46],[17,46],[18,46],[[[23,[[0,[0,7]]]]],46],[[[25,[24,[0,[0,7]]]]],46],[34,46],[[[11,[19,22,21,[0,[0,7]]]]],22],[[[13,[[0,[19,[47,[12]]]],12,22,21,[0,[0,7]]]]],22],[[[9,[19,21,[0,[0,7]]]],19]],[[[11,[19,21,[0,[0,7]]]]]],[[[13,[[0,[19,[47,[12]]]],12,21,[0,[0,7]]]]]],[[[9,[19,21,[0,[0,7]]]],10]],[[[11,[19,21,[0,[0,7]]]],10]],[[[13,[[0,[19,[47,[12]]]],12,21,[0,[0,7]]]],10]],[[[11,[19,21,[0,[0,7]]]],10]],[[[13,[[0,[19,[14,[12]],[47,[12]]]],12,21,[0,[0,7]]]],10]],[[[8,[[0,[0,7]]]]],[[38,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[35,[[0,[0,7]]]]]],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[12,[0,[0,7]]]]]],[[[8,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],46],[[[36,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[12,[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[[47,[12]],12,[0,[0,7]]]]]],[[[36,[[0,[0,7]]]],10],[[9,[[0,[0,7]]]]]],[[[39,[[0,[0,7]]]],10],[[11,[[0,[0,7]]]]]],[[[41,[[14,[12]],12,[0,[0,7]]]],10],[[13,[[14,[12]],12,[0,[0,7]]]]]],[[[39,[[0,[0,7]]]]]],[[[41,[[47,[12]],12,[0,[0,7]]]]],[[47,[12]]]],[[[8,[[0,[20,19]],21,[0,[0,7]]]],15]],[[[8,[[0,[0,7]]]],24]],[[[8,[[0,[20,19]],21,[0,[0,7]]]],15]],[[[8,[[0,[20,19]],21,[0,[0,7]]]]]],[16],[30],[[[31,[[0,[0,7]]]]]],[[[32,[[0,[0,7]]]]]],[[[33,[[0,[0,7]]]]]],[17],[18],[[[23,[[0,[0,7]]]]]],[[[25,[24,[0,[0,7]]]]]],[34],[[]],[[]],[[]],[[]],[[],49],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[8,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],[[5,[[43,[[0,[20,19]],21,[0,[0,7]]]]]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[8,[[0,[20,19]],21,[0,[0,7]]]],15],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[8,[[0,[0,7]]]]],18],[[[8,[[0,[0,7]]]]],34],[15,[[8,[44]]]],[15,8],[[15,[0,[0,7]]],[[8,[[0,[0,7]]]]]],[[15,[0,[0,7]]],[[8,[44,[0,[0,7]]]]]],[[],8],[[[0,[0,7]]],[[8,[[0,[0,7]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[50,[[0,[0,7]]]]],[[0,[0,7]]]],[[[50,[[0,[20,19,7]],[0,[21,22]],[0,[0,7]]]],[50,[[0,[20,19,7]],[0,[21,22]],[0,[0,7]]]]],[[50,[[0,[20,19,7]],[0,[21,22]]]]]],[[[50,[[0,[20,19,7]],[0,[21,22]],[0,[0,7]]]],[50,[[0,[20,19,7]],[0,[21,22]],[0,[0,7]]]]],[[50,[[0,[20,19,7]],[0,[21,22]]]]]],[[[50,[[0,[20,19,7]],[0,[21,22]]]],[50,[[0,[20,19,7]],[0,[21,22]]]]],[[50,[[0,[20,19,7]],[0,[21,22]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[[0,[0,7]]]]],15],[[[50,[[0,[0,7]]]]]],[[[50,[7,7,[0,[0,7]]]]],[[50,[7,7,[0,[0,7]]]]]],[51,51],[[[52,[[0,[0,7]]]]],[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]],[[53,[[0,[0,7]]]]]],[[[54,[[0,[0,7]]]]],[[54,[[0,[0,7]]]]]],[[[55,[[0,[0,7]]]]],[[55,[[0,[0,7]]]]]],[[[50,[7,7,[0,[0,7]]]],[50,[7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],2],[[],[[50,[22,[0,[22,0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],[[53,[[0,[20,19]],21,[0,[0,7]]]]]],[[[50,[[0,[0,7]]]]],[[56,[[0,[0,7]]]]]],[[[50,[[0,[0,7]]]],24],[[57,[24,[0,[0,7]]]]]],[[[57,[24,[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],[[58,[[0,[20,19]],21,[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],2],[[[50,[[0,[20,19]],21,[0,[0,7]]]],28]],[[[50,[[0,[20,19,27]],21,[0,[0,7]]]],28]],[[[50,[29,[0,[0,7]]]],3],4],[[[51,[29]],3],4],[[[59,[29,[0,[0,7]]]],3],4],[[[56,[29,[0,[0,7]]]],3],4],[[[52,[[0,[29,20,19]],21,[0,[0,7]]]],3],4],[[[53,[[0,[29,20,19]],21,[0,[0,7]]]],3],4],[[[54,[[0,[29,20,19]],21,[0,[0,7]]]],3],4],[[[55,[[0,[29,20,19]],21,[0,[0,7]]]],3],4],[[[58,[29,[0,[0,7]]]],3],4],[[[60,[29,[0,[0,7]]]],3],4],[[[61,[29,[0,[0,7]]]],3],4],[[]],[[[8,[[0,[0,7]]]]],[[50,[[0,[0,7]]]]]],[[],[[50,[[0,[20,19]],44,[0,[22,0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,[[50,[[0,[20,19]],[0,[21,22]],[0,[22,0,7]]]]]],[[[50,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],[[46,[[14,[[0,[19,20,12]]]],[0,[20,19]]]]]],[[[58,[[0,[0,7]]]]]],[[[60,[[0,[0,7]]]]]],[[[61,[[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],[[0,[20,19]]]],[[[50,[[14,[[0,[19,20,62,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,62,12]]],[[14,[[0,[19,20,62,12]]]],[0,[20,19]]]],[[[50,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]],10],[[14,[[0,[19,20,12]]]],[0,[20,19]]]],[[[50,[[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],2],[[[58,[19,21,[0,[0,7]]]]],[[60,[19,21,[0,[0,7]]]]]],[[[61,[19,21,[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],[[0,[20,19]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],[[52,[[0,[20,19]],21,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[[0,[0,7]]]]],[[59,[[0,[0,7]]]]]],[[[50,[[0,[0,7]]]]],51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[61,[[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],2],[[[50,[[0,[0,7]]]]],2],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],2],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],2],[[[50,[[0,[0,7]]]]],51],[[[50,[[0,[0,7]]]]],15],[51,15],[[[59,[[0,[0,7]]]]],15],[[[56,[[0,[0,7]]]]],15],[[],[[50,[44]]]],[[[0,[0,7]]],[[50,[[0,[19,20]],44,[0,[0,7]]]]]],[51,46],[[[59,[[0,[0,7]]]]],46],[[[56,[[0,[0,7]]]]],46],[[[57,[24,[0,[0,7]]]]],46],[[[52,[[0,[20,19]],21,[0,[0,7]]]]],[[46,[[0,[20,19]]]]]],[[[53,[[0,[20,19]],21,[0,[0,7]]]]],[[46,[[0,[20,19]]]]]],[[[54,[[0,[20,19]],21,[0,[0,7]]]]],[[46,[[0,[20,19]]]]]],[[[55,[[0,[20,19]],21,[0,[0,7]]]]],[[46,[[0,[20,19]]]]]],[[[58,[19,21,[0,[0,7]]]]]],[[[50,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],2],[[[60,[[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[0,[20,19]]],[[46,[[0,[20,19]]]]]],[[[60,[[0,[0,7]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],15]],[[[50,[[0,[0,7]]]],24]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],15]],[[[50,[[0,[20,19]],21,[0,[0,7]]]]]],[51],[[[59,[[0,[0,7]]]]]],[[[56,[[0,[0,7]]]]]],[[[57,[24,[0,[0,7]]]]]],[[[52,[[0,[20,19]],21,[0,[0,7]]]]]],[[[53,[[0,[20,19]],21,[0,[0,7]]]]]],[[[54,[[0,[20,19]],21,[0,[0,7]]]]]],[[[55,[[0,[20,19]],21,[0,[0,7]]]]]],[[[50,[[0,[20,19,7]],[0,[21,22]]]],[50,[[0,[20,19,7]],[0,[21,22]]]]],[[50,[[0,[20,19,7]],[0,[21,22]]]]]],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],[[54,[[0,[20,19]],21,[0,[0,7]]]]]],[[[50,[[14,[[0,[19,20,12]]]],[0,[20,19]],21,[0,[0,7]]]],[0,[19,20,12]]],[[46,[[14,[[0,[19,20,12]]]],[0,[20,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[50,[[0,[20,19]],21,[0,[0,7]]]],15],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[50,[[0,[20,19]],21,[0,[0,7]]]],[50,[[0,[20,19]],21,[0,[0,7]]]]],[[55,[[0,[20,19]],21,[0,[0,7]]]]]],[15,[[50,[44]]]],[15,[[50,[0]]]],[[15,[0,[0,7]]],[[50,[[0,[0,7]]]]]],[[15,[0,[0,7]]],[[50,[[0,[19,20]],44,[0,[0,7]]]]]],[[],[[50,[0]]]],[[[0,[0,7]]],[[50,[[0,[0,7]]]]]]],"c":[],"p":[[4,"TryReserveError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"HashMap"],[4,"RawEntryMut"],[8,"FnOnce"],[4,"Entry"],[8,"Sized"],[4,"EntryRef"],[8,"Borrow"],[15,"usize"],[3,"Iter"],[3,"Keys"],[3,"Values"],[8,"Hash"],[8,"Eq"],[8,"BuildHasher"],[8,"Default"],[3,"Drain"],[8,"FnMut"],[3,"DrainFilter"],[8,"PartialEq"],[8,"Copy"],[8,"IntoIterator"],[8,"Debug"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"OccupiedEntryRef"],[3,"VacantEntryRef"],[3,"OccupiedError"],[6,"DefaultHashBuilder"],[15,"u64"],[4,"Option"],[8,"From"],[8,"Fn"],[3,"String"],[3,"HashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[3,"DrainFilter"],[4,"Entry"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"ToOwned"],[13,"AllocError"]]},\
"intrusive_collections":{"doc":"Intrusive collections for Rust.","t":"IEIDNNQIIQQCCCSQQIQCCCCCCNDQCCCKLLLLLLLLLLLLLLOLLLLLLLLLKLLLLLLLLLLLKKKLLLLLKLLLLLLLLLLLOKKALOKAKALLLLLLLLLLLLADDDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDNEDDEDDDDDNDINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Adapter","Bound","DefaultLinkOps","DefaultPointerOps","Excluded","Included","Key","KeyAdapter","LinkOps","LinkOps","LinkPtr","LinkedList","LinkedListAtomicLink","LinkedListLink","NEW","Ops","Pointer","PointerOps","PointerOps","RBTree","RBTreeAtomicLink","RBTreeLink","SinglyLinkedList","SinglyLinkedListAtomicLink","SinglyLinkedListLink","Unbounded","UnsafeRef","Value","XorLinkedList","XorLinkedListAtomicLink","XorLinkedListLink","acquire_link","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","container_of","default","deref","eq","fmt","fmt","from","from","from","from_box","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","get_key","get_link","get_value","hash","into","into","into","into_box","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","intrusive_adapter","link_ops","link_ops_mut","linked_list","new","offset_of","pointer_ops","rbtree","release_link","singly_linked_list","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","xor_linked_list","AtomicLink","AtomicLinkOps","Cursor","CursorMut","IntoIter","Iter","Link","LinkOps","LinkedList","LinkedListOps","acquire_link","acquire_link","as_cursor","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_pointer","cursor","cursor_from_ptr","cursor_mut","cursor_mut_from_ptr","default","default","default","default","default","drop","fast_clear","fmt","fmt","fmt","force_unlink","force_unlink","from","from","from","from","from","from","from","from","from","front","front_mut","get","get","insert_after","insert_before","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_ref","is_empty","is_linked","is_linked","is_null","is_null","iter","move_next","move_next","move_prev","move_prev","new","new","new","next","next","next","next","next","next","next","next","next","next_back","next_back","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_front","prev","prev","prev","prev","prev","push_back","push_front","release_link","release_link","remove","replace_next_or_prev","replace_next_or_prev","replace_with","set","set","set_next","set_next","set_next","set_next","set_next","set_prev","set_prev","set_prev","splice_after","splice_before","split_after","split_before","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AtomicLink","AtomicLinkOps","Black","Color","Cursor","CursorMut","Entry","InsertCursor","IntoIter","Iter","Link","LinkOps","Occupied","RBTree","RBTreeOps","Red","Vacant","acquire_link","acquire_link","as_cursor","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_pointer","color","color","color","cursor","cursor_from_ptr","cursor_mut","cursor_mut_from_ptr","default","default","default","default","default","drop","entry","eq","fast_clear","find","find_mut","fmt","fmt","fmt","fmt","force_unlink","force_unlink","from","from","from","from","from","from","from","from","from","from","from","from","front","front_mut","get","get","insert","insert","insert","insert_after","insert_before","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_ref","is_empty","is_linked","is_linked","is_null","is_null","iter","left","left","left","lower_bound","lower_bound_mut","move_next","move_next","move_prev","move_prev","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","or_insert","or_insert_with","parent","parent","parent","peek_next","peek_next","peek_prev","peek_prev","prev","prev","prev","prev","range","release_link","release_link","remove","replace_next_or_prev","replace_next_or_prev","replace_with","right","right","right","set","set","set_color","set_color","set_color","set_left","set_left","set_left","set_next","set_next","set_next","set_next","set_parent","set_parent","set_parent","set_prev","set_prev","set_right","set_right","set_right","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upper_bound","upper_bound_mut","AtomicLink","AtomicLinkOps","Cursor","CursorMut","IntoIter","Iter","Link","LinkOps","SinglyLinkedList","SinglyLinkedListOps","acquire_link","acquire_link","as_cursor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_pointer","cursor","cursor_from_ptr","cursor_mut","cursor_mut_from_ptr","default","default","default","default","default","drop","fast_clear","fmt","fmt","fmt","force_unlink","force_unlink","from","from","from","from","from","from","from","from","from","front","front_mut","get","get","insert_after","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_ref","is_empty","is_linked","is_linked","is_null","is_null","iter","move_next","move_next","new","new","new","next","next","next","next","next","next","next","peek_next","peek_next","pop_front","prev","prev","push_front","release_link","release_link","remove_next","replace_next_or_prev","replace_next_or_prev","replace_next_with","set","set","set_next","set_next","set_next","splice_after","split_after","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AtomicLink","AtomicLinkOps","Cursor","CursorMut","IntoIter","Iter","Link","LinkOps","XorLinkedList","XorLinkedListOps","acquire_link","acquire_link","as_cursor","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_pointer","cursor","cursor_from_ptr_and_next","cursor_from_ptr_and_prev","cursor_mut","cursor_mut_from_ptr_and_next","cursor_mut_from_ptr_and_prev","default","default","default","default","default","drop","fast_clear","fmt","fmt","fmt","force_unlink","force_unlink","from","from","from","from","from","from","from","from","from","front","front_mut","get","get","insert_after","insert_before","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_ref","is_empty","is_linked","is_linked","is_null","is_null","iter","move_next","move_next","move_prev","move_prev","new","new","new","next","next","next","next","next","next","next","next_back","next_back","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_front","prev","prev","prev","push_back","push_front","release_link","release_link","remove","replace_next_or_prev","replace_next_or_prev","replace_next_or_prev","replace_with","reverse","set","set","set","set_next","set_next","splice_after","splice_before","split_after","split_before","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"intrusive_collections"],[111,"intrusive_collections::linked_list"],[294,"intrusive_collections::rbtree"],[535,"intrusive_collections::singly_linked_list"],[695,"intrusive_collections::xor_linked_list"]],"d":["Trait for a adapter which allows a type to be inserted …","An endpoint of a range of keys.","The default implementation of <code>LinkOps</code> associated with a …","The <code>PointerOps</code> type used by an <code>Adapter</code> generated by …","An exclusive bound.","An inclusive bound.","Type of the key returned by <code>get_key</code>.","Extension of the <code>Adapter</code> trait to provide a way of …","Base trait for link operations.","Collection-specific link operations which allow an object …","The link pointer type.","","","","The associated constant that represents <code>Ops::default()</code>.","The default link operations.","Pointer type which owns an instance of a value.","Trait for pointer conversion operations.","Collection-specific pointer conversions which allow an …","","","","","","","An infinite endpoint. Indicates that there is no bound in …","Unchecked shared pointer","Object type which is inserted into an intrusive collection.","","","","Attempts to acquire ownership of a link so that it can be …","","","","","","","","","","","","","","","Unsafe macro to get a raw pointer to an outer object from …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an <code>UnsafeRef</code> from a <code>Box</code>","Constructs an owned pointer from a raw pointer.","Creates an <code>UnsafeRef</code> from a raw pointer","","","","","","","","","","","Gets the key for the given object.","Gets a reference to the link for the given object.","Gets a reference to an object from a reference to a link …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts an <code>UnsafeRef</code> into a <code>Box</code>","Consumes the owned pointer and returns a raw pointer to …","Converts an <code>UnsafeRef</code> into a raw pointer","","","","","","","","","","","Macro to generate an implementation of <code>Adapter</code> for a given …","Returns a reference to the link operations.","Returns a reference to the mutable link operations.","Intrusive doubly-linked list.","Constructs an instance of <code>DefaultPointerOps</code>.","Calculates the offset of the specified field from the …","Returns a reference to the pointer converter.","Intrusive red-black tree.","Releases ownership of a link that was previously acquired …","Intrusive singly-linked list.","","","","","","","","","","","","","Intrusive xor doubly-linked list which uses less memory …","Intrusive atomic link that allows an object to be inserted …","Default <code>AtomicLinkOps</code> implementation for <code>LinkedList</code>.","A cursor which provides read-only access to a <code>LinkedList</code>.","A cursor which provides mutable access to a <code>LinkedList</code>.","An iterator which consumes a <code>LinkedList</code>.","An iterator over references to the items of a <code>LinkedList</code>.","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>LinkedList</code>.","An intrusive doubly-linked list.","Link operations for <code>LinkedList</code>.","","","Returns a read-only cursor pointing to the current element.","Returns a <code>Cursor</code> pointing to the last element of the list. …","Returns a <code>CursorMut</code> pointing to the last element of the …","","","","","","","","","","","","","","","","","","","Removes all elements from the <code>LinkedList</code>.","","","","","","","","","","","","","Clones and returns the pointer that points to the element …","Returns a null <code>Cursor</code> for this list.","Creates a <code>Cursor</code> from a pointer to an element.","Returns a null <code>CursorMut</code> for this list.","Creates a <code>CursorMut</code> from a pointer to an element.","","","","","","","Empties the <code>LinkedList</code> without unlinking or freeing …","","","","Forcibly unlinks an object from a <code>LinkedList</code>.","Forcibly unlinks an object from a <code>LinkedList</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>LinkedList</code> after the …","Inserts a new element into the <code>LinkedList</code> before the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Consumes <code>CursorMut</code> and returns a reference to the object …","Returns <code>true</code> if the <code>LinkedList</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>LinkedList</code>.","Checks whether the <code>AtomicLink</code> is linked into a <code>LinkedList</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Creates a new <code>Link</code>.","Creates a new <code>AtomicLink</code>.","Creates an empty <code>LinkedList</code>.","Returns the “next” link pointer of <code>ptr</code>.","","","","","","","","","","","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the previous element of the …","Returns a cursor pointing to the previous element of the …","Removes the last element of the <code>LinkedList</code>.","Removes the first element of the <code>LinkedList</code>.","Returns the “prev” link pointer of <code>ptr</code>.","","","","","Inserts a new element at the end of the <code>LinkedList</code>.","Inserts a new element at the start of the <code>LinkedList</code>.","","","Removes the current element from the <code>LinkedList</code>.","","","Removes the current element from the <code>LinkedList</code> and …","","","Sets the “next” link pointer of <code>ptr</code>.","","","","","Sets the “prev” link pointer of <code>ptr</code>.","","","Inserts the elements from the given <code>LinkedList</code> after the …","Moves all element from the given <code>LinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","Takes all the elements out of the <code>LinkedList</code>, leaving it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>RBTree</code>.","","The color of a red-black tree node.","A cursor which provides read-only access to a <code>RBTree</code>.","A cursor which provides mutable access to a <code>RBTree</code>.","An entry in a <code>RBTree</code>.","A cursor pointing to a slot in which an element can be …","An iterator which consumes a <code>RBTree</code>.","An iterator over references to the items of a <code>RBTree</code>.","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>RBTree</code>.","An occupied entry.","An intrusive red-black tree.","Link operations for <code>RBTree</code>.","","A vacant entry.","","","Returns a read-only cursor pointing to the current element.","Returns a <code>Cursor</code> pointing to the last element of the tree. …","Returns a <code>CursorMut</code> pointing to the last element of the …","","","","","","","","","","","","","","","","","","","","","","","","","Removes all elements from the <code>RBTree</code>.","","","","","","","","","","","","","","","Clones and returns the pointer that points to the element …","Returns the color of <code>ptr</code>.","","","Returns a null <code>Cursor</code> for this tree.","Creates a <code>Cursor</code> from a pointer to an element.","Returns a null <code>CursorMut</code> for this tree.","Creates a <code>CursorMut</code> from a pointer to an element.","","","","","","","Returns an <code>Entry</code> for the given key which contains a …","","Empties the <code>RBTree</code> without unlinking or freeing objects in …","Returns a <code>Cursor</code> pointing to an element with the given …","Returns a <code>CursorMut</code> pointing to an element with the given …","","","","","Forcibly unlinks an object from a <code>RBTree</code>.","Forcibly unlinks an object from a <code>RBTree</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>RBTree</code>.","Inserts a new element into the <code>RBTree</code>.","Inserts a new element into the <code>RBTree</code> at the location …","Inserts a new element into the <code>RBTree</code> after the current …","Inserts a new element into the <code>RBTree</code> before the current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Consumes <code>CursorMut</code> and returns a reference to the object …","Returns <code>true</code> if the <code>RBTree</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>RBTree</code>.","Checks whether the <code>AtomicLink</code> is linked into a <code>RBTree</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>RBTree</code>.","Returns the left child of <code>ptr</code>.","","","Returns a <code>Cursor</code> pointing to the lowest element whose key …","Returns a <code>CursorMut</code> pointing to the first element whose …","Moves the cursor to the next element of the <code>RBTree</code>.","Moves the cursor to the next element of the <code>RBTree</code>.","Moves the cursor to the previous element of the <code>RBTree</code>.","Moves the cursor to the previous element of the <code>RBTree</code>.","Creates a new <code>Link</code>.","Creates a new <code>AtomicLink</code>.","Creates an empty <code>RBTree</code>.","","","","","","","","","","","Inserts an element into the <code>RBTree</code> if the entry is vacant, …","Calls the given function and inserts the result into the …","Returns the parent of <code>ptr</code>.","","","Returns a cursor pointing to the next element of the <code>RBTree</code>…","Returns a cursor pointing to the next element of the <code>RBTree</code>…","Returns a cursor pointing to the previous element of the …","Returns a cursor pointing to the previous element of the …","","","","","Constructs a double-ended iterator over a sub-range of …","","","Removes the current element from the <code>RBTree</code>.","","","Removes the current element from the <code>RBTree</code> and inserts …","Returns the right child of <code>ptr</code>.","","","","","Sets the color of <code>ptr</code>.","","","Sets the left child of <code>ptr</code>.","","","","","","","Sets the parent of <code>ptr</code>.","","","","","Sets the right child of <code>ptr</code>.","","","Takes all the elements out of the <code>RBTree</code>, leaving it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Cursor</code> pointing to the last element whose key is …","Returns a <code>CursorMut</code> pointing to the last element whose key …","Intrusive link that allows an object to be inserted into a …","Default <code>AtomicLinkOps</code> implementation for <code>LinkedList</code>.","A cursor which provides read-only access to a …","A cursor which provides mutable access to a …","An iterator which consumes a <code>SinglyLinkedList</code>.","An iterator over references to the items of a …","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>SinglyLinkedList</code>.","An intrusive singly-linked list.","Link operations for <code>SinglyLinkedList</code>.","","","Returns a read-only cursor pointing to the current element.","","","","","","","","","","","","","","","","","","","Removes all elements from the <code>SinglyLinkedList</code>.","","","","","","","","","","","","","Clones and returns the pointer that points to the element …","Returns a null <code>Cursor</code> for this list.","Creates a <code>Cursor</code> from a pointer to an element.","Returns a null <code>CursorMut</code> for this list.","Creates a <code>CursorMut</code> from a pointer to an element.","","","","","","","Empties the <code>SinglyLinkedList</code> without unlinking or freeing …","","","","Forcibly unlinks an object from a <code>SinglyLinkedList</code>.","Forcibly unlinks an object from a <code>SinglyLinkedList</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>SinglyLinkedList</code> after the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Consumes <code>CursorMut</code> and returns a reference to the object …","Returns <code>true</code> if the <code>SinglyLinkedList</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>SinglyLinkedList</code>.","Checks whether the <code>AtomicLink</code> is linked into a …","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>SinglyLinkedList</code>.","Moves the cursor to the next element of the …","Moves the cursor to the next element of the …","Creates a new <code>Link</code>.","Creates a new <code>AtomicLink</code>.","Creates an empty <code>SinglyLinkedList</code>.","Returns the “next” link pointer of <code>ptr</code>.","","","","","","","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the next element of the …","Removes the first element of the <code>SinglyLinkedList</code>.","","","Inserts a new element at the start of the <code>SinglyLinkedList</code>.","","","Removes the next element from the <code>SinglyLinkedList</code>.","","","Removes the next element from the <code>SinglyLinkedList</code> and …","","","Sets the “next” link pointer of <code>ptr</code>.","","","Inserts the elements from the given <code>SinglyLinkedList</code> after …","Splits the list into two after the current element. This …","Takes all the elements out of the <code>SinglyLinkedList</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Intrusive link that allows an object to be inserted into a …","Default <code>AtomicLinkOps</code> implementation for <code>LinkedList</code>.","A cursor which provides read-only access to a <code>XorLinkedList</code>…","A cursor which provides mutable access to a <code>XorLinkedList</code>.","An iterator which consumes a <code>XorLinkedList</code>.","An iterator over references to the items of a <code>XorLinkedList</code>…","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>XorLinkedList</code>.","Intrusive xor doubly-linked list which uses less memory …","Link operations for <code>XorLinkedList</code>.","","","Returns a read-only cursor pointing to the current element.","Returns a <code>Cursor</code> pointing to the last element of the list. …","Returns a <code>CursorMut</code> pointing to the last element of the …","","","","","","","","","","","","","","","","","","","Removes all elements from the <code>XorLinkedList</code>.","","","","","","","","","","","","","Clones and returns the pointer that points to the element …","Returns a null <code>Cursor</code> for this list.","Creates a <code>Cursor</code> from a pointer to an element and a …","Creates a <code>Cursor</code> from a pointer to an element and a …","Returns a null <code>CursorMut</code> for this list.","Creates a <code>CursorMut</code> from a pointer to an element and a …","Creates a <code>CursorMut</code> from a pointer to an element and a …","","","","","","","Empties the <code>XorLinkedList</code> without unlinking or freeing …","","","","Forcibly unlinks an object from a <code>XorLinkedList</code>.","Forcibly unlinks an object from a <code>XorLinkedList</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>XorLinkedList</code> after the …","Inserts a new element into the <code>XorLinkedList</code> before the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Consumes <code>CursorMut</code> and returns a reference to the object …","Returns <code>true</code> if the <code>XorLinkedList</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>XorLinkedList</code>.","Checks whether the <code>Link</code> is linked into a <code>XorLinkedList</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>XorLinkedList</code>.","Moves the cursor to the next element of the <code>XorLinkedList</code>.","Moves the cursor to the next element of the <code>XorLinkedList</code>.","Moves the cursor to the previous element of the …","Moves the cursor to the previous element of the …","Creates a new <code>Link</code>.","Creates a new <code>Link</code>.","Creates an empty <code>XorLinkedList</code>.","Returns the “next” link pointer of <code>ptr</code>.","","","","","","","","","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the previous element of the …","Returns a cursor pointing to the previous element of the …","Removes the last element of the <code>XorLinkedList</code>.","Removes the first element of the <code>XorLinkedList</code>.","Returns the “prev” link pointer of <code>ptr</code>.","","","Inserts a new element at the end of the <code>XorLinkedList</code>.","Inserts a new element at the start of the <code>XorLinkedList</code>.","","","Removes the current element from the <code>XorLinkedList</code>.","Replaces the “next” or “prev” link pointer of <code>ptr</code>.","","","Removes the current element from the <code>XorLinkedList</code> and …","Reverses the list in-place.","Assigns the “prev” and “next” link pointers of <code>ptr</code>.","","","","","Inserts the elements from the given <code>XorLinkedList</code> after …","Moves all element from the given <code>XorLinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","Takes all the elements out of the <code>XorLinkedList</code>, leaving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,6,6,40,0,0,21,64,0,0,0,65,65,66,0,21,0,0,0,0,0,0,6,0,66,0,0,0,64,3,3,3,4,6,3,4,6,3,4,6,3,4,6,0,4,3,6,3,6,3,4,6,3,66,3,4,4,4,4,4,4,4,4,4,4,40,21,21,6,3,4,6,3,66,3,4,4,4,4,4,4,4,4,4,4,0,21,21,0,4,0,21,0,64,0,3,4,6,3,4,6,3,4,6,3,4,6,0,0,0,0,0,0,0,0,0,0,0,19,20,22,24,24,25,26,23,22,24,27,30,19,20,25,26,23,22,24,27,30,19,20,24,25,26,23,27,19,20,25,26,23,27,19,20,23,24,24,24,24,25,26,24,19,20,24,24,25,26,24,25,26,25,26,23,22,24,27,30,19,20,24,24,23,22,22,22,25,26,23,22,24,27,30,19,20,24,24,27,30,22,24,25,26,23,22,24,23,22,23,22,25,26,24,67,27,30,19,19,19,20,20,20,27,30,23,22,23,22,24,24,67,19,19,20,20,24,24,19,20,22,19,20,22,19,20,67,19,19,20,20,67,19,20,22,22,22,22,24,25,26,23,27,19,20,25,26,23,22,24,27,30,19,20,25,26,23,22,24,27,30,19,20,25,26,23,22,24,27,30,19,20,0,0,39,0,0,0,0,0,0,0,0,0,42,0,0,39,42,31,32,33,35,35,36,37,34,33,35,43,42,38,44,39,31,32,36,37,34,33,35,43,42,38,44,39,31,32,35,36,37,34,38,39,31,32,36,37,34,38,39,31,32,34,68,31,32,35,35,35,35,36,37,35,31,32,35,35,39,35,35,35,36,37,35,39,36,37,36,37,34,33,35,43,42,38,44,39,31,32,35,35,34,33,33,35,43,33,33,36,37,34,33,35,43,42,38,44,39,31,32,35,35,38,44,33,35,36,37,34,33,35,68,31,32,35,35,34,33,34,33,36,37,35,38,44,31,31,31,32,32,32,38,44,42,42,68,31,32,34,33,34,33,31,31,32,32,35,31,32,33,31,32,33,68,31,32,31,32,68,31,32,68,31,32,31,31,32,32,68,31,32,31,32,68,31,32,35,36,37,34,38,39,31,32,36,37,34,33,35,43,42,38,44,39,31,32,36,37,34,33,35,43,42,38,44,39,31,32,36,37,34,33,35,43,42,38,44,39,31,32,35,35,0,0,0,0,0,0,0,0,0,0,46,47,48,51,52,49,48,50,53,54,46,47,51,52,49,48,50,53,54,46,47,50,51,52,49,53,46,47,51,52,49,53,46,47,49,50,50,50,50,51,52,50,46,47,50,50,51,52,50,51,52,51,52,49,48,50,53,54,46,47,50,50,49,48,48,51,52,49,48,50,53,54,46,47,50,50,53,54,48,50,51,52,49,48,50,49,48,51,52,50,69,53,54,46,46,47,47,49,48,50,46,47,50,46,47,48,46,47,48,46,47,69,46,47,48,48,50,51,52,49,53,46,47,51,52,49,48,50,53,54,46,47,51,52,49,48,50,53,54,46,47,51,52,49,48,50,53,54,46,47,0,0,0,0,0,0,0,0,0,0,55,56,57,59,59,60,61,58,57,59,62,63,55,56,60,61,58,57,59,62,63,55,56,59,60,61,58,62,55,56,60,61,58,62,55,56,58,59,59,59,59,59,59,60,61,59,55,56,59,59,60,61,59,60,61,60,61,58,57,59,62,63,55,56,59,59,58,57,57,57,60,61,58,57,59,62,63,55,56,59,59,62,63,57,59,60,61,58,57,59,58,57,58,57,60,61,59,70,62,63,55,55,56,56,62,63,58,57,58,57,59,59,70,55,56,59,59,55,56,57,70,55,56,57,59,70,55,56,55,56,57,57,57,57,59,60,61,58,62,55,56,60,61,58,57,59,62,63,55,56,60,61,58,57,59,62,63,55,56,60,61,58,57,59,62,63,55,56],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[[3,[2]]],2],[[[3,[2]]],2],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[2]]],[[3,[2]]]],[4,4],[[[6,[5]]],[[6,[5]]]],[[]],[[]],[[]],0,[[],4],[[[3,[2]]],2],[[[6,[7]],[6,[7]]],1],[[[3,[[0,[8,2]]]],9],10],[[[6,[8]],9],10],[[]],[[]],[[]],[[[11,[2]]],[[3,[2]]]],[[]],[[],[[3,[2]]]],[[[4,[[13,[[12,[2]]]]]]],[[13,[[12,[2]]]]]],[[[4,[[12,[2]]]]],[[12,[2]]]],[[[4,[[11,[2]]]]],[[11,[2]]]],[[[4,[[14,[2]]]]],[[14,[2]]]],[[[4,[[3,[2]]]]],[[3,[2]]]],[[[4,[[13,[[14,[2]]]]]]],[[13,[[14,[2]]]]]],[[[4,[[13,[2]]]]],[[13,[2]]]],[[[4,[[13,[[11,[2]]]]]]],[[13,[[11,[2]]]]]],[[[4,[2]]],2],[[[4,[[13,[[3,[2]]]]]]],[[13,[[3,[2]]]]]],[[]],[[]],[[]],[[[6,[15]],16]],[[]],[[]],[[]],[[[3,[2]]],[[11,[2]]]],[[]],[[[3,[2]]]],[[[4,[2]],2]],[[[4,[[14,[2]]]],[14,[2]]]],[[[4,[[11,[2]]]],[11,[2]]]],[[[4,[[3,[2]]]],[3,[2]]]],[[[4,[[13,[2]]]],[13,[2]]]],[[[4,[[12,[2]]]],[12,[2]]]],[[[4,[[13,[[12,[2]]]]]],[13,[[12,[2]]]]]],[[[4,[[13,[[14,[2]]]]]],[13,[[14,[2]]]]]],[[[4,[[13,[[11,[2]]]]]],[13,[[11,[2]]]]]],[[[4,[[13,[[3,[2]]]]]],[13,[[3,[2]]]]]],0,[[]],[[]],0,[[],4],0,[[]],0,[[]],0,[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,[19,1],[20,1],[[[22,[21]]],[[23,[21]]]],[[[24,[21]]],[[23,[21]]]],[[[24,[21]]],[[22,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[21]]]],[25,25],[26,26],[[[23,[21]]],[[23,[21]]]],[[[27,[21]]],[[27,[21]]]],[19,19],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[21]]],28],[[[24,[21]]],[[23,[21]]]],[[[24,[21]]],[[23,[21]]]],[[[24,[21]]],[[22,[21]]]],[[[24,[21]]],[[22,[21]]]],[[],25],[[],26],[[],[[24,[[0,[21,29]]]]]],[[],19],[[],20],[[[24,[21]]]],[[[24,[21]]]],[[25,9],10],[[26,9],10],[[[24,[21]],9],10],[25],[26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[21]]],[[23,[21]]]],[[[24,[21]]],[[22,[21]]]],[[[23,[21]]],28],[[[22,[21]]],28],[[[22,[21]]]],[[[22,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[21]]],[[30,[21]]]],[[[24,[21]]],[[27,[21]]]],[[]],[[]],[[[22,[21]]],28],[[[24,[21]]],1],[25,1],[26,1],[[[23,[21]]],1],[[[22,[21]]],1],[[[24,[21]]],[[27,[21]]]],[[[23,[21]]]],[[[22,[21]]]],[[[23,[21]]]],[[[22,[21]]]],[[],25],[[],26],[21,[[24,[21]]]],[[],28],[[[27,[21]]],28],[[[30,[21]]],28],[19,28],[19,28],[[19,28],28],[20,28],[20,28],[[20,28],28],[[[27,[21]]],28],[[[30,[21]]],28],[[[23,[21]]],[[23,[21]]]],[[[22,[21]]],[[23,[21]]]],[[[23,[21]]],[[23,[21]]]],[[[22,[21]]],[[23,[21]]]],[[[24,[21]]],28],[[[24,[21]]],28],[[],28],[[19,28],28],[19,28],[[20,28],28],[20,28],[[[24,[21]]]],[[[24,[21]]]],[19],[20],[[[22,[21]]],28],[[19,28,28]],[[20,28,28]],[[[22,[21]]],17],[[19,28,28]],[[20,28,28]],[28],[[19,28]],[[19,28]],[[20,28]],[[20,28]],[28],[[19,28]],[[20,28]],[[[22,[21]],[24,[21]]]],[[[22,[21]],[24,[21]]]],[[[22,[5,21]]],[[24,[5,21]]]],[[[22,[5,21]]],[[24,[5,21]]]],[[[24,[5,21]]],[[24,[5,21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[31,1],[32,1],[[[33,[21]]],[[34,[21]]]],[[[35,[21]]],[[34,[21]]]],[[[35,[21]]],[[33,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[21]]]],[36,36],[37,37],[[[34,[21]]],[[34,[21]]]],[[[38,[21]]],[[38,[21]]]],[39,39],[31,31],[32,32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[34,[21]]],28],[[],39],[31,39],[32,39],[[[35,[21]]],[[34,[21]]]],[[[35,[21]]],[[34,[21]]]],[[[35,[21]]],[[33,[21]]]],[[[35,[21]]],[[33,[21]]]],[[],36],[[],37],[[],[[35,[[0,[21,29]]]]]],[[],31],[[],32],[[[35,[21]]]],[[[35,[40]],[0,[2,41]]],[[42,[40]]]],[[39,39],1],[[[35,[21]]]],[[[35,[40]],[0,[2,41]]],[[34,[40]]]],[[[35,[40]],[0,[2,41]]],[[33,[40]]]],[[36,9],10],[[37,9],10],[[[35,[21]],9],10],[[39,9],10],[36],[37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[21]]],[[34,[21]]]],[[[35,[21]]],[[33,[21]]]],[[[34,[21]]],28],[[[33,[21]]],28],[[[33,[40]]]],[[[35,[40]]],[[33,[40]]]],[[[43,[21]]],[[33,[21]]]],[[[33,[21]]]],[[[33,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[21]]],[[44,[21]]]],[[[35,[21]]],[[38,[21]]]],[[]],[[]],[[[33,[21]]],28],[[[35,[21]]],1],[36,1],[37,1],[[[34,[21]]],1],[[[33,[21]]],1],[[[35,[21]]],[[38,[21]]]],[[],28],[31,28],[32,28],[[[35,[40]],[6,[[0,[2,41]]]]],[[34,[40]]]],[[[35,[40]],[6,[[0,[2,41]]]]],[[33,[40]]]],[[[34,[21]]]],[[[33,[21]]]],[[[34,[21]]]],[[[33,[21]]]],[[],36],[[],37],[21,[[35,[21]]]],[[[38,[21]]],28],[[[44,[21]]],28],[31,28],[[31,28],28],[31,28],[32,28],[32,28],[[32,28],28],[[[38,[21]]],28],[[[44,[21]]],28],[[[42,[21]]],[[33,[21]]]],[[[42,[21]],45],[[33,[21]]]],[[],28],[31,28],[32,28],[[[34,[21]]],[[34,[21]]]],[[[33,[21]]],[[34,[21]]]],[[[34,[21]]],[[34,[21]]]],[[[33,[21]]],[[34,[21]]]],[[31,28],28],[31,28],[[32,28],28],[32,28],[[[35,[40]],[6,[[0,[2,41]]]],[6,[[0,[2,41]]]]],[[38,[40]]]],[31],[32],[[[33,[21]]],28],[[31,28,28]],[[32,28,28]],[[[33,[21]]],17],[[],28],[31,28],[32,28],[[31,28,28]],[[32,28,28]],[39],[[31,39]],[[32,39]],[28],[[31,28]],[[32,28]],[[31,28]],[[31,28]],[[32,28]],[[32,28]],[28],[[31,28]],[[32,28]],[[31,28]],[[32,28]],[28],[[31,28]],[[32,28]],[[[35,[5,21]]],[[35,[5,21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[35,[40]],[6,[[0,[2,41]]]]],[[34,[40]]]],[[[35,[40]],[6,[[0,[2,41]]]]],[[33,[40]]]],0,0,0,0,0,0,0,0,0,0,[46,1],[47,1],[[[48,[21]]],[[49,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[21]]]],[51,51],[52,52],[[[49,[21]]],[[49,[21]]]],[[[53,[21]]],[[53,[21]]]],[46,46],[47,47],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[21]]],28],[[[50,[21]]],[[49,[21]]]],[[[50,[21]]],[[49,[21]]]],[[[50,[21]]],[[48,[21]]]],[[[50,[21]]],[[48,[21]]]],[[],51],[[],52],[[],[[50,[[0,[21,29]]]]]],[[],46],[[],47],[[[50,[21]]]],[[[50,[21]]]],[[51,9],10],[[52,9],10],[[[50,[21]],9],10],[51],[52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[21]]],[[49,[21]]]],[[[50,[21]]],[[48,[21]]]],[[[49,[21]]],28],[[[48,[21]]],28],[[[48,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[21]]],[[54,[21]]]],[[[50,[21]]],[[53,[21]]]],[[]],[[]],[[[48,[21]]],28],[[[50,[21]]],1],[51,1],[52,1],[[[49,[21]]],1],[[[48,[21]]],1],[[[50,[21]]],[[53,[21]]]],[[[49,[21]]]],[[[48,[21]]]],[[],51],[[],52],[21,[[50,[21]]]],[[],28],[[[53,[21]]],28],[[[54,[21]]],28],[46,28],[[46,28],28],[47,28],[[47,28],28],[[[49,[21]]],[[49,[21]]]],[[[48,[21]]],[[49,[21]]]],[[[50,[21]]],28],[[46,28],28],[[47,28],28],[[[50,[21]]]],[46],[47],[[[48,[21]]],28],[[46,28,28]],[[47,28,28]],[[[48,[21]]],17],[[46,28,28]],[[47,28,28]],[28],[[46,28]],[[47,28]],[[[48,[21]],[50,[21]]]],[[[48,[5,21]]],[[50,[5,21]]]],[[[50,[5,21]]],[[50,[5,21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,[55,1],[56,1],[[[57,[21]]],[[58,[21]]]],[[[59,[21]]],[[58,[21]]]],[[[59,[21]]],[[57,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[59,[21]]]],[60,60],[61,61],[[[58,[21]]],[[58,[21]]]],[[[62,[21]]],[[62,[21]]]],[55,55],[56,56],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[21]]],28],[[[59,[21]]],[[58,[21]]]],[[[59,[21]]],[[58,[21]]]],[[[59,[21]]],[[58,[21]]]],[[[59,[21]]],[[57,[21]]]],[[[59,[21]]],[[57,[21]]]],[[[59,[21]]],[[57,[21]]]],[[],60],[[],61],[[],[[59,[[0,[21,29]]]]]],[[],55],[[],56],[[[59,[21]]]],[[[59,[21]]]],[[60,9],10],[[61,9],10],[[[59,[21]],9],10],[60],[61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[59,[21]]],[[58,[21]]]],[[[59,[21]]],[[57,[21]]]],[[[58,[21]]],28],[[[57,[21]]],28],[[[57,[21]]]],[[[57,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[59,[21]]],[[63,[21]]]],[[[59,[21]]],[[62,[21]]]],[[]],[[]],[[[57,[21]]],28],[[[59,[21]]],1],[60,1],[61,1],[[[58,[21]]],1],[[[57,[21]]],1],[[[59,[21]]],[[62,[21]]]],[[[58,[21]]]],[[[57,[21]]]],[[[58,[21]]]],[[[57,[21]]]],[[],60],[[],61],[21,[[59,[21]]]],[28,28],[[[62,[21]]],28],[[[63,[21]]],28],[[55,28],28],[55,28],[[56,28],28],[56,28],[[[62,[21]]],28],[[[63,[21]]],28],[[[58,[21]]],[[58,[21]]]],[[[57,[21]]],[[58,[21]]]],[[[58,[21]]],[[58,[21]]]],[[[57,[21]]],[[58,[21]]]],[[[59,[21]]],28],[[[59,[21]]],28],[28,28],[[55,28],28],[[56,28],28],[[[59,[21]]]],[[[59,[21]]]],[55],[56],[[[57,[21]]],28],[[28,28]],[[55,28,28]],[[56,28,28]],[[[57,[21]]],17],[[[59,[21]]]],[[28,28]],[[55,28,28]],[[56,28,28]],[[55,28]],[[56,28]],[[[57,[21]],[59,[21]]]],[[[57,[21]],[59,[21]]]],[[[57,[5,21]]],[[59,[5,21]]]],[[[57,[5,21]]],[[59,[5,21]]]],[[[59,[5,21]]],[[59,[5,21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18]],"c":[],"p":[[15,"bool"],[8,"Sized"],[3,"UnsafeRef"],[3,"DefaultPointerOps"],[8,"Clone"],[4,"Bound"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Box"],[3,"Rc"],[3,"Pin"],[3,"Arc"],[8,"Hash"],[8,"Hasher"],[4,"Result"],[3,"TypeId"],[3,"LinkOps"],[3,"AtomicLinkOps"],[8,"Adapter"],[3,"CursorMut"],[3,"Cursor"],[3,"LinkedList"],[3,"Link"],[3,"AtomicLink"],[3,"Iter"],[4,"Option"],[8,"Default"],[3,"IntoIter"],[3,"LinkOps"],[3,"AtomicLinkOps"],[3,"CursorMut"],[3,"Cursor"],[3,"RBTree"],[3,"Link"],[3,"AtomicLink"],[3,"Iter"],[4,"Color"],[8,"KeyAdapter"],[8,"Ord"],[4,"Entry"],[3,"InsertCursor"],[3,"IntoIter"],[8,"FnOnce"],[3,"LinkOps"],[3,"AtomicLinkOps"],[3,"CursorMut"],[3,"Cursor"],[3,"SinglyLinkedList"],[3,"Link"],[3,"AtomicLink"],[3,"Iter"],[3,"IntoIter"],[3,"LinkOps"],[3,"AtomicLinkOps"],[3,"CursorMut"],[3,"Cursor"],[3,"XorLinkedList"],[3,"Link"],[3,"AtomicLink"],[3,"Iter"],[3,"IntoIter"],[8,"LinkOps"],[8,"DefaultLinkOps"],[8,"PointerOps"],[8,"LinkedListOps"],[8,"RBTreeOps"],[8,"SinglyLinkedListOps"],[8,"XorLinkedListOps"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLLL","n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":[[0,"itoa"]],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[],1],[[1,2],3],[[]],[[]],[[],1],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"Buffer"],[8,"Integer"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"lai":{"doc":"","t":"DNENINNNNNNNNMLLMMMLLLLLLLLFLLLFFLLLLLLLLFLLLLMMLLLLLLLLLLLLLLFLLFLLFLLLLLLLLMLL","n":["AcpiResource","EndReached","Error","ExecutionFailure","Host","IllegalArguments","NoSuchNode","None","NotSupported","OutOfBounds","OutOfMemory","TypeMismatch","UnexpectedResult","address_space","alloc","alloc","base","bit_offset","bit_width","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_namespace","dealloc","dealloc","default","enable_acpi","enter_sleep","fmt","fmt","from","from","inb","inb","ind","ind","init","into","into","inw","inw","irq_flags","length","map","map","outb","outb","outd","outd","outw","outw","pci_readb","pci_readb","pci_readd","pci_readd","pci_readw","pci_readw","pci_route_pin","realloc","realloc","reset","scan","scan","set_acpi_revision","sleep","sleep","to_owned","to_owned","try_from","try_from","try_into","try_into","ty","type_id","type_id"],"q":[[0,"lai"]],"d":["","Error given when end of iterator is reached, nothing to …","","","","","","","","","","","Evaluating external inputs (e.g., nodes of the ACPI …","","","","","","","","","","","","","","","Creates the ACPI namespace.","","","","Enables ACPI SCI.","Enters a sleeping state.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Initializes the ACPI revision.","","","","","","","","","","",""],"i":[0,4,0,4,0,4,4,4,4,4,4,4,4,3,9,9,3,3,3,3,4,3,4,3,4,3,4,0,9,9,3,0,0,3,4,3,4,9,9,9,9,0,3,4,9,9,3,3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,0,9,9,0,9,9,3,4,3,4,3,4,3,3,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[]],[[2,1]],[[2,1]],[[],3],[5],[2],[[3,6],7],[[4,6],7],[[]],[[]],[8,2],[8,2],[8,5],[8,5],[[[10,[9]]]],[[]],[[]],[8,8],[8,8],0,0,[[1,1],2],[[1,1],2],[[8,2]],[[8,2]],[[8,5]],[[8,5]],[[8,8]],[[8,8]],[[8,2,2,2,8],2],[[8,2,2,2,8],2],[[8,2,2,2,8],5],[[8,2,2,2,8],5],[[8,2,2,2,8],8],[[8,2,2,2,8],8],[[8,2,2,2,2],[[12,[[11,[3]],4]]]],[[2,1,1],2],[[2,1,1],2],[[]],[[13,1],2],[[13,1],2],[14],[15],[15],[[]],[[]],[[],12],[[],12],[[],12],[[],12],0,[[],16],[[],16]],"c":[],"p":[[15,"usize"],[15,"u8"],[3,"AcpiResource"],[4,"Error"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"u16"],[8,"Host"],[3,"Arc"],[3,"Box"],[4,"Result"],[15,"str"],[15,"i32"],[15,"u64"],[3,"TypeId"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":"IFO","n":["LazyStatic","initialize","lazy_static"],"q":[[0,"lazy_static"]],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[1],0],"c":[],"p":[[8,"LazyStatic"]]},\
"limine":{"doc":"Rust crate for parsing the limine boot protocol structures.","t":"NNNDDDDNDDDDDDDDDNDDDDSSSSSSSSSSSSSSSSSDDNDDDDDDDEDDDDNDDDDDDDDDDDDNDMMMMLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLMMMLMMLLMMMMLMMMMLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLMMLMMLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMML","n":["AcpiNvs","AcpiReclaimable","BadMemory","BootInfoRequest","BootInfoResponse","BootTimeRequest","BootTimeResponse","BootloaderReclaimable","DtbRequest","DtbResponse","EfiSystemTableRequest","EfiSystemTableResponse","EntryPoint","EntryPointRequest","EntryPointResponse","File","Framebuffer","Framebuffer","FramebufferRequest","FramebufferResponse","HhdmRequest","HhdmResponse","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","ID","KernelAddressRequest","KernelAddressResponse","KernelAndModules","KernelFileRequest","KernelFileResponse","Level5PagingRequest","Level5PagingResponse","MemmapEntry","MemmapRequest","MemmapResponse","MemoryMapEntryType","ModuleRequest","ModuleResponse","NonNullPtr","Ptr","Reserved","RsdpRequest","RsdpResponse","SmbiosRequest","SmbiosResponse","SmpInfo","SmpRequest","SmpResponse","StackSizeRequest","StackSizeResponse","Terminal","TerminalRequest","TerminalResponse","Usable","Uuid","a","address","address","address","as_ptr","as_ptr","b","base","base","blue_mask_shift","blue_mask_size","boot_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpp","bsp_lapic_id","c","callback","callback","clone","clone","cmdline","cols","cpu_count","cpus","cpus","d","deref","deref_mut","dtb_ptr","edid","edid_size","entries","entry","entry","entry_32","entry_64","entry_count","eq","eq","extra_argument","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer","framebuffer_count","framebuffers","framebuffers","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_mut","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","get_response","goto_address","gpt_disk_uuid","gpt_part_uuid","green_mask_shift","green_mask_size","hash","height","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kernel_file","lapic_id","len","length","mbr_disk_id","media_type","memmap","memmap_mut","memory_model","module_count","modules","modules","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","offset","part_uuid","partition_index","path","physical_base","pitch","processor_id","red_mask_shift","red_mask_size","reserved","reserved","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","revision","rows","size","stack_size","stack_size","terminal_count","terminals","terminals","tftp_ip","tftp_port","to_str","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unused","version","virtual_base","width","write"],"q":[[0,"limine"]],"d":["","","","","","","","","","Notes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The kernel and modules loaded are not marked as usable …","","","The presence of this request will prompt the bootloader to …","","","","","","","","<code>NonNull</code> with the dereference traits implemented.","","","","","","","","The presence of this request will prompt the bootloader to …","","","","","Omitting this request will cause the bootloader to not …","","","","","","Address of the RSDP table.","Address of EFI system table.","","","","The address of the file.","","","","The UNIX time on boot, in seconds, taken from the system …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Local APIC ID of the bootstrap processor.","","","","","","A command line associated with the file.","Number of columns provided by the terminal.","How many CPUs are present. It includes the bootstrap …","Return’s the SMP info array pointer as a mutable rust …","Pointer to an array of <code>cpu_count</code> pointers to struct <code>SmpInfo</code>","","","","Virtual pointer to the device tree blob.","","","Pointer to an array of <code>entry_count</code> pointers to struct …","The requested entry point.","","Address of the 32-bit SMBIOS entry point. NULL if not …","Address of the 64-bit SMBIOS entry point. NULL if not …","How many memory map entries are present.","","","A free for use field.","Bit 0: Enable X2APIC, if possible.","Bit 0: X2APIC has been enabled.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The framebuffer associated with this terminal.","How many framebuffers are present.","","Pointer to an array of <code>framebuffer_count</code> pointers to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","An atomic write to this field causes the parked CPU to …","If non-0, this is the UUID of the disk the file was loaded …","If non-0, this is the UUID of the partition the file was …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pointer to the struct <code>File</code> structure for the kernel file.","Local APIC ID of the processor as specified by the MADT.","","The size of the file.","If non-0, this is the ID of the disk the file was loaded …","Type of media file resides on.","","","","How many modules are present.","","Pointer to an array of <code>module_count</code> pointers to struct <code>File</code>…","Null-terminated string containing the name of the …","","","","","","","","","","","","","","","","","","","The virtual address offset of the beginning of the higher …","If non-0, this is the UUID of the filesystem of the …","1-based partition index of the volume from which the file …","The path of the file within the volume, with a leading …","The physical base address of the kernel.","","ACPI Processor UID as specified by the MADT.","","","","","Revision of this structure.","","","","","","","","","","","","","","","","","","Number of rows provided by the terminal.","Returns the size of the framebuffer.","The requested stack size (also used for SMP processors).","","How many terminals are present.","","Pointer to an array of <code>terminal_count</code> pointers to struct …","If non-0, this is the IP of the TFTP server the file was …","Likewise, but port.","Converts the  string pointer into a rust string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Null-terminated string containg the version of the …","The virtual base address of the kernel.","",""],"i":[6,6,6,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,18,20,22,25,4,29,11,33,8,36,38,40,42,44,46,48,50,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,5,23,39,43,1,2,5,16,31,23,23,45,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,23,7,5,4,4,5,6,16,26,7,7,7,5,1,1,49,23,23,32,8,8,41,41,32,5,6,30,11,7,11,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,26,24,24,24,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,2,2,18,20,22,25,4,29,11,33,8,36,38,40,42,44,46,48,50,30,16,16,23,23,5,23,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,35,30,31,16,16,16,32,32,23,37,37,37,17,2,18,20,22,25,4,29,11,33,8,36,38,40,42,44,46,48,50,21,16,16,16,47,23,30,23,23,23,30,16,17,19,21,24,27,28,7,32,34,35,37,39,41,43,45,47,49,26,23,20,20,27,27,27,16,16,2,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,31,1,2,9,5,16,17,18,19,20,21,22,23,24,25,26,27,4,28,29,30,7,11,6,31,32,33,34,8,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,16,17,47,23,27],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[2,3],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[4,2],4],0,[5,5],[6,6],0,0,0,[7],0,0,[1],[1],0,0,0,0,[[8,[2,[9]]],8],0,0,0,0,[[5,5],10],[[6,6],10],0,[[11,12],11],0,0,[[[1,[13]],14],15],[[[2,[13]],14],15],[[9,14],15],[[5,14],15],[[16,14],15],[[17,14],15],[[18,14],15],[[19,14],15],[[20,14],15],[[21,14],15],[[22,14],15],[[23,14],15],[[24,14],15],[[25,14],15],[[26,14],15],[[27,14],15],[[4,14],15],[[28,14],15],[[29,14],15],[[30,14],15],[[7,14],15],[[11,14],15],[[6,14],15],[[31,14],15],[[32,14],15],[[33,14],15],[[34,14],15],[[8,14],15],[[35,14],15],[[36,14],15],[[37,14],15],[[38,14],15],[[39,14],15],[[40,14],15],[[41,14],15],[[42,14],15],[[43,14],15],[[44,14],15],[[45,14],15],[[46,14],15],[[47,14],15],[[48,14],15],[[49,14],15],[[50,14],15],0,0,[24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,3],[2,3],[18,[[2,[17]]]],[20,[[2,[19]]]],[22,[[2,[21]]]],[25,[[2,[24]]]],[4,[[2,[27]]]],[29,[[2,[28]]]],[11,[[2,[7]]]],[33,[[2,[32]]]],[8,[[2,[34]]]],[36,[[2,[35]]]],[38,[[2,[37]]]],[40,[[2,[39]]]],[42,[[2,[41]]]],[44,[[2,[43]]]],[46,[[2,[45]]]],[48,[[2,[47]]]],[50,[[2,[49]]]],0,0,0,0,0,[[5,51]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[32],[32],0,0,[37],0,0,[[],[[2,[9]]]],[52,18],[52,20],[52,22],[52,25],[52,4],[52,29],[52,11],[52,33],[52,8],[52,36],[52,38],[52,40],[52,42],[52,44],[52,46],[52,48],[52,50],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,53],[[20,52],20],0,0,[27],0,0,0,[[[2,[54]]],[[3,[55]]]],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],0,[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],[[],57],0,0,0,0,[27,[[3,[58]]]]],"c":[],"p":[[3,"NonNullPtr"],[3,"Ptr"],[4,"Option"],[3,"TerminalRequest"],[3,"Uuid"],[4,"MemoryMapEntryType"],[3,"SmpResponse"],[3,"EntryPointRequest"],[3,"EntryPoint"],[15,"bool"],[3,"SmpRequest"],[15,"u32"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"File"],[3,"BootInfoResponse"],[3,"BootInfoRequest"],[3,"StackSizeResponse"],[3,"StackSizeRequest"],[3,"HhdmResponse"],[3,"HhdmRequest"],[3,"Framebuffer"],[3,"FramebufferResponse"],[3,"FramebufferRequest"],[3,"Terminal"],[3,"TerminalResponse"],[3,"Level5PagingResponse"],[3,"Level5PagingRequest"],[3,"SmpInfo"],[3,"MemmapEntry"],[3,"MemmapResponse"],[3,"MemmapRequest"],[3,"EntryPointResponse"],[3,"KernelFileResponse"],[3,"KernelFileRequest"],[3,"ModuleResponse"],[3,"ModuleRequest"],[3,"RsdpResponse"],[3,"RsdpRequest"],[3,"SmbiosResponse"],[3,"SmbiosRequest"],[3,"EfiSystemTableResponse"],[3,"EfiSystemTableRequest"],[3,"BootTimeResponse"],[3,"BootTimeRequest"],[3,"KernelAddressResponse"],[3,"KernelAddressRequest"],[3,"DtbResponse"],[3,"DtbRequest"],[8,"Hasher"],[15,"u64"],[15,"usize"],[6,"c_char"],[3,"CStr"],[4,"Result"],[3,"TypeId"],[8,"Fn"]]},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOKLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLKOOFLLLLLLFLLLLLLLLLLLLLLFFFLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,20,4,4,6,6,8,7,11,0,1,3,1,3,20,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,20,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[4,17]],[[6,17]],[[8,17]],[[7,17]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[19]]]],[[3,[12,[19]]],3],[1],0,0,[[],20],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,4],[[12,[9]]]],[[4,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[20,[[16,[15]]]],[20,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0],"c":[],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Hasher"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"lru":{"doc":"An implementation of a LRU cache. The cache supports <code>get</code>, …","t":"GDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DefaultHasher","IntoIter","Iter","IterMut","LruCache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cap","clear","clone","clone_into","contains","count","count","count","demote","drop","fmt","from","from","from","from","get","get_mut","get_or_insert","get_or_insert_mut","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","new","next","next","next","next_back","next_back","peek","peek_lru","peek_mut","pop","pop_entry","pop_lru","promote","push","put","resize","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unbounded","unbounded_with_hasher","with_hasher"],"q":[[0,"lru"]],"d":["","An iterator that moves out of a <code>LruCache</code>.","An iterator over the entries of a <code>LruCache</code>.","An iterator over mutables entries of a <code>LruCache</code>.","An LRU Cache","","","","","","","","","Returns the maximum number of key-value pairs the cache …","Clears the contents of the cache.","","","Returns a bool indicating whether the given key is in the …","","","","Marks the key as the least recently used one.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value of the key in the cache …","Returns a mutable reference to the value of the key in the …","Returns a reference to the value of the key in the cache …","Returns a mutable reference to the value of the key in the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns a bool indicating whether the cache is empty or …","An iterator visiting all entries in most-recently used …","An iterator visiting all entries in most-recently-used …","Returns the number of key-value pairs that are currently …","Creates a new LRU Cache that holds at most <code>cap</code> items.","","","","","","Returns a reference to the value corresponding to the key …","Returns the value corresponding to the least recently used …","Returns a mutable reference to the value corresponding to …","Removes and returns the value corresponding to the key …","Removes and returns the key and the value corresponding to …","Removes and returns the key and value corresponding to the …","Marks the key as the most recently used one.","Pushes a key-value pair into the cache. If an entry with …","Puts a key-value pair into cache. If the key already …","Resizes the cache. If the new capacity is smaller than the …","","","","","","","","","","","","","","","","","Creates a new LRU Cache that never automatically evicts …","Creates a new LRU Cache that never automatically evicts …","Creates a new LRU Cache that holds at most <code>cap</code> items and …"],"i":[0,0,0,0,0,4,6,10,11,4,6,10,11,4,4,6,6,4,6,10,11,4,4,4,4,6,10,11,4,4,4,4,4,6,10,11,4,4,4,6,10,11,4,4,4,4,4,6,10,11,6,10,4,4,4,4,4,4,4,4,4,4,6,10,11,6,4,6,10,11,4,6,10,11,4,6,10,11,4,4,4],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]],3]]],5],[[[4,[[0,[1,2]],3]]]],[6,6],[[]],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],8],[6,9],[10,9],[[[11,[[0,[1,2]]]]],9],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]]],[4],[[[4,[[0,[1,2]]]],12],13],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2]],15]],[[[4,[[0,[1,2]],3]],[0,[1,2]],15]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]],3]]],[[10,[[0,[1,2]]]]]],[[[4,[[0,[1,2]],3]]],[[6,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[11,[[0,[1,2]]]]]],[[]],[[]],[[]],[[[4,[[0,[1,2]],3]]],8],[[[4,[[0,[1,2]],3]]],[[6,[[0,[1,2]]]]]],[[[4,[[0,[1,2]],3]]],[[10,[[0,[1,2]]]]]],[[[4,[[0,[1,2]],3]]],9],[5,[[4,[[0,[1,2]]]]]],[6,14],[10,14],[[[11,[[0,[1,2]]]]],14],[6,14],[10,14],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],14],[[[4,[[0,[1,2]],3]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]],14],[[[4,[[0,[1,2]],3]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2,7]]]],[[[4,[[0,[1,2]],3]],[0,[1,2]]],14],[[[4,[[0,[1,2]],3]],[0,[1,2]]],14],[[[4,[[0,[1,2]],3]],5]],[6],[10],[[[11,[[0,[1,2]]]]]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],[[4,[[0,[1,2]]]]]],[3,[[4,[[0,[1,2]],3]]]],[[5,3],[[4,[[0,[1,2]],3]]]]],"c":[],"p":[[8,"Hash"],[8,"Eq"],[8,"BuildHasher"],[3,"LruCache"],[3,"NonZeroUsize"],[3,"Iter"],[8,"Sized"],[15,"bool"],[15,"usize"],[3,"IterMut"],[3,"IntoIter"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"FnOnce"],[4,"Result"],[3,"TypeId"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":"OOO","n":["offset_of","raw_field","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCECQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACACLLLLLLCIIIKKKKIIIIKFKLLLLKLLLLKLLLLLLKLLLLKLLKKKKKKKKKKIIKKLKLKKKLLLKKLLKKLLLLLLLKLKKKKKLLLLKKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i16","from_i32","from_i64","from_i8","from_isize","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i16","to_i32","to_i64","to_i8","to_isize","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[85,"num_traits::bounds"],[92,"num_traits::cast"],[123,"num_traits::float"],[173,"num_traits::identities"],[183,"num_traits::int"],[203,"num_traits::ops"],[210,"num_traits::ops::checked"],[226,"num_traits::ops::euclid"],[232,"num_traits::ops::inv"],[235,"num_traits::ops::mul_add"],[240,"num_traits::ops::overflowing"],[246,"num_traits::ops::saturating"],[255,"num_traits::ops::wrapping"],[267,"num_traits::pow"],[272,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,36,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,36,0,0,2,5,5,0,0,0,0,0,0,2,5,2,5,2,5,0,0,0,0,37,38,37,39,0,0,0,0,40,0,10,41,41,41,41,41,41,41,41,41,41,41,41,12,12,12,12,12,12,12,12,12,12,12,12,42,42,42,42,42,42,42,42,42,42,0,0,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,30,31,0,30,30,31,0,31,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,33,47,48,49,50,51,0,0,52,52,53,53,0,54,54,0,0,55,55,56,0,0,0,57,58,59,0,0,0,0,60,61,62,60,63,0,0,0,0,0,0,64,65,66,67,68,69,70,0,0,0,70,0,0,0,35,0,35,35,35,0,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[10,[[11,[10]]]],[12,11],[13,11],[14,11],[15,11],[16,11],[17,11],[18,11],[19,11],[20,11],[7,11],[21,11],[22,11],[23,11],[[],[[11,[13]]]],[[],[[11,[14]]]],[[],[[11,[15]]]],[[],[[11,[16]]]],[[],[[11,[17]]]],[[],[[11,[18]]]],[[],[[11,[19]]]],[[],[[11,[20]]]],[[],[[11,[7]]]],[[],[[11,[21]]]],[[],[[11,[22]]]],[[],[[11,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],[[0,[24,[25,[[0,[24,[25,[[0,[24,[25,[[0,[24,[25,[[0,[24,25]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[24,[25,[[0,[24,[25,[[0,[24,[25,[[0,[24,[25,[[0,[24,25]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[24,[26,[[0,[24,[26,[[0,[24,[26,[[0,[24,[26,[[0,[24,26]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[],27],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[29,28],[[],28],[[],30],[[]],[[]],[[]],[[],31],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[7,11],[7,11],[[],11],0,0,[[],11],[[],11],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[32,30,33]],23],[[11,[[0,[32,30,33]]]]]],[[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,34]]]]]]]]]]]]]]]]]],23],[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,34]]]]]]]]]]]]]]]]]]]],[[]],0,0,[35,35],[[]],[[35,35],35],[[]],[[],28],[[],28],[35,35],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"]]},\
"once_cell":{"doc":"Overview","t":"AADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","unsync","OnceBool","OnceBox","OnceNonZeroUsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","drop","fmt","fmt","fmt","from","from","from","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","new","new","new","set","set","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[2,"once_cell::race"],[48,"once_cell::unsync"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,14,16,14,16,14,14,14,14,16,16,16,14,14,16,16,16,14,14,14,16,14,16,14,16,14,14,14,16,14,16,14,16,14,14,14,14,16,14,14,16,14,16,14],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[1],[[1,4],5],[[2,4],5],[[3,4],5],[[]],[[]],[[]],[1,6],[2,[[6,[7]]]],[3,[[6,[8]]]],[[1,9]],[[2,9],7],[[3,9],8],[[1,9],10],[[2,9],[[10,[7]]]],[[3,9],[[10,[8]]]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[1,11],[[10,[11]]]],[[2,7],10],[[3,8],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[13]]]],[[[14,[13]],[14,[13]]]],[[]],[[],14],[[],[[16,[15]]]],[[[16,[9]]]],[[[16,[9]]]],[[[14,[17]],[14,[17]]],8],[[[14,[18]],4],5],[[[16,[18]],4],5],[[[16,[9]]]],[[[16,[9]]]],[[]],[19],[[],14],[[]],[14,6],[[[16,[9]]],6],[14,6],[[[16,[9]]],6],[[14,9]],[[14,9],10],[[]],[[]],[14,6],[16,10],[[],14],[[],16],[14,10],[14,6],[[]],[[],10],[[],10],[14,10],[[],10],[[],10],[[],12],[[],12],[[],14]],"c":[],"p":[[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[8,"FnOnce"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"PartialEq"],[8,"Debug"],[15,"never"]]},\
"raw_cpuid":{"doc":"A library to parse the x86 CPUID instruction, written in …","t":"NDENNNNNRNDDEDDENDDNDDENNNDNNNDDDEEDDDDDDNNNNEDNNNNNDDDDDNDDNDNNNNNDDNNDDDDDDNNNDDNNNDEDDDDNDNDNDEDNNNNNNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["ACRN","ApmInfo","Associativity","Avx","Avx512Opmask","Avx512ZmmHi16","Avx512ZmmHi256","Bhyve","CACHE_INFO_TABLE","Cache","CacheInfo","CacheInfoIter","CacheInfoType","CacheParameter","CacheParametersIter","CacheType","Core","CpuId","CpuIdResult","DTLB","DatInfo","DatIter","DatType","Data","DataTLB","Die","DirectCacheAccessInfo","DirectMapped","Disabled","Epc","EpcSection","ExtendedFeatures","ExtendedProcessorFeatureIdentifiers","ExtendedRegisterStateLocation","ExtendedRegisterType","ExtendedState","ExtendedStateInfo","ExtendedStateIter","ExtendedTopologyIter","ExtendedTopologyLevel","FeatureInfo","FullyAssociative","General","Hdc","HyperV","Hypervisor","HypervisorInfo","Ia32Xss","Instruction","InstructionTLB","Invalid","KVM","L1CacheTlbInfo","L2And3CacheTlbInfo","L2CatInfo","L3CatInfo","L3MonitoringInfo","LoadOnly","MemBwAllocationInfo","MemoryEncryptionInfo","Module","MonitorMwaitInfo","MpxBndcsr","MpxBndregs","NWay","Null","Null","PerformanceMonitoringInfo","PerformanceOptimizationInfo","Pkru","Prefetch","ProcessorBrandString","ProcessorCapacityAndFeatureInfo","ProcessorFrequencyInfo","ProcessorSerial","ProcessorTopologyInfo","ProcessorTraceInfo","Pt","QEMU","QNX","RdtAllocationInfo","RdtMonitoringInfo","Reserved","SMT","STLB","SgxInfo","SgxSectionInfo","SgxSectionIter","SoCVendorAttributesIter","SoCVendorBrand","SoCVendorInfo","StoreOnly","SvmFeatures","TLB","ThermalPowerInfo","Tile","Tlb1gbPageInfo","TopologyType","TscInfo","Unified","UnifiedTLB","Unknown","Unknown","Unknown","Unknown","VMware","VendorInfo","Xcr0","Xen","all_zero","apic_frequency","apic_id_size","as_str","as_str","as_str","as_string","as_string","associativity","base_family_id","base_model_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brand_id","brand_index","bus_frequency","c_bit_position","cache_level","cache_type","cache_type","capacity_mask_length","capacity_mask_length","cflush_cache_line_size","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","coherency_line_size","configurable_address_ranges","conversion_factor","core_id","counter_bit_width","cpu_pwr_sample_time_ratio","cpuid","dcache_associativity","dcache_line_size","dcache_lines_per_tag","dcache_size","default","denominator","desc","dtlb_2m_4m_associativity","dtlb_2m_4m_associativity","dtlb_2m_4m_size","dtlb_2m_4m_size","dtlb_4k_associativity","dtlb_4k_associativity","dtlb_4k_size","dtlb_4k_size","dtlb_l1_1gb_associativity","dtlb_l1_1gb_size","dtlb_l2_1gb_associativity","dtlb_l2_1gb_size","dts_irq_threshold","eax","ebx","ebx_length","ecx","edx","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extended_family_id","extended_model_id","extended_signature","extensions_supported","family_id","fixed_function_counters","fixed_function_counters_bit_width","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_advanced_power_mgmt_info","get_cache_info","get_cache_parameters","get_dca_cap_value","get_deterministic_address_translation_info","get_direct_cache_access_info","get_extended_feature_info","get_extended_processor_and_feature_identifiers","get_extended_state_info","get_extended_topology_info","get_extended_topology_info_v2","get_feature_info","get_hypervisor_info","get_l1_cache_and_tlb_info","get_l2_l3_cache_and_tlb_info","get_memory_encryption_info","get_monitor_mwait_info","get_performance_monitoring_info","get_performance_optimization_info","get_processor_brand_string","get_processor_capacity_feature_info","get_processor_frequency_info","get_processor_serial","get_processor_topology_info","get_processor_trace_info","get_project_id","get_rdt_allocation_info","get_rdt_monitoring_info","get_sgx_info","get_soc_vendor_id","get_soc_vendor_info","get_stepping_id","get_svm_info","get_thermal_power_info","get_tlb_1gb_page_info","get_tsc_info","get_vendor_attributes","get_vendor_brand","get_vendor_info","guest_physical_address_bits","has_100mhz_steps","has_1gb_entries","has_1gib_pages","has_2mb_entries","has_3dnow","has_4k_entries","has_4mb_entries","has_64bit_mode","has_64bit_mode","has_acpi","has_addr_mask_extension","has_adx","has_aesni","has_alt_mov_cr8","has_alternate_injection","has_amd_3dnow_extensions","has_any_thread_deprecation","has_apic","has_arat","has_av512vbmi2","has_avic","has_avx","has_avx2","has_avx512_ifma","has_avx512bitalg","has_avx512bw","has_avx512cd","has_avx512dq","has_avx512er","has_avx512f","has_avx512pf","has_avx512vl","has_avx512vnni","has_avx512vpopcntdq","has_bmi1","has_bmi2","has_cet_ss","has_cl_zero","has_clflush","has_clflushopt","has_clwb","has_cmov","has_cmp_legacy","has_cmpxchg16b","has_cmpxchg8b","has_cnxtid","has_code_data_prioritization","has_complex_indexing","has_configurable_psb_and_cycle_accurate_mode","has_cpb","has_cpl","has_data_access_bkpt_extension","has_dca","has_de","has_debug_swap","has_decode_assists","has_ds","has_ds_area","has_dts","has_ecmd","has_eist","has_encls_leaves_etrackc_erdinfo_eldbc_elduc","has_enclv_leaves_einvirtchild_edecvirtchild_esetcontext","has_energy_bias_pref","has_execute_disable","has_ext_apic_space","has_f16c","has_fast_fxsave_fxstor","has_fdp","has_feedback_iface","has_flexible_hwp","has_flush_by_asid","has_fma","has_fma4","has_fp128","has_fp256","has_fpu","has_fpu_cs_ds_deprecated","has_freq_id_ctrl","has_fsgsbase","has_fxsave_fxstor","has_gfni","has_gif","has_gmet","has_hdc","has_hle","has_host_mce_override","has_htt","has_hw_coord_feedback","has_hw_enforced_cache_coh","has_hw_pstate","has_hwa","has_hwp","has_hwp_activity_window","has_hwp_capabilities","has_hwp_energy_performance_preference","has_hwp_fast_access_mode","has_hwp_notification","has_hwp_package_level_request","has_hwp_peci_override","has_hypervisor","has_ibs","has_ignore_idle_processor_hwp_request","has_inst_ret_cntr_msr","has_int_wbinvd","has_invariant_tsc","has_invlpgb","has_invlpgb_nested","has_invpcid","has_ip_tracestop_filtering","has_l2_cat","has_l3_cat","has_l3_monitoring","has_la57","has_lahf_sahf","has_lbr_virtualization","has_linear_response_delay","has_lip_with_cs_base","has_local_bandwidth_monitoring","has_lwp","has_lzcnt","has_mca","has_mca_overflow_recovery","has_mce","has_mcommit","has_memory_bandwidth_allocation","has_misaligned_sse_mode","has_mmx","has_mmx_extensions","has_monitor_mwait","has_monitorx_mwaitx","has_movbe","has_movu","has_mpx","has_msr","has_mtc_timing_packet_coefi_suppression","has_mtrr","has_nb_perf_cntr_extensions","has_nested_paging","has_nrip","has_occupancy_monitoring","has_ospke","has_osvw","has_oxsave","has_pae","has_page_flush_msr","has_pat","has_pause_filter","has_pause_filter_threshold","has_pbe","has_pcid","has_pclmulqdq","has_pdcm","has_perf_cntr_extensions","has_perf_cntr_llc_extensions","has_perf_tsc","has_pge","has_pku","has_pln","has_popcnt","has_power_event_trace","has_power_reporting_iface","has_prefetchw","has_prefetchwt1","has_prevent_host_ibs","has_processor_trace","has_pse","has_pse36","has_psn","has_ptm","has_ptwrite","has_rdpid","has_rdpru","has_rdrand","has_rdseed","has_rdta","has_rdtm","has_rdtscp","has_rep_movsb_stosb","has_restore_fp_error_ptrs","has_restricted_injection","has_ro_effective_freq_iface","has_rtit_cr3_match","has_rtm","has_sev","has_sev_es","has_sev_snp","has_sgx","has_sgx1","has_sgx2","has_sgx_lc","has_sha","has_single_range_output_scheme","has_skinit","has_smap","has_sme","has_smep","has_smx","has_spec_ctrl","has_ss","has_sse","has_sse2","has_sse3","has_sse41","has_sse42","has_sse4a","has_sss_check","has_ssse3","has_succor","has_svm","has_svm_lock","has_syscall_sysret","has_sysenter_sysexit","has_tbm","has_thermtrip","has_tlb_ctrl","has_tm","has_tm","has_tm2","has_tme_en","has_topa","has_topa_maximum_entries","has_topology_extensions","has_total_bandwidth_monitoring","has_trace_transport_subsystem","has_ts","has_tsc","has_tsc_adjust_msr","has_tsc_deadline","has_tsc_rate_msr","has_turbo_boost","has_turbo_boost3","has_umip","has_unsupported_efer_lmsle","has_vaes","has_vmcb_clean_bits","has_vme","has_vmpl","has_vmsave_virtualization","has_vmx","has_volt_id_ctrl","has_vpclmulqdq","has_vte","has_waitpkg","has_wbnoinvd","has_wdt","has_x2apic","has_xgetbv","has_xop","has_xsave","has_xsavec","has_xsaveopt","has_xsaves_xrstors","highest_cos","highest_cos","highest_cos","ia32_xss_supports_hdc","ia32_xss_supports_pt","icache_associativity","icache_line_size","icache_lines_per_tag","icache_size","identify","initial_local_apic_id","interrupts_as_break_event","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invlpgb_max_pages","is_branch_inst_ret_ev_unavailable","is_branch_midpred_ev_unavailable","is_cache_ref_ev_unavailable","is_compacted_format","is_core_cyc_ev_unavailable","is_fully_associative","is_fully_associative","is_in_ia32_xss","is_in_xcr0","is_inclusive","is_inst_ret_ev_unavailable","is_ll_cache_miss_ev_unavailable","is_ref_cycle_ev_unavailable","is_self_initializing","is_write_back_invalidate","isolation_bitmap","isolation_bitmap","iter","iter","itlb_2m_4m_associativity","itlb_2m_4m_associativity","itlb_2m_4m_size","itlb_2m_4m_size","itlb_4k_associativity","itlb_4k_associativity","itlb_4k_size","itlb_4k_size","itlb_l1_1gb_associativity","itlb_l1_1gb_size","itlb_l2_1gb_associativity","itlb_l2_1gb_size","l2_cat","l2cache_associativity","l2cache_line_size","l2cache_lines_per_tag","l2cache_size","l3_cat","l3_monitoring","l3cache_associativity","l3cache_line_size","l3cache_lines_per_tag","l3cache_size","largest_monitor_line","level","level_number","level_type","linear_address_bits","location","mawau_value","max_addressable_ids","max_cores_for_cache","max_cores_for_package","max_enclave_size_64bit","max_enclave_size_non_64bit","max_encrypted_guests","max_hba_throttling","max_logical_processor_ids","max_rdpru_id","maximum_logical_processors","maximum_rmid_range","memory_bandwidth_allocation","min_sev_no_es_asid","miscselect","model_id","native_cpuid","new","next","next","next","next","next","next","next","node_id","nodes_per_processor","nominal_frequency","num","num_phys_threads","number_of_counters","numerator","offset","partitioning","perf_tsc_size","physical_address_bits","physical_address_reduction","physical_base","physical_line_partitions","pkg_type","processor_base_frequency","processor_max_frequency","processors","register","revision","rmid_range","secs_attributes","serial","serial_all","serial_lower","serial_middle","serial_upper","sets","sets","shift_right_for_next_apic_id","size","size","smallest_monitor_line","stepping_id","subleaf","supported_asids","supported_c0_states","supported_c1_states","supported_c2_states","supported_c3_states","supported_c4_states","supported_c5_states","supported_c6_states","supported_c7_states","supported_cycle_threshold_value_encodings","supported_mtc_period_encodings","supported_psb_frequency_encodings","threads_per_core","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tsc_frequency","tsc_frequency","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version_id","ways","with_cpuid_fn","x2apic_id","x2apic_id","xcr0_supports_avx512_opmask","xcr0_supports_avx512_zmm_hi16","xcr0_supports_avx512_zmm_hi256","xcr0_supports_avx_256","xcr0_supports_legacy_x87","xcr0_supports_mpx_bndcsr","xcr0_supports_mpx_bndregs","xcr0_supports_pkru","xcr0_supports_sse_128","xsave_area_size_enabled_features","xsave_area_size_supported_features","xsave_size","cpuid_count"],"q":[[0,"raw_cpuid"],[1126,"raw_cpuid::native_cpuid"]],"d":["","Processor Power Management and RAS Capabilities …","Info about cache Associativity.","","","","","","This table is taken from Intel manual (Section CPUID …","","Describes any kind of cache (TLB, Data and Instruction …","Iterates over cache information (LEAF=0x02).","What type of cache are we dealing with?","Information about an individual cache in the hierarchy.","Iterator over caches (LEAF=0x04).","Info about a what a given cache caches (instructions, …","","The main type used to query information about the CPU we’…","Low-level data-structure to store result of cpuid …","","Deterministic Address Translation Structure","Deterministic Address Translation Structure Iterator …","Deterministic Address Translation cache type (EDX bits 04 …","Data cache","","","Direct cache access info (LEAF=0x09).","","","","EBX:EAX and EDX:ECX provide information on the Enclave …","Structured Extended Feature Identifiers (LEAF=0x07).","Extended Processor and Processor Feature Identifiers …","Where the extended register state is stored.","What kidn of extended register state this is.","ExtendedState subleaf structure for things that need to be …","Information for saving/restoring extended register state …","Yields ExtendedState structs.","Information about topology (LEAF=0x0B).","Gives information about the current level in the topology.","Processor and Processor Feature Identifiers (LEAF=0x01).","","","","","Identifies the different Hypervisor products.","Information about Hypervisor (LEAF=0x4000_0001)","","Instruction cache","","","","L1 Cache and TLB Information (LEAF=0x8000_0005).","L2/L3 Cache and TLB Information (LEAF=0x8000_0006).","L2 Cache Allocation Technology Enumeration Sub-leaf …","L3 Cache Allocation Technology Enumeration Sub-leaf …","Information about L3 cache monitoring.","","Memory Bandwidth Allocation Enumeration Sub-leaf …","Encrypted Memory Capabilities (LEAF=0x8000_001F).","","Information about how monitor/mwait works on this CPU …","","","","Null - No more caches","Null (indicates this sub-leaf is not valid).","Info about performance monitoring – how many counters …","Performance Optimization Identifier (LEAF=0x8000_001A).","","","Processor name (LEAF=0x8000_0002..=0x8000_0004).","Processor Capacity Parameters and Extended Feature …","Processor Frequency Information (LEAF=0x16).","Processor Serial Number (LEAF=0x3).","Processor Topology Information (LEAF=0x8000_001E).","Intel Processor Trace Information (LEAF=0x14).","","QEMU is the hypervisor identity when QEMU is used without …","","Quality of service enforcement information (LEAF=0x10).","Intel Resource Director Technology RDT (LEAF=0x0F).","4-31 = Reserved","Hyper-thread (Simultaneous multithreading)","","Intel SGX Capability Enumeration Leaf (LEAF=0x12).","Intel SGX EPC Enumeration Leaf","Iterator over the SGX sub-leafs (ECX &gt;= 2).","Iterator for SoC vendor attributes.","A vendor brand string as queried from the cpuid leaf.","SoC vendor specific information (LEAF=0x17).","","Information about the SVM features that the processory …","","Query information about thermal and power management …","","TLB 1-GiB Pages Information (LEAF=0x8000_0019).","What type of core we have at this level in the topology …","Time Stamp Counter/Core Crystal Clock Information …","Data and Instruction cache","Some unified TLBs will allow a single TLB entry to satisfy …","","","","","","Vendor Info String (LEAF=0x0)","","","","(Virtual) Bus (local apic timer) frequency in kHz.","APIC ID size.","Return the processor brand string as a rust string.","Return vendor identification as human readable string.","Return the SocVendorBrand as a string.","","","Ways of associativity (Bits 31-22)","Version Information: Family","Version Information: Model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns brand ID on AMD.","Brand Index","Bus (Reference) Frequency (in MHz).","C-bit location in page table entry","Translation cache level (starts at 1)","Translation cache type field.","Cache Type","Length of the capacity bit mask.","Length of the capacity bit mask.","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)","","","","","","","","","","","","System Coherency Line Size (Bits 11-00)","Number of configurable Address Ranges for filtering (Bits …","Conversion factor from reported IA32_QM_CTR value to …","Core ID","Bit width of general-purpose, performance monitoring …","Specifies the ratio of the compute unit power accumulator …","Macro which queries cpuid directly.","L1 data cache associativity.","L1 data cache line size in bytes.","L1 data cache lines per tag.","L1 data cache size in KB","","An unsigned integer which is the denominator of the …","Description of the cache (from Intel Manual)","Data TLB associativity for 2-MB and 4-MB pages.","L2 Data TLB associativity for 2-MB and 4-MB pages.","Data TLB number of entries for 2-MB and 4-MB pages.","L2 Data TLB number of entries for 2-MB and 4-MB pages.","Data TLB associativity for 4K pages.","L2 Data TLB associativity for 4K pages.","Data TLB number of entries for 4K pages.","L2 Data TLB number of entries for 4K pages.","L1 Data TLB associativity for 1-GB pages.","L1 Data TLB number of entries for 1-GB pages.","L2 Data TLB associativity for 1-GB pages.","L2 Data TLB number of entries for 1-GB pages.","Number of Interrupt Thresholds in Digital Thermal Sensor","Return value EAX register","Return value EBX register","Length of EBX bit vector to enumerate architectural …","Return value ECX register","Return value EDX register","","","","","","","","","","","","","","","","","","","","","","","","","","","Version Information: Extended Family","Version Information: Extended Model","Extended Processor Signature.","Enumeration of Monitor-Mwait extensions (beyond EAX and …","","Number of fixed-function performance counters (if Version …","Bit width of fixed-function performance counters (if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Advanced Power Management Information (LEAF=0x8000_0007).","Query basic information about caches (LEAF=0x02).","Retrieve more elaborate information about caches …","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address …","Query deterministic address translation feature …","Direct cache access info (LEAF=0x09).","Find out about more features supported by this CPU …","Extended Processor and Processor Feature Identifiers …","Information for saving/restoring extended register state …","Information about topology (LEAF=0x0B).","Extended information about topology (LEAF=0x1F).","Query a set of features that are available on this CPU …","Returns information provided by the hypervisor, if running …","L1 Instruction Cache Information (LEAF=0x8000_0005)","L2/L3 Cache and TLB Information (LEAF=0x8000_0006).","Informations about memory encryption support …","Information about how monitor/mwait works on this CPU …","Info about performance monitoring (LEAF=0x0A).","Informations about performance optimization …","Retrieve processor brand string (LEAF=0x8000_000{2..4}).","Processor Capacity Parameters and Extended Feature …","Processor Frequency Information (LEAF=0x16).","Retrieve serial number of processor (LEAF=0x03).","Informations about processor topology (LEAF=0x8000_001E)","Intel Processor Trace Enumeration Information (LEAF=0x14).","","Quality of service enforcement information (LEAF=0x10).","Quality of service monitoring information (LEAF=0x0F).","Information about secure enclave support (LEAF=0x12).","","Contains SoC vendor specific information (LEAF=0x17).","","This function provides information about the SVM features …","Query information about thermal and power management …","TLB 1-GiB Pages Information (LEAF=0x8000_0019)","Time Stamp Counter/Core Crystal Clock Information …","","","Return information about the vendor (LEAF=0x00).","Guest Physical Address Bits","Has 100 MHz multiplier Control?","1GB page size entries supported by this structure","Is there support for 1GiB pages.","2MB page size entries supported by this structure","3DNow extensions.","4K page size entries supported by this structure","4MB page size entries supported by this structure","Check support for 64-bit mode.","SEV guest execution only allowed from a 64-bit host if set.","Thermal Monitor and Software Controlled Clock Facilities. …","Breakpoint Addressing masking extended to bit 31.","Supports ADX.","A value of 1 indicates that the processor supports the …","LOCK MOV CR0 means MOV CR8. See “MOV(CRn)” in APM3.","Alternate Injection supported if set.","3DNow AMD extensions.","AnyThread deprecation","APIC On-Chip. The processor contains an Advanced …","ARAT. APIC-Timer-always-running feature is supported if …","AVX512VBMI2","Support for the AMD advanced virtual interrupt controller …","A value of 1 indicates the processor supports the AVX …","AVX2","AVX512_IFMA","AVX512BITALG","AVX512BW","AVX512CD","Supports AVX512DQ.","AVX512ER","Supports AVX512F.","AVX512PF","AVX512VL","AVX512VNNI","AVX512VPOPCNTDQ","BMI1","BMI2","Supports CET shadow stack features. Processors that set …","CLZERO instruction supported if set.","CLFLUSH Instruction. CLFLUSH Instruction is supported.","Supports CLFLUSHOPT.","CLWB","Conditional Move Instructions. The conditional move …","Check support legacy cmp.","CMPXCHG16B Available. A value of 1 indicates that the …","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes …","L1 Context ID. A value of 1 indicates the L1 data cache …","Is Code and Data Prioritization Technology supported?","Complex Cache Indexing (Bit 2) False: Direct mapped cache. …","If true, Indicates support of Configurable PSB and …","Has Core performance boost?","CPL Qualified Debug Store. A value of 1 indicates the …","Data access breakpoint extension.","A value of 1 indicates the processor supports the ability …","Debugging Extensions. Support for I/O breakpoints, …","Full debug state swap supported for SEV-ES guests.","Indicates support for the decode assists if set.","Debug Store. The processor supports the ability to write …","64-bit DS Area. A value of 1 indicates the processor …","Digital temperature sensor is supported if set.","ECMD. Clock modulation duty cycle extension is supported …","Enhanced Intel SpeedStep® technology. A value of 1 …","Supports ENCLS instruction leaves ETRACKC, ERDINFO, ELDBC, …","Supports ENCLV instruction leaves EINCVIRTCHILD, …","The processor supports performance-energy bias preference …","Is there support for execute disable bit.","Extended APIC space.","A value of 1 indicates that processor supports 16-bit …","FXSAVE and FXRSTOR instruction optimizations.","FDP_EXCPTN_ONLY. x87 FPU Data Pointer updated only on x87 …","Indicates support for processor feedback interface.","Flexible HWP is supported if set.","Indicates that TLB flush events, including CR3 writes and …","A value of 1 indicates the processor supports FMA …","Four-operand FMA instruction support.","The internal FP/SIMD execution datapath is 128 bits wide …","The internal FP/SIMD execution datapath is 256 bits wide …","Floating Point Unit On-Chip. The processor contains an x87 …","Deprecates FPU CS and FPU DS values if 1.","Frequency ID control.","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if …","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR …","GFNI","GIF – virtualized global interrupt flag if set.","Guest Mode Execution Trap supported if set.","HDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, …","HLE","When host <code>CR4.MCE=1</code> and guest <code>CR4.MCE=0</code>, machine check …","Max APIC IDs reserved field is Valid. A value of 0 for HTT …","Hardware Coordination Feedback Capability","Hardware cache coherency across encryption domains …","Has Hardware P-state control?","Has Hardware assert supported?","HWP. HWP base registers (IA32_PM_ENABLE[bit 0], …","HWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …","HWP Capabilities. Highest Performance change is supported …","HWP Energy Performance Preference. IA32_HWP_REQUEST[bits …","Fast access mode for the IA32_HWP_REQUEST MSR is supported …","HWP Notification. IA32_HWP_INTERRUPT MSR is supported if …","HWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …","HWP PECI override is supported if set.","A value of 1 indicates the indicates the presence of a …","Instruction based sampling.","Ignoring Idle Logical Processor HWP request is supported …","Instruction Retired Counter MSR available if set.","WBINVD/WBNOINVD are interruptible if set.","Is Invariant TSC available?","INVLPGB and TLBSYNC instruction supported if set.","INVLPGB support for invalidating guest nested translations …","INVPCID. If 1, supports INVPCID instruction for system …","If true, Indicates support of IP Filtering, TraceStop …","Supports L2 Cache Allocation.","Supports L3 Cache Allocation.","Supports L3 Cache Intel RDT Monitoring.","Supports 57-bit linear addresses and five-level paging if …","Is LAHF/SAHF available in 64-bit mode?","Indicates support for LBR Virtualization.","Reports whether the response of the delay values is linear.","If true, Generated packets which contain IP payloads have …","Supports local bandwidth monitoring.","Lightweight profiling support","Is LZCNT available?","Machine Check Architecture. A value of 1 indicates the …","Is MCA overflow recovery available?","Machine Check Exception. Exception 18 is defined for …","MCOMMIT instruction supported if set.","Supports Memory Bandwidth Allocation.","Misaligned SSE mode. See “Misaligned Access Support …","Intel MMX Technology. The processor supports the Intel MMX …","AMD extensions to MMX instructions.","MONITOR/MWAIT. A value of 1 indicates the processor …","Support for MWAITX and MONITORX instructions.","A value of 1 indicates that the processor supports MOVBE …","MOVU (Move Unaligned) SSE instructions are efficient more …","MPX. Supports Intel Memory Protection Extensions if 1.","Model Specific Registers RDMSR and WRMSR Instructions. The …","If true, Indicates support of MTC timing packet and …","Memory Type Range Registers. MTRRs are supported. The …","NB performance counter extensions support.","Nested paging supported if set.","Indicates support for NRIP save on #VMEXIT if set.","Supports occupancy monitoring.","OS has set CR4.PKE to enable protection keys (and the …","Indicates OS-visible workaround support","A value of 1 indicates that the OS has enabled …","Physical Address Extension. Physical addresses greater …","The Page Flush MSR is available if set.","Page Attribute Table. Page Attribute Table is supported. …","Indicates support for the pause intercept filter if set.","Indicates support for the PAUSE filter cycle count …","Pending Break Enable. The processor supports the use of …","Process-context identifiers. A value of 1 indicates that …","PCLMULQDQ. A value of 1 indicates the processor supports …","Perfmon and Debug Capability: A value of 1 indicates the …","Processor performance counter extensions support.","Support for L3 performance counter extension.","Performance time-stamp counter.","Page Global Bit. The global bit is supported in …","Supports protection keys for user-mode pages.","PLN. Power limit notification controls are supported if …","A value of 1 indicates that the processor supports the …","Support of Power Event Trace. Writes can set IA32_RTIT_CTL…","Has Processor power reporting interface?","Is PREFETCHW available?","Has PREFETCHWT1 (Intel® Xeon Phi™ only).","Disallowing IBS use by the host supported if set.","Supports Intel Processor Trace.","Page Size Extension. Large pages of size 4 MByte are …","36-Bit Page Size Extension. 4-MByte pages addressing …","Processor Serial Number. The processor supports the 96-bit …","PTM. Package thermal management is supported if set.","Indicates support of PTWRITE. Writes can set IA32_RTIT_CTL…","RDPID and IA32_TSC_AUX are available.","RDPRU instruction supported if set.","A value of 1 indicates that processor supports RDRAND …","Supports RDSEED.","Supports Intel Resource Director Technology (RDT) …","Supports Intel Resource Director Technology (RDT) …","Check support for rdtscp instruction.","Supports Enhanced REP MOVSB/STOSB if 1.","FP Error Pointers Restored by XRSTOR if set.","Restricted Injection supported if set.","Has Read-only effective frequency interface?","If true, Indicates that IA32_RTIT_CTL.CR3Filter can be set …","RTM","Secure Encrypted Virtualization is supported if set.","SEV Encrypted State is supported if set.","SEV Secure Nested Paging supported if set.","Supports Intel® Software Guard Extensions (Intel® SGX …","Has SGX1 support.","Has SGX2 support.","Supports SGX Launch Configuration.","Supports SHA Instructions.","If true, Indicates support of Single-Range Output scheme.","SKINIT and STGI are supported.","SMAP. Supports Supervisor-Mode Access Prevention (and the …","Secure Memory Encryption is supported if set.","SMEP. Supports Supervisor-Mode Execution Prevention if 1.","Safer Mode Extensions. A value of 1 indicates that the …","SPEC_CTRL virtualization supported if set.","Self Snoop. The processor supports the management of …","SSE. The processor supports the SSE extensions.","SSE2. The processor supports the SSE2 extensions.","Streaming SIMD Extensions 3 (SSE3). A value of 1 indicates …","A value of 1 indicates that the processor supports SSE4.1.","A value of 1 indicates that the processor supports SSE4.2.","XTRQ, INSERTQ, MOVNTSS, and MOVNTSD instruction support.","SVM supervisor shadow stack restrictions if set.","A value of 1 indicates the presence of the Supplemental …","Has Software uncorrectable error containment and recovery …","Secure virtual machine supported.","Indicates support for SVM-Lock if set.","Are fast system calls available.","SYSENTER and SYSEXIT Instructions. The SYSENTER and …","Trailing bit manipulation instruction support.","Has THERMTRIP?","Support for INVLPGB/TLBSYNC hypervisor enable in VMCB and …","Thermal Monitor. The processor implements the thermal …","Hardware thermal control (HTC)?","Thermal Monitor 2. A value of 1 indicates whether the …","Indicates the following MSRs are supported: …","If true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …","If true, ToPA tables can hold any number of output …","Topology extensions support.","Supports total bandwidth monitoring.","If true, Indicates support of output to Trace Transport …","Is Temperature Sensor available?","Time Stamp Counter. The RDTSC instruction is supported, …","IA32_TSC_ADJUST MSR is supported if 1.","A value of 1 indicates that the processors local APIC …","Indicates support for MSR TSC ratio (MSR <code>0xC000_0104</code>) if …","Intel Turbo Boost Technology Available (see description of …","Intel® Turbo Boost Max Technology 3.0 available.","Supports user-mode instruction prevention if 1.","EFER.LMSLE is unsupported if set.","VAES","Indicates support for VMCB clean bits if set.","Virtual 8086 Mode Enhancements. Virtual 8086 mode …","VM Permission Levels supported if set.","VMSAVE and VMLOAD virtualization supported if set.","Virtual Machine Extensions. A value of 1 indicates that …","Voltage ID control.","VPCLMULQDQ","Virtual Transparent Encryption supported if set.","WAITPKG","WBNOINVD instruction supported if set.","Watchdog timer support.","A value of 1 indicates that the processor supports x2APIC …","Supports XGETBV with ECX = 1 if set.","Extended operation support.","A value of 1 indicates that the processor supports the …","Supports XSAVEC and the compacted form of XRSTOR if set.","CPU has xsaveopt feature.","Supports XSAVES/XRSTORS and IA32_XSS if set.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Support for HDC in IA32_XSS.","Support for PT in IA32_XSS.","L1 instruction cache associativity.","L1 instruction cache line size in bytes.","L1 instruction cache lines per tag.","L1 instruction cache size in KB","Returns the identity of the <code>Hypervisor</code>.","Initial APIC ID","Supports treating interrupts as break-event for MWAIT, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Maximum page count for INVLPGB instruction.","Branch instruction retired event not available if 1.","Branch mispredict retired event not available if 1.","Last-level cache reference event not available if 1.","Returns true when the compacted format of an XSAVE area is …","Core cycle event not available if 1.","Fully associative structure","Fully Associative cache","True if the bit n (corresponding to the sub-leaf index) is …","True if bit n is supported in XCR0.","Cache Inclusiveness (Bit 1) False: Cache is not inclusive …","Instruction retired event not available if 1.","Last-level cache misses event not available if 1.","Reference cycles event not available if 1.","Self Initializing cache level (does not need SW …","Write-Back Invalidate/Invalidate (Bit 0) False: …","Bit-granular map of isolation/contention of allocation …","Bit-granular map of isolation/contention of allocation …","Iterator over extended state enumeration levels &gt;= 2.","Iterator over SGX sub-leafs.","Instruction TLB associativity for 2-MB and 4-MB pages.","L2 Instruction TLB associativity for 2-MB and 4-MB pages.","Instruction TLB number of entries for 2-MB and 4-MB pages.","L2 Instruction TLB number of entries for 2-MB and 4-MB …","Instruction TLB associativity for 4K pages.","L2 Instruction TLB associativity for 4K pages.","Instruction TLB number of entries for 4K pages.","L2 Instruction TLB number of entries for 4K pages.","L1 Instruction TLB associativity for 1-GB pages.","L1 Instruction TLB number of entries for 1-GB pages.","L2 Instruction TLB associativity for 1-GB pages.","L2 Instruction TLB number of entries for 1-GB pages.","L2 Cache Allocation Information.","L2 Associativity field","L2 Cache Line size in bytes","L2 cache lines per tag.","Cache size in KB.","L3 Cache Allocation Information.","L3 Cache Monitoring.","L2 Associativity field","L2 Cache Line size in bytes","L2 cache lines per tag.","Specifies the L3 cache size range","Largest monitor-line size in bytes (default is processor’…","Cache Level (starts at 1)","Level number.","","Linear Address Bits","","The value of MAWAU used by the BNDLDX and BNDSTX …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for processor cores in …","The maximum supported enclave size in 64-bit mode is …","The maximum supported enclave size in non-64-bit mode is …","Number of encrypted guests supported simultaneouslys","Reports the maximum MBA throttling value supported for the …","Maximum number of addressable IDs for logical processors …","The maximum ECX value recognized by RDPRU.","The size of the <code>apic_id_size</code> field determines the maximum …","Maximum range (zero-based) of RMID of L3.","Memory Bandwidth Allocation Information.","Minimum ASID value for an SEV enabled, SEV-ES disabled …","Bit vector of supported extended SGX features.","","Uses Rust’s <code>cpuid</code> function from the <code>arch</code> module.","Return new CpuId struct.","Iterate over all cache information.","Iterate over all cache info subleafs for this CPU.","","","","Iterate over each sub-leaf with an address translation …","Iterate over all SoC vendor specific attributes.","Node ID","Nodes per processor","An unsigned integer which is the nominal frequency of the …","Number as retrieved from cpuid","Number of physical threads in the processor.","Number of general-purpose performance monitoring counter …","An unsigned integer which is the numerator of the …","The offset in bytes of this extended state components save …","Partitioning (0: Soft partitioning between the logical …","Performance time-stamp counter size (in bits).","Physical Address Bits","Physical Address bit reduction","The physical address of the base of the EPC section","Physical Line partitions (Bits 21-12)","Returns package type on AMD.","Processor Base Frequency (in MHz).","Maximum Frequency (in MHz).","Number of logical processors at this level type. The …","Returns which register this specific extended subleaf …","SVM revision number.","Maximum range (zero-based) of RMID within this physical …","Reports the valid bits of SECS.ATTRIBUTES[127:0] that …","Combination of bits 00-31 and 32-63 of 96 bit processor …","96 bit processor serial number.","Bits 00-31 of 96 bit processor serial number.","Bits 32-63 of 96 bit processor serial number.","Bits 64-96 of 96 bit processor serial number.","Number of Sets.","Number of Sets (Bits 31-00)","Number of bits to shift right on x2APIC ID to get a unique …","The size in bytes (from the offset specified in EBX) of …","Size of the corresponding EPC section within the Processor …","Smallest monitor-line size in bytes (default is processor…","Version Information: Stepping ID","","Number of available address space identifiers (ASID).","Number of C0 sub C-states supported using MWAIT (Bits 03 - …","Number of C1 sub C-states supported using MWAIT (Bits 07 - …","Number of C2 sub C-states supported using MWAIT (Bits 11 - …","Number of C3 sub C-states supported using MWAIT (Bits 15 - …","Number of C4 sub C-states supported using MWAIT (Bits 19 - …","Number of C5 sub C-states supported using MWAIT (Bits 23 - …","Number of C6 sub C-states supported using MWAIT (Bits 27 - …","Number of C7 sub C-states supported using MWAIT (Bits 31 - …","Bitmap of supported Cycle Threshold value encodings (Bits …","Bitmap of supported MTC period encodings (Bit 31:16).","Bitmap of supported Configurable PSB frequency encodings …","Threads per core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“TSC frequency” = “core crystal clock frequency” * …","TSC frequency in kHz.","Cache type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version ID of architectural performance monitoring. (Bits …","Ways of associativity.","Return new CpuId struct with custom reader function.","x2APIC ID","x2APIC ID the current logical processor. (Bits 31-00)","Support for AVX512 OPMASK in XCR0.","Support for AVX512 ZMM Hi16 in XCR0.","Support for AVX512 ZMM Hi256 XCR0.","Support for AVX 256-bit in XCR0.","Support for legacy x87 in XCR0.","Support for MPX BNDCSR in XCR0.","Support for MPX BNDREGS in XCR0.","Support for PKRU in XCR0.","Support for SSE 128-bit in XCR0.","Maximum size (bytes, from the beginning of the …","Maximum size (bytes, from the beginning of the …","The size in bytes of the XSAVE area containing all states …",""],"i":[53,0,0,50,50,50,50,53,0,26,0,0,0,0,0,0,49,0,0,26,0,0,0,21,20,49,0,39,39,64,0,0,0,0,0,0,0,0,0,0,0,39,26,50,53,0,0,51,21,20,49,53,0,0,0,0,0,20,0,0,49,0,50,50,39,21,20,0,0,50,26,0,0,0,0,0,0,50,53,53,0,0,21,49,26,0,0,0,0,0,0,20,0,26,0,49,0,0,0,21,20,39,50,20,53,53,0,51,53,1,3,6,8,10,11,10,11,12,14,14,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,51,23,52,31,64,65,32,20,66,11,53,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,51,23,52,31,64,65,32,20,66,11,53,15,14,16,18,19,19,12,22,23,14,24,1,25,26,27,28,12,29,30,31,32,12,33,34,35,36,37,0,38,38,38,38,24,40,27,38,41,38,41,38,41,38,41,42,42,42,42,43,1,1,36,1,1,38,41,39,37,6,44,42,45,35,18,1,10,25,46,12,21,47,48,49,50,51,23,52,20,11,53,14,14,15,47,14,36,36,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,39,37,6,44,42,45,35,18,24,1,10,10,25,26,27,27,46,28,12,21,21,47,29,48,49,49,30,50,50,51,51,23,52,31,64,65,32,20,20,66,11,11,53,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,50,51,23,52,31,64,65,32,20,66,11,53,24,24,24,57,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,63,24,24,24,63,24,63,24,24,24,24,63,63,24,6,37,19,15,19,15,19,19,15,18,14,15,56,14,15,18,15,36,14,43,56,44,14,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,6,14,56,56,14,15,14,14,14,22,12,33,37,14,15,14,14,18,44,14,14,43,43,14,62,62,43,15,15,14,15,56,37,43,44,14,15,45,45,14,56,37,56,14,56,44,44,43,56,44,14,43,18,37,37,43,43,43,43,43,43,43,43,14,15,43,6,6,37,6,6,56,33,61,61,60,56,15,44,52,33,34,15,15,14,37,14,6,61,15,14,15,14,15,14,45,56,14,33,14,15,44,44,34,56,15,14,14,18,14,44,44,14,14,14,14,15,15,15,14,56,43,14,33,37,15,56,18,56,14,14,14,43,33,56,6,14,56,56,56,15,56,6,18,37,33,56,18,18,18,56,62,62,56,56,33,15,56,18,56,14,44,14,14,14,14,14,14,15,44,14,37,15,44,15,14,15,37,44,14,37,14,56,33,33,15,34,33,37,14,56,14,44,43,43,56,6,56,44,14,18,44,14,37,56,18,56,6,15,14,58,15,14,58,58,58,22,23,52,58,58,38,38,38,38,3,14,47,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,51,23,52,31,64,65,32,20,66,11,53,25,28,29,30,31,32,66,6,36,36,36,59,36,19,12,59,59,12,36,36,36,12,12,22,23,58,62,38,41,38,41,38,41,38,41,42,42,42,42,61,41,41,41,41,61,60,41,41,41,41,47,12,48,48,6,59,56,19,12,12,62,62,18,52,14,6,6,34,61,18,62,14,0,24,25,28,29,30,31,32,66,35,35,40,27,6,36,40,59,19,6,6,18,65,12,15,16,16,48,59,44,60,62,46,46,46,46,46,19,12,48,59,65,47,14,59,44,47,47,47,47,47,47,47,47,33,33,33,35,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,51,23,52,31,64,65,32,20,66,11,53,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,51,23,52,31,64,65,32,20,66,11,53,40,3,27,15,8,14,43,56,57,36,58,59,60,34,61,22,62,33,40,16,19,63,3,38,41,39,37,6,44,42,45,35,18,24,1,10,25,26,27,46,28,12,21,47,29,48,49,30,50,51,23,52,31,64,65,32,20,66,11,53,36,19,24,35,48,58,58,58,58,58,58,58,58,58,58,58,58,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,[[5,[4]]]],[6,7],[8,9],[10,9],[11,9],[10,9],[11,9],[12,13],[14,7],[14,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,4],[14,7],[16,17],[18,7],[19,7],[19,20],[12,21],[22,7],[23,7],[14,7],[24,24],[1,1],[25,25],[26,26],[27,27],[28,28],[12,12],[29,29],[30,30],[31,31],[32,32],[12,13],[33,7],[34,4],[35,7],[36,7],[37,4],0,[38,39],[38,7],[38,7],[38,7],[[],24],[40,4],[27,9],[38,39],[41,39],[38,7],[41,17],[38,39],[41,39],[38,7],[41,17],[42,39],[42,7],[42,39],[42,7],[43,7],0,0,[36,7],0,0,[[38,38],2],[[41,41],2],[[39,39],2],[[37,37],2],[[6,6],2],[[44,44],2],[[42,42],2],[[45,45],2],[[35,35],2],[[18,18],2],[[1,1],2],[[10,10],2],[[25,25],2],[[46,46],2],[[12,12],2],[[21,21],2],[[47,47],2],[[48,48],2],[[49,49],2],[[50,50],2],[[51,51],2],[[23,23],2],[[52,52],2],[[20,20],2],[[11,11],2],[[53,53],2],[14,7],[14,7],[15,4],[47,2],[14,7],[36,7],[36,7],[[15,54],55],[[8,54],55],[[14,54],55],[[43,54],55],[[56,54],55],[[57,54],55],[[36,54],55],[[58,54],55],[[59,54],55],[[60,54],55],[[34,54],55],[[61,54],55],[[22,54],55],[[62,54],55],[[33,54],55],[[40,54],55],[[16,54],55],[[19,54],55],[[63,54],55],[[3,54],55],[[38,54],55],[[41,54],55],[[39,54],55],[[39,54],55],[[37,54],55],[[6,54],55],[[44,54],55],[[42,54],55],[[45,54],55],[[35,54],55],[[18,54],55],[[24,54],55],[[1,54],55],[[10,54],55],[[10,54],55],[[25,54],55],[[26,54],55],[[27,54],55],[[27,54],55],[[46,54],55],[[28,54],55],[[12,54],55],[[21,54],55],[[21,54],55],[[47,54],55],[[29,54],55],[[48,54],55],[[49,54],55],[[49,54],55],[[30,54],55],[[50,54],55],[[50,54],55],[[51,54],55],[[51,54],55],[[23,54],55],[[52,54],55],[[31,54],55],[[64,54],55],[[65,54],55],[[32,54],55],[[20,54],55],[[20,54],55],[[66,54],55],[[11,54],55],[[11,54],55],[[53,54],55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,[[5,[37]]]],[24,[[5,[25]]]],[24,[[5,[28]]]],[57,4],[24,[[5,[32]]]],[24,[[5,[57]]]],[24,[[5,[56]]]],[24,[[5,[15]]]],[24,[[5,[58]]]],[24,[[5,[29]]]],[24,[[5,[29]]]],[24,[[5,[14]]]],[24,[[5,[3]]]],[24,[[5,[38]]]],[24,[[5,[41]]]],[24,[[5,[18]]]],[24,[[5,[47]]]],[24,[[5,[36]]]],[24,[[5,[45]]]],[24,[[5,[8]]]],[24,[[5,[6]]]],[24,[[5,[16]]]],[24,[[5,[46]]]],[24,[[5,[35]]]],[24,[[5,[33]]]],[63,4],[24,[[5,[61]]]],[24,[[5,[60]]]],[24,[[5,[62]]]],[63,17],[24,[[5,[63]]]],[63,4],[24,[[5,[44]]]],[24,[[5,[43]]]],[24,[[5,[42]]]],[24,[[5,[40]]]],[63,[[5,[66]]]],[63,[[5,[11]]]],[24,[[5,[10]]]],[6,7],[37,2],[19,2],[15,2],[19,2],[15,2],[19,2],[19,2],[15,2],[18,2],[14,2],[15,2],[56,2],[14,2],[15,2],[18,2],[15,2],[36,2],[14,2],[43,2],[56,2],[44,2],[14,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[56,2],[6,2],[14,2],[56,2],[56,2],[14,2],[15,2],[14,2],[14,2],[14,2],[22,2],[12,2],[33,2],[37,2],[14,2],[15,2],[14,2],[14,2],[18,2],[44,2],[14,2],[14,2],[43,2],[43,2],[14,2],[62,2],[62,2],[43,2],[15,2],[15,2],[14,2],[15,2],[56,2],[37,2],[43,2],[44,2],[14,2],[15,2],[45,2],[45,2],[14,2],[56,2],[37,2],[56,2],[14,2],[56,2],[44,2],[44,2],[43,2],[56,2],[44,2],[14,2],[43,2],[18,2],[37,2],[37,2],[43,2],[43,2],[43,2],[43,2],[43,2],[43,2],[43,2],[43,2],[14,2],[15,2],[43,2],[6,2],[6,2],[37,2],[6,2],[6,2],[56,2],[33,2],[61,2],[61,2],[60,2],[56,2],[15,2],[44,2],[52,2],[33,2],[34,2],[15,2],[15,2],[14,2],[37,2],[14,2],[6,2],[61,2],[15,2],[14,2],[15,2],[14,2],[15,2],[14,2],[45,2],[56,2],[14,2],[33,2],[14,2],[15,2],[44,2],[44,2],[34,2],[56,2],[15,2],[14,2],[14,2],[18,2],[14,2],[44,2],[44,2],[14,2],[14,2],[14,2],[14,2],[15,2],[15,2],[15,2],[14,2],[56,2],[43,2],[14,2],[33,2],[37,2],[15,2],[56,2],[18,2],[56,2],[14,2],[14,2],[14,2],[43,2],[33,2],[56,2],[6,2],[14,2],[56,2],[56,2],[56,2],[15,2],[56,2],[6,2],[18,2],[37,2],[33,2],[56,2],[18,2],[18,2],[18,2],[56,2],[62,2],[62,2],[56,2],[56,2],[33,2],[15,2],[56,2],[18,2],[56,2],[14,2],[44,2],[14,2],[14,2],[14,2],[14,2],[14,2],[14,2],[15,2],[44,2],[14,2],[37,2],[15,2],[44,2],[15,2],[14,2],[15,2],[37,2],[44,2],[14,2],[37,2],[14,2],[56,2],[33,2],[33,2],[15,2],[34,2],[33,2],[37,2],[14,2],[56,2],[14,2],[44,2],[43,2],[43,2],[56,2],[6,2],[56,2],[44,2],[14,2],[18,2],[44,2],[14,2],[37,2],[56,2],[18,2],[56,2],[6,2],[15,2],[14,2],[58,2],[15,2],[14,2],[58,2],[58,2],[58,2],[22,17],[23,17],[52,17],[58,2],[58,2],[38,39],[38,7],[38,7],[38,7],[3,53],[14,7],[47,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,17],[36,2],[36,2],[36,2],[59,2],[36,2],[19,2],[12,2],[59,2],[59,2],[12,2],[36,2],[36,2],[36,2],[12,2],[12,2],[22,4],[23,4],[58,30],[62,31],[38,39],[41,39],[38,7],[41,17],[38,39],[41,39],[38,7],[41,17],[42,39],[42,7],[42,39],[42,7],[61,[[5,[23]]]],[41,39],[41,7],[41,7],[41,17],[61,[[5,[22]]]],[60,[[5,[34]]]],[41,39],[41,7],[41,7],[41,17],[47,17],[12,7],[48,7],[48,49],[6,7],[59,51],[56,7],[19,17],[12,13],[12,13],[62,7],[62,7],[18,4],[52,17],[14,7],[6,17],[6,13],[34,4],[61,[[5,[52]]]],[18,4],[62,4],[14,7],0,[[],24],[25,[[5,[27]]]],[28,[[5,[12]]]],[29,[[5,[48]]]],[30,[[5,[59]]]],[31,[[5,[64]]]],[32,[[5,[19]]]],[66,[[5,[1]]]],[35,7],[35,7],[40,4],0,[6,13],[36,7],[40,4],[59,4],[19,7],[6,13],[6,7],[18,7],[65,67],[12,13],[15,4],[16,17],[16,17],[48,17],[59,50],[44,7],[60,4],[62],[46,67],[46,68],[46,4],[46,4],[46,4],[19,4],[12,13],[48,4],[59,4],[65,67],[47,17],[14,7],0,[44,4],[47,17],[47,17],[47,17],[47,17],[47,17],[47,17],[47,17],[47,17],[33,17],[33,17],[33,17],[35,7],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[40,[[5,[67]]]],[3,[[5,[4]]]],0,[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[36,7],[19,17],[[],24],[35,4],[48,4],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,2],[58,4],[58,4],[58,4],[[4,4],1]],"c":[115,116],"p":[[3,"CpuIdResult"],[15,"bool"],[3,"HypervisorInfo"],[15,"u32"],[4,"Option"],[3,"ProcessorCapacityAndFeatureInfo"],[15,"u8"],[3,"ProcessorBrandString"],[15,"str"],[3,"VendorInfo"],[3,"SoCVendorBrand"],[3,"CacheParameter"],[15,"usize"],[3,"FeatureInfo"],[3,"ExtendedProcessorFeatureIdentifiers"],[3,"ProcessorFrequencyInfo"],[15,"u16"],[3,"MemoryEncryptionInfo"],[3,"DatInfo"],[4,"DatType"],[4,"CacheType"],[3,"L3CatInfo"],[3,"L2CatInfo"],[3,"CpuId"],[3,"CacheInfoIter"],[4,"CacheInfoType"],[3,"CacheInfo"],[3,"CacheParametersIter"],[3,"ExtendedTopologyIter"],[3,"ExtendedStateIter"],[3,"SgxSectionIter"],[3,"DatIter"],[3,"ProcessorTraceInfo"],[3,"L3MonitoringInfo"],[3,"ProcessorTopologyInfo"],[3,"PerformanceMonitoringInfo"],[3,"ApmInfo"],[3,"L1CacheTlbInfo"],[4,"Associativity"],[3,"TscInfo"],[3,"L2And3CacheTlbInfo"],[3,"Tlb1gbPageInfo"],[3,"ThermalPowerInfo"],[3,"SvmFeatures"],[3,"PerformanceOptimizationInfo"],[3,"ProcessorSerial"],[3,"MonitorMwaitInfo"],[3,"ExtendedTopologyLevel"],[4,"TopologyType"],[4,"ExtendedRegisterType"],[4,"ExtendedRegisterStateLocation"],[3,"MemBwAllocationInfo"],[4,"Hypervisor"],[3,"Formatter"],[6,"Result"],[3,"ExtendedFeatures"],[3,"DirectCacheAccessInfo"],[3,"ExtendedStateInfo"],[3,"ExtendedState"],[3,"RdtMonitoringInfo"],[3,"RdtAllocationInfo"],[3,"SgxInfo"],[3,"SoCVendorInfo"],[4,"SgxSectionInfo"],[3,"EpcSection"],[3,"SoCVendorAttributesIter"],[15,"u64"],[15,"u128"],[4,"Result"],[3,"TypeId"]]},\
"rustc_demangle":{"doc":"Demangle Rust compiler symbol names.","t":"DDLLLLLLFLLLLLLLFLLLLLL","n":["Demangle","TryDemangleError","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","demangle","fmt","fmt","fmt","from","from","into","into","try_demangle","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rustc_demangle"]],"d":["Representation of a demangled symbol name.","Error returned from the <code>try_demangle</code> function below when …","Returns the underlying string that’s being demangled.","","","","","","De-mangles a Rust symbol into a more readable version","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The same as <code>demangle</code>, except return an <code>Err</code> if the string …","","","","","",""],"i":[0,0,1,1,3,1,3,3,0,1,1,3,1,3,1,3,0,1,3,1,3,1,3],"f":[0,0,[1,2],[[]],[[]],[[]],[[]],[3,3],[2,1],[[1,4],5],[[1,4],5],[[3,4],5],[[]],[[]],[[]],[[]],[2,[[6,[1,3]]]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7]],"c":[],"p":[[3,"Demangle"],[15,"str"],[3,"TryDemangleError"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLALLLFF","n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":[[0,"ryu"],[15,"ryu::raw"]],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[0,0,[[]],[[]],[1,1],[[],1],[[1,2],3],[[1,2],3],[[]],[[]],[[],1],0,[[],4],[[],4],[[],5],[[6,7],8],[[9,7],8]],"c":[],"p":[[3,"Buffer"],[8,"Float"],[15,"str"],[4,"Result"],[3,"TypeId"],[15,"f32"],[15,"u8"],[15,"usize"],[15,"f64"]]},\
"serde":{"doc":"Serde","t":"IIQQQIQQQQQQQILLLAKKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKOLLAOKKKKKKLKKKKKKKKKKKKKKKKLKKKKKKKNNNIIIIQNIIQQQQQINDININNNNNINCNNNENNNQQQIILLLLLLLLKLKKLKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKLLKLKLLLLLLLLLKLLLLLLKLKLLLKLKLLKLLLLLLLKLLKLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQQQQQQQDQQQQQQQQIIQIQIQIQIQIQIQICLLLLLKKKKKKKKLLLLLLLLLLKKKKKKLLLKKKKKKLLLLLKKKKKLKKKKKKKKKKKKLKKKKKKKKLLLLLL","n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[86,"serde::de"],[263,"serde::de::value"],[1528,"serde::ser"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,5,10,10,0,10,10,10,10,10,10,10,0,10,10,10,0,32,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,10,0,0,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,27,27,27,0,0,0,0,77,27,0,0,5,40,39,38,78,0,27,0,0,27,0,27,27,27,27,27,0,27,0,27,27,27,0,27,27,27,33,6,38,0,0,26,27,26,27,26,27,26,27,36,26,32,33,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,36,27,6,26,30,30,26,26,27,27,26,27,26,27,77,36,36,36,5,36,78,78,40,40,39,39,39,39,39,39,40,39,78,26,27,27,26,27,26,27,78,26,27,78,36,36,0,38,38,6,26,6,6,6,6,26,6,6,26,6,6,26,6,26,6,6,6,26,6,6,26,6,26,6,26,6,26,6,26,6,26,6,6,26,6,6,6,26,6,6,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,52,52,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,51,68,52,41,42,43,44,45,46,47,48,51,52,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,51,68,51,51,51,51,51,68,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,52,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,42,43,44,45,46,70,0,10,79,80,81,82,83,84,85,0,10,79,80,81,82,83,84,85,0,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,0,76,76,10,10,10,75,79,80,81,82,83,84,85,76,76,76,76,76,76,76,76,76,10,20,10,10,10,79,80,76,76,83,10,10,81,82,84,85,76,76,76,76,10,10,10,10,10,83,76,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,83,76,84,85,76,76,76],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],[[[0,[3,4]]],2],0,[5,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[[8,6],2],[[7,8,6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],0,[[],9],[[],9],0,0,[10,2],[9,2],[[],2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[[[19,[8]]],2],[[7,[0,[20,4]]],2],[[7,21,7,[0,[20,4]]],2],[[],2],[[[19,[8]]],2],[[[0,[20,4]]],2],[7,2],[[7,8],2],[[7,21,7,8],2],[8,2],[[7,8],2],[[7,21,7,8],2],[22,2],[23,2],[21,2],[24,2],[25,2],[[],2],[7,2],[[7,21,7],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[]],[[]],[3],[[],26],[5,2],[5,2],[5,[[2,[26]]]],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[[8,6],2],[[7,8,6],2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[[7,6],2],[7],[[27,27],9],[28,29],[[26,28],29],[28,29],[[30,28],29],[28,[[2,[31]]]],[[26,28],29],[[27,28],29],[[27,28],29],[[]],[[]],[[]],[[]],[[]],[[8,30]],[[27,30]],[[27,30]],[[],9],[7],[[],[[2,[32]]]],[33,2],[[],[[2,[[19,[32]]]]]],[33,[[2,[19]]]],[[],[[2,[19]]]],[[33,33],[[2,[19]]]],[[],[[2,[[19,[32]]]]]],[33,[[2,[19]]]],[[],[[2,[32]]]],[33,2],[[],[[19,[8]]]],[[],[[19,[8]]]],[6,2],[[]],[[]],[[],34],[[],2],[[],2],[[],2],[[],2],[[8,6],2],[[],35],[[],35],[[],2],[7],[7],0,[[],2],[33,2],[9,[[2,[36]]]],[[26,9],2],[[],[[2,[36]]]],[7,[[2,[36]]]],[[[37,[25]]],[[2,[36]]]],[[],[[2,[36]]]],[26,[[2,[36]]]],[11,[[2,[36]]]],[38,2],[[26,38],2],[12,[[2,[36]]]],[13,[[2,[36]]]],[[26,13],2],[14,[[2,[36]]]],[[26,14],2],[15,[[2,[36]]]],[16,[[2,[36]]]],[17,[[2,[36]]]],[[26,17],2],[18,[[2,[36]]]],[39,2],[[26,39],2],[5,2],[[26,5],2],[[],[[2,[36]]]],[26,2],[40,2],[[26,40],2],[5,2],[[26,5],2],[7,[[2,[36]]]],[[26,7],[[2,[36]]]],[34,[[2,[36]]]],[22,[[2,[36]]]],[[26,22],2],[23,[[2,[36]]]],[21,[[2,[36]]]],[24,[[2,[36]]]],[[26,24],2],[25,[[2,[36]]]],[[],[[2,[36]]]],[26,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[[[51,[[0,[49,50]]]]],[[51,[[0,[49,50]]]]]],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[[[68,[50,50]]],[[68,[50,50]]]],[[[69,[50]]],[[69,[50]]]],[[[70,[50]]],[[70,[50]]]],[[[71,[50]]],[[71,[50]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,52],[3,52],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],7,6],2],[[[42,[36]],7,6],2],[[[43,[36]],7,6],2],[[[44,[36]],7,6],2],[[[45,[36]],7,6],2],[[[46,[36]],7,6],2],[[[47,[36]],7,6],2],[[[48,[36]],7,6],2],[[[51,[49,36]],7,6],2],[[[53,[36]],7,6],2],[[[54,[36]],7,6],2],[[[55,[36]],7,6],2],[[[56,[36]],7,6],2],[[[57,[36]],7,6],2],[[[58,[36]],7,6],2],[[[59,[36]],7,6],2],[[[60,[36]],7,6],2],[[[61,[36]],7,6],2],[[[62,[36]],7,6],2],[[[63,[36]],7,6],2],[[[64,[36]],7,6],2],[[[65,[36]],7,6],2],[[[66,[36]],7,6],2],[[[67,[36]],7,6],2],[[[68,[49,36]],7,6],2],[[[69,[40]],7,6],2],[[[70,[39]],7,6],2],[[[71,[38]],7,6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],7,6],2],[[[42,[36]],7,6],2],[[[43,[36]],7,6],2],[[[44,[36]],7,6],2],[[[45,[36]],7,6],2],[[[46,[36]],7,6],2],[[[47,[36]],7,6],2],[[[48,[36]],7,6],2],[[[51,[49,36]],7,6],2],[[[53,[36]],7,6],2],[[[54,[36]],7,6],2],[[[55,[36]],7,6],2],[[[56,[36]],7,6],2],[[[57,[36]],7,6],2],[[[58,[36]],7,6],2],[[[59,[36]],7,6],2],[[[60,[36]],7,6],2],[[[61,[36]],7,6],2],[[[62,[36]],7,6],2],[[[63,[36]],7,6],2],[[[64,[36]],7,6],2],[[[65,[36]],7,6],2],[[[66,[36]],7,6],2],[[[67,[36]],7,6],2],[[[68,[49,36]],7,6],2],[[[69,[40]],7,6],2],[[[70,[39]],7,6],2],[[[71,[38]],7,6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],7,6],2],[[[42,[36]],7,6],2],[[[43,[36]],7,6],2],[[[44,[36]],7,6],2],[[[45,[36]],7,6],2],[[[46,[36]],7,6],2],[[[47,[36]],7,6],2],[[[48,[36]],7,6],2],[[[51,[49,36]],7,6],2],[[[53,[36]],7,6],2],[[[54,[36]],7,6],2],[[[55,[36]],7,6],2],[[[56,[36]],7,6],2],[[[57,[36]],7,6],2],[[[58,[36]],7,6],2],[[[59,[36]],7,6],2],[[[60,[36]],7,6],2],[[[61,[36]],7,6],2],[[[62,[36]],7,6],2],[[[63,[36]],7,6],2],[[[64,[36]],7,6],2],[[[65,[36]],7,6],2],[[[66,[36]],7,6],2],[[[67,[36]],7,6],2],[[[68,[49,36]],7,6],2],[[[69,[40]],7,6],2],[[[70,[39]],7,6],2],[[[71,[38]],7,6],2],[[[41,[36]],8,6],2],[[[42,[36]],8,6],2],[[[43,[36]],8,6],2],[[[44,[36]],8,6],2],[[[45,[36]],8,6],2],[[[46,[36]],8,6],2],[[[47,[36]],8,6],2],[[[48,[36]],8,6],2],[[[51,[49,36]],8,6],2],[[[53,[36]],8,6],2],[[[54,[36]],8,6],2],[[[55,[36]],8,6],2],[[[56,[36]],8,6],2],[[[57,[36]],8,6],2],[[[58,[36]],8,6],2],[[[59,[36]],8,6],2],[[[60,[36]],8,6],2],[[[61,[36]],8,6],2],[[[62,[36]],8,6],2],[[[63,[36]],8,6],2],[[[64,[36]],8,6],2],[[[65,[36]],8,6],2],[[[66,[36]],8,6],2],[[[67,[36]],8,6],2],[[[68,[49,36]],8,6],2],[[[69,[40]],8,6],2],[[[70,[39]],8,6],2],[[[71,[38]],8,6],2],[[[41,[36]],7,8,6],2],[[[42,[36]],7,8,6],2],[[[43,[36]],7,8,6],2],[[[44,[36]],7,8,6],2],[[[45,[36]],7,8,6],2],[[[46,[36]],7,8,6],2],[[[47,[36]],7,8,6],2],[[[48,[36]],7,8,6],2],[[[51,[49,36]],7,8,6],2],[[[53,[36]],7,8,6],2],[[[54,[36]],7,8,6],2],[[[55,[36]],7,8,6],2],[[[56,[36]],7,8,6],2],[[[57,[36]],7,8,6],2],[[[58,[36]],7,8,6],2],[[[59,[36]],7,8,6],2],[[[60,[36]],7,8,6],2],[[[61,[36]],7,8,6],2],[[[62,[36]],7,8,6],2],[[[63,[36]],7,8,6],2],[[[64,[36]],7,8,6],2],[[[65,[36]],7,8,6],2],[[[66,[36]],7,8,6],2],[[[67,[36]],7,8,6],2],[[[68,[49,36]],7,8,6],2],[[[69,[40]],7,8,6],2],[[[70,[39]],7,8,6],2],[[[71,[38]],7,8,6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],6],2],[[[42,[36]],6],2],[[[43,[36]],6],2],[[[44,[36]],6],2],[[[45,[36]],6],2],[[[46,[36]],6],2],[[[47,[36]],6],2],[[[48,[36]],6],2],[[[51,[49,36]],6],2],[[[53,[36]],6],2],[[[54,[36]],6],2],[[[55,[36]],6],2],[[[56,[36]],6],2],[[[57,[36]],6],2],[[[58,[36]],6],2],[[[59,[36]],6],2],[[[60,[36]],6],2],[[[61,[36]],6],2],[[[62,[36]],6],2],[[[63,[36]],6],2],[[[64,[36]],6],2],[[[65,[36]],6],2],[[[66,[36]],6],2],[[[67,[36]],6],2],[[[68,[49,36]],6],2],[[[69,[40]],6],2],[[[70,[39]],6],2],[[[71,[38]],6],2],[[[41,[36]],7,6],2],[[[42,[36]],7,6],2],[[[43,[36]],7,6],2],[[[44,[36]],7,6],2],[[[45,[36]],7,6],2],[[[46,[36]],7,6],2],[[[47,[36]],7,6],2],[[[48,[36]],7,6],2],[[[51,[49,36]],7,6],2],[[[53,[36]],7,6],2],[[[54,[36]],7,6],2],[[[55,[36]],7,6],2],[[[56,[36]],7,6],2],[[[57,[36]],7,6],2],[[[58,[36]],7,6],2],[[[59,[36]],7,6],2],[[[60,[36]],7,6],2],[[[61,[36]],7,6],2],[[[62,[36]],7,6],2],[[[63,[36]],7,6],2],[[[64,[36]],7,6],2],[[[65,[36]],7,6],2],[[[66,[36]],7,6],2],[[[67,[36]],7,6],2],[[[68,[49,36]],7,6],2],[[[69,[40]],7,6],2],[[[70,[39]],7,6],2],[[[71,[38]],7,6],2],[[[51,[49,36]]],[[2,[36]]]],[[[68,[49,36]]],[[2,[36]]]],[[52,52],9],[[41,28],29],[[42,28],29],[[43,28],29],[[44,28],29],[[45,28],29],[[46,28],29],[[47,28],29],[[48,28],29],[[[51,[[0,[49,72]]]],28],29],[[52,28],29],[[52,28],29],[[53,28],29],[[54,28],29],[[55,28],29],[[56,28],29],[[57,28],29],[[58,28],29],[[59,28],29],[[60,28],29],[[61,28],29],[[62,28],29],[[63,28],29],[[64,28],29],[[65,28],29],[[66,28],29],[[67,28],29],[[[68,[72]],28],29],[[[69,[72]],28],29],[[[70,[72]],28],29],[[[71,[72]],28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],41],[21,42],[7,43],[7,44],[34,45],[[[73,[7]]],46],[[],47],[[],48],[49,[[51,[49]]]],[9,53],[18,54],[15,55],[16,56],[17,57],[74,58],[25,59],[23,60],[24,61],[8,62],[12,63],[13,64],[11,65],[14,66],[22,67],[49,[[68,[49]]]],[[],69],[[],70],[[],71],[[[51,[49,36]],33],[[2,[19]]]],[[[68,[49,36]],33],[[2,[19]]]],[[[51,[49,36]],33,33],[[2,[19]]]],[[[51,[49,36]],33],[[2,[19]]]],[[[51,[49,36]],33],2],[[[51,[49,36]]],[[19,[8]]]],[[[51,[49,36]]],[[19,[8]]]],[[[68,[49,36]]],[[19,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[[42,[36]],33],2],[[[43,[36]],33],2],[[[44,[36]],33],2],[[[45,[36]],33],2],[[[46,[36]],33],2],[[[70,[39]],33],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,2],[1,2],[[[0,[3,4]]],2],[3],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[76,[75]]],[[2,[75]]]],[[[76,[75]]],[[2,[75]]]],[[[76,[75]]],[[2,[75]]]],[[[76,[75]]],[[2,[75]]]],[[[76,[75]]],[[2,[75]]]],[[[76,[75]]],[[2,[75]]]],[[[76,[75]]],[[2,[75]]]],[[]],[[]],[[],9],[10,2],[9,2],[[],2],[11,2],[[[0,[20,4]]],2],[[[0,[20,4]]],2],[[[76,[75]],[0,[20,4]]],[[2,[75]]]],[[[76,[75]],[0,[20,4]]],[[2,[75]]]],[[[0,[20,4]],[0,[20,4]]],2],[12,2],[13,2],[[[0,[20,4]]],2],[[[0,[20,4]]],2],[[7,[0,[20,4]]],2],[[7,[0,[20,4]]],2],[[[76,[75]],7,[0,[20,4]]],[[2,[75]]]],[[[76,[75]],7,[0,[20,4]]],[[2,[75]]]],[[[76,[75]],[0,[20,4]]],[[2,[75]]]],[[[76,[75]],[0,[20,4]]],[[2,[75]]]],[14,2],[15,2],[16,2],[17,2],[18,2],[[[0,[20,4]]],2],[[[76,[75]],[0,[20,4]]],[[2,[75]]]],[[[19,[8]]],2],[[7,[0,[20,4]]],2],[[7,21,7,[0,[20,4]]],2],[[],2],[[[19,[8]]],2],[[[0,[20,4]]],2],[7,2],[[7,8],2],[[7,21,7,8],2],[8,2],[[7,8],2],[[7,21,7,8],2],[22,2],[23,2],[21,2],[24,2],[25,2],[[],2],[7,2],[[7,21,7],2],[[[0,[20,4]]],2],[[[76,[75]],[0,[20,4]]],[[2,[75]]]],[7,2],[7,2],[[],2],[[],2],[[],35]],"c":[],"p":[[8,"IntoIterator"],[4,"Result"],[8,"Display"],[8,"Sized"],[8,"Deserializer"],[8,"Visitor"],[15,"str"],[15,"usize"],[15,"bool"],[8,"Serializer"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option"],[8,"Serialize"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"IgnoredAny"],[4,"Unexpected"],[3,"Formatter"],[6,"Result"],[8,"Expected"],[3,"Error"],[8,"Deserialize"],[8,"DeserializeSeed"],[3,"String"],[3,"TypeId"],[8,"Error"],[3,"Vec"],[8,"EnumAccess"],[8,"MapAccess"],[8,"SeqAccess"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[8,"Iterator"],[8,"Clone"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[3,"EnumAccessDeserializer"],[8,"Debug"],[4,"Cow"],[15,"isize"],[8,"Error"],[3,"Impossible"],[8,"IntoDeserializer"],[8,"VariantAccess"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]},\
"serde_json":{"doc":"Serde JSON","t":"NNDDDNDNNGDNELLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLFLLLLLLLLLLLLLLLOALLLLLFLLFFFFLLLLLLLLLLLLLLLADIDDDLLLLLLLLFLFLLLLLLLLLLLLLLENNDNGNLLLLLLLLLLLLLLLLLLLEDDDDDNDNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNICNDNNDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLL","n":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_from","clone_into","clone_into","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into_deserializer","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","next","serialize","serialize","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","Deserializer","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow_mut","borrow_mut","byte_offset","end","from","from","from_slice","from_slice","from_str","from_str","into","into","into_iter","new","new","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"serde_json"],[258,"serde_json::de"],[288,"serde_json::error"],[314,"serde_json::map"],[451,"serde_json::value"]],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Convert 64-bit floating point number to <code>Value</code>","","","Returns the argument unchanged.","Convert a slice to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","Convert boolean to <code>Value</code>","","","","Convert string slice to <code>Value</code>","","","Convert <code>String</code> to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","","Convert <code>Number</code> to <code>Value</code>","Convert 32-bit floating point number to <code>Value</code>","Convert copy-on-write string to <code>Value</code>","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[2,2,0,0,0,2,0,2,2,0,0,2,0,9,44,5,3,2,9,44,5,3,2,3,2,3,3,2,5,5,0,3,2,3,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,9,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,5,5,3,2,2,9,44,5,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,0,0,2,0,3,2,3,2,9,44,5,3,2,2,44,3,3,3,5,0,0,44,3,2,3,2,0,5,2,0,0,0,0,9,44,5,3,2,9,44,5,3,2,9,44,5,3,2,0,0,0,0,0,0,48,49,48,49,44,9,48,49,0,9,0,9,48,49,9,9,44,48,49,48,49,48,49,48,49,0,50,50,0,50,0,50,50,50,5,50,50,5,50,50,50,50,5,5,5,5,5,50,50,50,50,0,0,0,0,0,0,51,0,51,0,0,0,51,3,51,54,53,55,56,58,57,59,60,51,54,53,55,56,58,57,59,60,3,3,3,51,54,53,55,56,58,57,59,60,3,53,3,3,53,3,54,53,51,54,53,55,56,58,57,59,60,55,56,58,57,59,60,53,3,3,3,51,54,53,3,3,55,56,58,57,59,60,3,55,56,58,57,59,60,55,56,58,57,59,60,51,51,3,53,3,3,55,56,58,57,59,60,51,54,53,55,56,58,57,59,60,51,54,53,55,56,58,57,59,60,51,54,53,55,56,58,57,59,60,3,3,3,2,2,0,0,2,0,2,2,0,2,0,2,2,2,2,33,2,33,2,2,2,2,2,33,62,33,62,33,33,33,62,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,62,33,33,33,33,33,33,33,33,33,33,33,33,33,0,2,2,33,62,33,2,2,2,33,2,33,2,2,2,2,2,33,2,2,33,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,2,33,33,0,62,33,62,33,62,33],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]],[[3,[1,2]]]],[2,2],[[[3,[1,2]],[3,[1,2]]]],[[]],[[]],[4,5],[4,5],0,[[],[[3,[1,2]]]],[[],2],[6,[[7,[[3,[1,2]]]]]],[6,[[7,[2]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],12,10],11],[[2,12,10],[[7,[5]]]],[[2,12,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],12,10],11],[[2,12,10],[[7,[5]]]],[[2,12,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],12,10],11],[[2,12,10],[[7,[5]]]],[[2,12,10],[[7,[5]]]],[[[9,[8]],13,10],11],[[2,13,10],[[7,[5]]]],[[2,13,10],[[7,[5]]]],[[[9,[8]],12,13,10],11],[[2,12,13,10],[[7,[5]]]],[[2,12,13,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],10],11],[[2,10],[[7,[5]]]],[[2,10],[[7,[5]]]],[[[9,[8]],12,10],11],[[2,12,10],[[7,[5]]]],[[2,12,10],[[7,[5]]]],[[[3,[1,2]],[3,[1,2]]],14],[[2,15],14],[[2,15],14],[[2,16],14],[[2,15],14],[[2,2],14],[[2,17],14],[[2,14],14],[[2,18],14],[[2,17],14],[[2,19],14],[[2,20],14],[[2,13],14],[[2,12],14],[[2,21],14],[[2,22],14],[[2,12],14],[[2,18],14],[[2,13],14],[[2,16],14],[[2,18],14],[[2,19],14],[[2,19],14],[[2,21],14],[[2,20],14],[[2,23],14],[[2,24],14],[[2,22],14],[[2,25],14],[[2,23],14],[[2,17],14],[[2,13],14],[[2,20],14],[[2,23],14],[[2,25],14],[[2,24],14],[[2,24],14],[[2,14],14],[[2,14],14],[[2,16],14],[[2,25],14],[[2,22],14],[[2,1],14],[[2,21],14],0,[[[3,[1,2]],26]],[[5,27],28],[[5,27],28],[[[3,[1,2]],27],[[7,[29]]]],[[2,27],28],[[2,27],28],[[]],[[]],[[]],[[]],[13,2],[24,2],[22,2],[19,2],[25,2],[20,2],[[]],[[],2],[[],2],[14,2],[23,2],[16,2],[21,2],[12,2],[17,2],[[[31,[[30,[2]]]]],2],[1,2],[[[32,[[30,[2]]]]],2],[[[3,[1,2]]],2],[15,2],[33,2],[18,2],[[[34,[12]]],2],[26,[[3,[1,2]]]],[26,2],[26,2],[[],[[11,[35]]]],[12,[[11,[35]]]],[12,[[7,[2,5]]]],[2,[[7,[36,5]]]],[[[3,[1,2]],[0,[37,38,39,40]]],2],[[2,41],2],[[[3,[1,2]],[0,[37,38,39,40]]],2],[[2,41],2],[[]],[[]],[[]],[[]],[[]],[2],[[]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[42,43],5],0,0,[[[44,[8,35]]],[[31,[[11,[35]]]]]],[[[3,[1,2]],45],7],[[2,45],7],[[]],[[]],[[[0,[37,46]]],[[11,[1]]]],[[],1],[[],1],[[[0,[37,46]]],[[11,[1]]]],[46,[[7,[2,5]]]],[[[0,[37,46]]],[[11,[[32,[16]]]]]],[[[0,[37,46]]],[[11,[[32,[16]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],47],[[],47],[[],47],[[],47],[[],47],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[44,[8,35]]],13],[[[9,[8]]],11],[[]],[[]],[[],[[11,[35]]]],[[],[[9,[48]]]],[12,[[11,[35]]]],[12,[[9,[49]]]],[[]],[[]],[[[9,[8]]],[[44,[8,35]]]],[8,[[9,[8]]]],[8,[[44,[8,35]]]],[[],48],[12,49],[[],7],[[],7],[[],7],[[],7],[[],47],[[],47],0,0,0,0,0,0,0,[[]],[[]],[5,50],[50,50],[[]],[5,13],[[50,50],14],[[50,27],28],[[]],[[]],[5,14],[5,14],[5,14],[5,14],[5,13],[[]],[[],7],[[],7],[[],47],0,0,0,0,0,0,0,0,0,0,0,0,[[51,52],51],[[[3,[1,2]],[3,[1,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]]]],[[[3,[1,2]],[0,[37,38,39,40]]],14],[[[3,[1,2]],[30,[1]]],51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1,2]],[0,[37,38,39,40]]],[[31,[2]]]],[53,2],[[[3,[1,2]],[0,[37,38,39,40]]],31],[[[3,[1,2]],[0,[37,38,39,40]]],[[31,[2]]]],[53,2],[[[3,[1,2]],1,2],[[31,[2]]]],[[54,2],2],[[53,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,2],[[[3,[1,2]]],14],[[[3,[1,2]]],55],[[[3,[1,2]]],56],[51,1],[54,1],[53,1],[[[3,[1,2]]],57],[[[3,[1,2]]],13],[55,13],[56,13],[58,13],[57,13],[59,13],[60,13],[[],[[3,[1,2]]]],[55,31],[56,31],[58,31],[57,31],[59,31],[60,31],[55,31],[56,31],[58,31],[57,31],[59,31],[60,31],[[51,2],2],[[51,52],2],[[[3,[1,2]],[0,[37,38,39,40]]],[[31,[2]]]],[53,2],[[[3,[1,2]],[0,[37,38,39,40]]],31],[[[3,[1,2]],61]],[55],[56],[58],[57],[59],[60],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[[3,[1,2]]],59],[[[3,[1,2]]],60],[13,[[3,[1,2]]]],0,0,0,0,0,0,0,0,0,0,0,[2,[[31,[[32,[2]]]]]],[2,[[31,[[32,[2]]]]]],[2,[[31,[14]]]],[2,[[31,[19]]]],[33,[[31,[19]]]],[2,[[31,[22]]]],[33,[[31,[22]]]],[2,31],[2,[[31,[[3,[1,2]]]]]],[2,[[31,[[3,[1,2]]]]]],[2,[[31,[12]]]],[2,[[31,[17]]]],[33,[[31,[17]]]],[[]],[[]],[[]],[[]],[33,33],[[]],[[62,[0,[37,4]]],[[11,[2]]]],[6,[[7,[33]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,12,10],7],[[33,12,10],7],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,12,10],7],[[33,12,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,10],7],[[33,12,10],7],[[33,12,10],7],[[33,13,10],7],[[33,13,10],7],[[33,12,13,10],7],[[33,12,13,10],7],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],[[7,[5]]]],[[33,10],7],[[33,10],7],[[33,12,10],7],[[33,12,10],7],[[33,33],14],[[33,27],28],[[33,27],28],[[]],[[]],[24,33],[16,33],[22,33],[17,33],[13,33],[21,33],[15,33],[20,33],[23,33],[25,33],[19,[[31,[33]]]],[12,[[7,[33]]]],[2,[[7,[36,5]]]],[[2,41],[[31,[2]]]],[[2,41],[[31,[2]]]],[[33,63]],[[]],[[]],[2,14],[2,14],[2,14],[33,14],[2,14],[33,14],[2,14],[2,14],[2,14],[2,14],[2,14],[33,14],[[2,12],[[31,[2]]]],[[2,12],[[31,[2]]]],[[33,45],7],[[62,14],[[11,[2]]]],[62,[[11,[2]]]],[[62,64],[[11,[2]]]],[[62,18],[[11,[2]]]],[[62,19],[[11,[2]]]],[[62,25],[[11,[2]]]],[[62,15],[[11,[2]]]],[[62,22],[[11,[2]]]],[[62,21],[[11,[2]]]],[[62,[31,[13]]],11],[[62,12,[0,[37,46]]],[[11,[2]]]],[[62,12,23,12,[0,[37,46]]],[[11,[2]]]],[62,[[11,[2]]]],[[62,[31,[13]]],11],[[62,[0,[37,46]]],[[11,[2]]]],[[62,12],[[11,[2]]]],[[62,12,13],11],[[62,12,23,12,13],11],[[62,13],11],[[62,12,13],11],[[62,12,23,12,13],11],[[62,24],[[11,[2]]]],[[62,23],[[11,[2]]]],[[62,17],[[11,[2]]]],[[62,16],[[11,[2]]]],[62,[[11,[2]]]],[[62,12],[[11,[2]]]],[[62,12,23,12],[[11,[2]]]],[2,2],[[]],[[],1],[46,[[7,[2,5]]]],[[],7],[[],7],[[],7],[[],7],[[],47],[[],47]],"c":[],"p":[[3,"String"],[4,"Value"],[3,"Map"],[8,"Display"],[3,"Error"],[8,"Deserializer"],[4,"Result"],[8,"Read"],[3,"Deserializer"],[8,"Visitor"],[6,"Result"],[15,"str"],[15,"usize"],[15,"bool"],[15,"i32"],[15,"u8"],[15,"u64"],[15,"f32"],[15,"f64"],[15,"isize"],[15,"i8"],[15,"i64"],[15,"u32"],[15,"u16"],[15,"i16"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"Into"],[4,"Option"],[3,"Vec"],[3,"Number"],[4,"Cow"],[8,"Deserialize"],[8,"DeserializeOwned"],[8,"Sized"],[8,"Ord"],[8,"Eq"],[8,"Hash"],[8,"Index"],[4,"Unexpected"],[8,"Expected"],[3,"StreamDeserializer"],[8,"Serializer"],[8,"Serialize"],[3,"TypeId"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[8,"FnOnce"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"IntoIter"],[3,"Values"],[3,"ValuesMut"],[8,"FnMut"],[3,"Serializer"],[8,"Hasher"],[15,"char"]]},\
"simple_endian":{"doc":"Many byte-order-handling libraries focus on providing code …","t":"DDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGLLLLLLLLLLLLLLLLLLLLKLLKLLGGGGGGGGLLGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLGGGGGGGGGG","n":["BigEndian","LittleEndian","SpecificEndian","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","f32be","f32le","f64be","f64le","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_big_endian","from_bits","from_bits","from_little_endian","hash","hash","i128be","i128le","i16be","i16le","i32be","i32le","i64be","i64le","into","into","isizebe","isizele","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_big_endian","to_bits","to_bits","to_little_endian","to_native","to_native","try_from","try_from","try_into","try_into","type_id","type_id","u128be","u128le","u16be","u16le","u32be","u32le","u64be","u64le","usizebe","usizele"],"q":[[0,"simple_endian"]],"d":["A big-endian representation of type <code>T</code> that implements …","A little-endian representation of type <code>T</code> that implements …","Any object implementing <code>SpecificEndian&lt;T&gt;</code> can be converted …horthand for <code>BigEndian&lt;f32&gt;</code>","Shorthand for <code>LittleEndian&lt;f32&gt;</code>","Shorthand for <code>BigEndian&lt;f64&gt;</code>","Shorthand for <code>LittleEndian&lt;f64&gt;</code>","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Imports the data raw into a BigEndian struct.","Imports the data raw into a LittleEndian struct.","","","","Shorthand for <code>BigEndian&lt;i128&gt;</code>","Shorthand for <code>LittleEndian&lt;i128&gt;</code>","Shorthand for <code>BigEndian&lt;i16&gt;</code>","Shorthand for <code>LittleEndian&lt;i16&gt;</code>","Shorthand for <code>BigEndian&lt;i32&gt;</code>","Shorthand for <code>LittleEndian&lt;i32&gt;</code>","Shorthand for <code>BigEndian&lt;i64&gt;</code>","Shorthand for <code>LittleEndian&lt;i64&gt;</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Shorthand for <code>BigEndian&lt;isize&gt;</code>","Shorthand for <code>LittleEndian&lt;isize&gt;</codeeturns the raw data stored in the struct.","Returns the raw data stored in the struct.","","Converts the data to the same type T in host-native endian.","Converts the data to the same type T in host-native endian.","","","","","","","Shorthand for <code>BigEndian&lt;u128&gt;</code>","Shorthand for <code>LittleEndian&lt;u128&gt;</code>","Shorthand for <code>BigEndian&lt;u16&gt;</code> ","Shorthand for <code>LittleEndian&lt;u16&gt;</code> ","Shorthand for <code>BigEndian&lt;u32&gt;</code>","Shorthand for <code>LittleEndian&lt;u32&gt;</code> ","Shorthand for <code>BigEndian&lt;u64&gt;</code>","Shorthand for <code>LittleEndian&lt;u64&gt;</code> ","Shorthand for <code>BigEndian&lt;usize&gt;</code>","Shorthand for <code>LittleEndian&lt;usize&gt;</code>"],"i":[0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,16,2,16,2,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,16,0,0,0,0,2,2,2,2,2,2,16,16,16,16,16,16,2,2,2,2,16,16,16,16,19,2,16,19,2,16,0,0,0,0,0,0,0,0,2,16,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,2,16,19,2,16,2,16,2,16,2,16,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[3]],[2,[3]]],[[2,[3]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[8]],[2,[8]]],[[2,[8]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[8]],[16,[8]]],[[16,[8]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[16,[3]],[16,[3]]],[[16,[3]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[2,[12]],[2,[12]]]],[[[2,[7]],[2,[7]]]],[[[2,[10]],[2,[10]]]],[[[2,[15]],[2,[15]]]],[[[2,[14]],[2,[14]]]],[[[2,[9]],[2,[9]]]],[[[2,[8]],[2,[8]]]],[[[2,[1]],[2,[1]]]],[[[2,[4]],[2,[4]]]],[[[2,[6]],[2,[6]]]],[[[2,[5]],[2,[5]]]],[[[2,[11]],[2,[11]]]],[[[2,[3]],[2,[3]]]],[[[2,[13]],[2,[13]]]],[[[16,[6]],[16,[6]]]],[[[16,[3]],[16,[3]]]],[[[16,[12]],[16,[12]]]],[[[16,[9]],[16,[9]]]],[[[16,[15]],[16,[15]]]],[[[16,[7]],[16,[7]]]],[[[16,[10]],[16,[10]]]],[[[16,[13]],[16,[13]]]],[[[16,[4]],[16,[4]]]],[[[16,[1]],[16,[1]]]],[[[16,[8]],[16,[8]]]],[[[16,[14]],[16,[14]]]],[[[16,[5]],[16,[5]]]],[[[16,[11]],[16,[11]]]],[[[2,[13]],[2,[13]]]],[[[2,[17]],[2,[17]]]],[[[2,[5]],[2,[5]]]],[[[2,[10]],[2,[10]]]],[[[2,[7]],[2,[7]]]],[[[2,[12]],[2,[12]]]],[[[2,[9]],[2,[9]]]],[[[2,[4]],[2,[4]]]],[[[2,[14]],[2,[14]]]],[[[2,[6]],[2,[6]]]],[[[2,[1]],[2,[1]]]],[[[2,[15]],[2,[15]]]],[[[2,[11]],[2,[11]]]],[[[16,[15]],[16,[15]]]],[[[16,[9]],[16,[9]]]],[[[16,[4]],[16,[4]]]],[[[16,[7]],[16,[7]]]],[[[16,[10]],[16,[10]]]],[[[16,[1]],[16,[1]]]],[[[16,[13]],[16,[13]]]],[[[16,[17]],[16,[17]]]],[[[16,[12]],[16,[12]]]],[[[16,[11]],[16,[11]]]],[[[16,[6]],[16,[6]]]],[[[16,[5]],[16,[5]]]],[[[16,[14]],[16,[14]]]],[[[2,[10]],[2,[10]]]],[[[2,[11]],[2,[11]]]],[[[2,[6]],[2,[6]]]],[[[2,[4]],[2,[4]]]],[[[2,[17]],[2,[17]]]],[[[2,[14]],[2,[14]]]],[[[2,[5]],[2,[5]]]],[[[2,[12]],[2,[12]]]],[[[2,[1]],[2,[1]]]],[[[2,[13]],[2,[13]]]],[[[2,[9]],[2,[9]]]],[[[2,[15]],[2,[15]]]],[[[2,[7]],[2,[7]]]],[[[16,[14]],[16,[14]]]],[[[16,[12]],[16,[12]]]],[[[16,[10]],[16,[10]]]],[[[16,[5]],[16,[5]]]],[[[16,[4]],[16,[4]]]],[[[16,[17]],[16,[17]]]],[[[16,[7]],[16,[7]]]],[[[16,[11]],[16,[11]]]],[[[16,[6]],[16,[6]]]],[[[16,[9]],[16,[9]]]],[[[16,[15]],[16,[15]]]],[[[16,[1]],[16,[1]]]],[[[16,[13]],[16,[13]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[2,[17]],[2,[17]]],[[2,[17]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[17]],[16,[17]]],[[16,[17]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[2,[12]],[2,[12]]]],[[[2,[4]],[2,[4]]]],[[[2,[14]],[2,[14]]]],[[[2,[15]],[2,[15]]]],[[[2,[10]],[2,[10]]]],[[[2,[1]],[2,[1]]]],[[[2,[6]],[2,[6]]]],[[[2,[17]],[2,[17]]]],[[[2,[13]],[2,[13]]]],[[[2,[9]],[2,[9]]]],[[[2,[7]],[2,[7]]]],[[[2,[11]],[2,[11]]]],[[[2,[5]],[2,[5]]]],[[[16,[13]],[16,[13]]]],[[[16,[1]],[16,[1]]]],[[[16,[12]],[16,[12]]]],[[[16,[5]],[16,[5]]]],[[[16,[7]],[16,[7]]]],[[[16,[17]],[16,[17]]]],[[[16,[14]],[16,[14]]]],[[[16,[9]],[16,[9]]]],[[[16,[6]],[16,[6]]]],[[[16,[4]],[16,[4]]]],[[[16,[15]],[16,[15]]]],[[[16,[10]],[16,[10]]]],[[[16,[11]],[16,[11]]]],[[[2,[1]],[2,[1]]]],[[[2,[5]],[2,[5]]]],[[[2,[17]],[2,[17]]]],[[[2,[12]],[2,[12]]]],[[[2,[14]],[2,[14]]]],[[[2,[7]],[2,[7]]]],[[[2,[11]],[2,[11]]]],[[[2,[4]],[2,[4]]]],[[[2,[13]],[2,[13]]]],[[[2,[6]],[2,[6]]]],[[[2,[15]],[2,[15]]]],[[[2,[9]],[2,[9]]]],[[[2,[10]],[2,[10]]]],[[[16,[14]],[16,[14]]]],[[[16,[15]],[16,[15]]]],[[[16,[11]],[16,[11]]]],[[[16,[1]],[16,[1]]]],[[[16,[9]],[16,[9]]]],[[[16,[6]],[16,[6]]]],[[[16,[5]],[16,[5]]]],[[[16,[4]],[16,[4]]]],[[[16,[12]],[16,[12]]]],[[[16,[10]],[16,[10]]]],[[[16,[7]],[16,[7]]]],[[[16,[13]],[16,[13]]]],[[[16,[17]],[16,[17]]]],[[[2,[5]],[2,[5]]]],[[[2,[1]],[2,[1]]]],[[[2,[11]],[2,[11]]]],[[[2,[12]],[2,[12]]]],[[[2,[17]],[2,[17]]]],[[[2,[6]],[2,[6]]]],[[[2,[10]],[2,[10]]]],[[[2,[4]],[2,[4]]]],[[[2,[9]],[2,[9]]]],[[[2,[7]],[2,[7]]]],[[[2,[14]],[2,[14]]]],[[[2,[13]],[2,[13]]]],[[[2,[15]],[2,[15]]]],[[[16,[7]],[16,[7]]]],[[[16,[5]],[16,[5]]]],[[[16,[1]],[16,[1]]]],[[[16,[9]],[16,[9]]]],[[[16,[12]],[16,[12]]]],[[[16,[14]],[16,[14]]]],[[[16,[15]],[16,[15]]]],[[[16,[6]],[16,[6]]]],[[[16,[4]],[16,[4]]]],[[[16,[13]],[16,[13]]]],[[[16,[10]],[16,[10]]]],[[[16,[11]],[16,[11]]]],[[[16,[17]],[16,[17]]]],[[]],[[]],[[]],[[]],[[[2,[[0,[18,[19,[[0,[18,[19,[[0,[18,[19,[[0,[18,19]]]]]]]]]]]]]]]]],[[2,[[0,[18,[19,[[0,[18,[19,[[0,[18,[19,[[0,[18,19]]]]]]]]]]]]]]]]]],[[[16,[[0,[18,[19,[[0,[18,[19,[[0,[18,[19,[[0,[18,19]]]]]]]]]]]]]]]]],[[16,[[0,[18,[19,[[0,[18,[19,[[0,[18,[19,[[0,[18,19]]]]]]]]]]]]]]]]]],[[[2,[5]],[2,[5]]],20],[[[2,[9]],[2,[9]]],20],[[[2,[17]],[2,[17]]],20],[[[2,[6]],[2,[6]]],20],[[[2,[15]],[2,[15]]],20],[[[2,[11]],[2,[11]]],20],[[[2,[10]],[2,[10]]],20],[[[2,[1]],[2,[1]]],20],[[[2,[4]],[2,[4]]],20],[[[2,[14]],[2,[14]]],20],[[[2,[7]],[2,[7]]],20],[[[2,[12]],[2,[12]]],20],[[[2,[13]],[2,[13]]],20],[[[16,[10]],[16,[10]]],20],[[[16,[13]],[16,[13]]],20],[[[16,[14]],[16,[14]]],20],[[[16,[7]],[16,[7]]],20],[[[16,[17]],[16,[17]]],20],[[[16,[15]],[16,[15]]],20],[[[16,[12]],[16,[12]]],20],[[[16,[1]],[16,[1]]],20],[[[16,[5]],[16,[5]]],20],[[[16,[9]],[16,[9]]],20],[[[16,[11]],[16,[11]]],20],[[[16,[4]],[16,[4]]],20],[[[16,[6]],[16,[6]]],20],[[],[[2,[[0,[21,[19,[[0,[21,[19,[[0,[21,[19,[[0,[21,19]]]]]]]]]]]]]]]]]],[[],[[16,[[0,[21,[19,[[0,[21,[19,[[0,[21,[19,[[0,[21,19]]]]]]]]]]]]]]]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[8]],[2,[8]]],[[2,[8]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[3]],[2,[3]]],[[2,[3]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[3]],[16,[3]]],[[16,[3]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[16,[8]],[16,[8]]],[[16,[8]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[2,[13]],[2,[13]]]],[[[2,[10]],[2,[10]]]],[[[2,[15]],[2,[15]]]],[[[2,[9]],[2,[9]]]],[[[2,[7]],[2,[7]]]],[[[2,[11]],[2,[11]]]],[[[2,[12]],[2,[12]]]],[[[2,[8]],[2,[8]]]],[[[2,[14]],[2,[14]]]],[[[2,[3]],[2,[3]]]],[[[2,[4]],[2,[4]]]],[[[2,[6]],[2,[6]]]],[[[2,[1]],[2,[1]]]],[[[2,[5]],[2,[5]]]],[[[16,[14]],[16,[14]]]],[[[16,[3]],[16,[3]]]],[[[16,[9]],[16,[9]]]],[[[16,[12]],[16,[12]]]],[[[16,[5]],[16,[5]]]],[[[16,[15]],[16,[15]]]],[[[16,[13]],[16,[13]]]],[[[16,[7]],[16,[7]]]],[[[16,[8]],[16,[8]]]],[[[16,[11]],[16,[11]]]],[[[16,[1]],[16,[1]]]],[[[16,[10]],[16,[10]]]],[[[16,[4]],[16,[4]]]],[[[16,[6]],[16,[6]]]],[[[2,[[0,[22,[19,[[0,[22,[19,[[0,[22,[19,[[0,[22,19]]]]]]]]]]]]]]]],[2,[[0,[22,[19,[[0,[22,[19,[[0,[22,[19,[[0,[22,19]]]]]]]]]]]]]]]]],17],[[[16,[[0,[22,[19,[[0,[22,[19,[[0,[22,[19,[[0,[22,19]]]]]]]]]]]]]]]],[16,[[0,[22,[19,[[0,[22,[19,[[0,[22,[19,[[0,[22,19]]]]]]]]]]]]]]]]],17],0,0,0,0,[[[2,[[0,[23,[19,[[0,[23,[19,[[0,[23,[19,[[0,[23,19]]]]]]]]]]]]]]]],24],25],[[[2,[[0,[26,[19,[[0,[26,[19,[[0,[26,[19,[[0,[26,19]]]]]]]]]]]]]]]],24],25],[[[2,[[0,[27,[19,[[0,[27,[19,[[0,[27,[19,[[0,[27,19]]]]]]]]]]]]]]]],24],25],[[[2,[[0,[28,[19,[[0,[28,[19,[[0,[28,[19,[[0,[28,19]]]]]]]]]]]]]]]],24],25],[[[2,[[0,[29,[19,[[0,[29,[19,[[0,[29,[19,[[0,[29,19]]]]]]]]]]]]]]]],24],25],[[[2,[[0,[30,[19,[[0,[30,[19,[[0,[30,[19,[[0,[30,19]]]]]]]]]]]]]]]],24],25],[[[16,[[0,[26,[19,[[0,[26,[19,[[0,[26,[19,[[0,[26,19]]]]]]]]]]]]]]]],24],25],[[[16,[[0,[29,[19,[[0,[29,[19,[[0,[29,[19,[[0,[29,19]]]]]]]]]]]]]]]],24],25],[[[16,[[0,[28,[19,[[0,[28,[19,[[0,[28,[19,[[0,[28,19]]]]]]]]]]]]]]]],24],25],[[[16,[[0,[23,[19,[[0,[23,[19,[[0,[23,[19,[[0,[23,19]]]]]]]]]]]]]]]],24],25],[[[16,[[0,[30,[19,[[0,[30,[19,[[0,[30,[19,[[0,[30,19]]]]]]]]]]]]]]]],24],25],[[[16,[[0,[27,[19,[[0,[27,[19,[[0,[27,[19,[[0,[27,19]]]]]]]]]]]]]]]],24],25],[[[19,[[19,[[19,[[19,[19]]]]]]]]],[[2,[[19,[[19,[[19,[19]]]]]]]]]],[[]],[31],[[[16,[[19,[[19,[[19,[19]]]]]]]]],[[2,[[19,[[19,[[19,[19]]]]]]]]]],[[[19,[[19,[[19,[[19,[19]]]]]]]]],[[16,[[19,[[19,[[19,[19]]]]]]]]]],[[[2,[[19,[[19,[[19,[19]]]]]]]]],[[16,[[19,[[19,[[19,[19]]]]]]]]]],[31],[[]],[[]],[[[19,[[19,[[19,[[19,[19]]]]]]]]],[[2,[[19,[[19,[[19,[19]]]]]]]]]],[[[19,[[19,[[19,[[19,[19]]]]]]]]],[[16,[[19,[[19,[[19,[19]]]]]]]]]],[[]],[[[2,[[0,[32,[19,[[0,[32,[19,[[0,[32,[19,[[0,[32,19]]]]]]]]]]]]]]]],33]],[[[16,[[0,[32,[19,[[0,[32,[19,[[0,[32,[19,[[0,[32,19]]]]]]]]]]]]]]]],33]],0,0,0,0,0,0,0,0,[[]],[[]],0,0,[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[3]],[2,[3]]],[[2,[3]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[8]],[2,[8]]],[[2,[8]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[16,[8]],[16,[8]]],[[16,[8]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[3]],[16,[3]]],[[16,[3]]]],[[[2,[12]],[2,[12]]]],[[[2,[10]],[2,[10]]]],[[[2,[14]],[2,[14]]]],[[[2,[15]],[2,[15]]]],[[[2,[1]],[2,[1]]]],[[[2,[13]],[2,[13]]]],[[[2,[7]],[2,[7]]]],[[[2,[6]],[2,[6]]]],[[[2,[3]],[2,[3]]]],[[[2,[5]],[2,[5]]]],[[[2,[9]],[2,[9]]]],[[[2,[11]],[2,[11]]]],[[[2,[4]],[2,[4]]]],[[[2,[8]],[2,[8]]]],[[[16,[15]],[16,[15]]]],[[[16,[10]],[16,[10]]]],[[[16,[11]],[16,[11]]]],[[[16,[1]],[16,[1]]]],[[[16,[5]],[16,[5]]]],[[[16,[9]],[16,[9]]]],[[[16,[7]],[16,[7]]]],[[[16,[4]],[16,[4]]]],[[[16,[14]],[16,[14]]]],[[[16,[3]],[16,[3]]]],[[[16,[6]],[16,[6]]]],[[[16,[13]],[16,[13]]]],[[[16,[8]],[16,[8]]]],[[[16,[12]],[16,[12]]]],[[[2,[6]]],[[2,[6]]]],[[[2,[4]]],[[2,[4]]]],[[[2,[9]]],[[2,[9]]]],[[[2,[15]]],[[2,[15]]]],[[[2,[13]]],[[2,[13]]]],[[[2,[11]]],[[2,[11]]]],[[[2,[3]]],[[2,[3]]]],[[[2,[8]]],[[2,[8]]]],[[[16,[4]]],[[16,[4]]]],[[[16,[3]]],[[16,[3]]]],[[[16,[15]]],[[16,[15]]]],[[[16,[11]]],[[16,[11]]]],[[[16,[8]]],[[16,[8]]]],[[[16,[9]]],[[16,[9]]]],[[[16,[6]]],[[16,[6]]]],[[[16,[13]]],[[16,[13]]]],[[[2,[15]]]],[[[2,[17]]]],[[[2,[10]]]],[[[2,[7]]]],[[[2,[5]]]],[[[2,[12]]]],[[[2,[6]]]],[[[2,[4]]]],[[[2,[9]]]],[[[2,[13]]]],[[[2,[1]]]],[[[2,[11]]]],[[[2,[14]]]],[[[16,[9]]]],[[[16,[4]]]],[[[16,[7]]]],[[[16,[1]]]],[[[16,[15]]]],[[[16,[14]]]],[[[16,[12]]]],[[[16,[13]]]],[[[16,[5]]]],[[[16,[6]]]],[[[16,[17]]]],[[[16,[10]]]],[[[16,[11]]]],[[[2,[8]],[2,[8]]],[[34,[20]]]],[[[2,[9]],[2,[9]]],[[34,[20]]]],[[[2,[15]],[2,[15]]],[[34,[20]]]],[[[2,[5]],[2,[5]]],[[34,[20]]]],[[[2,[3]],[2,[3]]],[[34,[20]]]],[[[2,[11]],[2,[11]]],[[34,[20]]]],[[[2,[12]],[2,[12]]],[[34,[20]]]],[[[2,[7]],[2,[7]]],[[34,[20]]]],[[[2,[6]],[2,[6]]],[[34,[20]]]],[[[2,[13]],[2,[13]]],[[34,[20]]]],[[[2,[17]],[2,[17]]],[[34,[20]]]],[[[2,[4]],[2,[4]]],[[34,[20]]]],[[[2,[1]],[2,[1]]],[[34,[20]]]],[[[2,[14]],[2,[14]]],[[34,[20]]]],[[[2,[10]],[2,[10]]],[[34,[20]]]],[[[16,[14]],[16,[14]]],[[34,[20]]]],[[[16,[11]],[16,[11]]],[[34,[20]]]],[[[16,[1]],[16,[1]]],[[34,[20]]]],[[[16,[12]],[16,[12]]],[[34,[20]]]],[[[16,[17]],[16,[17]]],[[34,[20]]]],[[[16,[10]],[16,[10]]],[[34,[20]]]],[[[16,[15]],[16,[15]]],[[34,[20]]]],[[[16,[8]],[16,[8]]],[[34,[20]]]],[[[16,[9]],[16,[9]]],[[34,[20]]]],[[[16,[5]],[16,[5]]],[[34,[20]]]],[[[16,[7]],[16,[7]]],[[34,[20]]]],[[[16,[4]],[16,[4]]],[[34,[20]]]],[[[16,[13]],[16,[13]]],[[34,[20]]]],[[[16,[3]],[16,[3]]],[[34,[20]]]],[[[16,[6]],[16,[6]]],[[34,[20]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[2,[6]],[2,[6]]]],[[[2,[13]],[2,[13]]]],[[[2,[14]],[2,[14]]]],[[[2,[12]],[2,[12]]]],[[[2,[11]],[2,[11]]]],[[[2,[15]],[2,[15]]]],[[[2,[7]],[2,[7]]]],[[[2,[9]],[2,[9]]]],[[[2,[1]],[2,[1]]]],[[[2,[10]],[2,[10]]]],[[[2,[5]],[2,[5]]]],[[[2,[4]],[2,[4]]]],[[[16,[15]],[16,[15]]]],[[[16,[5]],[16,[5]]]],[[[16,[7]],[16,[7]]]],[[[16,[13]],[16,[13]]]],[[[16,[1]],[16,[1]]]],[[[16,[11]],[16,[11]]]],[[[16,[12]],[16,[12]]]],[[[16,[9]],[16,[9]]]],[[[16,[14]],[16,[14]]]],[[[16,[4]],[16,[4]]]],[[[16,[6]],[16,[6]]]],[[[16,[10]],[16,[10]]]],[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[2,[12]],[2,[12]]]],[[[2,[1]],[2,[1]]]],[[[2,[11]],[2,[11]]]],[[[2,[15]],[2,[15]]]],[[[2,[4]],[2,[4]]]],[[[2,[9]],[2,[9]]]],[[[2,[5]],[2,[5]]]],[[[2,[14]],[2,[14]]]],[[[2,[13]],[2,[13]]]],[[[2,[7]],[2,[7]]]],[[[2,[10]],[2,[10]]]],[[[2,[6]],[2,[6]]]],[[[16,[10]],[16,[10]]]],[[[16,[7]],[16,[7]]]],[[[16,[11]],[16,[11]]]],[[[16,[1]],[16,[1]]]],[[[16,[13]],[16,[13]]]],[[[16,[14]],[16,[14]]]],[[[16,[9]],[16,[9]]]],[[[16,[4]],[16,[4]]]],[[[16,[6]],[16,[6]]]],[[[16,[15]],[16,[15]]]],[[[16,[5]],[16,[5]]]],[[[16,[12]],[16,[12]]]],[[[2,[12]],[2,[12]]],[[2,[12]]]],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[[2,[7]],[2,[7]]],[[2,[7]]]],[[[2,[9]],[2,[9]]],[[2,[9]]]],[[[2,[4]],[2,[4]]],[[2,[4]]]],[[[2,[10]],[2,[10]]],[[2,[10]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[2,[3]],[2,[3]]],[[2,[3]]]],[[[2,[11]],[2,[11]]],[[2,[11]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[2,[14]],[2,[14]]],[[2,[14]]]],[[[2,[8]],[2,[8]]],[[2,[8]]]],[[[2,[15]],[2,[15]]],[[2,[15]]]],[[[2,[5]],[2,[5]]],[[2,[5]]]],[[[16,[10]],[16,[10]]],[[16,[10]]]],[[[16,[8]],[16,[8]]],[[16,[8]]]],[[[16,[7]],[16,[7]]],[[16,[7]]]],[[[16,[11]],[16,[11]]],[[16,[11]]]],[[[16,[15]],[16,[15]]],[[16,[15]]]],[[[16,[12]],[16,[12]]],[[16,[12]]]],[[[16,[14]],[16,[14]]],[[16,[14]]]],[[[16,[9]],[16,[9]]],[[16,[9]]]],[[[16,[3]],[16,[3]]],[[16,[3]]]],[[[16,[5]],[16,[5]]],[[16,[5]]]],[[[16,[4]],[16,[4]]],[[16,[4]]]],[[[16,[13]],[16,[13]]],[[16,[13]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[16,[6]],[16,[6]]],[[16,[6]]]],[[[2,[1]],[2,[1]]]],[[[2,[8]],[2,[8]]]],[[[2,[9]],[2,[9]]]],[[[2,[12]],[2,[12]]]],[[[2,[7]],[2,[7]]]],[[[2,[14]],[2,[14]]]],[[[2,[15]],[2,[15]]]],[[[2,[4]],[2,[4]]]],[[[2,[10]],[2,[10]]]],[[[2,[11]],[2,[11]]]],[[[2,[13]],[2,[13]]]],[[[2,[3]],[2,[3]]]],[[[2,[6]],[2,[6]]]],[[[2,[5]],[2,[5]]]],[[[16,[9]],[16,[9]]]],[[[16,[15]],[16,[15]]]],[[[16,[1]],[16,[1]]]],[[[16,[7]],[16,[7]]]],[[[16,[6]],[16,[6]]]],[[[16,[13]],[16,[13]]]],[[[16,[4]],[16,[4]]]],[[[16,[5]],[16,[5]]]],[[[16,[14]],[16,[14]]]],[[[16,[10]],[16,[10]]]],[[[16,[12]],[16,[12]]]],[[[16,[8]],[16,[8]]]],[[[16,[11]],[16,[11]]]],[[[16,[3]],[16,[3]]]],[[]],[[[2,[[19,[[19,[[19,[19]]]]]]]]],[[19,[[19,[[19,[[19,[19]]]]]]]]]],[[[16,[[19,[[19,[[19,[19]]]]]]]]],[[19,[[19,[[19,[[19,[19]]]]]]]]]],[[]],[[[2,[[19,[[19,[[19,[19]]]]]]]]],[[19,[[19,[[19,[[19,[19]]]]]]]]]],[[[16,[[19,[[19,[[19,[19]]]]]]]]],[[19,[[19,[[19,[[19,[19]]]]]]]]]],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[15,"u128"],[3,"BigEndian"],[15,"f32"],[15,"i64"],[15,"u8"],[15,"isize"],[15,"usize"],[15,"f64"],[15,"i128"],[15,"u32"],[15,"i32"],[15,"u64"],[15,"i16"],[15,"u16"],[15,"i8"],[3,"LittleEndian"],[15,"bool"],[8,"Clone"],[8,"SpecificEndian"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[8,"LowerHex"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"UpperHex"],[8,"Octal"],[8,"Binary"],[8,"Display"],[15,"never"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":"GCGCGCGGCAAAADDCCLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDLLLLLLLLLLLLLLLLLLLLLLLLLLDIDLLLLLLLLKLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Mutex","MutexGuard","Once","RelaxStrategy","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","Spin","mutex","once","relax","rwlock","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","leak","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","SpinMutex","SpinMutexGuard","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","leak","lock","new","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","default","drop","fmt","from","from","from","get","get_mut","get_mut_unchecked","get_unchecked","initialized","into","into_inner_unchecked","is_completed","new","poll","try_call_once","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","leak","leak","leak","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_read","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","upgrade","upgradeable_read","write","writer_count"],"q":[[0,"spin"],[13,"spin::mutex"],[48,"spin::mutex::spin"],[82,"spin::once"],[110,"spin::relax"],[130,"spin::rwlock"]],"d":["A primitive that synchronizes the execution of multiple …","","A primitive that provides lazy one-time initialization. …","","A lock that provides data access to either one writer or …","","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See …","","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","","","Force unlock this <code>Mutex</code>.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>Mutex</code> and returns a guard that permits access to …","Creates a new <code>Mutex</code> wrapping the supplied data.","A naïve spinning mutex.","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","Returns a mutable pointer to the underlying data.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this <code>SpinMutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>SpinMutex</code> and returns a guard that permits …","Creates a new <code>SpinMutex</code> wrapping the supplied data.","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","","Returns the argument unchanged.","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a mutable reference to the inner value","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Returns a the inner value if the <code>Once</code> has been initialized.","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","This method is similar to <code>call_once</code>, but allows the given …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","Returns a mutable pointer to the underying data.","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","Attempt to acquire this lock with shared read access.","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,4,3,4,4,3,4,4,3,3,3,3,4,3,3,4,3,3,4,3,3,0,3,4,3,4,3,3,4,0,0,15,15,16,15,16,15,16,16,16,15,16,16,15,15,15,15,16,15,15,16,15,15,16,15,15,15,16,15,16,15,15,16,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,24,25,24,25,24,25,24,25,11,24,25,24,25,24,25,24,25,0,0,0,0,19,19,20,21,22,19,20,21,22,19,20,21,22,21,21,22,21,20,21,22,19,20,20,21,21,22,22,19,19,19,19,19,20,21,22,19,19,20,21,22,19,20,21,22,19,19,19,19,20,21,22,19,20,21,22,19,22,19,19,19,20,21,22,22,19,19,19],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[3,[[0,[1,2]]]]]],[[[4,[1]]],1],[[[4,[1]]],1],[[[3,[[0,[1,5]]]],6],7],[[[4,[[0,[1,8]]]],6],7],[[[4,[[0,[1,5]]]],6],7],[[[3,[1]]]],[[]],[9],[[],3],[[]],[[[3,[1]]],1],[[]],[[]],[3],[[[3,[1]]],10],[[[4,[1]]],1],[[[3,[1,11]]],[[4,[1]]]],[[],3],0,[[],12],[[],12],[[],12],[[],12],[[[3,[1]]],[[13,[[4,[1]]]]]],[[],14],[[],14],0,0,[15],[[]],[[]],[[]],[[]],[[],[[15,[[0,[1,2]]]]]],[[[16,[1]]],1],[[[16,[1]]],1],[[[16,[1]]]],[[[15,[[0,[1,5]]]],6],7],[[[16,[[0,[1,8]]]],6],7],[[[16,[[0,[1,5]]]],6],7],[[[15,[1]]]],[9],[[]],[[],15],[[]],[[[15,[1]]],1],[[]],[[]],[15],[[[15,[1]]],10],[[[16,[1]]],1],[[[15,[1,11]]],[[16,[1]]]],[[],15],[[],12],[[],12],[[],12],[[],12],[[[15,[1]]],[[13,[[16,[1]]]]]],[[],14],[[],14],0,0,[17],[[]],[[]],[[[17,[11]],18]],[[],17],[17],[[[17,[5]],6],7],[9],[[]],[[],17],[17,13],[17,13],[17],[17],[[],17],[[]],[17],[17,10],[[],17],[[[17,[11]]],13],[[[17,[11]],18],12],[[],12],[[],12],[17,13],[[],14],[[[17,[11]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],14],[[],14],0,0,0,0,[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[[0,[1,2]]]]]],[[[20,[1]]],1],[[[21,[1]]],1],[[[22,[1]]],1],[[[21,[1]]],1],[[[21,[1]]],[[20,[1]]]],[[[22,[1]]],[[20,[1]]]],[[[21,[1]]],[[22,[1]]]],[[[20,[1]]]],[[[21,[1]]]],[[[22,[1]]]],[[[19,[[0,[1,5]]]],6],7],[[[20,[[0,[1,8]]]],6],7],[[[20,[[0,[1,5]]]],6],7],[[[21,[[0,[1,5]]]],6],7],[[[21,[[0,[1,8]]]],6],7],[[[22,[[0,[1,5]]]],6],7],[[[22,[[0,[1,8]]]],6],7],[[[19,[1]]]],[[[19,[1]]]],[[],19],[[]],[9],[[]],[[]],[[]],[[[19,[1]]],1],[[]],[[]],[[]],[[]],[19],[[[20,[1]]],1],[[[21,[1]]],1],[[[22,[1]]],1],[[],19],[[[19,[1,11]]],[[20,[1]]]],[[[19,[1]]],23],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[19,[1]]],[[13,[[20,[1]]]]]],[[[22,[1]]],[[12,[[21,[1]],[22,[1]]]]]],[[[19,[1]]],[[13,[[22,[1]]]]]],[[[19,[1]]],[[13,[[21,[1]]]]]],[[],14],[[],14],[[],14],[[],14],[[[22,[1,11]]],[[21,[1,11]]]],[[[19,[1,11]]],[[22,[1,11]]]],[[[19,[1,11]]],[[21,[1,11]]]],[[[19,[1]]],23]],"c":[],"p":[[8,"Sized"],[8,"Default"],[3,"Mutex"],[3,"MutexGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[15,"never"],[15,"bool"],[8,"RelaxStrategy"],[4,"Result"],[4,"Option"],[3,"TypeId"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"Once"],[8,"FnOnce"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"],[15,"usize"],[3,"Spin"],[3,"Loop"]]},\
"static_assertions":{"doc":"Banner","t":"OOOOOOOOOOOOOOOOOOO","n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":[[0,"static_assertions"]],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[]},\
"uapi":{"doc":"","t":"AAANRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNDDEDDDDDDDDNLLLLLLLLLLLLLLLLLLLLLLMMMMLLMMMMMMMMMMMMMMMMMMMMMFFFFMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMMMMMMMMMMMMMRRRRRRRRRRFFFFFRR","n":["drm","ioctl","pty","Connected","DRM_CAP_ADDFB2_MODIFIERS","DRM_CAP_ASYNC_PAGE_FLIP","DRM_CAP_CRTC_IN_VBLANK_EVENT","DRM_CAP_CURSOR_HEIGHT","DRM_CAP_CURSOR_WIDTH","DRM_CAP_DUMB_BUFFER","DRM_CAP_DUMB_PREFERRED_DEPTH","DRM_CAP_DUMB_PREFER_SHADOW","DRM_CAP_PAGE_FLIP_TARGET","DRM_CAP_PRIME","DRM_CAP_SYNCOBJ","DRM_CAP_SYNCOBJ_TIMELINE","DRM_CAP_TIMESTAMP_MONOTONIC","DRM_CAP_VBLANK_HIGH_CRTC","DRM_DISPLAY_MODE_LEN","DRM_IOCTL_BASE","DRM_IOCTL_GET_CAP","DRM_IOCTL_GET_CONNECTOR","DRM_IOCTL_GET_CRTC","DRM_IOCTL_GET_ENCODER","DRM_IOCTL_MODE_ADDFB","DRM_IOCTL_MODE_CREATE_DUMB","DRM_IOCTL_MODE_GETRESOURCES","DRM_IOCTL_MODE_MAP_DUMB","DRM_IOCTL_SET_CRTC","DRM_IOCTL_VERSION","DRM_MODE_FLAG_BCAST","DRM_MODE_FLAG_CLKDIV2","DRM_MODE_FLAG_CSYNC","DRM_MODE_FLAG_DBLCLK","DRM_MODE_FLAG_DBLSCAN","DRM_MODE_FLAG_HSKEW","DRM_MODE_FLAG_INTERLACE","DRM_MODE_FLAG_NCSYNC","DRM_MODE_FLAG_NHSYNC","DRM_MODE_FLAG_NVSYNC","DRM_MODE_FLAG_PCSYNC","DRM_MODE_FLAG_PHSYNC","DRM_MODE_FLAG_PIXMUX","DRM_MODE_FLAG_PVSYNC","DRM_MODE_TYPE_DRIVER","DRM_PRIME_CAP_EXPORT","DRM_PRIME_CAP_IMPORT","Disconnected","DrmGetCap","DrmModeCardRes","DrmModeConStatus","DrmModeCreateDumb","DrmModeCrtc","DrmModeFbCmd","DrmModeGetConnector","DrmModeGetEncoder","DrmModeInfo","DrmModeMapDumb","DrmVersion","Unknown","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpp","bpp","capability","clock","clone","clone","connection","connector_id","connector_id_ptr","connector_type","connector_type_id","count_connectors","count_connectors","count_crtcs","count_encoders","count_encoders","count_fbs","count_modes","count_props","crtc_id","crtc_id","crtc_id_ptr","date","date_len","depth","desc","desc_len","drm_io","drm_ior","drm_iow","drm_iowr","encoder_id","encoder_id","encoder_id_ptr","encoder_typ","encoders_ptr","fb_id","fb_id","fb_id_ptr","flags","flags","fmt","from","from","from","from","from","from","from","from","from","from","from","gamma_size","handle","handle","handle","hdisplay","height","height","hskew","hsync_end","hsync_start","htotal","into","into","into","into","into","into","into","into","into","into","into","max_height","max_width","min_height","min_width","mm_height","mm_width","mode","mode_valid","modes_ptr","name","name","name_len","offset","pad","pad","pitch","pitch","possible_clones","possible_crtcs","prop_values_ptr","props_ptr","set_connectors_ptr","size","subpixel","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vdisplay","version_major","version_minor","version_patch_level","vrefresh","vscan","vsync_end","vsync_start","vtotal","width","width","x","y","IOC_DIRSHIFT","IOC_NONE","IOC_NRBITS","IOC_NRSHIFT","IOC_READ","IOC_SIZEBITS","IOC_SIZESHIFT","IOC_TYPEBITS","IOC_TYPESHIFT","IOC_WRITE","io","ioc","ior","iow","iowr","TIOCGPTN","TIOCSPTLCK"],"q":[[0,"uapi"],[3,"uapi::drm"],[229,"uapi::ioctl"],[244,"uapi::pty"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type-specific connector number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,8,9,10,11,12,13,14,15,16,1,2,8,9,10,11,12,13,14,15,16,1,2,14,15,9,2,1,2,13,13,10,13,13,10,11,10,10,13,10,13,13,11,12,10,8,8,14,8,8,0,0,0,0,12,13,10,12,13,11,14,10,15,2,1,8,9,10,11,12,13,14,15,16,1,2,11,14,15,16,2,14,15,2,2,2,2,8,9,10,11,12,13,14,15,16,1,2,10,10,10,10,13,13,11,11,13,8,2,8,16,13,16,14,15,12,12,13,13,11,15,13,8,9,10,11,12,13,14,15,16,1,2,8,9,10,11,12,13,14,15,16,1,2,2,8,9,10,11,12,13,14,15,16,1,2,9,2,8,8,8,2,2,2,2,2,14,15,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1,1],[2,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,3],[3,3],[3,3],[3,3],0,0,0,0,0,0,0,0,0,0,[[1,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,3],3],[[3,3,3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],0,0],"c":[],"p":[[4,"DrmModeConStatus"],[3,"DrmModeInfo"],[15,"usize"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"DrmVersion"],[3,"DrmGetCap"],[3,"DrmModeCardRes"],[3,"DrmModeCrtc"],[3,"DrmModeGetEncoder"],[3,"DrmModeGetConnector"],[3,"DrmModeFbCmd"],[3,"DrmModeCreateDumb"],[3,"DrmModeMapDumb"]]},\
"utf8parse":{"doc":"A table-driven UTF-8 Parser","t":"DILLLKLLLKLLLL","n":["Parser","Receiver","advance","borrow","borrow_mut","codepoint","default","from","into","invalid_sequence","new","try_from","try_into","type_id"],"q":[[0,"utf8parse"]],"d":["A parser for Utf8 Characters","Handles codepoint and invalid sequence events from the …","Advance the parser","","","Called whenever a codepoint is parsed successfully","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Called when an invalid_sequence is detected","Create a new Parser","","",""],"i":[0,0,1,1,1,2,1,1,1,2,1,1,1,1],"f":[0,0,[[1,2,3]],[[]],[[]],[4],[[],1],[[]],[[]],[[]],[[],1],[[],5],[[],5],[[],6]],"c":[],"p":[[3,"Parser"],[8,"Receiver"],[15,"u8"],[15,"char"],[4,"Result"],[3,"TypeId"]]},\
"vte":{"doc":"Parser for implementing virtual terminal emulators","t":"DDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Params","ParamsIter","Parser","Perform","advance","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","csi_dispatch","default","default","esc_dispatch","execute","fmt","from","from","from","hook","into","into","into","into_iter","into_iter","is_empty","iter","len","new","next","osc_dispatch","print","put","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unhook"],"q":[[0,"vte"]],"d":["","Immutable subparameter iterator.","Parser for raw <em>VTE</em> protocol which delegates actions to a …","Performs actions requested by the Parser","Advance the parser state","","","","","","","A final character has arrived for a CSI sequence","","","The final character of an escape sequence has arrived.","Execute a C0 or C1 control function.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Invoked when a final character arrives in first part of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if there are no parameters present.","Returns an iterator over all parameters and subparameters.","Returns the number of parameters.","Create a new Parser","","Dispatch an operating system command.","Draw a character to the screen and update states.","Pass bytes as part of a device control string to the …","","","","","","","","","","","Called when a device control string is terminated."],"i":[0,0,0,0,1,9,4,1,9,4,1,2,4,1,2,2,4,9,4,1,2,9,4,1,9,4,4,4,4,1,9,2,2,2,9,9,4,1,9,4,1,9,4,1,2],"f":[0,0,0,0,[[1,2,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,5,6]],[[],4],[[],1],[[5,3]],[3],[[4,7],8],[[]],[[]],[[]],[[4,5,6]],[[]],[[]],[[]],[[]],[4],[4,5],[4,9],[4,10],[[],1],[9,11],[5],[6],[3],[9],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[]]],"c":[],"p":[[3,"Parser"],[8,"Perform"],[15,"u8"],[3,"Params"],[15,"bool"],[15,"char"],[3,"Formatter"],[6,"Result"],[3,"ParamsIter"],[15,"usize"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"xmas_elf":{"doc":"","t":"DIGGLLALLLLKLKLLLAAMMLLALLLLAALLLNNDRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLFLLLLLNNNNNEDNNEDNNDNNDEDNNNNNREDNNNNNNNNNEDNNNNNNNNNNNNNNNNEDEDNNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMLMMFLMLMLMMMFLMLMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMNNNNRRRRRDNNNNNNNNNNNEDDDENRRRRRNEDNLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLMMFLMMLLFLLLLLLLLLLLLLLLLMMLLLLLLLLLMMRRRRDDEDNNNNNNNNNNRRRNNNNNNNNDNNNNNNNDNNNDNNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRREEDDDNNNEDNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMEDNNDDIDDNNNNNNNNNNNNNNNEDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLL","n":["ElfFile","Extensions","P32","P64","borrow","borrow_mut","dynamic","find_section_by_name","fmt","from","get_dyn_string","get_gnu_buildid","get_gnu_buildid","get_gnu_debuglink","get_gnu_debuglink","get_shstr","get_string","hash","header","header","input","into","new","program","program_header","program_iter","section_header","section_iter","sections","symbol_table","try_from","try_into","type_id","BindNow","Debug","Dynamic","FLAG_1_CONFALT","FLAG_1_DIRECT","FLAG_1_DISPRELDNE","FLAG_1_DISPRELPND","FLAG_1_EDITED","FLAG_1_ENDFILTEE","FLAG_1_GLOBAL","FLAG_1_GLOBAUDIT","FLAG_1_GROUP","FLAG_1_IGNMULDEF","FLAG_1_INITFIRST","FLAG_1_INTERPOSE","FLAG_1_LOADFLTR","FLAG_1_NODEFLIB","FLAG_1_NODELETE","FLAG_1_NODIRECT","FLAG_1_NODUMP","FLAG_1_NOHDR","FLAG_1_NOKSYMS","FLAG_1_NOOPEN","FLAG_1_NORELOC","FLAG_1_NOW","FLAG_1_ORIGIN","FLAG_1_PIE","FLAG_1_SINGLETON","FLAG_1_STUB","FLAG_1_SYMINTPOSE","FLAG_1_TRANS","Fini","FiniArray","FiniArraySize","Flags","Flags1","Hash","Init","InitArray","InitArraySize","JmpRel","Needed","Null","OsSpecific","PltRel","PltRelSize","Pltgot","PreInitArray","PreInitArraySize","ProcessorSpecific","RPath","Rel","RelEnt","RelSize","Rela","RelaEnt","RelaSize","RunPath","SoName","StrSize","StrTab","SymEnt","SymTab","SymTabShIndex","Symbolic","Tag","Tag_","TextRel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","get_ptr","get_ptr","get_tag","get_tag","get_val","get_val","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HashTable","borrow","borrow_mut","clone","fmt","from","get_bucket","get_chain","hash","into","lookup","try_from","try_into","type_id","AArch64","Aix","Arm","BPF","BigEndian","Class","Class_","Core","Current","Data","Data_","Executable","FreeBSD","Header","Header32","Header64","HeaderPt1","HeaderPt2","HeaderPt2_","HpUx","Ia64","Irix","Linux","LittleEndian","MAGIC","Machine","Machine_","Mips","NetBSD","None","None","None","None","None","OpenBSD","OpenVMS","OsAbi","OsAbi_","Other","Other","Other","Other","Other","PowerPC","ProcessorSpecific","RISC_V","Relocatable","SharedObject","SixtyFour","Solaris","Sparc","SuperH","SystemV","ThirtyTwo","Type","Type_","Version","Version_","X86","X86_64","abi_version","as_class","as_data","as_machine","as_os_abi","as_type","as_version","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","data","data","entry_point","entry_point","eq","eq","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header_size","header_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_none","is_none","is_none","is_none","is_none","is_none","machine","machine","magic","os_abi","os_abi","padding","parse_header","ph_count","ph_count","ph_entry_size","ph_entry_size","ph_offset","ph_offset","pt1","pt2","sanity_check","sh_count","sh_count","sh_entry_size","sh_entry_size","sh_offset","sh_offset","sh_str_index","sh_str_index","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","Dynamic","Dynamic32","Dynamic64","Empty","FLAG_MASKOS","FLAG_MASKPROC","FLAG_R","FLAG_W","FLAG_X","Flags","GnuRelro","Interp","Load","Note","Note64","Null","OsSpecific","Ph32","Ph64","Phdr","ProcessorSpecific","ProgramHeader","ProgramHeader32","ProgramHeader64","ProgramIter","SegmentData","ShLib","TYPE_GNU_RELRO","TYPE_HIOS","TYPE_HIPROC","TYPE_LOOS","TYPE_LOPROC","Tls","Type","Type_","Undefined","align","align","align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","eq","eq","file","file_size","file_size","file_size","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_data","get_data","get_data","get_type","get_type","get_type","into","into","into","into","into","into","into","into","into_iter","is_execute","is_read","is_write","mem_size","mem_size","mem_size","next","next_index","offset","offset","offset","parse_program_header","physical_addr","physical_addr","physical_addr","raw_data","raw_data","sanity_check","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virtual_addr","virtual_addr","virtual_addr","COMPRESS_HIOS","COMPRESS_HIPROC","COMPRESS_LOOS","COMPRESS_LOPROC","CompressionHeader32","CompressionHeader64","CompressionType","CompressionType_","DynSym","DynSymbolTable32","DynSymbolTable64","Dynamic","Dynamic32","Dynamic64","Empty","FiniArray","FnArray32","FnArray64","GRP_COMDAT","GRP_MASKOS","GRP_MASKPROC","Group","Group","Hash","HashTable","InitArray","NoBits","Note","Note64","NoteHeader","Null","OsSpecific","OsSpecific","PreInitArray","ProcessorSpecific","ProcessorSpecific","ProgBits","Rel","Rel","Rel32","Rel64","Rela","Rela","Rela32","Rela64","SHF_ALLOC","SHF_COMPRESSED","SHF_EXECINSTR","SHF_GROUP","SHF_INFO_LINK","SHF_LINK_ORDER","SHF_MASKOS","SHF_MASKPROC","SHF_MERGE","SHF_OS_NONCONFORMING","SHF_STRINGS","SHF_TLS","SHF_WRITE","SHN_ABS","SHN_COMMON","SHN_HIOS","SHN_HIPROC","SHN_HIRESERVE","SHN_LOOS","SHN_LOPROC","SHN_LORESERVE","SHN_UNDEF","SHN_XINDEX","SHT_HIOS","SHT_HIPROC","SHT_HIUSER","SHT_LOOS","SHT_LOPROC","SHT_LOUSER","SectionData","SectionHeader","SectionHeader_","SectionIter","SectionStrings","Sh32","Sh64","ShLib","ShType","ShType_","StrArray","StrTab","SymTab","SymTabShIndex","SymTabShIndex","SymbolTable32","SymbolTable64","Undefined","User","Zlib","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","desc","eq","eq","file","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_addend","get_addend","get_data","get_name","get_offset","get_offset","get_offset","get_offset","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_type","get_type","get_type","get_type","get_type","info","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","link","name","name","next","next","next_index","offset","parse_section_header","raw_data","sanity_check","size","strings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","flags","indicies","Binding","Binding_","Common","Default","DynEntry32","DynEntry64","Entry","Entry32","Entry64","File","Func","Global","Hidden","Internal","Local","NoType","Object","OsSpecific","OsSpecific","ProcessorSpecific","ProcessorSpecific","Protected","Section","Tls","Type","Type_","Visibility","Visibility_","Weak","as_binding","as_type","as_visibility","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_binding","get_name","get_name","get_name","get_name","get_name","get_other","get_section_header","get_type","info","info","info","info","info","into","into","into","into","into","into","into","into","into","into","name","name","name","name","name","other","other","other","other","other","shndx","shndx","shndx","shndx","shndx","size","size","size","size","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value"],"q":[[0,"xmas_elf"],[33,"xmas_elf::dynamic"],[134,"xmas_elf::hash"],[148,"xmas_elf::header"],[414,"xmas_elf::program"],[573,"xmas_elf::sections"],[829,"xmas_elf::sections::SectionData"],[831,"xmas_elf::symbol_table"]],"d":["","A trait for things that are common ELF conventions but not …","","","","","","","","Returns the argument unchanged.","","Parse and return the value of the .note.gnu.build-id …","","Parse and return the value of the .gnu_debuglink section, …","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,1,1,1,1,74,1,74,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,17,20,15,17,20,15,17,15,17,20,15,15,17,20,15,17,20,20,20,20,20,20,20,15,17,20,15,17,20,15,17,20,15,17,0,23,23,23,23,23,23,23,0,23,23,23,23,23,31,33,31,31,29,0,0,35,37,0,0,35,33,0,40,40,0,0,0,33,31,33,33,29,0,0,0,31,33,27,29,37,35,31,33,33,0,0,27,29,37,33,31,31,35,31,35,35,27,33,31,31,33,27,0,0,0,0,31,31,38,26,28,30,32,34,36,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,38,38,39,38,40,26,27,28,29,36,37,32,33,34,35,30,31,38,38,40,43,26,27,29,37,33,35,31,43,39,39,38,40,40,43,43,26,27,28,29,36,37,32,33,34,35,30,31,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,40,43,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,26,27,28,29,36,37,40,43,38,38,38,38,0,40,43,40,43,40,43,39,39,0,40,43,40,43,40,43,40,43,40,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,40,43,39,38,40,43,26,27,28,29,36,37,32,33,34,35,30,31,38,40,38,43,49,50,50,50,0,0,0,0,0,0,49,49,49,49,50,49,49,10,10,49,49,0,0,0,0,0,49,0,0,0,0,0,49,0,0,50,10,45,46,11,10,45,46,47,48,49,50,11,10,45,46,47,48,49,50,11,10,45,46,47,48,49,45,46,47,48,47,49,11,10,45,46,10,45,46,11,10,10,45,45,46,46,47,47,47,47,48,49,50,11,10,45,46,47,48,49,50,10,45,46,10,45,46,11,10,45,46,47,48,49,50,11,47,47,47,10,45,46,11,11,10,45,46,0,10,45,46,45,46,0,11,10,45,46,47,48,49,50,11,10,45,46,47,48,49,50,45,46,11,10,45,46,47,48,49,50,10,45,46,0,0,0,0,0,0,0,0,52,59,59,52,59,59,59,52,59,59,0,0,0,52,59,52,59,52,52,52,59,0,52,52,56,52,52,56,52,0,52,59,59,0,52,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,52,0,0,59,52,52,52,59,59,59,59,52,56,3,12,3,58,51,52,59,60,53,54,55,56,61,62,57,12,3,58,51,52,59,60,53,54,55,56,61,62,57,12,3,51,52,53,54,55,56,57,57,52,56,12,3,12,3,3,58,51,52,59,60,53,54,55,56,61,62,57,12,3,58,51,52,59,60,53,54,55,56,61,62,57,61,61,3,3,61,61,62,62,61,61,62,62,3,61,61,62,62,3,12,3,58,51,52,59,60,53,54,55,56,61,62,57,12,60,3,3,57,12,60,12,3,0,3,0,3,59,12,3,58,51,52,59,60,53,54,55,56,61,62,57,12,3,58,51,52,59,60,53,54,55,56,61,62,57,3,57,12,3,58,51,52,59,60,53,54,55,56,61,62,57,75,75,0,0,67,69,0,0,0,0,0,67,67,65,69,69,65,67,67,65,67,65,67,69,67,67,0,0,0,0,65,64,66,68,70,71,72,73,68,69,64,65,66,67,70,71,72,73,68,69,64,65,66,67,68,69,64,65,66,67,65,67,25,70,71,72,73,68,69,64,65,66,67,70,71,72,73,68,69,64,65,66,67,25,25,70,71,72,73,25,25,25,25,70,71,72,73,70,71,72,73,68,69,64,65,66,67,25,70,71,72,73,25,70,71,72,73,25,70,71,72,73,25,70,71,72,73,70,71,72,73,68,69,64,65,66,67,70,71,72,73,68,69,64,65,66,67,70,71,72,73,68,69,64,65,66,67,25,70,71,72,73],"f":[0,0,0,0,[[]],[[]],0,[[1,2],[[4,[3]]]],[[1,5],6],[[]],[[1,7],[[8,[2,2]]]],[[],4],[1,4],[[],4],[1,4],[[1,7],[[8,[2,2]]]],[[1,7],[[8,[2,2]]]],0,0,0,0,[[]],[[],[[8,[1,2]]]],0,[[1,9],[[8,[10,2]]]],[1,11],[[1,9],[[8,[3,2]]]],[1,12],0,0,[[],8],[[],8],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[14]]]],[[[17,[16]],[17,[16]]],18],[[[20,[19]],5],6],[[[15,[21]],5],6],[[[15,[22]],5],6],[[[17,[19]],5],6],[[]],[[]],[[]],[[[20,[21]]],[[8,[21,2]]]],[[[20,[22]]],[[8,[22,2]]]],[[[20,[21]]],[[8,[[17,[21]],2]]]],[[[20,[22]]],[[8,[[17,[22]],2]]]],[[[20,[21]]],[[8,[21,2]]]],[[[20,[22]]],[[8,[22,2]]]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],0,[[]],[[]],[23,23],[[23,5],6],[[]],[[23,7],7],[[23,7],7],[2,7],[[]],[[23,2,24],25],[[],8],[[],8],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[26,27],[28,29],[30,31],[32,33],[34,35],[36,37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,27],0,[39,39],[38,38],[40,40],[26,26],[27,27],[28,28],[29,29],[36,36],[37,37],[32,32],[33,33],[34,34],[35,35],[30,30],[31,31],[38,29],0,[40,41],0,[[26,26],18],[[27,27],18],[[29,29],18],[[37,37],18],[[33,33],18],[[35,35],18],[[31,31],18],0,[[39,5],6],[[39,5],6],[[38,5],6],[[40,5],6],[[40,5],6],[[[43,[42]],5],6],[[[43,[19]],5],6],[[26,5],6],[[27,5],6],[[28,5],6],[[29,5],6],[[36,5],6],[[37,5],6],[[32,5],6],[[33,5],6],[[34,5],6],[[35,5],6],[[30,5],6],[[31,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,18],[27,18],[28,18],[29,18],[36,18],[37,18],[40,30],0,0,[38,33],0,0,[[],[[8,[39,2]]]],[40,9],0,[40,9],0,[40,41],0,0,0,[1,[[8,[2]]]],[40,9],0,[40,9],0,[40,41],0,[40,9],0,[40,44],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[40,34],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[38,37],[40,7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10,41],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[10,10],[45,45],[46,46],[47,47],[48,48],[49,49],[[],45],[[],46],[[],47],[[],48],[[47,47],18],[[49,49],18],0,[10,41],0,0,[10,47],0,0,[[11,5],6],[[10,5],6],[[10,5],6],[[45,5],6],[[45,5],6],[[46,5],6],[[46,5],6],[[47,5],6],[[47,5],6],[[47,5],6],[[47,5],6],[[48,5],6],[[49,5],6],[[50,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,1],[[8,[50,2]]]],[[45,1],[[8,[50,2]]]],[[46,1],[[8,[50,2]]]],[10,[[8,[49,2]]]],[45,[[8,[49,2]]]],[46,[[8,[49,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,18],[47,18],[47,18],[10,41],0,0,[11,4],0,[10,41],0,0,[[39,9],[[8,[10,2]]]],[10,41],0,0,[[45,1]],[[46,1]],[[10,1],[[8,[2]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[10,41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,12],[3,3],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[57],[[52,52],18],[[56,56],18],0,[3,41],[[12,5],6],[[3,5],6],[[3,5],6],[[[58,[19]],5],6],[[51,5],6],[[52,5],6],[[59,5],6],[[60,5],6],[[53,5],6],[[54,5],6],[[55,5],6],[[56,5],6],[[[61,[19]],5],6],[[[62,[19]],5],6],[[57,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[61,[22]]],41],[[[61,[21]]],7],[[3,1],[[8,[59,2]]]],[[3,1],[[8,[2,2]]]],[[[61,[22]]],41],[[[61,[21]]],7],[[[62,[22]]],41],[[[62,[21]]],7],[[[61,[21]]],7],[[[61,[22]]],7],[[[62,[21]]],7],[[[62,[22]]],7],[3,[[8,[52,2]]]],[[[61,[21]]],63],[[[61,[22]]],7],[[[62,[21]]],63],[[[62,[22]]],7],[3,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,7],[3,7],[57,2],[12,4],[60,[[4,[2]]]],0,[3,41],[[39,9],[[8,[3,2]]]],[[3,1]],[[3,1],[[8,[2]]]],[3,41],[59,[[8,[60]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[3,51],[57,7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[64,[[8,[65,2]]]],[66,[[8,[67,2]]]],[68,69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[69,69],[64,64],[65,65],[66,66],[67,67],[[65,65],18],[[67,67],18],[[25,5],6],[[70,5],6],[[71,5],6],[[72,5],6],[[73,5],6],[[68,5],6],[[69,5],6],[[64,5],6],[[65,5],6],[[66,5],6],[[67,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[8,[65,2]]]],[1,[[8,[2,2]]]],[[70,1],[[8,[2,2]]]],[[71,1],[[8,[2,2]]]],[[72,1],[[8,[2,2]]]],[[73,1],[[8,[2,2]]]],[[],69],[[1,44],[[8,[3,2]]]],[[],[[8,[67,2]]]],[[],63],[70,63],[71,63],[72,63],[73,63],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[70,7],[71,7],[72,7],[73,7],[[],68],[70,68],[71,68],[72,68],[73,68],[[],9],[70,9],[71,9],[72,9],[73,9],[[],41],[70,41],[71,41],[72,41],[73,41],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],41],[70,41],[71,41],[72,41],[73,41]],"c":[],"p":[[3,"ElfFile"],[15,"str"],[4,"SectionHeader"],[4,"Option"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[15,"u16"],[4,"ProgramHeader"],[3,"ProgramIter"],[3,"SectionIter"],[3,"TypeId"],[8,"Clone"],[3,"Tag_"],[8,"PartialEq"],[4,"Tag"],[15,"bool"],[8,"Debug"],[3,"Dynamic"],[6,"P32"],[6,"P64"],[3,"HashTable"],[8,"Fn"],[8,"Entry"],[3,"Class_"],[4,"Class"],[3,"Data_"],[4,"Data"],[3,"Machine_"],[4,"Machine"],[3,"OsAbi_"],[4,"OsAbi"],[3,"Type_"],[4,"Type"],[3,"Version_"],[4,"Version"],[3,"HeaderPt1"],[3,"Header"],[4,"HeaderPt2"],[15,"u64"],[8,"Display"],[3,"HeaderPt2_"],[15,"usize"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"Flags"],[3,"Type_"],[4,"Type"],[4,"SegmentData"],[3,"ShType_"],[4,"ShType"],[3,"CompressionHeader64"],[3,"CompressionHeader32"],[3,"CompressionType_"],[4,"CompressionType"],[3,"NoteHeader"],[3,"SectionHeader_"],[4,"SectionData"],[3,"SectionStrings"],[3,"Rela"],[3,"Rel"],[15,"u8"],[3,"Binding_"],[4,"Binding"],[3,"Type_"],[4,"Type"],[3,"Visibility_"],[4,"Visibility"],[3,"Entry32"],[3,"Entry64"],[3,"DynEntry32"],[3,"DynEntry64"],[8,"Extensions"],[13,"Group"]]},\
"zero":{"doc":"Functions for reading binary data into Rust data …","t":"IDLLLLLLLLFFFFFFFLLLL","n":["Pod","StrReaderIterator","borrow","borrow_mut","clone","fmt","from","into","into_iter","next","read","read_array","read_array_unsafe","read_str","read_str_unsafe","read_strs_to_null","read_unsafe","size_hint","try_from","try_into","type_id"],"q":[[0,"zero"]],"d":["Implementing this trait means that the concrete type is …","Iterates over <code>self.data</code>, yielding strings (null-terminated …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Reads a single <code>T</code> from <code>input</code>.","Read an array of <code>T</code>s from input.","Reads an array of <code>T</code>s from <code>input</code> with no checks.","Read a string from <code>input</code>. The string must be a …","Reads a null-terminated string from <code>input</code> with no checks.","Returns an iterator which will return a sequence of …","Reads a <code>T</code> from <code>input</code> with no checks.","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[1,2],3],[[]],[[]],[[]],[1,[[5,[4]]]],[[],6],[[]],[[]],[[],4],[[],4],[[],1],[[],7],[1],[[],8],[[],8],[[],9]],"c":[],"p":[[3,"StrReaderIterator"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[8,"Pod"],[8,"Sized"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
