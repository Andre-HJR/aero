var searchIndex = JSON.parse('{\
"aero_boot":{"doc":"","t":[3,13,3,4,3,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["BootInfo","Bootloader","MemoryRegion","MemoryRegionType","MemoryRegions","UnknownBios","UnknownUefi","UnwindInfo","Usable","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","deref","deref_mut","end","eq","eq","fmt","fmt","fmt","fmt","fmt","framebuffer","from","from","from","from","from","from","into","into","into","into","into","kernel_base","kernel_size","kind","memory_regions","ne","ne","physical_memory_offset","rsdp_address","stack_top","start","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwind_info"],"q":["aero_boot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Memory mappings created by the bootloader, including the …","Represent a physical memory region.","Represents the different types of memory.","","","","","Unused conventional memory, can be used by the kernel.","","","","","","","","","","","","","","","","The physical end address (exclusive) of the region.","","","","","","","","","","","","","","","","","","","","The base address of the kernel. The kernel base is …","The size of the kernel, required to calculate the end of …","The memory type of the memory region.","","","","","","","The physical start address of the region.","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,1,1,0,1,1,2,3,4,5,1,2,3,4,5,1,2,5,4,4,5,1,5,1,2,3,4,5,3,1,2,3,4,4,5,1,2,3,4,5,2,2,5,3,1,5,3,3,2,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["memoryregiontype",4]],[[],["unwindinfo",3]],[[],["memoryregion",3]],[[]],[[]],null,[[["memoryregiontype",4]],["bool",15]],[[["memoryregion",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["memoryregiontype",4]],["bool",15]],[[["memoryregion",3]],["bool",15]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"MemoryRegionType"],[3,"UnwindInfo"],[3,"BootInfo"],[3,"MemoryRegions"],[3,"MemoryRegion"]]},\
"aero_gfx":{"doc":"","t":[13,3,3,4,13,13,11,11,11,11,11,11,11,12,11,12,12,12,11,11,0,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,0,0,18,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BGR","FrameBuffer","FrameBufferInfo","PixelFormat","RGB","U8","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_byte_len","buffer_mut","buffer_start","byte_len","bytes_per_pixel","clone","clone","debug","eq","fmt","fmt","fmt","from","from","from","horizontal_resolution","info","info","into","into","into","pixel_format","stride","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertical_resolution","color","rendy","BLACK","Color","ColorCode","WHITE","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","eq","fmt","fmt","from","from","from_hex","from_rgb","get_alpha_bit","get_background","get_blue_bit","get_foreground","get_green_bit","get_red_bit","inner","into","into","ne","ne","new","try_from","try_from","try_into","try_into","type_id","type_id","DebugRendy","borrow","borrow_mut","clear_screen","from","height","into","new","put_bytes","put_pixel","set_color_code","try_from","try_into","type_id","width","write_character","write_str","write_string"],"q":["aero_gfx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_gfx::debug","","aero_gfx::debug::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_gfx::debug::rendy","","","","","","","","","","","","","","","","",""],"d":["One byte blue, then one byte green, then one byte red.","A pixel-based framebuffer that controls the screen output.","Describes the layout and pixel format of a framebuffer.","Color format of pixels in the framebuffer.","One byte red, then one byte green, then one byte blue.","A single byte, representing the grayscale value.","","","","","","","Returns the raw bytes of the framebuffer as slice.","","Returns the raw bytes of the framebuffer as mutable slice.","","The total size in bytes.","The number of bytes per pixel.","","","","","","","","","","","The width in pixels.","Returns layout and pixel format information of the …","","","","","The color format of each pixel.","Number of pixels between the start of a line and the …","","","","","","","","","","The height in pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Debug renderer used by the kernel and the bootloader to …","","","","","","","Create a new debug renderer with the default foreground …","","","","","","","","","",""],"i":[1,0,0,0,1,1,1,2,3,1,2,3,3,3,3,3,2,2,1,2,0,1,1,2,3,1,2,3,2,3,3,1,2,3,2,2,1,2,3,1,2,3,1,2,3,2,0,0,4,0,0,4,4,5,4,5,4,5,4,5,4,5,4,5,4,4,4,5,4,5,4,4,4,4,5,4,5,5,4,5,4,5,4,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,null,[[],["pixelformat",4]],[[],["framebufferinfo",3]],null,[[["pixelformat",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[],["framebufferinfo",3]],null,[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["color",3]],[[],["colorcode",3]],[[["color",3]],["bool",15]],[[["colorcode",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]]],[[["u8",15]]],[[],["u8",15]],[[],["color",3]],[[],["u8",15]],[[],["color",3]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[]],[[]],[[["color",3]],["bool",15]],[[["colorcode",3]],["bool",15]],[[["color",3]],["colorcode",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["framebufferinfo",3]]],[[]],[[["usize",15],["color",3]]],[[["colorcode",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["char",15]]],[[["str",15]],["result",6]],[[["str",15]]]],"p":[[4,"PixelFormat"],[3,"FrameBufferInfo"],[3,"FrameBuffer"],[3,"Color"],[3,"ColorCode"],[3,"DebugRendy"]]},\
"aero_hal":{"doc":"","t":[0,3,8,8,18,4,4,4,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,18,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,13,3,4,3,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,3,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["paging","ActivePageTable","NotGiantPageSize","PageSize","SIZE","Size1GiB","Size2MiB","Size4KiB","address","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","eq","eq","eq","fmt","fmt","fmt","frame","from","from","from","from","into","into","into","into","mapper","new","page","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","PhysicalAddress","VirtualAddress","add","add","add","add","add_assign","add_assign","add_assign","add_assign","align_down","align_down","align_down","as_mut_ptr","as_ptr","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","is_aligned","ne","ne","new","new","p1_index","p2_index","p3_index","p4_index","partial_cmp","partial_cmp","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","try_from","try_from","try_into","try_into","type_id","type_id","Frame","FrameAllocator","SIZE","allocate_frame","borrow","borrow_mut","clone","cmp","containing_address","deallocate_frame","eq","fmt","from","from_start_address","into","ne","partial_cmp","start_address","try_from","try_into","type_id","FrameAllocationFailed","Mapper","MapperError","MapperFlush","MapperMap","PageAlreadyMapped","ParentEntryHugePage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","flush","fmt","from","from","from","identity_map","ignore","into","into","into","level_4_table","map_to","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ACCESSED","BIT_10","BIT_11","BIT_52","BIT_53","BIT_54","BIT_55","BIT_56","BIT_57","BIT_58","BIT_59","BIT_60","BIT_61","BIT_62","BIT_9","DIRTY","GLOBAL","HUGE_PAGE","NO_CACHE","NO_EXECUTE","PRESENT","Page","PageTable","PageTableEntry","PageTableFlags","SIZE","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","address","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","containing_address","contains","empty","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","frame","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","index","index","index_mut","index_mut","insert","intersects","into","into","into","into","is_all","is_empty","is_unused","ne","ne","not","p1_index","p2_index","p3_index","p4_index","partial_cmp","partial_cmp","remove","set","set_address","set_frame","set_unused","start_address","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero"],"q":["aero_hal","aero_hal::paging","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_hal::paging::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_hal::paging::frame","","","","","","","","","","","","","","","","","","","","","aero_hal::paging::mapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_hal::paging::page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","The page size in bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A canonical virtual memory address. The addresses are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new canonical virtual memory address.","Create a new physical address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An additional frame was needed for the mapping process, …","","This error is returned from <code>map_to</code> and similar methods.","","","The given page is already mapped to a physical frame.","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Page table flags for a page table entry.","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","Map the entry to the specified physical frame with the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,0,0,2,3,4,5,2,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,2,3,4,5,2,3,4,5,0,2,0,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,0,0,6,6,7,7,6,6,7,7,0,6,7,6,6,6,7,6,7,6,7,6,7,6,7,6,7,6,6,6,6,6,6,7,7,7,7,7,7,6,7,6,7,7,6,7,6,7,6,6,6,6,6,7,6,6,6,7,7,7,6,6,7,7,6,7,6,7,6,7,0,0,8,9,8,8,8,8,8,9,8,8,8,8,8,8,8,8,8,8,8,10,0,0,0,0,10,10,11,12,10,11,12,10,12,12,10,11,12,10,13,12,11,12,10,11,13,13,11,11,11,11,11,12,10,11,12,10,11,12,10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,15,14,14,14,16,14,14,14,14,14,14,14,14,17,14,16,15,17,14,16,15,14,16,15,14,15,15,14,14,14,15,14,16,14,14,14,14,14,16,17,14,16,15,14,14,14,14,14,17,17,17,17,14,14,17,14,16,15,14,14,16,14,15,14,15,15,15,15,14,15,14,14,16,16,16,15,14,14,14,17,14,16,15,17,14,16,15,17,14,16,15,17],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["size4kib",4]],[[],["size2mib",4]],[[],["size1gib",4]],[[["size4kib",4]],["ordering",4]],[[["size2mib",4]],["ordering",4]],[[["size1gib",4]],["ordering",4]],[[["size4kib",4]],["bool",15]],[[["size2mib",4]],["bool",15]],[[["size1gib",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["virtualaddress",3],["pagetable",3]]],null,[[["size4kib",4]],[["ordering",4],["option",4]]],[[["size2mib",4]],[["ordering",4],["option",4]]],[[["size1gib",4]],[["ordering",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]],["u64",15]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[],["virtualaddress",3]],[[],["physicaladdress",3]],[[["virtualaddress",3]],["ordering",4]],[[["physicaladdress",3]],["ordering",4]],[[["virtualaddress",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15]],["bool",15]],[[["virtualaddress",3]],["bool",15]],[[["physicaladdress",3]],["bool",15]],[[["u64",15]]],[[["u64",15]]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[["virtualaddress",3]],[["ordering",4],["option",4]]],[[["physicaladdress",3]],[["ordering",4],["option",4]]],[[["virtualaddress",3]]],[[["u64",15]]],[[["usize",15]]],[[["physicaladdress",3]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],[["option",4],["frame",3]]],[[]],[[]],[[],["frame",3]],[[["frame",3]],["ordering",4]],[[["physicaladdress",3]]],[[]],[[["frame",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["physicaladdress",3]]],[[]],[[["frame",3]],["bool",15]],[[["frame",3]],[["ordering",4],["option",4]]],[[],["physicaladdress",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["frame",3],["pagetableflags",3]],[["result",4],["mapperflush",3],["mappererror",4]]],[[]],[[]],[[]],[[]],[[],["pagetable",3]],[[["pagetableflags",3],["frame",3],["page",3]],[["result",4],["mapperflush",3],["mappererror",4]]],[[["frame",3],["pagetableflags",3],["page",3]],[["result",4],["mapperflush",3],["mappererror",4]]],[[["page",3],["size1gib",4],["pagetableflags",3],["frame",3]],[["mappererror",4],["result",4],["mapperflush",3]]],[[["page",3],["frame",3],["pagetableflags",3],["size4kib",4]],[["result",4],["mapperflush",3],["mappererror",4]]],[[["size2mib",4],["page",3],["pagetableflags",3],["frame",3]],[["result",4],["mapperflush",3],["mappererror",4]]],[[["virtualaddress",3],["pagetable",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["physicaladdress",3]],[[],["pagetableflags",3]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[],["u64",15]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pagetableflags",3]],[[],["pagetableentry",3]],[[],["page",3]],[[["pagetableflags",3]],["ordering",4]],[[["page",3]],["ordering",4]],[[["virtualaddress",3]]],[[["pagetableflags",3]],["bool",15]],[[],["pagetableflags",3]],[[["pagetableflags",3]],["bool",15]],[[["page",3]],["bool",15]],[[["intoiterator",8]]],[[],["pagetableflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["frame",3]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["pagetableflags",3]]],[[["u64",15]],["pagetableflags",3]],[[["u64",15]],["pagetableflags",3]],[[["intoiterator",8]],["pagetableflags",3]],[[]],[[["usize",15]]],[[["u16",15]]],[[["usize",15]]],[[["u16",15]]],[[["pagetableflags",3]]],[[["pagetableflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["pagetableflags",3]],["bool",15]],[[["page",3]],["bool",15]],[[],["pagetableflags",3]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[["pagetableflags",3]],[["ordering",4],["option",4]]],[[["page",3]],[["ordering",4],["option",4]]],[[["pagetableflags",3]]],[[["bool",15],["pagetableflags",3]]],[[["physicaladdress",3],["pagetableflags",3]]],[[["pagetableflags",3],["frame",3]]],[[]],[[],["virtualaddress",3]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[["pagetableflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[8,"PageSize"],[3,"ActivePageTable"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"],[3,"VirtualAddress"],[3,"PhysicalAddress"],[3,"Frame"],[8,"FrameAllocator"],[4,"MapperError"],[3,"Mapper"],[3,"MapperFlush"],[8,"MapperMap"],[3,"PageTableFlags"],[3,"Page"],[3,"PageTableEntry"],[3,"PageTable"]]},\
"aero_kernel":{"doc":"Aero","t":[7,17,7,7,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,4,3,3,13,13,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,12,0,5,11,11,11,11,11,0,0,11,0,0,11,11,11,11,11,11,11,11,11,11,3,17,12,12,12,11,11,12,12,11,11,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,3,17,12,11,11,11,11,12,11,11,12,12,12,11,12,11,12,12,11,11,11,11,3,13,13,13,7,3,4,3,3,3,17,7,17,17,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,7,3,17,12,11,11,11,11,12,11,11,11,5,12,11,11,11,5,12,12,12,12,11,11,11,11,11,11,3,11,11,12,11,11,12,11,11,11,12,12,12,12,12,12,11,11,11,11,12,17,3,17,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,12,17,7,4,7,7,7,3,3,7,3,13,13,17,17,17,17,17,17,13,12,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,12,12,5,11,11,5,11,11,11,11,12,12,5,11,5,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,7,17,18,7,17,3,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,4,13,18,3,7,18,18,18,18,18,3,18,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,0,11,11,11,11,11,11,11,5,0,11,11,11,14,14,14,11,11,11,11,11,11,0,0,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,14,5,5,5,5,5,5,5,5,5,5,5,5,18,17,17,17,17,7,3,17,18,18,3,3,3,6,3,3,18,18,17,17,17,17,17,18,18,3,3,18,18,18,18,18,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,5,11,11,11,11,11,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,0,0,0,0,0,3,4,18,18,18,18,17,17,17,18,18,18,18,3,17,3,3,3,3,3,3,3,17,17,17,17,17,17,17,18,18,18,18,18,13,18,13,18,18,3,13,13,17,17,17,17,13,18,18,18,18,18,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,17,17,17,7,7,17,17,17,17,17,5,5,18,18,18,3,17,3,3,3,18,18,18,18,18,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,7,18,18,3,3,18,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,4,4,13,7,8,13,18,13,3,11,11,11,11,11,11,0,0,11,11,11,11,11,5,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,7,7,7,3,3,3,8,11,11,11,11,11,11,11,11,11,5,5,14,5,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,11,11,11,11,11,11,10,11,11,11,11,10,3,17,7,7,17,11,11,11,11,11,5,5,11,11,5,11,11,11,3,0,11,11,11,12,11,11,5,5,5,5,11,11,11,0,0,11,11,11,17,17,5,5,5,5,7,17,3,5,11,11,0,11,5,11,5,11,12,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,7,17,5,5,5,7,5,14,5,5,5,14,14,5,3,5,5,11,11,11,0,5,11,0,12,12,12,5,5,0,11,11,11,5,5,5,17,7,17,17,3,11,11,12,11,11,5,11,11,11,11,12,11,11,11,7,3,3,11,11,11,11,11,11,5,11,11,11,12,5,5,12,12,11,11,11,11,11,11,5,5,5,5,7,5,5,0,5,0,12,3,3,3,4,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,7,3,7,3,8,11,11,11,11,11,11,11,5,5,12,11,11,11,11,10,11,11,0,11,11,11,11,11,11,12,7,7,3,7,3,3,11,11,11,11,11,11,5,5,11,11,11,11,12,11,11,11,11,11,12,11,11,5,12,11,11,11,11,11,11,11,11,11,8,3,10,11,11,11,0,14,12,5,11,11,14,14,11,0,0,11,11,14,14,14,14,14,14,0,11,11,11,5,5,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,17,17,17,17,17,17,17,5,5,5,5,5,5,5,20,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11],"n":["AERO_SYSTEM_ALLOCATOR","ASCII_INTRO","PHYSICAL_MEMORY_OFFSET","UNWIND_INFO","acpi","apic","arch","drivers","fs","kernel_ap_startup","kernel_main","kernel_main_thread","logger","mem","prelude","rendy","syscall","tests","time","tls","unwind","userland","utils","AcpiHeader","AcpiTable","GenericAddressStructure","Rsdt","Xsdt","access_size","address","address_space","as_sdt","bit_offset","bit_width","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data_address","entry_count","fadt","fmt","from","from","from","header","hpet","init","init","into","into","into","lookup_entry","madt","mcfg","new","rsdp","sdt","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Fadt","SIGNATURE","acpi_disable","acpi_enable","boot_architecture_flags","borrow","borrow_mut","c_state_control","century","clone","clone_into","day_alarm","dsdt","duty_offset","duty_width","firmware_ctrl","flags","flush_size","flush_stride","fmt","from","gpe0_block","gpe0_ength","gpe1_base","gpe1_block","gpe1_length","header","into","month_alarm","new","pm1_control_length","pm1_event_length","pm1a_control_block","pm1a_event_block","pm1b_control_block","pm1b_event_block","pm2_control_block","pm2_control_length","pm_timer_block","pm_timer_length","preferred_power_managament","pstate_control","reserved","reserved2","s4_bios_req","sci_interrupt","smi_command_port","to_owned","try_from","try_into","type_id","worst_c2_latency","worst_c3_latency","Hpet","SIGNATURE","base_address","borrow","borrow_mut","clone","clone_into","comparator_descriptor","fmt","from","header","hpet_number","hw_rev_id","into","min_periodic_clk_tick","new","oem_attribute","pci_vendor_id","to_owned","try_from","try_into","type_id","EntryHeader","IntSrcOverride","IoApic","LocalApic","MADT","Madt","MadtEntry","MadtIntSrcOverride","MadtIterator","MadtLocalApic","SIGNATURE","TRAMPOLINE_BIN","TRAMPOLINE_PHYSICAL","TRAMPOLINE_VIRTUAL","apic_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","clone","clone","clone_into","clone_into","current","entry_type","flags","flags","flags","fmt","from","from","from","from","from","from","global_system_interrupt","header","header","header","init","into","into","into","into","into","into","into_iter","irq","iter","length","limit","local_apic_address","next","processor_id","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DeviceConfig","MCFG","Mcfg","SIGNATURE","base_address","borrow","borrow","borrow_mut","borrow_mut","end_bus","entry_count","from","from","get_mcfg_table","header","init","into","into","is_avaliable","pci_seg_group","reserved","reserved","start_bus","try_from","try_from","try_into","try_into","type_id","type_id","Rsdp","borrow","borrow_mut","checksum","clone","clone_into","extended_checksum","from","get_sdt_address","into","length","oemid","reserved","revision","rsdt_address","signature","to_owned","try_from","try_into","type_id","xsdt_address","RSDT_SIGNATURE","Sdt","XSDT_SIGNATURE","as_ptr","borrow","borrow_mut","checksum","clone","clone_into","creator_id","creator_revision","data_address","data_len","fmt","from","from_address","get_signature","into","length","oem_id","oem_revision","oem_table_id","revision","signature","to_owned","try_from","try_into","type_id","0","APIC_SPURIOUS_VECTOR","AP_READY","ApicType","BSP_APIC_ID","BSP_READY","CPU_COUNT","IoApic","IoApicHeader","LOCAL_APIC","LocalApic","None","X2apic","XAPIC_EOI","XAPIC_ESR","XAPIC_ICR0","XAPIC_ICR1","XAPIC_LVT_ERROR","XAPIC_SVR","Xapic","address","ap_ready","apic_type","apic_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bsp_id","clone","clone_into","eoi","fmt","from","from","from","from","from","get_bsp_id","get_cpu_count","get_esr","get_local_apic","global_system_interrupt_base","header","init","init","init_cpu","init_io_apic","into","into","into","into","io_apic_address","io_apic_id","is_bsp_ready","is_none","mark_ap_ready","mark_bsp_ready","new","new","read","reserved","set_icr","supports_x2_apic","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","x86_64","gdt","interrupts","BOOT_GDT","BOOT_GDT_ENTRY_COUNT","EXECUTABLE","GDT","GDT_ENTRY_COUNT","GdtAccessFlags","GdtDescriptor","GdtEntry","GdtEntryFlags","GdtEntryType","KERNEL_CODE","KERNEL_DATA","KERNEL_TLS","LONG_MODE","NULL","NULL","NULL","PRESENT","PRIVILEGE","PROTECTED_MODE","RING_0","RING_3","RPL_0","RPL_1","RPL_2","RPL_3","Ring","Ring0","SYSTEM","SegmentSelector","TASK_STATE_SEGMENT","TI_GDT","TI_LDT","TSS","TSS_AVAIL","TSS_HI","Tss","USER_CODE32_UNUSED","access_byte","all","all","base_hi","base_low","base_middle","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains","contains","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","init","init_boot","insert","insert","intersects","intersects","into","into","into","into","into","into","into","into","iomap_base","is_all","is_all","is_empty","is_empty","ist","kernel_fs","limit_hi_flags","limit_low","load_cs","load_ds","load_es","load_fs","load_gdt","load_gs","load_ss","load_tss","ne","ne","new","new","new","new","not","not","offset","partial_cmp","partial_cmp","remove","remove","reserved","reserved2","reserved3","reserved4","rsp","set","set","set_kernel_fs","set_limit","set_offset","set_raw","size","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","APIC_CONTROLLER","ApicController","INTERRUPT_CONTROLLER","InterruptController","PIC_CONTROLLER","PicController","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","disable","disable_interrupts","enable_interrupts","enable_interrupts_and_halt","eoi","eoi","eoi","exceptions","from","from","from","from","from","from","get_irq_register","halt","idt","initialize","initialize","initialize","interrupt","interrupt_error_stack","interrupt_stack","into","into","into","into","into","into","ipi","irq","is_master_active","is_slave_active","method","new","new","pause","switch_to_apic","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","alignment_check","bound_range","breakpoint","debug","device_not_available","divide_by_zero","double_fault","fpu_fault","interrupt_exception","invalid_opcode","invalid_tss","machine_check","non_maskable","overflow","page_fault","protection","security","segment_not_present","simd","stack_segment","virtualization","CAUSED_BY_WRITE","ICW1_ICW4","ICW1_INIT","ICW1_READ_ISR","ICW4_8086","IDT","IDTFlags","IDT_ENTRIES","INSTRUCTION_FETCH","INTERRUPT","IdtDescriptor","IdtEntry","InterruptErrorStack","InterruptHandlerFn","InterruptStack","IretRegisters","MALFORMED_TABLE","NULL","PIC1_COMMAND","PIC1_DATA","PIC2_COMMAND","PIC2_DATA","PIC_EOI","PRESENT","PROTECTION_VIOLATION","PageFaultErrorCode","PreservedRegisters","RING_0","RING_1","RING_2","RING_3","SS","ScratchRegisters","TRAP","USER_MODE","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","code","contains","contains","cs","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","fs","hash","hash","ignore","init","insert","insert","intersects","intersects","into","into","into","into","into","into","into","into","into","iret","is_all","is_all","is_empty","is_empty","is_user","ist","load_idt","ne","ne","new","not","not","offset","offset_hi","offset_low","offset_middle","partial_cmp","partial_cmp","preserved","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","remove","remove","rflags","rip","rsi","rsp","scratch","selector","set","set","set_flags","set_function","set_offset","size","ss","stack","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_attr","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","pit","tlb","wakeup","keyboard","lapic_error","mouse","pit_stack","ahci","keyboard","mouse","pci","uart_16550","AHCI","AHCIPortType","AHCI_ENABLE","AHCI_ONLY","ALP_SUPPORT","AL_SUPPORT","ATA_CMD_READ_DMA_EX","ATA_DEV_BUSY","ATA_DEV_DRQ","CCC_SUPPORT","CLO_SUPPORT","EMS_SUPPORT","FBSS_SUPPORT","FISRegisterH2D","FIS_TYPE_REG_H2D","GlobalHBAControl","HBACapabilities","HBACommandHeader","HBACommandTable","HBAMemory","HBAPRDTEntry","HBAPort","HBA_PORT_DEV_PRESENT","HBA_PORT_IPM_ACTIVE","HBA_PXIS_TFES","HBA_PX_CMD_CR","HBA_PX_CMD_FR","HBA_PX_CMD_FRE","HBA_PX_CMD_ST","HBA_RESET","INT_ENABLE","MPS_SUPPORT","MRSM","NCQ_SUPPORT","None","PIO_MULTI_DRQ_SUPPORT","PM","PM_SUPPORT","PS_CAPABLE","Port","SATA","SATAPI","SATA_SIG_ATA","SATA_SIG_ATAPI","SATA_SIG_PM","SATA_SIG_SEMB","SEMB","SNTF_SUPPORT","SS_CAPABLE","SS_SUPPORT","SUPPORTS_64_ADDRESSES","SXS_SUPPORT","all","all","atapi","atapi_command","bios_handoff_ctrl_sts","bist","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_count","ccc_control","ccc_ports","clear_busy","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmd_sts","cmp","cmp","command","command_control","command_fis","command_fis_length","command_issue","command_list_base","command_list_base_upper","command_table_base_address","command_table_base_address_upper","configure","contains","contains","control","count_high","count_low","data_base_address","data_base_address_upper","device_register","empty","empty","enclosure_management_control","enclosure_management_location","eq","eq","eq","extend","extend","feature_high","feature_low","fis_base_address","fis_base_address_upper","fis_switch_control","fis_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_port","get_port_type","global_host_control","hash","hash","hba_port","hba_prdt_entry","host_capabilities_extended","host_capability","id","insert","insert","interrupt_enable","interrupt_on_completion","interrupt_status","interrupt_status","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_empty","is_empty","iso_command_completion","lba0","lba1","lba2","lba3","lba4","lba5","memory","ne","ne","new","new","not","not","partial_cmp","partial_cmp","port_multiplier","port_multiplier","port_type","ports","ports_implemented","prdb_count","prdt_length","prefetchable","probe_ports","read","remove","remove","reserved","reserved","reserved","reserved","reserved_2","reset","rsv0","rsv0","rsv0","rsv0","rsv1","sata_active","sata_control","sata_error","sata_notification","sata_status","set","set","signature","start_command","stop_command","sub","sub","sub_assign","sub_assign","task_file_data","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vendor","vendor","version","write","ASCII_TABLE","BACKSPACE_PRESSED","ENTER_PRESSED","IS_LEFT_SHIFT_PRESSED","IS_RIGHT_SHIFT_PRESSED","LEFT_SHIFT_PRESSED","LEFT_SHIFT_RELEASED","RIGHT_SHIFT_PRESSED","RIGHT_SHIFT_RELEASED","SPACEBAR_PRESSED","handle","translate_keystroke","ALWAYS_ONE","LEFT_BUTTON","MIDDLE_BUTTON","MOUSE","MOUSE_WAIT_TIMEOUT","Mouse","MouseFlags","MouseState","RIGHT_BUTTON","X_OVERFLOW","X_SIGN","Y_OVERFLOW","Y_SIGN","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","contains","cycle","default","deref","draw_mouse_pointer","empty","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","handle","hash","init","initialize","insert","intersects","into","into","into","into","is_all","is_empty","is_left_button_pressed","is_middle_button_pressed","is_right_button_pressed","mouse_wait","mouse_wait_input","mouse_write","ne","new","new","not","partial_cmp","process_collected_packet","process_mouse_packet","remove","set","sign_extend","state","sub","sub_assign","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x","y","0","AMD","AccessBusController","AtaController","AtmController","AudioDevice","AudioSatelliteCommunicationsController","Bar","BluetoothController","BroadbandController","CanBusController","CardBusBridge","CoProcessor","CommunicationsSynchronizationController","ConsumerIrController","DataSatelliteCommunicationsController","DeviceType","Digitizer","DmaController","DpioModule","EisaBridge","EntertainmentCryptionController","Ethernet24GHzController","Ethernet5GHzController","EthernetController","FddiController","FibreChannelController","FirewireController","FlashController","FloppyController","GameportController","GenericDockingStation","GenericPciHotPlugController","GpibController","HostBridge","IO","IdeController","InfiniBandController","InfinibandPciHostBridge","Intel","IntelligentIoController","InterruptController","IpiBusController","IpmiController","IrdaController","IsaBridge","IsdnController","KeyboardController","LegacyNotVgaCompatible","LegacyVgaCompatible","ManagementCard","McaBridge","Memory32","Memory64","Modem","MouseController","MultiportSerialController","NVIDIA","NetworkCryptionController","NuBusBridge","OtherBridgeDevice","OtherCommunicationsDevice","OtherCryptionController","OtherDisplayController","OtherDockingStation","OtherInputController","OtherMassStorageController","OtherMemoryController","OtherMultimediaDevice","OtherNetworkController","OtherSignalProcessingController","OtherSystemPeripheral","OtherWirelessController","PCIHeader","PCI_CONFIG_ADDRESS_PORT","PCI_CONFIG_DATA_PORT","ParallelPort","PciPciBridge","PcmciaBridge","PerformanceCounter","PicmgController","Processor386","Processor486","ProcessorAlpha","ProcessorMips","ProcessorPentium","ProcessorPowerPc","Qemu","RacewayBridge","RaidController","RamController","RfController","RtcController","SasController","SataController","ScannerController","ScsiBusController","SdHostController","SemiTransparentPciPciBridge","SercosController","SerialController","SmBusController","SmartCard","SsaBusController","SystemTimer","TelephonyDevice","ThreeDController","TokenRingController","TvSatelliteCommunicationsController","Unknown","Unknown","UsbController","Vendor","VgaCompatibleController","VideoDevice","VoiceSatelliteCommunicationsController","XgaController","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","clone","clone_into","device","eq","eq","fmt","fmt","fmt","from","from","from","from","function","get_bar","get_device","get_interface_id","get_vendor","get_vendor_id","has_multiple_functions","init","into","into","into","into","ne","new","new","new","read","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","address","address","prefetchable","prefetchable","size","size","0","COM_1","ERRORED","INPUT_FULL","InterruptEnable","LineStatus","OUTPUT_EMPTY","RECEIVED","SENT","STATUS_CHANGE","SerialPort","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","contains","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get_com_1","hash","hash","init","init","insert","insert","intersects","intersects","into","into","into","is_all","is_all","is_empty","is_empty","line_status","ne","ne","new","not","not","partial_cmp","partial_cmp","remove","remove","send_byte","serial_print","serial_println","set","set","sub","sub","sub_assign","sub_assign","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wait_for_line_status","write_str","0","AeroFilesystemError","AeroInvalidPath","DeviceExists","FILE_SYSTEMS","FileSystem","HugePath","MAX_PATH_SIZE","NotSupported","Path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dev_fs","file_table","fmt","fmt","from","from","from","init","inode","install_filesystem","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","DEVICES","DEV_NULL","DEV_STDOUT","DevFs","DevNull","DevStdout","Device","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","get_null","get_stdout","impl_dev","init","install_device","into","into","into","read_at","read_at","signature","signature","signature","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_at","write_at","0","0","FileHandle","FileTable","borrow","borrow","borrow_mut","borrow_mut","from","from","get_handle","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","INode","INodeInterface","borrow","borrow_mut","clone","clone_into","from","into","read_at","to_owned","try_from","try_into","type_id","write_at","AeroLogger","DEFAULT_LOG_RING_BUFFER_SIZE","LOGGER","LOG_RING_BUFFER","MAX_LOG_LEVEL_SPACE","borrow","borrow_mut","enabled","flush","from","get_log_ring_buffer","init","into","log","log_debug","try_from","try_into","type_id","AddressSpace","alloc","borrow","borrow_mut","cr3","cr3","from","into","memcmp","memcpy","memmove","memset","new","offset_page_table","page_table","paging","pti","try_from","try_into","type_id","HEAP_SIZE","HEAP_START","alloc_error_handler","init_heap","malloc","malloc_align","FRAME_ALLOCATOR","KERNEL_PML4","UnmapGuard","active_level_4_table","borrow","borrow_mut","frame","from","init","into","memory_map_device","new","page","try_from","try_into","type_id","0","GlobalFrameAllocator","LockedFrameAllocator","allocate_frame","allocate_frame","borrow","borrow","borrow_mut","borrow_mut","from","from","get_frame_type","get_frame_type","init","into","into","memory_map","new","new_uninit","next","try_from","try_from","try_into","try_into","type_id","type_id","usable_frames","PTI_CPU_STACK","PTI_STACK_SIZE","map_pti","switch_pti_stack","unmap_pti","DEBUG_RENDY","clear_screen","dbg","get_debug_rendy","init","is_initialized","print","println","set_color_code","SyscallFrame","__impl_syscall_handler","__inner_syscall","borrow","borrow_mut","from","fs","init","into","process","rflags","rip","rsp","syscall_handler","syscall_interrupt_handler","time","try_from","try_into","type_id","open","write","exit","DEFAULT_PIT_DIVISOR","PIT","PIT_BASE_FREQUENCY","PIT_DIVISOR","PitDescriptor","borrow","borrow_mut","divisor","from","get_frequency","init","into","new","set_divisor","tick","ticks_since_epoch","try_from","try_into","type_id","THREAD_LOCAL_STORAGE","ThreadControlBlock","ThreadLocalStorage","borrow","borrow","borrow_mut","borrow_mut","from","from","init","into","into","new","pointer","restore_kernel_tls","restore_user_tls","self_pointer","tcb_offset","try_from","try_from","try_into","try_into","type_id","type_id","_Unwind_Resume","rust_begin_unwind","rust_eh_personality","unwind_stack_trace","USERLAND_SHELL","init","jump_userland","process","run","scheduler","0","InterruptFrame","Process","ProcessId","ProcessState","Running","address_space","allocate","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","context","context_switch","context_switch_rsp","cr3","eq","file_table","fmt","fmt","from","from","from","from","from_elf","hash","into","into","into","into","ne","new","new","new_idle","partial_cmp","process_id","r12","r13","r14","r15","rbp","rbx","rflags","rip","state","sysretq_userinit","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","PROCESS_CONTAINER","ProcessContainer","SCHEDULER","Scheduler","SchedulerInterface","borrow","borrow","borrow_mut","borrow_mut","find_by_id","from","from","get_scheduler","init","inner","into","into","new","new_uninit","register_process","register_process","register_process","round_robin","try_from","try_from","try_into","try_into","type_id","type_id","0","CURRENT_PROCESS","HELD_LOCKS","HeldLocks","IDLE_PROCESS","ProcessQueue","RoundRobin","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","context_switch_finalize","exit_current_process","from","from","from","front","head","into","into","into","new","new","queue","register_process","register_process","reschedule","tail","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Downcastable","PerCpu","as_any","as_mut_ptr","borrow","borrow_mut","buffer","const_unsafe","data","downcast","from","get","intel_asm","intel_fn","into","io","linker","new","new_uninit","pop_fs","pop_preserved","pop_scratch","push_fs","push_preserved","push_scratch","stack","try_from","try_into","type_id","validate_slice","validate_str","RingBuffer","append_byte","borrow","borrow_mut","clear_buffer","fmt","from","into","new","position","storage","try_from","try_into","type_id","write_str","IA32_APIC_BASE","IA32_EFER","IA32_FMASK","IA32_FS_BASE","IA32_KERNEL_GSBASE","IA32_LSTAR","IA32_STAR","inb","inl","outb","outl","rdmsr","wait","wrmsr","LinkerSymbol","as_ptr","as_usize","virt_addr","Stack","StackHelper","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new_pinned","new_user_pinned","offset","ptr","skip_by","stack_size","stack_start","stack_top","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aero_kernel","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi::fadt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi::hpet","","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi::madt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi::mcfg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi::rsdp","","","","","","","","","","","","","","","","","","","","","aero_kernel::acpi::sdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::apic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::arch","aero_kernel::arch::x86_64","","aero_kernel::arch::x86_64::gdtaero_kernel::arch::x86_64::interrupts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::arch::x86_64::interrupts::exceptions","","","","","","","","","","","","","","","","","","","","","aero_kernel::arch::x86_64::interrupts::idtaero_kernel::arch::x86_64::interrupts::ipi","","","aero_kernel::arch::x86_64::interrupts::irq","","","","aero_kernel::drivers","","","","","aero_kernel::drivers::ahciaero_kernel::drivers::keyboard","","","","","","","","","","","","aero_kernel::drivers::mouse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::drivers::pciaero_kernel::drivers::pci::Bar","","","","","","aero_kernel::drivers::uart_16550","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::fs::dev_fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::fs::file_table","","","","","","","","","","","","","","","","","","","","aero_kernel::fs::inode","","","","","","","","","","","","","","aero_kernel::logger","","","","","","","","","","","","","","","","","","aero_kernel::mem","","","","","","","","","","","","","","","","","","","","aero_kernel::mem::alloc","","","","","","aero_kernel::mem::paging","","","","","","","","","","","","","","","","aero_kernel::mem::paging::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::mem::pti","","","","","aero_kernel::rendy","","","","","","","","","aero_kernel::syscall","","","","","","","","","","","","","","","","","","","aero_kernel::syscall::fs","","aero_kernel::syscall::process","aero_kernel::time","","","","","","","","","","","","","","","","","","","aero_kernel::tls","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::unwind","","","","aero_kernel::userland","","","","","","aero_kernel::userland::process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::userland::scheduler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::userland::scheduler::round_robin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_kernel::utils::buffer","","","","","","","","","","","","","","","aero_kernel::utils::io","","","","","","","","","","","","","","aero_kernel::utils::linker","","","","aero_kernel::utils::stack","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","The ACPI (Advanced Configuration and Power Interface) …","","","","","","","","","","","","System Calls are used to call a kernel service from user …","","The PIT (Programmable Interval Timer) chip basically …","Thread Local Storage (TLS) are per-thread global …","","","","","","","","","","","","","","","","","","","","","","","The data address of this header’s data.","","The FADT ACPI table contains information about fixed …","","","","","","","Initialize the ACPI tables.","","","","","Lookup ACPI table entry with the provided signature.","","","Create a new ACPI table from the RSDP address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The ACPI MCFG table describes the location of the PCI …","","","","","","","","","","","Return a immutable reference to the MCFG table.","","","","","Returns true if the ACPI table contains the MCFG entry.","","","","","","","","","","","","","","","","","","","Get the SDT address.","","","","","","","","","","","","","","","","","","","","","","","","Get the address of this tables data.","Get the length of this tables data.","","","Get SDT from its address.","Get the SDT’s signature.","","","","","","","","","","","","","","","","","","The count of all the active CPUs.","","","","","","","EOI register. Write-only.","Error Status Register (ESR). Read/write.","Interrupt Command Register (ICR). Read/write.","Interrupt Command Register (ICR). Read/write.","LVT Error register. Read/write.","Spurious Interrupt Vector Register (SVR). Read/write.","","","Returns true if the AP is ready.","","","","","","","","","","","","","","","","","","","","","Get the local BSP’s id.","Return the number of active CPUs.","Get the error code of the lapic by reading the error …","Get a mutable reference to the local apic.","","","Initialize the local apic.","","Initialize the application processor.","Initialize the IO apic. This function is called in the …","","","","","","","","","","","","","","","","Return true if the current CPU supports X2 APIC.","","","","","","","","","","","","","","","","The GDT contains entries telling the CPU about memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies which element to load into a segment from …","","","","","","","The Task State Segment (TSS) is a special data structure …","","","Returns the set containing all flags.","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","","","Initialize the <em>actual</em> GDT stored in TLS.","Initialize the bootstrap GDT which is required to …","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","The 16-bit offset to the I/O permission bit map from the …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","The full 64-bit canonical forms of the interrupt stack …","","The limit high and the flags.","","","","","","","","","","","","Create a new GDT descriptor.","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The linear address of the table.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","The full 64-bit canonical forms of the stack pointers …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","The size of the table subtracted by 1. The size of the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","APIC (Advanced Programmable Interrupt Controller) is an …","The global interrupt controller for x86 protected by a …","The interrupt controller interface. The task of an …","","PIC (Programmable Interrupt Controller) manages hardware …","","","","","","","","","","","","","","","","","","","Disables the PIC interrupt controller.","Wrapper function to the <code>cli</code> assembly instruction used to …","Wrapper function to the <code>sti</code> assembly instruction used to …","Enables interrupts and then halts the CPU.","Send EOI, indicating the completion of an interrupt.","Send EOI to the local APIC, indicating the completion of …","Send EOI to the PIC chip, indicating the completion of an …","","","","","","","","Helper function to get the IRQ register. This function is …","Wrapper function to the <code>hlt</code> assembly instruction used to …","The IDT is similar to the Global Descriptor Table in …","","","","Helper macro that generates an interrupt handler that …","Helper macro to generate an interrupt exception handler …","Helper macro to generate an interrupt handler that takes …","","","","","","","","","Returns true if the PIC master chip is active.","Returns true if the PIC slave chip is active.","","Creates a new interrupt controller using the PIC chip by …","Creates a new PIC controller. This function is …","Wrapper function to the <code>pause</code> assembly instruction used …","Sets the interrupt controller to APIC.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this flag is set, the memory access that caused the …","","","","","","","The count of the IDT entries.","If this flag is set, it indicates that the access that …","","","","","","","","If this flag is set, the page fault is a result of the …","IDT entry with all values defaulted to 0, ie <code>null</code>.","","","","","","","If this flag is set, the page fault was caused by a …","Describes an page fault error code.","","","","","","","","","If this flag is set, an access in user mode (CPL=3) …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","","","","","Initialize the IDT.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","Create a new IDT descriptor.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Set the IDT entry flags.","Set the handler function of the IDT entry.","Set the IDT entry offset.","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","","","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","Get a HBA port at <code>idx</code>.","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","","","","","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Start the command engine.","Stop the command engine.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether or not the packet is valid or not.","","","","","","Represents the flags currently set for the mouse.","","","Whether or not the x delta overflowed.","Whether or not the x delta is negative.","Whether or not the y delta overflowed.","Whether or not the y delta is negative.","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","Returns an empty set of flags","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Handle the mouse interrupt.","","Initialise the PS/2 Mouse.","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","Create a new mouse state","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookup and initialize all PCI devices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An interface to a serial port that allows sending out …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","","","","Initialize the serial ports if avaliable.","Initialize the serial port.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","Notes","If path’s length is greater then <code>4096</code> (ie. The max path …","Aero uses <code>4096</code> as the maximum path size in characters.","","Structure that represents a path in a file system. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize devfs and install it in the dyn filesystem …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An inode describes a file. An inode structure holds …","Trait that represents an object which behaves like a …","","","","","","","Read at the provided <code>offset</code> to the given `buffer.","","","","","Write at the provided <code>offset</code> with the given <code>buffer</code> as its …","","","","","","","","","","","Returns a mutable reference to the logging ring buffer.","Initialize the global logger instance and the logger ring …","","","","","","","Structure representing a <em>virtual</em> address space. The …","","","","Returns a reference to the page table frame allocated for …","","","","","","","","Allocates a new <em>virtual</em> address space.","Returns a mutable refernce to the mapper pointing to the …","Returns a mutable reference to the page table allocated …","","PTI (Page Table Isolation) is a feature that mitigates …","","","","","","","Initialize the heap.","","","","","","Get a mutable reference to the active level 4 page table.","","","","","Initialize paging.","","Identity maps a frame for a memory mapped device.","","","","","","","","","","","","","","","","","","Get the [MemoryRegionType] of a frame","Initializes the inner locked global frame allocator.","","","","Create a new global frame allocator from the memory map …","Constructs a new uninitialized and locked version of the …","","","","","","","","Returns an iterator over the usable frames specified in …","The PTI CPU stack stored as a thread local.","","","","","","","","Get a mutable reference to the debug renderer.","","Return [true] if the debug renderer is initialized.","","","","","","","","","","","","","","","","","64-bit <code>syscall</code> instruction handler.","","","","","","","","","","The PIT (Programmable Interval Timer)","","","","","","","","","Initialise the PIT chip.","","","","Increments ticks since epoch. This function is called on …","","","","","","The TCB (Thread Control Block) containg the self pointer …","","","","","","","","Initialize support for the <code>#[thread_local]</code> attribute.","","","","Pointer to the allocated memory for the TLS.","This function is responsible for restoring the kernel …","","","","","","","","","","This function is automatically called after each …","","This function is the entry point for the unwinding …","","","Initialize userland.","Saftey","","","","","","","","","","","Allocates a new process ID. The caller has to garuntee …","","","","","","","","","","","","","","","","","","","","","","","","","","Allocates a new userland process from the provided …","","","","","","","","","Creates a per-cpu idle process. An idle process is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Container or a transparent struct containing a hashmap of …","","","Scheduler interface for each scheduling algorithm. The …","","","","","","","","Get a reference to the active scheduler.","Initialize the scheduler.","","","","Create a new scheduler with no active tasks by default.","Creates a new process container with no processes by …","Register the provided process into the task scheduler …","Registers the provided <code>process</code> in the process container.","Registers the provided process in the schedulers queue.","","","","","","","","","","","","The kernel idle process is a special kind of process that …","Scheduler queue containing a vector of all of the process …","Round Robin is the simplest algorithm for a preemptive …","","","","","","","This function is responsible for releasing all of the …","","","","","","","","","","Creates a new process queue with no processes by default.","Creates a new instance of the round robin scheduler and …","The per-cpu scheduler queues protected by a spin mutex.","Registers the provided <code>process</code> in the process queue.","Registers the provided process into the process queue of …","Yields execution to another process. The task of this …","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper functions for the hardware IO using respective …","","","","","","Pop scratch registers.","","Push preserved registers.","Push scratch registers.","","","","","","","Special special kind of buffer that stores valid UTF-8 …","Appends the provided byte to the ring buffer.","","","Clears the ring buffer and resets the position.","","","","Creates a new kernel ring buffer with the storage …","","","","","","","APIC Location and Status (R/W).","","System Call Flag Mask (R/W).","","Swap Target of BASE Address of GS (R/W).","IA-32e Mode System Call Target Address (R/W).","System Call Target Address (R/W).","Wrapper function to the <code>inb</code> assembly instruction used to …","Wrapper function to the <code>inl</code> assembly instruction used to …","Wrapper function to the <code>outb</code> assembly instruction used to …","Wrapper function to the <code>outl</code> assembly instruction used to …","Wrapper function to the <code>rdmsr</code> assembly instruction used","This function is called after every <code>outb</code> and <code>outl</code> …","Wrapper function to the <code>wrmsr</code> assembly instruction used …","","","","","","","","","","","","","","","","Allocates a new stack at the provided stack address and …","Allocates a user stack at the provided <code>stack_address</code> with …","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,1,2,2,1,3,2,1,3,2,2,2,1,3,0,2,1,3,2,3,0,0,2,1,3,2,3,0,0,3,0,0,2,1,3,2,1,3,2,1,3,2,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,0,0,0,0,0,0,0,0,0,0,7,7,8,6,9,10,11,7,8,6,9,10,11,8,10,11,10,11,9,11,7,8,10,10,7,8,6,9,10,11,8,7,8,10,10,7,8,6,9,10,11,9,8,10,11,9,10,9,7,10,11,7,8,6,9,10,11,7,8,6,9,10,11,7,8,6,9,10,11,0,0,0,0,12,12,13,12,13,12,13,12,13,0,13,13,12,13,0,12,12,13,12,12,13,12,13,12,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,0,0,0,0,0,0,0,0,0,0,17,17,0,0,0,0,0,0,17,18,0,18,18,18,16,19,17,18,16,19,17,18,17,17,18,17,18,16,19,17,17,0,0,18,0,19,19,0,16,18,0,18,16,19,17,19,19,0,17,0,0,18,16,18,19,18,17,17,18,16,19,17,18,16,19,17,18,16,19,17,18,0,0,0,0,0,20,0,0,0,0,0,0,0,21,21,21,22,20,22,23,20,20,22,20,20,24,24,24,24,0,25,20,0,0,24,24,21,20,21,0,21,23,24,22,23,23,23,24,22,24,22,24,22,24,22,24,22,24,22,24,22,24,22,25,20,21,26,24,22,23,27,25,20,21,26,24,22,23,27,24,22,23,27,24,22,23,27,24,22,24,22,24,22,24,22,24,22,24,24,24,24,24,22,22,22,22,22,23,27,25,20,21,26,24,22,23,27,24,22,24,22,24,22,24,22,24,22,0,0,24,22,24,22,25,20,21,26,24,22,23,27,27,24,22,24,22,27,27,23,23,0,0,0,0,0,0,0,0,24,22,26,24,23,27,24,22,26,24,22,24,22,27,27,27,27,27,24,22,27,23,23,23,26,24,22,24,22,24,22,23,27,24,22,25,20,21,26,24,22,23,27,25,20,21,26,24,22,23,27,25,20,21,26,24,22,23,27,0,0,0,0,0,0,28,29,30,31,32,33,28,29,30,31,32,33,28,29,30,28,29,30,33,0,0,0,31,32,33,0,31,32,33,28,29,30,33,0,0,28,29,30,0,0,0,31,32,33,28,29,30,0,0,33,33,31,31,33,0,31,31,32,33,28,29,30,31,32,33,28,29,30,31,32,33,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,34,35,0,0,0,0,0,0,34,36,0,0,0,0,0,35,34,0,0,35,35,35,35,35,0,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,37,35,34,36,38,39,40,41,42,37,35,34,36,38,39,40,41,42,35,34,36,38,39,40,41,42,35,34,36,38,39,40,41,42,35,34,42,35,34,40,35,34,35,34,35,34,35,35,35,35,35,34,34,34,34,34,38,39,40,41,42,37,35,34,36,38,39,40,41,42,35,34,35,34,35,34,35,34,41,35,34,36,0,35,34,35,34,37,35,34,36,38,39,40,41,42,41,35,34,35,34,40,36,0,35,34,37,35,34,37,36,36,36,35,34,41,38,38,39,39,39,39,38,38,38,39,39,38,38,38,35,34,40,40,38,40,41,36,35,34,36,36,36,37,40,42,35,34,35,34,35,34,36,38,39,40,41,42,35,34,37,35,34,36,38,39,40,41,42,37,35,34,36,38,39,40,41,42,36,37,35,34,36,38,39,40,41,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,44,44,0,0,0,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,44,43,44,45,44,45,44,44,0,45,45,0,0,0,0,45,44,44,44,44,44,44,43,46,47,48,46,44,43,44,43,44,43,44,43,44,43,44,43,44,43,44,43,48,49,50,47,51,52,44,43,45,46,53,48,49,50,47,51,52,44,43,45,46,53,50,48,48,46,44,43,46,53,44,43,46,53,49,44,43,53,53,47,46,49,49,49,46,46,51,44,43,53,53,53,50,50,53,44,43,48,48,44,43,45,44,43,53,53,49,49,49,53,44,44,44,44,44,43,43,43,43,43,45,46,53,48,49,50,47,51,52,44,43,45,46,53,44,43,44,43,44,43,44,43,48,49,48,44,43,51,47,48,48,51,44,43,49,50,48,49,44,43,48,49,50,47,51,52,44,43,45,46,53,44,43,44,43,53,53,53,53,53,53,53,52,44,43,51,52,44,43,44,43,46,53,51,48,48,46,46,46,52,51,44,43,50,47,46,53,50,46,48,49,46,53,49,49,49,49,49,49,44,43,49,51,51,44,43,44,43,49,44,43,46,53,44,43,48,49,50,47,51,52,44,43,45,46,53,48,49,50,47,51,52,44,43,45,46,53,48,49,50,47,51,52,44,43,45,46,53,48,49,48,46,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,0,0,0,0,0,54,54,54,54,54,55,54,54,54,54,54,54,54,54,54,56,55,54,57,56,55,54,57,54,54,54,54,56,54,55,56,54,54,54,57,54,54,54,54,54,57,56,55,54,57,54,54,54,54,0,54,0,55,54,54,56,55,54,57,54,54,57,57,57,0,0,0,54,56,57,54,54,56,56,54,54,0,56,54,54,54,54,56,55,54,57,56,55,54,57,56,55,54,57,57,57,58,59,60,60,60,60,60,0,60,60,60,60,60,60,60,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,60,60,60,59,60,60,60,60,60,60,60,60,60,60,60,60,61,61,60,60,60,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,0,60,60,60,60,60,60,60,60,60,60,60,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,59,60,0,60,60,60,60,58,61,60,59,58,61,60,59,58,61,61,58,60,59,61,60,59,58,61,60,59,58,58,58,58,58,58,58,0,58,61,60,59,59,58,60,59,58,61,58,61,60,59,58,61,60,59,58,61,60,59,58,62,63,62,63,62,63,64,0,65,66,0,0,66,65,65,65,0,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,64,65,66,64,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,65,65,65,65,66,66,66,66,66,64,65,66,65,66,65,66,65,66,65,66,0,65,66,0,64,65,66,65,66,64,65,66,65,66,65,66,64,65,66,64,65,66,65,66,65,66,64,0,0,65,66,65,66,65,66,65,66,65,66,64,65,66,64,65,66,64,65,66,64,64,67,0,0,68,0,0,69,67,68,0,67,69,68,67,69,68,0,0,69,68,67,69,68,0,0,0,67,69,68,67,67,69,68,67,69,68,67,69,68,70,71,0,0,0,0,0,0,0,72,70,71,72,70,71,72,70,71,0,0,0,0,0,72,70,71,70,71,73,70,71,72,70,71,72,70,71,72,70,71,70,71,74,75,0,0,74,75,74,75,74,75,75,74,75,75,74,75,74,75,74,75,0,0,76,76,76,76,76,76,77,76,76,76,76,77,0,0,0,0,0,78,78,78,78,78,0,0,78,78,0,78,78,78,0,0,79,79,79,79,79,79,0,0,0,0,79,79,79,0,0,79,79,79,0,0,0,0,0,0,0,0,0,0,80,80,0,80,0,80,0,80,80,80,80,80,81,0,0,81,82,81,82,81,82,81,82,81,82,81,81,82,82,82,81,82,81,82,81,82,81,82,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,83,83,0,0,83,0,83,83,83,0,0,0,83,83,83,0,0,0,0,0,0,0,0,84,84,84,84,84,0,84,84,84,84,84,84,84,84,0,0,0,85,86,85,86,85,86,0,85,86,86,86,0,0,85,86,85,86,85,86,85,86,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,88,89,87,90,89,87,88,90,89,87,88,87,88,87,88,87,89,0,89,90,87,89,87,88,90,89,87,88,89,87,90,89,87,88,87,90,87,89,87,89,90,90,90,90,90,90,90,90,89,0,87,88,90,89,87,88,90,89,87,88,90,89,87,88,91,0,0,0,0,0,91,92,91,92,91,91,92,0,0,92,91,92,92,91,93,91,92,0,91,92,91,92,91,92,94,0,0,0,0,0,0,95,94,96,95,94,96,0,0,95,94,96,94,95,95,94,96,94,96,96,94,96,0,95,95,94,96,95,94,96,95,94,96,0,0,97,98,98,98,0,0,98,0,98,98,0,0,98,0,0,98,98,0,0,0,0,0,0,0,98,98,98,0,0,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,100,100,0,0,101,102,101,102,101,102,101,102,102,101,101,102,102,102,101,101,101,101,102,101,102,101,102],"f":[null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[["bootinfo",3]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["sdt",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["genericaddressstructure",3]],[[]],[[],["usize",15]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[["offsetpagetable",3],["physaddr",3],["virtaddr",3]]],[[["offsetpagetable",3]]],[[]],[[]],[[]],[[["offsetpagetable",3],["str",15]],[["sdt",3],["option",4]]],null,null,[[["offsetpagetable",3],["virtaddr",3]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],null,null,[[],["fadt",3]],[[]],null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[]],null,null,null,null,null,null,[[]],null,[[["sdt",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["hpet",3]],[[]],null,[[["formatter",3]],["result",6]],[[]],null,null,null,[[]],null,[[["offsetpagetable",3],["sdt",3],["option",4]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["madt",3]],[[],["entryheader",3]],[[]],[[]],null,null,null,null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["offsetpagetable",3]],[["maptoerror",4],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["madtiterator",3]],null,null,null,[[],["option",4]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[]],[[]],[[],["mcfg",3]],null,[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,[[],["rsdp",3]],[[]],null,[[]],[[],["usize",15]],[[]],null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],null,[[],["sdt",3]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[["offsetpagetable",3],["u64",15]]],[[],["str",15]],[[]],null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["apictype",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["apictype",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["featureinfo",3]]],[[],["u64",15]],[[],["usize",15]],[[],["u32",15]],[[],[["mutexguard",3],["localapic",3]]],null,null,[[],["apictype",4]],[[]],[[]],[[["ioapicheader",3]]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[["virtaddr",3],["apictype",4]]],[[["virtaddr",3]]],[[["u32",15]],["u32",15]],null,[[["u64",15]]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["segmentselector",3]],[[],["gdtentryflags",3]],null,null,null,[[["segmentselector",3]],["segmentselector",3]],[[["gdtentryflags",3]],["gdtentryflags",3]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],[[["segmentselector",3]],["segmentselector",3]],[[["gdtentryflags",3]],["gdtentryflags",3]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],[[],["u16",15]],[[],["u8",15]],null,null,[[["segmentselector",3]],["segmentselector",3]],[[["gdtentryflags",3]],["gdtentryflags",3]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[],["gdtentryflags",3]],[[],["gdtentry",3]],[[],["tss",3]],[[]],[[]],[[]],[[]],[[["segmentselector",3]],["ordering",4]],[[["gdtentryflags",3]],["ordering",4]],[[["segmentselector",3]],["bool",15]],[[["gdtentryflags",3]],["bool",15]],[[],["segmentselector",3]],[[],["gdtentryflags",3]],[[["segmentselector",3]],["bool",15]],[[["gdtentryflags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],[["option",4],["segmentselector",3]]],[[["u8",15]],[["gdtentryflags",3],["option",4]]],[[["u16",15]],["segmentselector",3]],[[["u8",15]],["gdtentryflags",3]],[[["u16",15]],["segmentselector",3]],[[["u8",15]],["gdtentryflags",3]],[[["intoiterator",8]],["segmentselector",3]],[[["intoiterator",8]],["gdtentryflags",3]],[[]],[[]],[[["virtaddr",3]]],[[]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],[[["segmentselector",3]],["bool",15]],[[["gdtentryflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]],["bool",15]],[[["gdtentryflags",3]],["bool",15]],[[["u64",15],["u16",15]]],[[["ring",4],["u16",15]]],[[["gdtentryflags",3],["u8",15]]],[[]],[[],["segmentselector",3]],[[],["gdtentryflags",3]],null,[[["segmentselector",3]],[["ordering",4],["option",4]]],[[["gdtentryflags",3]],[["ordering",4],["option",4]]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],null,null,null,null,null,[[["bool",15],["segmentselector",3]]],[[["gdtentryflags",3],["bool",15]]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[]],null,[[["segmentselector",3]],["segmentselector",3]],[[["gdtentryflags",3]],["gdtentryflags",3]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],[[]],[[]],[[]],[[]],[[["segmentselector",3]]],[[["gdtentryflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["piccontroller",3]],[[],["apiccontroller",3]],[[],["interruptcontroller",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],["u16",15]],[[]],null,[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["idtflags",3]],[[],["pagefaulterrorcode",3]],[[["idtflags",3]],["idtflags",3]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],[[["idtflags",3]],["idtflags",3]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],[[],["u8",15]],[[],["u64",15]],null,null,[[["idtflags",3]],["idtflags",3]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["idtflags",3]],[[],["pagefaulterrorcode",3]],[[],["idtentry",3]],[[],["scratchregisters",3]],[[],["preservedregisters",3]],[[],["iretregisters",3]],[[],["interruptstack",3]],[[],["interrupterrorstack",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["idtflags",3]],["ordering",4]],[[["pagefaulterrorcode",3]],["ordering",4]],null,[[["idtflags",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],null,[[],["idtflags",3]],[[],["pagefaulterrorcode",3]],[[["idtflags",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["option",4],["idtflags",3]]],[[["u64",15]],[["pagefaulterrorcode",3],["option",4]]],[[["u8",15]],["idtflags",3]],[[["u64",15]],["pagefaulterrorcode",3]],[[["u8",15]],["idtflags",3]],[[["u64",15]],["pagefaulterrorcode",3]],[[["intoiterator",8]],["idtflags",3]],[[["intoiterator",8]],["pagefaulterrorcode",3]],null,[[]],[[]],null,[[]],[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],[[["idtflags",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["idtdescriptor",3]]],[[["idtflags",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["u64",15],["u16",15]]],[[],["idtflags",3]],[[],["pagefaulterrorcode",3]],null,null,null,null,[[["idtflags",3]],[["ordering",4],["option",4]]],[[["pagefaulterrorcode",3]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],null,null,null,null,null,null,[[["bool",15],["idtflags",3]]],[[["pagefaulterrorcode",3],["bool",15]]],[[["idtflags",3]]],[[]],[[["usize",15],["u16",15]]],null,null,null,[[["idtflags",3]],["idtflags",3]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["idtflags",3]]],[[["pagefaulterrorcode",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["hbacapabilities",3]],[[],["globalhbacontrol",3]],null,null,null,null,[[["hbacapabilities",3]],["hbacapabilities",3]],[[["globalhbacontrol",3]],["globalhbacontrol",3]],[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],[[["hbacapabilities",3]],["hbacapabilities",3]],[[["globalhbacontrol",3]],["globalhbacontrol",3]],[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],[[],["u32",15]],[[],["u32",15]],null,null,[[["hbacapabilities",3]],["hbacapabilities",3]],[[["globalhbacontrol",3]],["globalhbacontrol",3]],[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["hbacapabilities",3]],[[],["globalhbacontrol",3]],[[],["hbacommandheader",3]],[[],["fisregisterh2d",3]],[[]],[[]],[[]],[[]],null,[[["hbacapabilities",3]],["ordering",4]],[[["globalhbacontrol",3]],["ordering",4]],null,null,null,null,null,null,null,null,null,[[["offsetpagetable",3]]],[[["hbacapabilities",3]],["bool",15]],[[["globalhbacontrol",3]],["bool",15]],null,null,null,null,null,null,[[],["hbacapabilities",3]],[[],["globalhbacontrol",3]],null,null,[[["hbacapabilities",3]],["bool",15]],[[["globalhbacontrol",3]],["bool",15]],[[["ahciporttype",4]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["option",4],["hbacapabilities",3]]],[[["u32",15]],[["globalhbacontrol",3],["option",4]]],[[["u32",15]],["hbacapabilities",3]],[[["u32",15]],["globalhbacontrol",3]],[[["u32",15]],["hbacapabilities",3]],[[["u32",15]],["globalhbacontrol",3]],[[["intoiterator",8]],["hbacapabilities",3]],[[["intoiterator",8]],["globalhbacontrol",3]],[[["u32",15]],["hbaport",3]],[[],["ahciporttype",4]],null,[[]],[[]],null,null,null,null,null,[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],null,null,null,null,[[["hbacapabilities",3]],["bool",15]],[[["globalhbacontrol",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,[[["hbacapabilities",3]],["bool",15]],[[["globalhbacontrol",3]],["bool",15]],[[["u32",15],["ahciporttype",4],["hbaport",3]]],[[["offsetpagetable",3],["pciheader",3]]],[[],["hbacapabilities",3]],[[],["globalhbacontrol",3]],[[["hbacapabilities",3]],[["ordering",4],["option",4]]],[[["globalhbacontrol",3]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,[[["offsetpagetable",3]]],[[["u32",15],["u64",15]],["bool",15]],[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15],["hbacapabilities",3]]],[[["globalhbacontrol",3],["bool",15]]],null,[[]],[[]],[[["hbacapabilities",3]],["hbacapabilities",3]],[[["globalhbacontrol",3]],["globalhbacontrol",3]],[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],null,[[]],[[]],[[]],[[]],[[["hbacapabilities",3]]],[[["globalhbacontrol",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u8",15]]],[[["bool",15],["u8",15]],["char",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["mouseflags",3]],[[["mouseflags",3]],["mouseflags",3]],[[["mouseflags",3]]],[[["mouseflags",3]],["mouseflags",3]],[[["mouseflags",3]]],[[],["u8",15]],null,[[["mouseflags",3]],["mouseflags",3]],[[["mouseflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mouseflags",3]],[[]],[[["mouseflags",3]],["ordering",4]],[[["mouseflags",3]],["bool",15]],null,[[],["mouseflags",3]],[[],["mutex",6]],[[]],[[],["mouseflags",3]],[[["mouseflags",3]],["bool",15]],[[["intoiterator",8]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u8",15]],[["mouseflags",3],["option",4]]],[[["u8",15]],["mouseflags",3]],[[["u8",15]],["mouseflags",3]],[[["intoiterator",8]],["mouseflags",3]],[[["u8",15]]],[[]],[[]],[[]],[[["mouseflags",3]]],[[["mouseflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["u8",15]]],[[["mouseflags",3]],["bool",15]],[[]],[[]],[[],["mouseflags",3]],[[["mouseflags",3]],[["ordering",4],["option",4]]],[[]],[[["u8",15]]],[[["mouseflags",3]]],[[["mouseflags",3],["bool",15]]],[[["u8",15]],["i16",15]],null,[[["mouseflags",3]],["mouseflags",3]],[[["mouseflags",3]]],[[]],[[["mouseflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["bar",4]],[[]],[[],["u8",15]],[[["devicetype",4]],["bool",15]],[[["vendor",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[["u8",15]],[["option",4],["bar",4]]],[[],["devicetype",4]],[[],["u32",15]],[[],["vendor",4]],[[],["u32",15]],[[],["bool",15]],[[["offsetpagetable",3]]],[[]],[[]],[[]],[[]],[[["vendor",4]],["bool",15]],[[["u8",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["interruptenable",3]],[[],["linestatus",3]],[[["interruptenable",3]],["interruptenable",3]],[[["linestatus",3]],["linestatus",3]],[[["interruptenable",3]]],[[["linestatus",3]]],[[["interruptenable",3]],["interruptenable",3]],[[["linestatus",3]],["linestatus",3]],[[["interruptenable",3]]],[[["linestatus",3]]],[[],["u8",15]],[[],["u8",15]],null,null,[[["interruptenable",3]],["interruptenable",3]],[[["linestatus",3]],["linestatus",3]],[[["interruptenable",3]]],[[["linestatus",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["interruptenable",3]],[[],["linestatus",3]],[[]],[[]],[[["interruptenable",3]],["ordering",4]],[[["linestatus",3]],["ordering",4]],[[["interruptenable",3]],["bool",15]],[[["linestatus",3]],["bool",15]],[[],["interruptenable",3]],[[],["linestatus",3]],[[["interruptenable",3]],["bool",15]],[[["linestatus",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u8",15]],[["interruptenable",3],["option",4]]],[[["u8",15]],[["option",4],["linestatus",3]]],[[["u8",15]],["interruptenable",3]],[[["u8",15]],["linestatus",3]],[[["u8",15]],["interruptenable",3]],[[["u8",15]],["linestatus",3]],[[["intoiterator",8]],["interruptenable",3]],[[["intoiterator",8]],["linestatus",3]],[[],[["mutexguard",3],["serialport",3]]],[[]],[[]],[[]],[[]],[[["interruptenable",3]]],[[["linestatus",3]]],[[["interruptenable",3]],["bool",15]],[[["linestatus",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["linestatus",3]],[[["interruptenable",3]],["bool",15]],[[["linestatus",3]],["bool",15]],[[["u16",15]]],[[],["interruptenable",3]],[[],["linestatus",3]],[[["interruptenable",3]],[["ordering",4],["option",4]]],[[["linestatus",3]],[["ordering",4],["option",4]]],[[["interruptenable",3]]],[[["linestatus",3]]],[[["u8",15]]],null,null,[[["bool",15],["interruptenable",3]]],[[["bool",15],["linestatus",3]]],[[["interruptenable",3]],["interruptenable",3]],[[["linestatus",3]],["linestatus",3]],[[["interruptenable",3]]],[[["linestatus",3]]],[[]],[[]],[[["interruptenable",3]]],[[["linestatus",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["linestatus",3]]],[[["str",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["filesystem",8],["usize",15]],[["aerofilesystemerror",4],["result",4]]],[[]],[[]],[[]],[[["str",15]],[["aeroinvalidpath",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arc",3]],[[],["arc",3]],null,[[],[["aerofilesystemerror",4],["result",4]]],[[["arc",3],["device",8]],[["aerofilesystemerror",4],["result",4]]],[[]],[[]],[[]],[[["usize",15]],[["usize",15],["result",4],["aerofilesystemerror",4]]],[[["usize",15]],[["usize",15],["result",4],["aerofilesystemerror",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],[["usize",15],["result",4],["aerofilesystemerror",4]]],[[["usize",15]],[["usize",15],["result",4],["aerofilesystemerror",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["arc",3],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["inode",4]],[[]],[[]],[[]],[[["usize",15]],[["usize",15],["result",4],["aerofilesystemerror",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["usize",15],["result",4],["aerofilesystemerror",4]]],null,null,null,null,null,[[]],[[]],[[["metadata",3]],["bool",15]],[[]],[[]],[[],[["mutexguard",3],["ringbuffer",3]]],[[]],[[]],[[["record",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[],["physframe",3]],null,[[]],[[]],[[["usize",15]],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["i32",15]]],[[],[["maptoerror",4],["result",4]]],[[],["offsetpagetable",3]],[[],["pagetable",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["layout",3]]],[[["offsetpagetable",3]],[["maptoerror",4],["result",4]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[],["pagetable",3]],[[]],[[]],null,[[]],[[["memoryregions",3]],[["offsetpagetable",3],["maptoerror",4],["result",4]]],[[]],[[["offsetpagetable",3],["physframe",3]],[["unmapguard",3],["result",4],["maptoerror",4]]],[[["size4kib",4],["page",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],[["option",4],["physframe",3]]],[[],[["physframe",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["physframe",3]],[["memoryregiontype",4],["option",4]]],[[["physframe",3]],[["memoryregiontype",4],["option",4]]],[[["memoryregions",3]]],[[]],[[]],null,[[["memoryregions",3]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[["usize",15]]],[[]],null,[[]],null,[[],[["debugrendy",3],["mutexguard",3]]],[[["framebuffer",3]]],[[],["bool",15]],null,null,[[["colorcode",3]]],null,[[]],[[["interruptstack",3]],["usize",15]],[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],[["aerosyscallerror",4],["result",4],["usize",15]]],[[["usize",15]],[["aerosyscallerror",4],["result",4],["usize",15]]],[[["usize",15]]],null,null,null,null,null,[[]],[[]],null,[[]],[[],["u64",15]],[[]],[[]],[[]],[[["u64",15]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],null,null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[["panicinfo",3]]],[[]],[[]],null,[[]],null,null,[[["offsetpagetable",3]],[["str",15],["result",4]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["processid",3]],[[],["processstate",4]],[[]],[[]],[[["processid",3]],["ordering",4]],null,null,null,null,[[["processid",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["offsetpagetable",3],["elffile",3]],[["result",4],["arc",3],["maptoerror",4]]],[[]],[[]],[[]],[[]],[[]],[[["processid",3]],["bool",15]],[[]],[[["usize",15]]],[[],[["spinmutex",3],["arc",3]]],[[["processid",3]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["processid",3]],[["option",4],["arc",3]]],[[]],[[]],[[],[["spinmutexguard",3],["scheduler",3]]],[[]],null,[[]],[[]],[[]],[[]],[[["processid",3]]],[[["arc",3],["spinmutex",3],["processid",3]]],[[["spinmutex",3],["arc",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],[["option",4],["processid",3]]],null,[[]],[[]],[[]],[[]],[[],["arc",3]],null,[[["processid",3]]],[[["processid",3]]],[[],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["arc",3]],[["arc",3],["any",8]]],[[]],[[]],[[]],null,null,null,[[["arc",3]],[["arc",3],["option",4]]],[[]],[[]],null,null,[[]],null,null,[[],["percpu",3]],[[],["percpu",3]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]],["option",4]],[[["usize",15]],[["str",15],["option",4]]],null,[[["u8",15]]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["str",15]],["result",6]],null,null,null,null,null,null,null,[[["u16",15]],["u8",15]],[[["u16",15]],["u32",15]],[[["u8",15],["u16",15]]],[[["u32",15],["u16",15]]],[[["u32",15]],["u64",15]],[[]],[[["u32",15],["u64",15]]],null,[[]],[[],["usize",15]],[[],["virtaddr",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["stackhelper",3]],[[["virtaddr",3],["offsetpagetable",3],["usize",15],["pagetableflags",3]],[["maptoerror",4],["result",4]]],[[["offsetpagetable",3],["virtaddr",3],["usize",15]],[["maptoerror",4],["result",4]]],[[]],null,[[["u64",15]]],null,null,[[],["virtaddr",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"AcpiHeader"],[3,"GenericAddressStructure"],[3,"AcpiTable"],[3,"Fadt"],[3,"Hpet"],[4,"MadtEntry"],[3,"MadtLocalApic"],[3,"MadtIntSrcOverride"],[3,"MadtIterator"],[3,"Madt"],[3,"EntryHeader"],[3,"DeviceConfig"],[3,"Mcfg"],[3,"Rsdp"],[3,"Sdt"],[3,"IoApic"],[4,"ApicType"],[3,"LocalApic"],[3,"IoApicHeader"],[3,"GdtAccessFlags"],[3,"GdtEntryType"],[3,"GdtEntryFlags"],[3,"GdtEntry"],[3,"SegmentSelector"],[4,"Ring"],[3,"GdtDescriptor"],[3,"Tss"],[3,"PIC_CONTROLLER"],[3,"APIC_CONTROLLER"],[3,"INTERRUPT_CONTROLLER"],[3,"InterruptController"],[3,"ApicController"],[3,"PicController"],[3,"PageFaultErrorCode"],[3,"IDTFlags"],[3,"IdtEntry"],[3,"IdtDescriptor"],[3,"ScratchRegisters"],[3,"PreservedRegisters"],[3,"IretRegisters"],[3,"InterruptStack"],[3,"InterruptErrorStack"],[3,"GlobalHBAControl"],[3,"HBACapabilities"],[4,"AHCIPortType"],[3,"HBACommandHeader"],[3,"HBACommandTable"],[3,"HBAMemory"],[3,"HBAPort"],[3,"HBAPRDTEntry"],[3,"Port"],[3,"AHCI"],[3,"FISRegisterH2D"],[3,"MouseFlags"],[3,"MOUSE"],[3,"Mouse"],[3,"MouseState"],[3,"PCIHeader"],[4,"Vendor"],[4,"DeviceType"],[4,"Bar"],[13,"Memory32"],[13,"Memory64"],[3,"SerialPort"],[3,"InterruptEnable"],[3,"LineStatus"],[3,"Path"],[4,"AeroFilesystemError"],[4,"AeroInvalidPath"],[3,"DevNull"],[3,"DevStdout"],[3,"DevFs"],[8,"Device"],[3,"FileHandle"],[3,"FileTable"],[4,"INode"],[8,"INodeInterface"],[3,"AeroLogger"],[3,"AddressSpace"],[3,"UnmapGuard"],[3,"LockedFrameAllocator"],[3,"GlobalFrameAllocator"],[3,"SyscallFrame"],[3,"PitDescriptor"],[3,"ThreadControlBlock"],[3,"ThreadLocalStorage"],[3,"ProcessId"],[4,"ProcessState"],[3,"Process"],[3,"InterruptFrame"],[3,"ProcessContainer"],[3,"Scheduler"],[8,"SchedulerInterface"],[3,"ProcessQueue"],[3,"HeldLocks"],[3,"RoundRobin"],[8,"Downcastable"],[3,"PerCpu"],[3,"RingBuffer"],[20,"LinkerSymbol"],[3,"Stack"],[3,"StackHelper"]]},\
"aero_syscall":{"doc":"","t":[4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,0,11,11,11,11,0,5,5,5,0,5,11,11,11,17,17,17,17,17,17,14,14,5,5,5,5,5,5,5],"n":["AeroSyscallError","AeroSyscallResult","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EALREADY","EBADF","EBADFD","EBADMSG","EBUSY","ECANCELED","ECHILD","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELOOP","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENOPROTOOPT","ENOSPC","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EROFS","ESHUTDOWN","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETXTBSY","EXDEV","Unknown","borrow","borrow_mut","clone","consts","eq","fmt","from","into","prelude","sys_exit","sys_open","sys_write","syscall","syscall_result_as_usize","try_from","try_into","type_id","SYS_CLOSE","SYS_EXIT","SYS_OPEN","SYS_READ","SYS_REBOOT","SYS_WRITE","define_syscall_ids","define_syscall_fns","supports_syscall_sysret","syscall0","syscall1","syscall2","syscall3","syscall4","syscall5"],"q":["aero_syscall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_syscall::consts","","","","","","","aero_syscall::syscall","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Exits the current process with the provided status.","","","","","","","","","","","","","","","","Returns true if the current CPU supports the <code>syscall</code> and …","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["aerosyscallerror",4]],null,[[["aerosyscallerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["usize",15]]],[[["usize",15],["str",15]],["usize",15]],[[["usize",15]],["usize",15]],null,[[["aerosyscallresult",6]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]]],"p":[[4,"AeroSyscallError"]]},\
"ahash":{"doc":"AHash is a hashing algorithm is intended to be a high …","t":[3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AHasher","CallHasher","RandomState","borrow","borrow","borrow_mut","borrow_mut","build_hasher","clone","clone","clone_into","clone_into","default","default","finish","fmt","fmt","from","from","generate_with","get_hash","into","into","new","new_with_keys","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_seeds","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":["ahash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>Hasher</code> for hashing an arbitrary stream of bytes.","Provides a way to get an optimized hasher for a given …","Provides a Hasher factory. This is typically used (e.g. …","","","","","Constructs a new [AHasher] with keys based on this […","","","","","Constructs a new [AHasher] with fixed keys. If <code>std</code> is …","","","","","","","Allows for supplying seeds, but each time it is called …","","","","Use randomly generated keys","Creates a new hasher keyed to the provided key.","","","","","","","","","Allows for explicitly setting the seeds to used.","","","","","","",""],"i":[0,0,0,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,2,3,1,2,2,1,1,2,1,2,1,2,1,2,2,1,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],["ahasher",3]],[[],["ahasher",3]],[[],["randomstate",3]],[[]],[[]],[[],["ahasher",3]],[[]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]],["randomstate",3]],[[],["u64",15]],[[]],[[]],[[],["randomstate",3]],[[["u128",15]],["ahasher",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["randomstate",3]],[[]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]]],"p":[[3,"AHasher"],[3,"RandomState"],[8,"CallHasher"]]},\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":[18,8,8,10,10,10,10,10,10,10,10,10],"n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":["bit_field","","","","","","","","","","",""],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is …","Obtains the bit at the index <code>bit</code>; note that index 0 is …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[1,0,0,2,1,2,1,2,1,2,1,2],"f":[null,null,null,[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["rangebounds",8],["usize",15]]],[[["rangebounds",8],["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["rangebounds",8],["usize",15]]],[[["rangebounds",8],["usize",15]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structure."],"i":[0],"f":[null],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"font8x8":{"doc":"8x8 monochrome bitmap fonts for rendering","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,17,17,17,17,17,17,17,17,17,17,12,12,17,17,17,3,3,3,3,17,3,17,3,17,3,17,3,17,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BASIC_FONTS","BASIC_UNICODE","BLOCK_FONTS","BLOCK_UNICODE","BOX_FONTS","BOX_UNICODE","GREEK_FONTS","GREEK_UNICODE","HIRAGANA_FONTS","HIRAGANA_UNICODE","LATIN_FONTS","LATIN_UNICODE","MISC_FONTS","MISC_UNICODE","SGA_FONTS","SGA_UNICODE","legacy","unicode","BASIC_LEGACY","BLOCK_LEGACY","BOX_LEGACY","CONTROL_LEGACY","GREEK_LEGACY","HIRAGANA_LEGACY","LATIN_LEGACY","MISC_LEGACY","NOTHING_TO_DISPLAY","SGA_LEGACY","0","1","BASIC_UNICODE","BLOCK_UNICODE","BOX_UNICODE","BasicFonts","BlockFonts","BoxFonts","FontUnicode","GREEK_UNICODE","GreekFonts","HIRAGANA_UNICODE","HiraganaFonts","LATIN_UNICODE","LatinFonts","MISC_UNICODE","MiscFonts","SGA_UNICODE","SgaFonts","UnicodeFonts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_array","char","clone","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get","get","get","get","get_font","get_font","get_font","get_font","get_font","get_font","get_font","get_font","get_font","into","into","into","into","into","into","into","into","into","into_inner","is_whitespace","iter","iter","iter","iter","iter","iter","iter","iter","iter","ne","new","new","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["font8x8","","","","","","","","","","","","","","","","","","font8x8::legacy","","","","","","","","","","font8x8::unicode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A convenient constant for Basic Latin fonts (<code>U+0000</code> - …","A constant <code>[FontUnicode; 128]</code>, for Basic Latin fonts (…","A convenient constant for Block Element fonts (<code>U+2580</code> - …","A constant <code>[FontUnicode; 32]</code>, for Block Element fonts (…","A convenient constant for Box Element fonts (<code>U+2500</code> - …","A constant <code>[FontUnicode; 128]</code>, for Box Element fonts (…","A convenient constant for Greek fonts (<code>U+0390</code> - <code>U+03C9</code>), …","A constant <code>[FontUnicode; 128]</code>, for Greek fonts (<code>U+0390</code> - …","A convenient constant for Hiragana fonts (<code>U+3040</code> - <code>U+309F</code>…","A constant <code>[FontUnicode; 96]</code>, for Hiragana fonts (<code>U+3040</code> …","A convenient constant for Extended Latin fonts (<code>U+00A0</code> - …","A constant <code>[FontUnicode; 96]</code>, for Extended Latin fonts (…","A convenient constant for Miscellanous fonts (<code>U+20A7</code>, …","A constant <code>[FontUnicode; 10]</code>, for  Miscellanous fonts (…","A convenient constant for special SGA fonts (<code>U+E541</code> - …","A constant <code>[FontUnicode; 26]</code>, for special SGA fonts (…","Re-export the original <code>[u8; 8]</code> constants, taken from …","Unicode support for 8x8 fonts.","Contains raw-byte renderings for unicode points <code>U+0000</code> - …","Contains raw-byte renderings for unicode points <code>U+2580</code> - …","Contains raw-byte renderings for unicode points <code>U+2500</code> - …","Contains raw-byte renderings for unicode points <code>U+0080</code> - …","Contains raw-byte renderings for unicode points <code>U+0390</code> - …","Contains raw-byte renderings for unicode points <code>U+3040</code> - …","Contains raw-byte renderings for unicode points <code>U+00A0</code> - …","Contains raw-byte renderings for unicode points: <code>U+20A7</code>, …","Indicates all zeros, meaning nothing to render.","Contains raw-byte renderings for unicode points <code>U+E541</code> - …","","","A constant <code>[FontUnicode; 128]</code>, for Basic Latin fonts (…","A constant <code>[FontUnicode; 32]</code>, for Block Element fonts (…","A constant <code>[FontUnicode; 128]</code>, for Box Element fonts (…","Strong-typed collection wrapper for BASIC_UNICODE.","Strong-typed collection wrapper for BLOCK_UNICODE.","Strong-typed collection wrapper for BOX_UNICODE.","A single 8x8 font which supports <code>UTF-16</code> encoding/decoding.","A constant <code>[FontUnicode; 128]</code>, for Greek fonts (<code>U+0390</code> - …","Strong-typed collection wrapper for GREEK_UNICODE.","A constant <code>[FontUnicode; 96]</code>, for Hiragana fonts (<code>U+3040</code> …","Strong-typed collection wrapper for HIRAGANA_UNICODE.","A constant <code>[FontUnicode; 96]</code>, for Extended Latin fonts (…","Strong-typed collection wrapper for LATIN_UNICODE.","A constant <code>[FontUnicode; 10]</code>, for  Miscellanous fonts (…","Strong-typed collection wrapper for MISC_UNICODE.","A constant <code>[FontUnicode; 26]</code>, for special SGA fonts (…","Strong-typed collection wrapper for SGA_UNICODE.","A trait for collections of <code>FontUnicode</code>, which provide …","","","","","","","","","","","","","","","","","","","Return the <code>[u8; 8]</code>-representation for this font.","Return the char value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the current <code>FontUnicode</code> and returns the inner …","Returns a <code>bool</code> indicating whether this font renders as a …","","","","","","","","","","","Create a new collection of <code>BASIC_UNICODE</code> fonts.","Create a new collection of <code>BLOCK_UNICODE</code> fonts.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,1,1,1,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,10,2,3,4,5,6,7,8,9,10,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,1,1,1,10,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["char",15]],[[],["fontunicode",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["basicfonts",3]],["bool",15]],[[["blockfonts",3]],["bool",15]],[[["boxfonts",3]],["bool",15]],[[["greekfonts",3]],["bool",15]],[[["hiraganafonts",3]],["bool",15]],[[["latinfonts",3]],["bool",15]],[[["miscfonts",3]],["bool",15]],[[["sgafonts",3]],["bool",15]],[[["fontunicode",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],["option",4]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[["char",15]],[["fontunicode",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[],[["fontunicode",3],["iter",3]]],[[["fontunicode",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"FontUnicode"],[3,"BasicFonts"],[3,"BlockFonts"],[3,"BoxFonts"],[3,"GreekFonts"],[3,"HiraganaFonts"],[3,"LatinFonts"],[3,"MiscFonts"],[3,"SgaFonts"],[8,"UnicodeFonts"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":[13,13,3,3,4,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,12,6,3,3,4,3,3,3,3,3,13,13,3,3,3,3,4,3,3,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","ne","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","HashMap","IntoIter","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry_with","replace_entry_with","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","remove","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_maphashbrown::hash_setd":["The memory allocator returned an error","Error due to the computed capacity exceeding the …","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","","","","","The layout of the allocation request that failed.","Default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the …","Creates an empty <code>HashMap<K, V, S, A></code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s …","Set the value of an entry with a custom hasher function.","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","Creates an empty <code>HashMap</code>.","Creates an empty <code>HashMap</code> using the given allocator.","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns…","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","Inserts the given <code>value</code> into the set if it is not …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Visits the values representing the intersection, i.e., …","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","Creates an empty <code>HashSet</code>.","Creates an empty <code>HashSet</code>.","","","","","","","","","Removes a value from the set. Returns whether the value …","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …"],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,3,4,0,0,0,3,4,3,4,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,5,5,6,9,10,5,5,6,9,10,5,5,5,5,12,5,20,5,5,5,5,6,7,8,9,10,11,13,14,3,15,16,17,4,18,19,20,20,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,14,17,5,14,17,14,17,5,15,18,5,15,5,15,5,15,18,5,5,5,3,15,16,4,18,19,16,15,16,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,6,7,8,9,10,11,12,13,15,19,15,15,18,5,5,5,15,4,18,19,15,5,5,6,7,8,9,10,11,13,5,5,6,7,8,9,10,11,12,13,4,3,4,3,4,4,5,5,5,15,18,5,15,18,18,15,18,18,5,5,5,5,6,7,8,9,10,11,12,13,5,6,9,10,20,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,20,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,21,22,23,24,25,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,21,22,26,27,28,29,21,21,22,26,27,28,29,21,21,21,21,21,25,21,21,21,21,22,23,24,26,27,28,29,21,21,22,23,24,25,26,27,28,29,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,21,21,21,21,22,23,24,21,21,22,23,24,25,26,27,28,29,21,21,21,21,21,21,22,23,24,25,26,27,28,29,21,21,21,22,26,27,28,29,21,22,23,24,25,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,22,23,24,25,26,27,28,29,21,21,21,21,21,21,21],"f":[null,null,null,null,null,[[]],[[]],[[],["tryreserveerror",4]],[[]],[[["tryreserveerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[["tryreserveerror",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["entry",4]],null,[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[["intoiterator",8]]],[[],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["rawoccupiedentrymut",3]],[[]],[[]],[[],["occupiedentry",3]],[[]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[]],[[]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["rawentrymut",4]],[[],["entry",4]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["occupiederror",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["difference",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["hashmap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["union",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]]],"p":[[4,"TryReserveError"],[13,"AllocError"],[4,"RawEntryMut"],[4,"Entry"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"OccupiedError"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[]],null],"p":[]},\
"linked_list_allocator":{"doc":"","t":[3,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Heap","LockedHeap","align_down","align_up","alloc","allocate_first_fit","borrow","borrow","borrow_mut","borrow_mut","bottom","dealloc","deallocate","deref","empty","empty","extend","free","from","from","hole","init","into","into","new","new","size","top","try_from","try_from","try_into","try_into","type_id","type_id","used","HoleList","align_layout","allocate_first_fit","borrow","borrow_mut","deallocate","empty","from","into","min_size","new","try_from","try_into","type_id"],"q":["linked_list_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linked_list_allocator::hole","","","","","","","","","","","","",""],"d":["A fixed size heap backed by a linked list of free memory …","","Align downwards. Returns the greatest x with alignment …","Align upwards. Returns the smallest x with alignment <code>align</code>…","","Allocates a chunk of the given size with the given …","","","","","Returns the bottom address of the heap.","","Frees the given allocation. <code>ptr</code> must be a pointer returned…","","","Creates an empty heap. All allocate calls will return <code>None</code>…","Extends the size of the heap by creating a new hole at …","Returns the size of the free part of the heap","","","","Initializes an empty heap","","","Creates a new heap with the given <code>bottom</code> and <code>size</code>. The …","Creates a new heap with the given <code>bottom</code> and <code>size</code>. The …","Returns the size of the heap.","Return the top address of the heap","","","","","","","Returns the size of the used part of the heap","A sorted list of holes. It uses the the holes itself to …","Aligns the given layout for use with <code>HoleList</code>.","Searches the list for a big enough hole.","","","Frees the allocation given by <code>ptr</code> and <code>layout</code>.","Creates an empty <code>HoleList</code>.","","","Returns the minimal allocation size. Smaller allocations …","Creates a <code>HoleList</code> that contains the given hole.","","",""],"i":[0,0,0,0,1,2,2,1,2,1,2,1,2,1,2,1,2,2,2,1,0,2,2,1,2,1,2,2,2,1,2,1,2,1,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,null,[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["layout",3]]],[[["layout",3]],[["nonnull",3],["result",4]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["layout",3]]],[[["layout",3],["nonnull",3],["u8",15]]],[[],["spinlock",6]],[[],["heap",3]],[[],["lockedheap",3]],[[["usize",15]]],[[],["usize",15]],[[]],[[]],null,[[["usize",15]]],[[]],[[]],[[["usize",15]],["heap",3]],[[["usize",15]],["lockedheap",3]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],null,[[["layout",3]],["layout",3]],[[["layout",3]],["result",4]],[[]],[[]],[[["layout",3],["nonnull",3],["u8",15]],["layout",3]],[[],["holelist",3]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["holelist",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"LockedHeap"],[3,"Heap"],[3,"HoleList"]]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":[16,16,8,16,16,3,3,18,18,18,18,18,18,18,16,16,3,3,3,3,3,3,8,8,8,3,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,10,10,10,10,10,10,10,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_owned_by_current_thread","is_owned_by_current_thread","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":["lock_apid":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a …","Marker type which indicates that the Guard type for a …","Initial value for an unlocked mutex.","Initial value for an unlocked mutex.","Initial value.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single …","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if …","Temporarily yields the <code>RwLock</code> to a waiting thread if …","Temporarily yields the <code>RwLock</code> to a waiting thread if …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock<T></code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock …","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","","","","","","","","","","","","","","","","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the …","Makes a new <code>MappedMutexGuard</code> for a component of the …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock<T></code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component …","Attempts to make a new <code>MappedMutexGuard</code> for a component …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if…","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[1,2,0,3,4,0,0,3,3,5,5,6,4,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,21,21,10,6,13,16,17,18,22,22,22,22,23,23,9,12,15,9,12,15,9,12,15,10,11,13,14,16,17,18,19,20,10,11,17,20,24,17,18,25,17,25,10,11,13,14,16,17,18,19,20,9,10,10,11,11,12,13,13,14,14,15,16,16,17,17,18,18,19,19,20,20,9,12,9,12,15,15,15,15,7,8,9,9,9,10,11,6,12,12,12,13,14,15,15,15,16,17,18,19,20,9,12,15,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,9,12,15,3,3,9,6,12,4,4,15,6,12,3,9,6,12,4,4,26,27,10,11,13,14,16,17,19,20,10,9,12,15,5,9,12,15,15,15,13,16,17,18,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,3,9,6,12,4,2,2,1,9,6,12,4,2,26,28,28,2,1,9,6,12,27,29,29,10,11,13,14,16,17,19,20,15,15,15,15,15,15,15,15,15,27,18,29,18,29,18,15,15,15,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,3,6,4,22,21,10,11,6,13,14,16,17,18,19,20,4,22,27,23,10,13,16,17,18,10,13,16,17,18,15,27,18,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[]],[[]],[[]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[]],[[],["rwlockupgradablereadguard",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["reentrantmutex",3]],[[]],[[]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["mutexguard",3]],[[]],[[],["reentrantmutexguard",3]],[[]],[[]],[[]],[[]],[[],[["mappedmutexguard",3],["sized",8]]],[[],[["mappedmutexguard",3],["sized",8]]],[[],[["mappedreentrantmutexguard",3],["sized",8]]],[[],[["mappedreentrantmutexguard",3],["sized",8]]],[[],[["mappedrwlockreadguard",3],["sized",8]]],[[],[["mappedrwlockwriteguard",3],["sized",8]]],[[],[["mappedrwlockreadguard",3],["sized",8]]],[[],[["mappedrwlockwriteguard",3],["sized",8]]],[[],["mutex",3]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[],["nonzerousize",3]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],[["option",4],["mutexguard",3]]],[[],["bool",15]],[[],[["option",4],["reentrantmutexguard",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["mutexguard",3]]],[[],["bool",15]],[[],[["option",4],["reentrantmutexguard",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["mutexguard",3]]],[[],["bool",15]],[[],[["option",4],["reentrantmutexguard",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["mappedmutexguard",3]]],[[],[["result",4],["mappedmutexguard",3]]],[[],[["mappedreentrantmutexguard",3],["result",4]]],[[],[["mappedreentrantmutexguard",3],["result",4]]],[[],[["result",4],["mappedrwlockreadguard",3]]],[[],[["mappedrwlockwriteguard",3],["result",4]]],[[],[["result",4],["mappedrwlockreadguard",3]]],[[],[["mappedrwlockwriteguard",3],["result",4]]],[[],[["rwlockreadguard",3],["option",4]]],[[],[["rwlockreadguard",3],["option",4]]],[[],[["rwlockreadguard",3],["option",4]]],[[],[["rwlockreadguard",3],["option",4]]],[[],[["rwlockreadguard",3],["option",4]]],[[],[["rwlockreadguard",3],["option",4]]],[[],[["option",4],["rwlockupgradablereadguard",3]]],[[],[["option",4],["rwlockupgradablereadguard",3]]],[[],[["option",4],["rwlockupgradablereadguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockupgradablereadguard",3]],[[]],[[],["rwlockwriteguard",3]],[[],["rwlockwriteguard",3]]],"p":[[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawMutex"],[8,"RawRwLock"],[8,"GetThreadId"],[3,"RawReentrantMutex"],[3,"GuardSend"],[3,"GuardNoSend"],[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutexFair"],[8,"RawRwLockFair"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockRecursive"],[8,"RawRwLockUpgrade"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of …","An enum representing the available verbosity level …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>\'static</code> string.","Set <code>file</code> to a <code>\'static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the info level.","","","","","","","","","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>\'static</code> string.","Set <code>module_path</code> to a <code>\'static</code> string","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&\'static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[1,2,1,2,1,2,0,0,0,0,0,2,0,0,0,0,0,1,2,1,2,3,4,1,2,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,4,6,3,5,1,2,3,5,1,2,5,6,0,9,1,1,2,2,5,6,8,0,3,4,3,4,9,1,1,2,2,3,4,5,6,7,7,8,8,1,2,3,4,5,6,7,8,1,2,1,1,2,2,1,1,2,2,1,2,5,6,0,1,2,3,4,5,6,7,8,1,1,2,2,3,4,5,6,3,4,9,0,0,0,1,1,2,2,1,2,0,3,4,3,4,3,4,5,6,8,4,6,1,1,2,2,5,6,0,0,0,3,4,5,6,2,1,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arguments",3]],[[["arguments",3]],["recordbuilder",3]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["record",3]],[[],["metadata",3]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[],["level",4]],[[],["levelfilter",4]],[[],["record",3]],[[],["metadata",3]],[[["level",4]],["ordering",4]],[[["levelfilter",4]],["ordering",4]],[[["metadata",3]],["ordering",4]],[[["metadatabuilder",3]],["ordering",4]],null,[[["metadata",3]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],null,[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["level",4]]],[[["str",15]],[["result",4],["levelfilter",4]]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[],["level",4]],[[["level",4]],["recordbuilder",3]],[[],["level",4]],[[["level",4]],["metadatabuilder",3]],[[],[["u32",15],["option",4]]],[[["u32",15],["option",4]],["recordbuilder",3]],[[["record",3]]],null,null,[[],["log",8]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[],["level",4]],[[],["levelfilter",4]],[[],["levelfilter",4]],[[],["metadata",3]],[[["metadata",3]],["recordbuilder",3]],[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[],[["str",15],["option",4]]],[[["str",15],["option",4]],["recordbuilder",3]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["level",4]],[["ordering",4],["option",4]]],[[["levelfilter",4]],[["ordering",4],["option",4]]],[[["levelfilter",4]],[["ordering",4],["option",4]]],[[["level",4]],[["ordering",4],["option",4]]],[[["metadata",3]],[["ordering",4],["option",4]]],[[["metadatabuilder",3]],[["ordering",4],["option",4]]],[[["log",8]],[["result",4],["setloggererror",3]]],[[["log",8]],[["result",4],["setloggererror",3]]],[[["levelfilter",4]]],[[],["str",15]],[[["str",15]],["recordbuilder",3]],[[],["str",15]],[[["str",15]],["metadatabuilder",3]],[[],[["option",4],["level",4]]],[[],["levelfilter",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[8,"Log"]]},\
"raw_cpuid":{"doc":"","tn":["CACHE_INFO_TABLE","Cache","CacheInfo","CacheInfoIter","CacheInfoType","CacheParameter","CacheParametersIter","CacheType","Core","CpuId","CpuIdResult","DTLB","DatInfo","DatIter","DatType","Data","DataTLB","DirectCacheAccessInfo","DirectMapped","Disabled","EightWay","Epc","EpcSection","ExtendedFeatures","ExtendedFunctionInfo","ExtendedState","ExtendedStateInfo","ExtendedStateIter","ExtendedTopologyIter","ExtendedTopologyLevel","FeatureInfo","FourWay","FullyAssiciative","General","HyperV","Hypervisor","HypervisorInfo","Instruction","InstructionTLB","Invalid","KVM","L2Associativity","L2CatInfo","L3CatInfo","L3MonitoringInfo","MemBwAllocationInfo","MemoryEncryptionInfo","MonitorMwaitInfo","Null","Null","PerformanceMonitoringInfo","Prefetch","ProcessorFrequencyInfo","ProcessorSerial","ProcessorTraceInfo","RdtAllocationInfo","RdtMonitoringInfo","Reserved","SMT","STLB","SgxInfo","SgxSectionInfo","SgxSectionIter","SixteenWay","SoCVendorAttributesIter","SoCVendorBrand","SoCVendorInfo","TLB","ThermalPowerInfo","TopologyType","TscInfo","TwoWay","Unified","UnifiedTLB","Unknown","Unknown","Unknown","VMware","VendorInfo","Xen","apic_frequency","as_string","as_string","associativity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brand_index","bus_frequency","c_bit_position","cache_level","cache_line_size","cache_size","cache_type","cache_type","capacity_mask_length","capacity_mask_length","cflush_cache_line_size","clone","clone","clone","clone","coherency_line_size","configurable_address_ranges","conversion_factor","counter_bit_width","cpuid","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","denominator","desc","deterministic_address_translation_info","dts_irq_threshold","eax","ebx","ebx_length","ecx","edx","eq","eq","eq","eq","extended_family_id","extended_model_id","extended_signature","extensions_supported","family_id","fixed_function_counters","fixed_function_counters_bit_width","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_cache_info","get_cache_parameters","get_dca_cap_value","get_direct_cache_access_info","get_extended_feature_info","get_extended_function_info","get_extended_state_info","get_extended_topology_info","get_feature_info","get_hypervisor_info","get_memory_encryption_info","get_monitor_mwait_info","get_performance_monitoring_info","get_processor_frequency_info","get_processor_serial","get_processor_trace_info","get_project_id","get_rdt_allocation_info","get_rdt_monitoring_info","get_sgx_info","get_soc_vendor_id","get_soc_vendor_info","get_stepping_id","get_thermal_power_info","get_tsc_info","get_vendor_attributes","get_vendor_brand","get_vendor_info","has_1gb_entries","has_1gib_pages","has_2mb_entries","has_4k_entries","has_4mb_entries","has_64bit_mode","has_acpi","has_adx","has_aesni","has_any_thread_deprecation","has_apic","has_arat","has_avx","has_avx2","has_avx512_ifma","has_avx512bw","has_avx512cd","has_avx512dq","has_avx512er","has_avx512f","has_avx512pf","has_avx512vl","has_bmi1","has_bmi2","has_clflush","has_clflushopt","has_clwb","has_cmov","has_cmpxchg16b","has_cmpxchg8b","has_cnxtid","has_code_data_prioritization","has_complex_indexing","has_configurable_psb_and_cycle_accurate_mode","has_cpl","has_dca","has_de","has_ds","has_ds_area","has_dts","has_ecmd","has_eist","has_encls_leaves_etrackc_erdinfo_eldbc_elduc","has_enclv_leaves_einvirtchild_edecvirtchild_esetcontext","has_energy_bias_pref","has_execute_disable","has_f16c","has_fdp","has_flexible_hwp","has_fma","has_fpu","has_fpu_cs_ds_deprecated","has_fsgsbase","has_fxsave_fxstor","has_hdc","has_hle","has_htt","has_hw_coord_feedback","has_hwp","has_hwp_activity_window","has_hwp_capabilities","has_hwp_energy_performance_preference","has_hwp_fast_access_mode","has_hwp_notification","has_hwp_package_level_request","has_hwp_peci_override","has_hypervisor","has_ignore_idle_processor_hwp_request","has_invariant_tsc","has_invpcid","has_ip_tracestop_filtering","has_l2_cat","has_l3_cat","has_l3_monitoring","has_lahf_sahf","has_linear_response_delay","has_lip_with_cs_base","has_local_bandwidth_monitoring","has_lzcnt","has_mca","has_mce","has_memory_bandwidth_allocation","has_mmx","has_monitor_mwait","has_movbe","has_mpx","has_msr","has_mtc_timing_packet_coefi_suppression","has_mtrr","has_occupancy_monitoring","has_ospke","has_oxsave","has_pae","has_page_flush_msr","has_pat","has_pbe","has_pcid","has_pclmulqdq","has_pdcm","has_pge","has_pku","has_pln","has_popcnt","has_power_event_trace","has_prefetchw","has_prefetchwt1","has_processor_trace","has_pse","has_pse36","has_psn","has_ptm","has_ptwrite","has_rdpid","has_rdrand","has_rdseed","has_rdseet","has_rdta","has_rdtm","has_rdtscp","has_rep_movsb_stosb","has_rtit_cr3_match","has_rtm","has_sev","has_sev_es","has_sgx","has_sgx1","has_sgx2","has_sgx_lc","has_sha","has_single_range_output_scheme","has_smap","has_sme","has_smep","has_smx","has_ss","has_sse","has_sse2","has_sse3","has_sse41","has_sse42","has_ssse3","has_syscall_sysret","has_sysenter_sysexit","has_tm","has_tm2","has_topa","has_topa_maximum_entries","has_total_bandwidth_monitoring","has_trace_transport_subsystem","has_tsc","has_tsc_adjust_msr","has_tsc_deadline","has_turbo_boost","has_turbo_boost3","has_umip","has_vme","has_vmx","has_x2apic","has_xgetbv","has_xsave","has_xsavec","has_xsaveopt","has_xsaves_xrstors","highest_cos","highest_cos","highest_cos","ia32_xss_supports_hdc","ia32_xss_supports_pt","identify","initial_local_apic_id","interrupts_as_break_event","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_branch_inst_ret_ev_unavailable","is_branch_midpred_ev_unavailable","is_cache_ref_ev_unavailable","is_compacted_format","is_core_cyc_ev_unavailable","is_fully_associative","is_fully_associative","is_in_ia32_xss","is_in_xcr0","is_inclusive","is_inst_ret_ev_unavailable","is_ll_cache_miss_ev_unavailable","is_ref_cycle_ev_unavailable","is_self_initializing","is_write_back_invalidate","isolation_bitmap","isolation_bitmap","iter","iter","l2_associativity","l2_cat","l3_cat","l3_monitoring","largest_monitor_line","level","level_number","level_type","linear_address_bits","mawau_value","max_addressable_ids","max_cores_for_cache","max_cores_for_package","max_enclave_size_64bit","max_enclave_size_non_64bit","max_encrypted_guests","max_hba_throttling","max_logical_processor_ids","maximum_rmid_range","memory_bandwidth_allocation","min_sev_no_es_asid","miscselect","model_id","native_cpuid","ne","new","next","next","next","next","next","next","next","nominal_frequency","num","number_of_counters","numerator","offset","partitioning","physical_address_bits","physical_address_reduction","physical_base","physical_line_partitions","processor_base_frequency","processor_brand_string","processor_max_frequency","processors","rmid_range","secs_attributes","serial","serial_lower","serial_middle","sets","sets","shift_right_for_next_apic_id","size","size","smallest_monitor_line","stepping_id","subleaf","supported_c0_states","supported_c1_states","supported_c2_states","supported_c3_states","supported_c4_states","supported_c5_states","supported_c6_states","supported_c7_states","supported_cycle_threshold_value_encodings","supported_mtc_period_encodings","supported_psb_frequency_encodings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tsc_frequency","tsc_frequency","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version_id","ways","x2apic_id","xcr0_supports_avx512_opmask","xcr0_supports_avx512_zmm_hi16","xcr0_supports_avx512_zmm_hi256","xcr0_supports_avx_256","xcr0_supports_legacy_x87","xcr0_supports_mpx_bndcsr","xcr0_supports_mpx_bndregs","xcr0_supports_pkru","xcr0_supports_sse_128","xsave_area_size_enabled_features","xsave_area_size_supported_features","xsave_size","cpuid_count"],"q":["raw_cpuidraw_cpuid::native_cpuid"],"d":["This table is taken from Intel manual (Section CPUID …","","Describes any kind of cache (TLB, Data and Instruction …","Used to iterate over cache information contained in cpuid …","What type of cache are we dealing with?","","","","","Main type used to query for information about the CPU we…","Low-level data-structure to store result of cpuid …","","Deterministic Address Translation Structure","Deterministic Address Translation Structure Iterator","Deterministic Address Translation cache type (EDX bits 04 …","Data cache","","","","","","","EBX:EAX and EDX:ECX provide information on the Enclave …","","","","","","Iterates over the system topology in order to retrieve …","Gives detailed information about the current level in the …","","","","","","Identifies the different Hypervisor products.","Information about Hypervisor …","Instruction cache","","","","","L2 Cache Allocation Technology Enumeration Sub-leaf (EAX …","L3 Cache Allocation Technology Enumeration Sub-leaf (EAX …","","Memory Bandwidth Allocation Enumeration Sub-leaf (EAX = …","","","Null - No more caches","Null (indicates this sub-leaf is not valid).","","","Processor Frequency Information","","","","","4-31 = Reserved","Hyper-thread (Simultaneous multithreading)","","Intel SGX Capability Enumeration Leaf, sub-leaf 0 (EAX = …","Intel SGX EPC Enumeration Leaf, sub-leaves (EAX = 12H, …","Iterator over the SGX sub-leafs (ECX >= 2).","","","","","","","What type of core we have at this level in the topology …","Time Stamp Counter and Nominal Core Crystal Clock …","","Data and Instruction cache","Some unified TLBs will allow a single TLB entry to …","","","","","","","(Virtual) Bus (local apic timer) frequency in kHz.","Return vendor identification as human readable string.","","Ways of associativity (Bits 31-22)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Brand Index","Bus (Reference) Frequency (in MHz).","","Translation cache level (starts at 1)","Cache Line size in bytes","Cache size in 1K units","Cache Type","Translation cache type field.","Length of the capacity bit mask using minus-one notation.","Length of the capacity bit mask using minus-one notation.","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)","","","","","System Coherency Line Size (Bits 11-00)","Number of configurable Address Ranges for filtering (Bits …","Conversion factor from reported IA32_QM_CTR value to …","Bit width of general-purpose, performance monitoring …","Macro which queries cpuid directly.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An unsigned integer which is the denominator of the …","Description of the cache (from Intel Manual)","","Number of Interrupt Thresholds in Digital Thermal Sensor","Return value EAX register","Return value EBX register","Length of EBX bit vector to enumerate architectural …","Return value ECX register","Return value EDX register","","","","","Version Information: Extended Family","Version Information: Extended Model","Extended Processor Signature and Feature Bits.","Enumeration of Monitor-Mwait extensions (beyond EAX and …","Version Information: Family","Number of fixed-function performance counters (if Version …","Bit width of fixed-function performance counters (if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Query basic information about caches. This will just …","Retrieve more elaborate information about caches (as …","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR …","Direct cache access info.","Find out about more features supported by this CPU.","Extended functionality of CPU described here (including …","Information for saving/restoring extended register state.","Information about topology (how many cores and what kind …","Query a set of features that are available on this CPU.","","","Information about how monitor/mwait works on this CPU.","Info about performance monitoring (how many counters …","Processor Frequency Information.","Retrieve serial number of processor.","Intel Processor Trace Enumeration Information.","","Quality of service enforcement information.","Quality of service informations.","","","","","Query information about thermal and power management …","Time Stamp Counter/Core Crystal Clock Information.","","","Return information about vendor. This is typically a …","1GB page size entries supported by this structure","Is there support for 1GiB pages.","2MB page size entries supported by this structure","4K page size entries supported by this structure","4MB page size entries supported by this structure","Check support for 64-bit mode.","Thermal Monitor and Software Controlled Clock Facilities. …","Supports ADX.","A value of 1 indicates that the processor supports the …","AnyThread deprecation","APIC On-Chip. The processor contains an Advanced …","ARAT. APIC-Timer-always-running feature is supported if …","A value of 1 indicates the processor supports the AVX …","AVX2","AVX512_IFMA","AVX512BW","AVX512CD","Supports AVX512DQ.","AVX512ER","Supports AVX512F.","AVX512PF","AVX512VL","BMI1","BMI2","CLFLUSH Instruction. CLFLUSH Instruction is supported.","Supports CLFLUSHOPT.","CLWB","Conditional Move Instructions. The conditional move …","CMPXCHG16B Available. A value of 1 indicates that the …","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes …","L1 Context ID. A value of 1 indicates the L1 data cache …","Is Code and Data Prioritization Technology supported?","Complex Cache Indexing (Bit 2) False: Direct mapped cache.…","If true, Indicates support of Configurable PSB and …","CPL Qualified Debug Store. A value of 1 indicates the …","A value of 1 indicates the processor supports the ability …","Debugging Extensions. Support for I/O breakpoints, …","Debug Store. The processor supports the ability to write …","64-bit DS Area. A value of 1 indicates the processor …","Digital temperature sensor is supported if set.","ECMD. Clock modulation duty cycle extension is supported …","Enhanced Intel SpeedStep® technology. A value of 1 …","Supports ENCLS instruction leaves ETRACKC, ERDINFO, …","Supports ENCLV instruction leaves EINCVIRTCHILD, …","The processor supports performance-energy bias preference …","Is there support for execute disable bit.","A value of 1 indicates that processor supports 16-bit …","FDP_EXCPTN_ONLY. x87 FPU Data Pointer updated only on x87 …","Flexible HWP is supported if set.","A value of 1 indicates the processor supports FMA …","Floating Point Unit On-Chip. The processor contains an …","Deprecates FPU CS and FPU DS values if 1.","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if …","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR …","HDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, …","HLE","Max APIC IDs reserved field is Valid. A value of 0 for …","Hardware Coordination Feedback Capability (Presence of …","HWP. HWP base registers (IA32_PM_ENABLE[bit 0], …","HWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …","HWP Capabilities. Highest Performance change is supported …","HWP Energy Performance Preference. IA32_HWP_REQUEST[bits …","Fast access mode for the IA32_HWP_REQUEST MSR is …","HWP Notification. IA32_HWP_INTERRUPT MSR is supported if …","HWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …","HWP PECI override is supported if set.","A value of 1 indicates the indicates the presence of a …","Ignoring Idle Logical Processor HWP request is supported …","Is Invariant TSC available?","INVPCID. If 1, supports INVPCID instruction for system …","If true, Indicates support of IP Filtering, TraceStop …","Supports L2 Cache Allocation.","Supports L3 Cache Allocation.","Supports L3 Cache Intel RDT Monitoring.","Is LAHF/SAHF available in 64-bit mode?","Reports whether the response of the delay values is …","If true, Generated packets which contain IP payloads have …","Supports local bandwidth monitoring.","Is LZCNT available?","Machine Check Architecture. A value of 1 indicates the …","Machine Check Exception. Exception 18 is defined for …","Supports Memory Bandwidth Allocation.","Intel MMX Technology. The processor supports the Intel …","MONITOR/MWAIT. A value of 1 indicates the processor …","A value of 1 indicates that the processor supports MOVBE …","MPX. Supports Intel Memory Protection Extensions if 1.","Model Specific Registers RDMSR and WRMSR Instructions. …","If true, Indicates support of MTC timing packet and …","Memory Type Range Registers. MTRRs are supported. The …","Supports occupancy monitoring.","OS has set CR4.PKE to enable protection keys (and the …","A value of 1 indicates that the OS has enabled …","Physical Address Extension. Physical addresses greater …","The Page Flush MSR is available if set.","Page Attribute Table. Page Attribute Table is supported. …","Pending Break Enable. The processor supports the use of …","Process-context identifiers. A value of 1 indicates that …","PCLMULQDQ. A value of 1 indicates the processor supports …","Perfmon and Debug Capability: A value of 1 indicates the …","Page Global Bit. The global bit is supported in …","Supports protection keys for user-mode pages.","PLN. Power limit notification controls are supported if …","A value of 1 indicates that the processor supports the …","Support of Power Event Trace. Writes can set IA32_RTIT_CTL…","Is PREFETCHW available?","Has PREFETCHWT1 (Intel® Xeon Phi™ only).","Supports Intel Processor Trace.","Page Size Extension. Large pages of size 4 MByte are …","36-Bit Page Size Extension. 4-MByte pages addressing …","Processor Serial Number. The processor supports the …","PTM. Package thermal management is supported if set.","Indicates support of PTWRITE. Writes can set IA32_RTIT_CTL…","RDPID and IA32_TSC_AUX are available.","A value of 1 indicates that processor supports RDRAND …","Supports RDSEED.","Supports RDSEED (deprecated alias).","Supports Intel Resource Director Technology (RDT) …","Supports Intel Resource Director Technology (RDT) …","Check support for rdtscp instruction.","Supports Enhanced REP MOVSB/STOSB if 1.","If true, Indicates that IA32_RTIT_CTL.CR3Filter can be …","RTM","Secure Encrypted Virtualization is supported if set.","SEV Encrypted State is supported if set.","Supports Intel® Software Guard Extensions (Intel® SGX …","Has SGX1 support.","Has SGX2 support.","Supports SGX Launch Configuration.","Supports SHA Instructions.","If true, Indicates support of Single-Range Output scheme.","SMAP. Supports Supervisor-Mode Access Prevention (and the …","Secure Memory Encryption is supported if set.","SMEP. Supports Supervisor-Mode Execution Prevention if 1.","Safer Mode Extensions. A value of 1 indicates that the …","Self Snoop. The processor supports the management of …","SSE. The processor supports the SSE extensions.","SSE2. The processor supports the SSE2 extensions.","Streaming SIMD Extensions 3 (SSE3). A value of 1 …","A value of 1 indicates that the processor supports SSE4.1.","A value of 1 indicates that the processor supports SSE4.2.","A value of 1 indicates the presence of the Supplemental …","Are fast system calls available.","SYSENTER and SYSEXIT Instructions. The SYSENTER and …","Thermal Monitor. The processor implements the thermal …","Thermal Monitor 2. A value of 1 indicates whether the …","If true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …","If true, ToPA tables can hold any number of output …","Supports total bandwidth monitoring.","If true, Indicates support of output to Trace Transport …","Time Stamp Counter. The RDTSC instruction is supported, …","IA32_TSC_ADJUST MSR is supported if 1.","A value of 1 indicates that the processors local APIC …","Intel Turbo Boost Technology Available (see description …","Intel® Turbo Boost Max Technology 3.0 available.","Supports user-mode instruction prevention if 1.","Virtual 8086 Mode Enhancements. Virtual 8086 mode …","Virtual Machine Extensions. A value of 1 indicates that …","A value of 1 indicates that the processor supports x2APIC …","Supports XGETBV with ECX = 1 if set.","A value of 1 indicates that the processor supports the …","Supports XSAVEC and the compacted form of XRSTOR if set.","CPU has xsaveopt feature.","Supports XSAVES/XRSTORS and IA32_XSS if set.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Support for HDC in IA32_XSS.","Support for PT in IA32_XSS.","","Initial APIC ID","Supports treating interrupts as break-event for MWAIT, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Branch instruction retired event not available if 1.","Branch mispredict retired event not available if 1.","Last-level cache reference event not available if 1.","Returns true when the compacted format of an XSAVE area …","Core cycle event not available if 1.","Fully Associative cache","Fully associative structure","True if the bit n (corresponding to the sub-leaf index) …","True if bit n is supported in XCR0.","Cache Inclusiveness (Bit 1) False: Cache is not inclusive …","Instruction retired event not available if 1.","Last-level cache misses event not available if 1.","Reference cycles event not available if 1.","Self Initializing cache level (does not need SW …","Write-Back Invalidate/Invalidate (Bit 0) False: …","Bit-granular map of isolation/contention of allocation …","Bit-granular map of isolation/contention of allocation …","Iterator over extended state enumeration levels >= 2.","Iterator over SGX sub-leafs.","L2 Associativity field","L2 Cache Allocation Information.","L3 Cache Allocation Information.","L3 Cache Monitoring.","Largest monitor-line size in bytes (default is processor…","Cache Level (starts at 1)","Level number.","","#Linear Address Bits","The value of MAWAU used by the BNDLDX and BNDSTX …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for processor cores in …","The maximum supported enclave size in 64-bit mode is …","The maximum supported enclave size in non-64-bit mode is …","","Reports the maximum MBA throttling value supported for …","Maximum number of addressable IDs for logical processors …","Maximum range (zero-based) of RMID of L3.","Memory Bandwidth Allocation Information.","","Bit vector of supported extended SGX features.","Version Information: Model","Uses Rust’s <code>cpuid</code> function from the <code>arch</code> module.","","Return new CPUID struct.","Iterate over all cache information.","Iterate over all caches for this CPU. Note: cpuid is …","","","","Iterate over each sub-leaf with an  address translation …","Iterate over all SoC vendor specific attributes.","An unsigned integer which is the nominal frequency of the …","Number as retrieved from cpuid","Number of general-purpose performance monitoring counter …","An unsigned integer which is the numerator of the …","The offset in bytes of this extended state components …","Partitioning (0: Soft partitioning between the logical …","#Physical Address Bits","","The physical address of the base of the EPC section","Physical Line partitions (Bits 21-12)","Processor Base Frequency (in MHz).","Retrieve processor brand string.","Maximum Frequency (in MHz).","Number of logical processors at this level type. The …","Maximum range (zero-based) of RMID within this physical …","Reports the valid bits of SECS.ATTRIBUTES[127:0] that …","","Bits 00-31 of 96 bit processor serial number. (Available …","Bits 32-63 of 96 bit processor serial number. (Available …","Number of Sets (Bits 31-00)","Number of Sets.","Number of bits to shift right on x2APIC ID to get a …","The size in bytes (from the offset specified in EBX) of …","Size of the corresponding EPC section within the …","Smallest monitor-line size in bytes (default is processor…","Version Information: Stepping ID","","Number of C0 sub C-states supported using MWAIT (Bits 03 …","Number of C1 sub C-states supported using MWAIT (Bits 07 …","Number of C2 sub C-states supported using MWAIT (Bits 11 …","Number of C3 sub C-states supported using MWAIT (Bits 15 …","Number of C4 sub C-states supported using MWAIT (Bits 19 …","Number of C5 sub C-states supported using MWAIT (Bits 23 …","Number of C6 sub C-states supported using MWAIT (Bits 27 …","Number of C7 sub C-states supported using MWAIT (Bits 31 …","Bitmap of supported Cycle Threshold value encodings (Bits …","Bitmap of supported MTC period encodings (Bit 31:16).","Bitmap of supported Configurable PSB frequency encodings …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TSC frequency in kHz.","“TSC frequency” = “core crystal clock frequency” …","Cache type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version ID of architectural performance monitoring. (Bits …","Ways of associativity.","x2APIC ID the current logical processor. (Bits 31-00)","Support for AVX512 OPMASK in XCR0.","Support for AVX512 ZMM Hi16 in XCR0.","Support for AVX512 ZMM Hi256 XCR0.","Support for AVX 256-bit in XCR0.","Support for legacy x87 in XCR0.","Support for MPX BNDCSR in XCR0.","Support for MPX BNDREGS in XCR0.","Support for PKRU in XCR0.","Support for SSE 128-bit in XCR0.","Maximum size (bytes, from the beginning of the …","Maximum size (bytes, from the beginning of the …","The size in bytes of the XSAVE area containing all states …",""],"i":[0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,3,4,0,5,5,5,6,0,0,0,0,0,0,0,0,0,5,5,1,7,0,0,3,4,2,7,0,0,0,0,0,0,0,3,4,0,1,0,0,0,0,0,3,2,1,0,0,0,5,0,0,0,1,0,0,0,5,3,4,4,7,5,7,0,7,8,9,10,11,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,17,40,46,42,45,45,11,42,32,33,17,13,1,15,11,11,38,30,23,0,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,45,5,46,39,15,12,20,13,13,23,13,13,3,2,7,5,17,17,45,19,17,23,23,8,12,13,9,9,14,1,15,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,10,7,45,5,46,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,12,12,22,12,12,12,12,12,12,12,12,12,12,12,12,12,43,12,12,12,43,12,43,12,12,43,43,12,42,45,42,42,42,45,17,21,17,23,17,20,17,21,21,21,21,21,21,21,21,21,21,21,17,21,21,17,17,17,17,32,11,38,17,17,17,17,17,20,20,17,35,35,20,45,17,21,20,17,17,21,21,17,20,21,17,20,20,20,20,20,20,20,20,20,17,20,45,21,38,31,31,29,45,34,38,30,45,17,17,31,17,17,17,21,17,38,17,30,21,17,17,46,17,17,17,17,17,17,21,20,17,38,45,21,21,17,17,17,20,38,21,17,21,21,21,21,45,21,38,21,46,46,21,35,35,21,21,38,21,46,21,17,17,17,17,17,17,17,17,45,17,17,17,38,38,30,38,17,21,17,20,20,21,17,17,17,26,17,26,26,26,32,33,34,26,26,8,17,19,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,14,18,24,27,36,41,44,23,23,23,28,23,11,42,28,28,11,23,23,23,11,11,32,33,26,35,45,31,31,29,19,11,25,25,45,21,42,11,11,35,35,46,34,17,30,31,46,35,17,0,7,12,14,18,24,27,36,41,44,39,15,23,39,28,42,45,46,37,11,40,45,40,25,29,35,16,16,16,11,42,25,28,37,19,17,28,19,19,19,19,19,19,19,19,38,38,38,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,8,39,15,8,12,13,9,14,1,15,16,17,18,11,3,19,20,21,22,23,24,25,2,26,27,28,29,30,31,32,33,34,35,36,6,37,38,39,40,41,42,4,43,44,10,7,45,5,46,23,42,25,26,26,26,26,26,26,26,26,26,26,26,26,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["u32",15],["option",4]]],[[],["str",15]],[[],["str",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],["cachetype",4]],[[],["dattype",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["cpuidresult",3]],[[],["cacheinfotype",4]],[[],["cacheinfo",3]],[[],["cacheparameter",3]],[[],["usize",15]],[[],["u8",15]],[[],["u32",15]],[[],["u8",15]],null,[[],["cpuid",3]],[[],["cpuidresult",3]],[[],["vendorinfo",3]],[[],["cacheinfoiter",3]],[[],["cacheinfotype",4]],[[],["cacheinfo",3]],[[],["processorserial",3]],[[],["featureinfo",3]],[[],["cacheparametersiter",3]],[[],["cacheparameter",3]],[[],["cachetype",4]],[[],["monitormwaitinfo",3]],[[],["thermalpowerinfo",3]],[[],["extendedfeatures",3]],[[],["directcacheaccessinfo",3]],[[],["performancemonitoringinfo",3]],[[],["extendedtopologyiter",3]],[[],["extendedtopologylevel",3]],[[],["topologytype",4]],[[],["extendedstateinfo",3]],[[],["extendedstateiter",3]],[[],["extendedstate",3]],[[],["rdtmonitoringinfo",3]],[[],["l3monitoringinfo",3]],[[],["rdtallocationinfo",3]],[[],["l3catinfo",3]],[[],["l2catinfo",3]],[[],["membwallocationinfo",3]],[[],["sgxinfo",3]],[[],["sgxsectioniter",3]],[[],["sgxsectioninfo",4]],[[],["epcsection",3]],[[],["processortraceinfo",3]],[[],["tscinfo",3]],[[],["processorfrequencyinfo",3]],[[],["datiter",3]],[[],["datinfo",3]],[[],["dattype",4]],[[],["socvendorinfo",3]],[[],["socvendorattributesiter",3]],[[],["socvendorbrand",3]],[[],["extendedfunctioninfo",3]],[[],["l2associativity",4]],[[],["memoryencryptioninfo",3]],[[],["u32",15]],[[],["str",15]],[[],[["datiter",3],["option",4]]],[[],["u8",15]],null,null,[[],["u8",15]],null,null,[[["cachetype",4]],["bool",15]],[[["topologytype",4]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[["l2associativity",4]],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],[["u32",15],["option",4]]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["cacheinfoiter",3],["option",4]]],[[],[["option",4],["cacheparametersiter",3]]],[[],["u32",15]],[[],[["option",4],["directcacheaccessinfo",3]]],[[],[["extendedfeatures",3],["option",4]]],[[],[["extendedfunctioninfo",3],["option",4]]],[[],[["option",4],["extendedstateinfo",3]]],[[],[["option",4],["extendedtopologyiter",3]]],[[],[["featureinfo",3],["option",4]]],[[],[["option",4],["hypervisorinfo",3]]],[[],[["option",4],["memoryencryptioninfo",3]]],[[],[["option",4],["monitormwaitinfo",3]]],[[],[["option",4],["performancemonitoringinfo",3]]],[[],[["option",4],["processorfrequencyinfo",3]]],[[],[["option",4],["processorserial",3]]],[[],[["option",4],["processortraceinfo",3]]],[[],["u32",15]],[[],[["option",4],["rdtallocationinfo",3]]],[[],[["option",4],["rdtmonitoringinfo",3]]],[[],[["option",4],["sgxinfo",3]]],[[],["u16",15]],[[],[["option",4],["socvendorinfo",3]]],[[],["u32",15]],[[],[["thermalpowerinfo",3],["option",4]]],[[],[["tscinfo",3],["option",4]]],[[],[["socvendorattributesiter",3],["option",4]]],[[],["socvendorbrand",3]],[[],[["option",4],["vendorinfo",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["bool",15]],[[],["bool",15]],[[],["hypervisor",4]],[[],["u8",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["extendedstateiter",3]],[[],["sgxsectioniter",3]],[[],[["l2associativity",4],["option",4]]],[[],[["option",4],["l2catinfo",3]]],[[],[["l3catinfo",3],["option",4]]],[[],[["option",4],["l3monitoringinfo",3]]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],["topologytype",4]],[[],[["option",4],["u8",15]]],[[],["u8",15]],[[],["u16",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u16",15]],[[],["u8",15]],[[],["u32",15]],[[],[["option",4],["membwallocationinfo",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],null,[[["hypervisor",4]],["bool",15]],[[],["cpuid",3]],[[],[["cacheinfo",3],["option",4]]],[[],[["cacheparameter",3],["option",4]]],[[],[["extendedtopologylevel",3],["option",4]]],[[],[["extendedstate",3],["option",4]]],[[],[["sgxsectioninfo",4],["option",4]]],[[],[["option",4],["datinfo",3]]],[[],[["option",4],["cpuidresult",3]]],[[],["u32",15]],null,[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],[[],[["option",4],["u8",15]]],[[],["u8",15]],[[],["u64",15]],[[],["usize",15]],[[],["u16",15]],[[],[["str",15],["option",4]]],[[],["u16",15]],[[],["u16",15]],[[],["u32",15]],[[]],[[],["u64",15]],[[],["u32",15]],[[],["u32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u16",15]],[[],["u8",15]],null,[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]],["cpuidresult",3]]],"p":[[4,"CacheInfoType"],[4,"TopologyType"],[4,"CacheType"],[4,"DatType"],[4,"L2Associativity"],[4,"SgxSectionInfo"],[4,"Hypervisor"],[3,"HypervisorInfo"],[3,"VendorInfo"],[3,"SoCVendorBrand"],[3,"CacheParameter"],[3,"CpuId"],[3,"CpuIdResult"],[3,"CacheInfoIter"],[3,"CacheInfo"],[3,"ProcessorSerial"],[3,"FeatureInfo"],[3,"CacheParametersIter"],[3,"MonitorMwaitInfo"],[3,"ThermalPowerInfo"],[3,"ExtendedFeatures"],[3,"DirectCacheAccessInfo"],[3,"PerformanceMonitoringInfo"],[3,"ExtendedTopologyIter"],[3,"ExtendedTopologyLevel"],[3,"ExtendedStateInfo"],[3,"ExtendedStateIter"],[3,"ExtendedState"],[3,"RdtMonitoringInfo"],[3,"L3MonitoringInfo"],[3,"RdtAllocationInfo"],[3,"L3CatInfo"],[3,"L2CatInfo"],[3,"MemBwAllocationInfo"],[3,"SgxInfo"],[3,"SgxSectionIter"],[3,"EpcSection"],[3,"ProcessorTraceInfo"],[3,"TscInfo"],[3,"ProcessorFrequencyInfo"],[3,"DatIter"],[3,"DatInfo"],[3,"SoCVendorInfo"],[3,"SoCVendorAttributesIter"],[3,"ExtendedFunctionInfo"],[3,"MemoryEncryptionInfo"]]},\
"rlibc":{"doc":"A bare-metal library supplying functions rustc may lower …","t":[5,5,5,5],"n":["memcmp","memcpy","memmove","memset"],"q":["rlibc","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[["usize",15]],["i32",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["i32",15]]]],"p":[]},\
"rustc_demangle":{"doc":"Demangle Rust compiler symbol names.","t":[3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["Demangle","TryDemangleError","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","demangle","fmt","fmt","fmt","from","from","into","into","try_demangle","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rustc_demangle","","","","","","","","","","","","","","","","","","","","","",""],"d":["Representation of a demangled symbol name.","Error returned from the <code>try_demangle</code> function below when …","Returns the underlying string that’s being demangled.","","","","","","De-mangles a Rust symbol into a more readable version","","","","","","","","The same as <code>demangle</code>, except return an <code>Err</code> if the string …","","","","","",""],"i":[0,0,1,1,2,1,2,2,0,1,1,2,1,2,1,2,0,1,2,1,2,1,2],"f":[null,null,[[],["str",15]],[[]],[[]],[[]],[[]],[[],["trydemangleerror",3]],[[["str",15]],["demangle",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["trydemangleerror",3],["demangle",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Demangle"],[3,"TryDemangleError"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected …","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","","","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred …","","","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through …"],"i":[0,0,0,1,2,1,2,0,1,1,1,1,2,1,2,0,1,2,1,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["scopeguard",3],["always",4]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":[6,6,6,6,6,6,6,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Barrier","Lazy","Mutex","Once","RwLock","RwLockUpgradableGuard","RwLockWriteGuard","barrier","lazy","lock_api","mutex","once","relax","rwlock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","SpinMutex","SpinMutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","INIT","Once","borrow","borrow_mut","call_once","drop","fmt","from","from","from","get","get_mut","get_unchecked","initialized","into","is_completed","new","poll","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","is_locked","leak","leak","leak","lock_exclusive","lock_shared","lock_upgradable","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock_exclusive","try_lock_shared","try_lock_upgradable","try_read","try_upgrade","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","unlock_exclusive","unlock_shared","unlock_upgradable","upgrade","upgrade","upgradeable_read","write","writer_count"],"q":["spin","","","","","","","","","","","","","","spin::barrier","","","","","","","","","","","","","","","","","","","spin::lazy","","","","","","","","","","","","","spin::lock_api","","","","","","spin::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::mutex::spin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::once","","","","","","","","","","","","","","","","","","","","","","","spin::relax","","","","","","","","","","","","","","","","","","","","spin::rwlock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A primitive that synchronizes the execution of multiple …","A value which is initialized on the first access. See […","A primitive that synchronizes the execution of multiple …","A primitive that provides lazy one-time initialization. …","A lock that provides data access to either one writer or …","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See […","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Spin synchronisation primitives, but compatible with …","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","","","","","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","","","Creates a new lazy value using <code>Default</code> as the …","","","Forces the evaluation of this lazy value and returns a …","","","Creates a new lazy value with the given initializing …","","","","A lock that provides mutually exclusive data access …","A guard that provides mutable data access (compatible …","A lock that provides data access to either one writer or …","A guard that provides immutable data access (compatible …","A guard that provides immutable data access but can be …","A guard that provides mutable data access (compatible …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","Force unlock this [<code>Mutex</code>].","","","","","Returns a mutable reference to the underlying data.","","","Consumes this [<code>Mutex</code>] and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","","Locks the [<code>Mutex</code>] and returns a guard that permits access …","Creates a new [<code>Mutex</code>] wrapping the supplied data.","A naïve spinning mutex.","","","","","","Try to lock this [<code>Mutex</code>], returning a lock guard if …","","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this [<code>SpinMutex</code>].","","","","","Returns a mutable reference to the underlying data.","","","Consumes this [<code>SpinMutex</code>] and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","Locks the [<code>SpinMutex</code>] and returns a guard that permits …","","Creates a new [<code>SpinMutex</code>] wrapping the supplied data.","","","","","","Try to lock this [<code>SpinMutex</code>], returning a lock guard if …","","","","Initialization constant of [<code>Once</code>].","A primitive that provides lazy one-time initialization.","","","Performs an initialization routine once and only once. …","","","","","","Returns a reference to the inner value if the [<code>Once</code>] has …","Returns a mutable reference to the inner value if the […","Returns a reference to the inner value on the unchecked …","Creates a new initialized [<code>Once</code>].","","Returns a reference to the inner value if the [<code>Once</code>] has …","Creates a new [<code>Once</code>].","Like [<code>Once::get</code>], but will spin if the [<code>Once</code>] is in the …","","","Returns a the inner value if the [<code>Once</code>] has been …","","Spins until the [<code>Once</code>] contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU …","","","","","","","","","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","","","","","","Returns a mutable reference to the underlying data.","","","","","Consumes this <code>RwLock</code>, returning the underlying data.","","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","","","","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Attempt to acquire this lock with shared read access.","","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded …","Lock this rwlock with exclusive write access, blocking …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,4,5,4,5,4,5,5,4,5,5,4,4,4,4,5,4,4,5,4,4,4,5,4,4,4,0,4,5,4,5,4,4,4,5,4,0,0,6,7,6,7,6,7,7,7,6,7,7,6,6,6,6,7,6,6,7,6,6,6,7,6,6,6,6,7,6,7,6,6,6,7,6,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,9,10,9,10,9,10,9,10,11,9,10,9,10,9,10,9,10,0,0,0,0,12,13,14,15,12,13,14,15,12,13,14,15,14,12,14,15,14,13,14,15,12,13,13,14,14,15,15,12,12,12,12,12,13,14,15,12,12,13,14,15,12,12,13,14,15,12,12,12,12,12,12,12,13,14,15,12,13,14,15,12,12,12,12,12,15,12,12,12,13,14,15,12,12,12,12,15,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["barrierwaitresult",3]],null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["mutexguard",3]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],[["mutexguard",3],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["spinmutexguard",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],[["option",4],["spinmutexguard",3]]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[["fnonce",8]]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[],["rwlockupgradableguard",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["rwlockreadguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],[["rwlockupgradableguard",3],["option",4]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["rwlockwriteguard",3]],[[],["rwlockupgradableguard",3]],[[],["rwlockwriteguard",3]],[[],["usize",15]]],"p":[[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Lazy"],[3,"Mutex"],[3,"MutexGuard"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"Once"],[3,"Spin"],[3,"Loop"],[8,"RelaxStrategy"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"]]},\
"spinning_top":{"doc":"Provides a simple spinlock based on the abstractions …","t":[6,3,6,6,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["MappedSpinlockGuard","RawSpinlock","Spinlock","SpinlockGuard","borrow","borrow_mut","const_spinlock","fmt","from","into","is_locked","lock","try_from","try_into","try_lock","type_id","unlock"],"q":["spinning_top","","","","","","","","","","","","","","","",""],"d":["A RAII guard returned by <code>SpinlockGuard::map</code>.","Provides mutual exclusion based on spinning on an …","A mutual exclusion (Mutex) type based on busy-waiting.","A RAII guard that frees the spinlock when it goes out of …","","","Create an unlocked <code>Spinlock</code> in a <code>const</code> context.","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[]],[[]],[[],["spinlock",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["typeid",3]],[[]]],"p":[[3,"RawSpinlock"]]},\
"ucs2":{"doc":"Utility functions for the UCS-2 character encoding.","t":[13,4,13,11,11,11,5,5,5,5,11,11,11,11,11,11],"n":["BufferOverflow","Error","MultiByte","borrow","borrow_mut","clone","decode","decode_with","encode","encode_with","fmt","from","into","try_from","try_into","type_id"],"q":["ucs2","","","","","","","","","","","","","","",""],"d":["Not enough space left in the output buffer.","Possible errors returned by the API.","Input contained a character which cannot be represented …","","","","Decode an input UCS-2 string into a UTF-8 string.","Decode UCS-2 string to UTF-8 with a custom callback …","Encodes an input UTF-8 string into a UCS-2 string.","Encode UTF-8 string to UCS-2 with a custom callback …","","","","","",""],"i":[1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[],["error",4]],[[],[["result",4],["usize",15],["error",4]]],[[],[["result",4],["usize",15],["error",4]]],[[["str",15]],[["result",4],["usize",15],["error",4]]],[[["str",15]],[["result",4],["error",4]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Error"]]},\
"uefi":{"doc":"Rusty wrapper for the Unified Extensible Firmware …","t":[12,3,3,3,3,8,6,8,3,11,11,11,0,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,14,0,0,11,10,11,11,0,11,11,11,23,11,10,11,10,11,11,8,3,3,3,18,18,18,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,23,3,3,3,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,18,18,18,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,18,18,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,10,23,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,11,11,11,10,10,8,24,0,0,0,0,0,0,0,0,0,0,13,13,13,4,3,4,13,3,13,3,3,3,3,4,13,13,13,13,13,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,18,18,3,18,18,13,13,13,18,18,18,3,13,13,18,13,13,13,4,18,18,18,18,3,13,4,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,13,13,13,4,13,18,18,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,18,18,18,3,4,18,13,13,13,13,13,13,18,13,18,3,3,18,18,13,18,18,13,18,3,13,18,18,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,3,18,18,3,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,3,4,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,13,18,13,3,18,8,3,3,6,3,4,8,6,3,6,3,4,8,18,3,18,13,13,13,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,0,3,3,6,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,18,3,8,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,18,18,18,13,13,4,13,18,18,3,13,18,18,13,18,3,18,18,18,17,18,18,18,13,3,3,3,3,18,18,18,18,18,18,13,18,18,18,18,18,18,18,13,18,18,4,18,4,3,3,18,18,18,18,18,18,18,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,17,17,3,17,17,17,17,17,17,3,18,17,3,17,17,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,13,3,18,13,4,3,13,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","CStr16","CStr8","Completion","Guid","Identify","Result","ResultExt","Status","borrow","borrow_mut","clone","data_types","discard_errdata","discard_errdata","eq","expect","expect_error","expect_error","expect_success","expect_success","fmt","from","from","from","from","from","into","log","log_warning","log_warning","map","map_inner","map_inner","ne","new","newtype_enum","prelude","proto","split","status","status","status","table","try_from","try_into","type_id","unsafe_guid","unwrap","unwrap_success","unwrap_success","warning_as_error","warning_as_error","with_status","Align","CStr16","CStr8","Event","GUID","GUID","GUID","Guid","Handle","Identify","alignment","as_ptr","as_ptr","assert_aligned","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chars","clone","clone","clone","eq","fmt","fmt","fmt","fmt","from","from","from","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","from_ptr","from_u16_with_nul","from_u16_with_nul_unchecked","from_values","into","into","into","iter","ne","to_bytes","to_bytes_with_nul","to_u16_slice","to_u16_slice_with_nul","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unsafe_guid","Char16","Char8","CharConversionError","NUL_16","NUL_8","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","ne","ne","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","ABORTED","ACCESS_DENIED","ALREADY_STARTED","BAD_BUFFER_SIZE","BUFFER_TOO_SMALL","Boot","COMPROMISED_DATA","CRC_ERROR","DEVICE_ERROR","END_OF_FILE","END_OF_MEDIA","HTTP_ERROR","ICMP_ERROR","INCOMPATIBLE_VERSION","INVALID_LANGUAGE","INVALID_PARAMETER","IP_ADDRESS_CONFLICT","LOAD_ERROR","MEDIA_CHANGED","NOT_FOUND","NOT_READY","NOT_STARTED","NO_MAPPING","NO_MEDIA","NO_RESPONSE","OUT_OF_RESOURCES","PROTOCOL_ERROR","ResultExt","SECURITY_VIOLATION","SUCCESS","Status","SystemTable","TFTP_ERROR","TIMEOUT","UNSUPPORTED","VOLUME_CORRUPTED","VOLUME_FULL","WARN_BUFFER_TOO_SMALL","WARN_DELETE_FAILURE","WARN_FILE_SYSTEM","WARN_RESET_REQUIRED","WARN_STALE_DATA","WARN_UNKNOWN_GLYPH","WARN_WRITE_FAILURE","WRITE_PROTECTED","borrow","borrow_mut","branch","clone","discard_errdata","entry","eq","expect_error","expect_success","fmt","from","from","from_output","from_residual","into","into_with","into_with_err","into_with_val","is_error","is_success","is_warning","log_warning","map_inner","ne","status","try_from","try_into","type_id","unwrap_success","warning_as_error","Protocol","Protocol","console","debug","device_path","loaded_image","media","pi","gop","pointer","serial","text","Bgr","Bitmask","BltOnly","BltOp","BltPixel","BltRegion","BufferToVideo","FrameBuffer","Full","GraphicsOutput","Mode","ModeInfo","PixelBitmask","PixelFormat","Rgb","SubRectangle","VideoFill","VideoToBltBuffer","VideoToVideo","as_mut_ptr","blt","blue","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","current_mode_info","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","frame_buffer","from","from","from","from","from","from","from","from","from","from","green","green","info","info_size","into","into","into","into","into","into","into","into","into","modes","ne","new","pixel_bitmask","pixel_format","read_byte","read_value","red","red","reserved","resolution","set_mode","size","stride","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_byte","write_value","buffer","buffer","color","dest","dest","dest","dest","dims","dims","dims","dims","src","src","src","coords","px_stride","Pointer","PointerMode","PointerState","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","button","clone","clone","fmt","fmt","from","from","from","into","into","into","mode","read_state","relative_movement","reset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wait_for_input_event","CARRIER_DETECT","CLEAR_TO_SEND","ControlBits","DATA_SET_READY","DATA_TERMINAL_READY","Default","Default","Even","HARDWARE_FLOW_CONTROL_ENABLE","HARDWARE_LOOPBACK_ENABLE","INPUT_BUFFER_EMPTY","IoMode","Mark","None","OUTPUT_BUFFER_EMPTY","Odd","One","OneFive","Parity","REQUEST_TO_SEND","RING_INDICATE","SETTABLE","SOFTWARE_LOOPBACK_ENABLE","Serial","Space","StopBits","Two","all","baud_rate","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","contains","control_mask","data_bits","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_control_bits","hash","insert","intersects","into","into","into","into","into","io_mode","is_all","is_empty","ne","not","parity","partial_cmp","read","receive_fifo_depth","remove","reset","set","set_attributes","set_control_bits","stop_bits","sub","sub_assign","timeout","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","0","BRIGHTNESS_DOWN","BRIGHTNESS_UP","Black","Blue","Brown","Color","Cyan","DELETE","DOWN","DarkGray","EJECT","END","ESCAPE","FUNCTION_1","FUNCTION_10","FUNCTION_11","FUNCTION_12","FUNCTION_13","FUNCTION_14","FUNCTION_15","FUNCTION_16","FUNCTION_17","FUNCTION_18","FUNCTION_19","FUNCTION_2","FUNCTION_20","FUNCTION_21","FUNCTION_22","FUNCTION_23","FUNCTION_24","FUNCTION_3","FUNCTION_4","FUNCTION_5","FUNCTION_6","FUNCTION_7","FUNCTION_8","FUNCTION_9","Green","HIBERNATE","HOME","INSERT","Input","Key","LEFT","LightBlue","LightCyan","LightGray","LightGreen","LightMagenta","LightRed","MUTE","Magenta","NULL","Output","OutputMode","PAGE_DOWN","PAGE_UP","Printable","RECOVERY","RIGHT","Red","SUSPEND","ScanCode","Special","TOGGLE_DISPLAY","UP","VOLUME_DOWN","VOLUME_UP","White","Yellow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","cmp","columns","current_mode","cursor_position","cursor_visible","enable_cursor","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","index","into","into","into","into","into","into","modes","ne","ne","ne","output_string","partial_cmp","read_key","reset","reset","rows","set_color","set_cursor_position","set_mode","test_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","wait_for_key_event","write_str","0","AARCH_64","ARM","DebugSupport","EBC","ITANIUM","ProcessorArch","RISCV_128","RISCV_32","RISCV_64","X86_32","X86_64","arch","borrow","borrow","borrow_mut","borrow_mut","clone","eq","fmt","from","from","into","into","ne","try_from","try_from","try_into","try_into","type_id","type_id","Acpi","AcpiDevicePath","BiosBootSpec","DevicePath","DeviceSubType","DeviceType","End","EndEntire","EndInstance","Hardware","Media","Messaging","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","device_type","device_type","eq","fmt","fmt","from","from","from","from","hid","into","into","into","into","length","sub_type","sub_type","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uid","BufferTooSmall","LoadOptionsError","LoadedImage","NotValidUtf8","borrow","borrow","borrow_mut","borrow_mut","device","fmt","from","from","info","into","into","load_options","try_from","try_from","try_into","try_into","type_id","type_id","block","file","fs","BlockIO","BlockIOMedia","Lba","block_size","borrow","borrow","borrow_mut","borrow_mut","flush_blocks","fmt","from","from","into","into","io_align","is_logical_partition","is_media_preset","is_read_only","is_removable_media","is_write_caching","last_block","logical_blocks_per_physical_block","lowest_aligned_lba","media","media_id","optimal_transfer_length_granularity","read_blocks","reset","try_from","try_from","try_into","try_into","type_id","type_id","write_blocks","ARCHIVE","CreateReadWrite","DIRECTORY","Dir","Directory","END_OF_FILE","File","FileAttribute","FileHandle","FileInfo","FileInfoHeader","FileMode","FileProtocolInfo","FileSystemInfo","FileSystemInfoHeader","FileSystemVolumeLabel","FileSystemVolumeLabelHeader","FileType","FromUefi","HIDDEN","NamedFileProtocolInfo","READ_ONLY","Read","ReadWrite","Regular","RegularFile","SYSTEM","VALID_ATTR","alignment","all","attribute","attribute","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_size","block_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","close","cmp","contains","create_time","create_time","delete","drop","empty","eq","eq","extend","file_name","file_name","file_size","file_size","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_space","free_space","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_uefi","from_uefi","get_info","get_position","handle","handle","handle","hash","insert","intersects","into","into","into","into","into","into","into","into","into","into","into_type","is_all","is_empty","last_access_time","last_access_time","modification_time","modification_time","ne","new","new","new","new","new","new","new","new","not","open","partial_cmp","physical_size","physical_size","read","read_entry","read_only","read_only","remove","reset_entry_readout","set","set_info","set_position","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","volume_label","volume_label","volume_label","volume_label","volume_size","volume_size","write","SimpleFileSystem","borrow","borrow_mut","from","into","open_volume","try_from","try_into","type_id","mp","CpuPhysicalLocation","MpServices","Procedure","ProcessorCount","ProcessorInformation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","core","default","default","default","enable_disable_ap","enabled","fmt","fmt","fmt","from","from","from","from","get_number_of_processors","get_processor_info","into","into","into","into","is_bsp","is_enabled","is_healthy","location","package","processor_id","startup_all_aps","startup_this_ap","switch_bsp","thread","total","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","who_am_i","Boot","Header","Revision","Runtime","SIGNATURE","SystemTable","Table","boot","boot_services","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cfg","clone","cmp","config_table","crc","eq","exit_boot_services","firmware_revision","firmware_vendor","fmt","fmt","from","from","from","from","from","into","into","into","into","into","major","minor","ne","new","partial_cmp","revision","runtime","runtime_services","runtime_services","signature","size","stderr","stdin","stdout","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uefi_revision","unsafe_clone","0","0","ACPI_NON_VOLATILE","ACPI_RECLAIM","APPLICATION","Address","AllHandles","AllocateType","AnyPages","BOOT_SERVICES_CODE","BOOT_SERVICES_DATA","BootServices","ByProtocol","CALLBACK","CONVENTIONAL","Cancel","EXECUTE_PROTECT","EventType","HIGH_LEVEL","LOADER_CODE","LOADER_DATA","MEMORY_DESCRIPTOR_VERSION","MMIO","MMIO_PORT_SPACE","MORE_RELIABLE","MaxAddress","MemoryAttribute","MemoryDescriptor","MemoryMapKey","MemoryType","NON_VOLATILE","NOTIFY","NOTIFY_SIGNAL","NOTIFY_WAIT","PAL_CODE","PERSISTENT_MEMORY","Periodic","READ_ONLY","READ_PROTECT","RESERVED","RUNTIME","RUNTIME","RUNTIME_SERVICES_CODE","RUNTIME_SERVICES_DATA","Relative","SIGNAL_EXIT_BOOT_SERVICES","SIGNAL_VIRTUAL_ADDRESS_CHANGE","SearchType","TIMER","TimerTrigger","Tpl","TplGuard","UNCACHABLE_EXPORTED","UNCACHEABLE","UNUSABLE","WRITE_BACK","WRITE_COMBINE","WRITE_PROTECT","WRITE_THROUGH","alignment","all","all","allocate_pages","allocate_pool","att","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","contains","contains","create_event","custom","default","drop","empty","empty","eq","eq","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_pages","free_pool","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_proto","handle_protocol","hash","hash","insert","insert","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_empty","is_empty","locate_device_path","locate_handle","locate_protocol","memmove","memory_map","memory_map_size","memset","ne","ne","ne","ne","ne","not","not","page_count","partial_cmp","partial_cmp","phys_start","raise_tpl","remove","remove","set","set","set_timer","set_watchdog_timer","stall","sub","sub","sub_assign","sub_assign","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virt_start","wait_for_event","ACPI2_GUID","ACPI_GUID","ConfigTableEntry","DEBUG_IMAGE_INFO_GUID","DXE_SERVICES_GUID","HAND_OFF_BLOCK_LIST_GUID","LZMA_COMPRESS_GUID","MEMORY_STATUS_CODE_RECORD_GUID","MEMORY_TYPE_INFORMATION_GUID","MemoryProtectionAttribute","NON_EXECUTABLE_DATA","PROPERTIES_TABLE_GUID","PropertiesTable","SMBIOS3_GUID","SMBIOS_GUID","TIANO_COMPRESS_GUID","address","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","guid","hash","insert","intersects","into","into","into","is_all","is_empty","length","memory_protection","ne","not","partial_cmp","remove","set","sub","sub_assign","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","ADJUST_DAYLIGHT","Cold","Daylight","IN_DAYLIGHT","PlatformSpecific","ResetType","RuntimeServices","Shutdown","Time","TimeCapabilities","Warm","accuracy","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","contains","day","daylight","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_time","get_time_and_caps","hash","hour","insert","intersects","into","into","into","into","into","is_all","is_empty","minute","month","nanosecond","ne","ne","new","not","partial_cmp","remove","reset","resolution","second","set","set_time","set_virtual_address_map","sets_to_zero","sub","sub_assign","time_zone","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","year"],"q":["uefi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::data_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::data_types::chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto","","","","","","","","uefi::proto::console","","","","uefi::proto::console::gop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::console::gop::BltOp","","","","","","","","","","","","","","uefi::proto::console::gop::BltRegion","","uefi::proto::console::pointer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::console::serial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::console::text","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::debug","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::device_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::loaded_image","","","","","","","","","","","","","","","","","","","","","","uefi::proto::media","","","uefi::proto::media::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::proto::media::fileuefi::proto::media::fs","","","","","","","","","uefi::proto::pi","uefi::proto::pi::mp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::table::bootuefi::table::cfg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi::table::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An UCS-2 null-terminated string","A Latin-1 null-terminated string","This type is used when an UEFI operation has completed, …","A globally unique identifier","Several entities in the UEFI specification can be …","Return type of most UEFI functions. Both success and …","Extension trait for Result which helps dealing with UEFI…","UEFI uses status codes in order to report successes, …","","","","Data type definitions","Transform the ErrData value to ()","","","Assume that no warning occured, panic with provided …","Expect error, panic with provided message otherwise, …","","Expect success without warnings, panic with provided …","","","","","","","","","Access the inner value, logging the warning if there is …","Ignore warnings, keeping a trace of them in the logs","","Transform the inner value without unwrapping the …","Transform the inner output, if any","","","Build a completion from a non-error status and a function …","Interface a C-style enum as an integer newtype.","This module is used to simplify importing the most common …","Protocol definitions.","Split this completion into its inner status and result …","Extract the UEFI status from this result","","Extract the status of this completion","Standard UEFI tables.","","","","<code>unsafe_guid</code> attribute macro, implements the <code>Identify</code> …","Assume that no warning occured, panic if not","Expect success without warnings, panic otherwise","","Treat warnings as errors","","Merge this completion with a success or warning status","Trait for querying the alignment of a struct","An UCS-2 null-terminated string","A Latin-1 null-terminated string","Handle to an event structure","Unique protocol identifier.","Unique protocol identifier.","Unique protocol identifier.","A globally unique identifier","Opaque handle to an UEFI entity (protocol, image…)","Several entities in the UEFI specification can be …","Required memory alignment for this type","Returns the inner pointer to this C string","Returns the inner pointer to this C string","Assert that some storage is correctly aligned for this …","","","","","","","","","","","UEFI character handling","","","","","","","","","","","","Creates a C string wrapper from bytes","Unsafely creates a C string wrapper from bytes","Wraps a raw UEFI string with a safe C string wrapper","Wraps a raw UEFI string with a safe C string wrapper","Creates a C string wrapper from a u16 slice","Unsafely creates a C string wrapper from a u16 slice.","Creates a new GUID from its canonical representation","","","","Returns an iterator over this C string","","Converts this C string to a slice of bytes","Converts this C string to a slice of bytes containing the …","Converts this C string to a u16 slice","Converts this C string to a u16 slice containing the …","","","","","","","","","","","","<code>unsafe_guid</code> attribute macro, implements the <code>Identify</code> …","An UCS-2 code point","A Latin-1 character","Character conversion error","UCS-2 version of the NUL character","Latin-1 version of the NUL character","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The operation was aborted.","Access was denied.","The protocol has already been started.","The buffer was not the proper size for the request.","The buffer is not large enough to hold the requested data.…","Marker struct associated with the boot view of the UEFI …","The security status of the data is unknown or compromised …","A CRC error was detected.","The physical device reported an error while attempting …","The end of the file was reached.","Beginning or end of media was reached","A HTTP error occurred during the network operation.","An ICMP error occurred during the network operation.","The function encountered an internal version that was …","The language specified was invalid.","A parameter was incorrect.","There is an address conflict address allocation","The image failed to load.","The medium in the device has changed since the last …","The item was not found.","There is no data pending upon return.","The protocol has not been started.","A mapping to a device does not exist.","The device does not contain any medium to perform the …","The server was not found or did not respond to the …","A resource has run out.","A protocol error occurred during the network operation.","Extension trait for Result which helps dealing with UEFI…","The function was not performed due to a security …","The operation completed successfully.","UEFI uses status codes in order to report successes, …","UEFI System Table interface","A TFTP error occurred during the network operation.","The timeout time expired.","The operation is not supported.","An inconstency was detected on the file system.","There is no more space on the file system.","The resulting buffer was too small, and the data was …","The handle was closed, but the file was not deleted.","The resulting buffer contains UEFI-compliant file system.","The operation will be processed across a system reset.","The data has not been updated within the timeframe set by …","The string contained characters that could not be …","The handle was closed, but the data to the file was not …","The device cannot be written to.","","","","","Transform the ErrData value to ()","Custom attribute for a UEFI executable entrypoint","","Expect error, panic with provided message otherwise, …","Expect success without warnings, panic with provided …","","","","","","","Convert this status code into a result with a given value …","Converts this status code into a result with a given …","Converts this status code into a result with a given …","Returns true if the status code indicates an error.","Returns true if status code indicates success.","Returns true if status code indicates a warning.","Ignore warnings, keeping a trace of them in the logs","Transform the inner output, if any","","Extract the UEFI status from this result","","","","Expect success without warnings, panic otherwise","Treat warnings as errors","Common trait implemented by all standard UEFI protocols","Custom derive for the <code>Protocol</code> trait","Console support protocols.","Provides support for the UEFI debugging protocol.","<code>DevicePath</code> protocol","<code>LoadedImage</code> protocol.","Media access protocols.","Platform Initialization protocols.","Graphics output protocol.","Pointer device access.","Abstraction over byte stream devices, also known as …","Text I/O.","Each pixel is 32-bit long, with 24-bit BGR, and the last …","Custom pixel format, check the associated bitmask.","The graphics mode does not support drawing directly to …","Blit operation to perform.","Format of pixel data used for blitting.","Region of the <code>BltBuffer</code> which we are operating on","Write data from the buffer to the video rectangle. Delta …","Direct access to a memory-mapped frame buffer","Operate on the full <code>BltBuffer</code>","Provides access to the video hardware’s frame buffer.","Represents a graphics mode compatible with a given …","Information about a graphics output mode.","Bitmask used to indicate which bits of a pixel represent …","Represents the format of the pixels in a frame buffer.","Each pixel is 32-bit long, with 24-bit RGB, and the last …","Operate on a sub-rectangle of the <code>BltBuffer</code>","Fills a rectangle of video display with a pixel color.","Reads data from the video display to the buffer.","Copy from the source rectangle in video memory to the …","Access the raw framebuffer pointer","Performs a blt (block transfer) operation on the frame …","The bits indicating the blue channel.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the frame buffer information for the current mode.","","","","","","","","","Access the frame buffer directly","","","","","","","","","","","The bits indicating the green channel.","","Returns a reference to the mode info structure.","The size of the info structure in bytes.","","","","","","","","","","Returns information about all available graphics modes.","","Create a new pixel from RGB values.","Returns the bitmask of the custom pixel format, if …","Returns the format of the frame buffer.","Read the i-th byte of the frame buffer","Read a value from the frame buffer, starting at the i-th …","The bits indicating the red channel.","","The reserved bits, which are ignored by the video …","Returns the (horizontal, vertical) resolution.","Sets the video device into the specified mode, clearing …","Query the framebuffer size in bytes","Returns the number of pixels per scanline.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Modify the i-th byte of the frame buffer","Write a value in the frame buffer, starting at the i-th …","Buffer into which to copy data.","Buffer from which to copy data.","The color to fill with.","The X / Y coordinates of the destination rectangle.","Location of the destination rectangle in the …","Coordinates of the destination rectangle, in the frame …","Coordinates of the destination rectangle, also in the …","The width / height of the rectangle.","Width / height of the rectangles.","Width / height of the rectangles.","Width / height of the rectangles.","Coordinates of the source rectangle, in the frame buffer.","Location of the source rectangle in the user-provided …","Coordinates of the source rectangle, in the frame buffer.","Coordinate of the rectangle in the <code>BltBuffer</code>","Stride (length of each row of the <code>BltBuffer</code>) in <strong>pixels</strong>","Provides information about a pointer device.","Information about this pointer device.","The relative change in the pointer’s state.","","","","","","","Whether the left / right mouse button is currently …","","","","","","","","","","","Returns a reference to the pointer device information.","Retrieves the pointer device’s current state, if a …","The relative movement on the X/Y/Z axis.","Resets the pointer device hardware.","","","","","","","","","","Event to be used with <code>BootServices::wait_for_event()</code> in …","Indicates the connection is still connected","Clear to send","The control bits of a device. These are defined in the …","Data set ready","Terminal is ready for communications","Device default","Device default","Even parity","Allow the hardware to handle flow control","Enable hardware loop-back","The input buffer is empty","Structure representing the device’s current parameters.","Mark parity","No parity","The output buffer is empty","Odd parity","1 stop bit","1.5 stop bits","The parity of the device.","Request the device to send data","Indicates that a phone line is ringing","Bitmask of the control bits that can be set.","Enable software loop-back","Provides access to a serial I/O device.","Space parity","Number of stop bits per character.","2 stop bits","Returns the set containing all flags.","Device’s baud rate, or 0 if unknown.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Bitmask of the control bits that this device supports.","Number of data bits in each character.","Returns an empty set of flags","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Retrieve the device’s current control bits.","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","Returns the current I/O mode.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","If applicable, the parity that is computed or checked for …","","Reads data from this device.","Size in character’s of the device’s buffer.","Removes the specified flags in-place.","Reset the device.","Inserts or removes the specified flags depending on the …","Sets the device’s new attributes.","Sets the device’s new control bits.","If applicable, the number of stop bits per character.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","If applicable, the number of microseconds to wait before …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Writes data to this device.","","","","","","","Colors for the UEFI console.","","","Move cursor down 1 row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Interface for text-based input devices.","A key read from the console (high-level version)","Move cursor left 1 column.","","","","","","","","","Null scan code, indicates that the Unicode character …","Interface for text-based output devices.","The text mode (resolution) of the output device.","","","The key is associated with a printable Unicode character","","Move cursor right 1 column.","","","A keyboard scan code","The key is special (arrow, function, multimedia…)","","Move cursor up 1 row.","","","","","","","","","","","","","","","","","Clears the output screen.","","","","","","Returns the width in columns.","Returns the the current text mode.","Returns the column and row of the cursor.","Returns whether the cursor is currently shown or not.","Make the cursor visible or invisible.","","","","","","","","","","","","","","Returns the index of this mode.","","","","","","","Returns an iterator of all supported text modes.","","","","Writes a string to the output device.","","Reads the next keystroke from the input device, if any.","Resets the input device hardware.","Resets and clears the text output device hardware.","Returns the height in rows.","Sets the text and background colors for the console.","Sets the cursor’s position, relative to the top-left …","Sets a mode as current.","Checks if a string contains only supported characters.","","","","","","","","","","","","","","","","","","","Event to be used with <code>BootServices::wait_for_event()</code> in …","","","ARM 64-bit","ARM Thumb / Mixed","The debugging support protocol allows debuggers to …","UEFI Interpreter bytecode","Intel Itanium","The instruction set architecture of the running processor.","RISC-V 128-bit","RISC-V 32-bit","RISC-V 64-bit","32-bit x86 PC","64-bit x86 PC","Returns the processor architecture of the running CPU.","","","","","","","","","","","","","","","","","","","ACPI Device Path.","ACPI Device Path","BIOS Boot Specification Device Path.","Device path protocol.","Sub-type identifier for a DevicePath","Type identifier for a DevicePath","End of Hardware Device Path.","End Entire Device Path","End This Instance of a Device Path and start a new Device …","Hardware Device Path.","Media Device Path.","Messaging Device Path.","","","","","","","","","Type of device, which is ACPI Device Path","Type of device","","","","","","","","Device’s PnP hardware ID stored in a numeric 32-bit …","","","","","Data related to device path","Sub type of the device, which is ACPI Device Path","Sub type of device","","","","","","","","","","","","","Unique ID that is required by ACPI if two devices have …","The passed buffer is not large enough to contain the load …","Errors that can be raised during parsing of the load …","The LoadedImage protocol. This can be opened on any image …","The load options are not valid UTF-8.","","","","","Returns a handle to the storage device on which the image …","","","","Returns the base address and the size in bytes of the …","","","Get the load options of the given image. If the image was …","","","","","","","Block I/O protocols.","This module provides the <code>FileHandle</code> structure as well as …","File system support protocols.","The Block I/O protocol.","Media information structure","EFI LBA type","The intrinsic block size of the device.","","","","","Flushes all modified data to a physical block device.","","","","","","Supplies the alignment requirement for any buffer used in …","True if block IO was produced to abstract partition …","True if there is a media currently present in the device.","True if the media is marked read-only.","True if the media is removable.","True if <code>writeBlocks</code> function writes data.","The last LBA on the device. If the media changes, then …","Returns the number of logical blocks per physical block.","Returns the first LBA that is aligned to a physical block …","Pointer for block IO media.","The current media ID.","Returns the optimal transfer length granularity as a …","Read the requested number of blocks from the device.","Resets the block device hardware.","","","","","","","Writes the requested number of blocks to the device.","This file is compressed.","The file can be read, written, and will be created if it …","This file is a directory.","The file was a directory.","A <code>FileHandle</code> that is also a directory.","A special position used to seek to the end of a file with …","Common interface to <code>FileHandle</code>, <code>RegularFile</code>, and <code>Directory</code>…","Attributes describing the properties of a file on the …","An opaque handle to some contiguous block of data on a …","Generic file information","Header for generic file information","Usage flags describing what is possible to do with the …","Common trait for data structures that can be used with …","System volume information","Header for system volume information","System volume label","Header for system volume label information","Disambiguates the file type. Returned by <code>File::into_type()</code>…","Trait for going from an UEFI-originated pointer to a Rust …","Hidden file, not normally visible to the user.","Dynamically sized <code>FileProtocolInfo</code> with a header and an …","File can only be opened in [<code>FileMode::READ</code>] mode.","The file can be read from","The file can be read from and written to","The file was a regular (data) file.","A <code>FileHandle</code> that is also a regular (data) file.","System file, indicates this file is an internal operating …","Mask combining all the valid attributes.","","Returns the set containing all flags.","Attribute bits for the file","Attribute bits for the file","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Nominal block size by which files are typically grown","Nominal block size by which files are typically grown","","","","","","","","","","","","","","","","","","","","","","","Close this file handle. Same as dropping this structure.","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Time when the file was created","Time when the file was created","Closes and deletes this file","","Returns an empty set of flags","","","","Name of the file","Name of the file","File size (number of bytes stored in the file)","File size (number of bytes stored in the file)","Flushes all modified data associated with the file handle …","","","","","","","","","","","Number of available bytes for use by the file system","Number of available bytes for use by the file system","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Turn an UEFI-provided pointer-to-base into a (possibly …","","Queries some information about a file","Get the file’s current position","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","Converts <code>File</code> into a more specific subtype based on if it …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Time when the file was last accessed","Time when the file was last accessed","Time when the file’s contents were last modified","Time when the file’s contents were last modified","","Coverts a <code>FileHandle</code> into a <code>Directory</code> without checking …","Coverts a <code>FileHandle</code> into a <code>RegularFile</code> without checking …","Create a <code>FileSystemVolumeLabel</code> structure","Create a <code>FileSystemInfo</code> structure","Create a <code>FileInfo</code> structure","Create a <code>FileInfo</code> structure","Create a <code>FileSystemInfo</code> structure","Create a <code>FileSystemVolumeLabel</code> structure","Returns the complement of this set of flags.","Try to open a file relative to this file.","","Physical space consumed by the file on the file system …","Physical space consumed by the file on the file system …","Read data from file","Read the next directory entry","Truth that the volume only supports read access","Truth that the volume only supports read access","Removes the specified flags in-place.","Start over the process of enumerating directory entries","Inserts or removes the specified flags depending on the …","Sets some information about a file","Sets the file’s current position","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Volume label","Volume label","Volume label","Volume label","Number of bytes managed by the file system","Number of bytes managed by the file system","Write data to file","Allows access to a FAT-12/16/32 file system.","","","","","Open the root directory on a volume.","","","","Multi-processor management protocols.","Information about physical location of the processor.","Protocol that provides services needed for …","Callback to be called on the AP.","Information about number of logical processors on the …","Information about processor on the platform.","","","","","","","","","Zero-based physical core number within package of the …","","","","Enables or disables an AP from this point onward.","Number of processors (including BSP) that are currently …","","","","","","","","Retrieves the number of logical processors and the number …","Gets detailed information on the requested processor at …","","","","","Returns <code>true</code> if the processor is playing the role of BSP.","Returns <code>true</code> if the processor is enabled.","Returns <code>true</code> if the processor is healthy.","Physical location of the processor.","Zero-based physical package number that identifies the …","Unique processor ID determined by system hardware.","Executes provided function on all APs in blocking mode.","Executes provided function on a specific AP in blocking …","Switches the requested AP to be the BSP from that point …","Zero-based logical thread number within core of the …","Total number of processors (including BSP).","","","","","","","","","","","","","Gets the handle number of the caller processor.","Marker struct associated with the boot view of the UEFI …","All standard UEFI tables begin with a common header.","A revision of the UEFI specification.","Marker struct associated with the run-time view of the …","A unique number assigned by the UEFI specification to the …","UEFI System Table interface","Common trait implemented by all standard UEFI tables.","UEFI services available during boot.","Access boot services","","","","","","","","","","","Configuration table utilities.","","","Returns the config table entries, a linear array of …","32-bit CRC-32-Castagnoli of the entire table, calculated …","","Exit the UEFI boot services","Return the firmware revision","Return the firmware vendor string","","Formats the revision in the <code>major.minor.patch</code> format.","","","","","","","","","","","Returns the major revision.","Returns the minor revision.","","Creates a new revision.","","Revision of the spec this table conforms to.","UEFI services available at runtime, even after the OS …","Access runtime services","Access runtime services","Unique identifier for this table.","The size in bytes of the entire table.","Returns the standard error protocol.","Returns the standard input protocol.","Returns the standard output protocol.","","","","","","","","","","","","","","","","Returns the revision of this table, which is defined to be…","Clone this boot-time UEFI system table interface","","","Firmware-reserved addresses.","Memory that holds ACPI tables. Can be reclaimed after …","Normal task execution level.","Allocate pages at the specified address.","Return all handles present on the system.","Type of allocation to perform.","Allocate any possible pages.","Code of the boot drivers.","Memory used to store boot drivers’ data.","Contains pointers to all of the boot services.","Returns all handles supporting a certain protocol, …","Async interrupt-style callbacks run at this TPL.","Free usable memory.","Cancel event’s timer","Supports disabling code execution.","Flags describing the type of an UEFI event and its …","Highest priority level.","The code portions of a loaded UEFI application.","The data portions of a loaded UEFI applications, as well …","Memory descriptor version number","A region used for memory-mapped I/O.","Address space used for memory-mapped port I/O.","This memory region is more reliable than other memory.","Allocate pages at any address below the given address.","Flags describing the capabilities of a memory range.","A structure describing a region of memory.","A unique identifier of a memory map.","The type of a memory range.","Persistent memory.","Notifications are masked at this level.","The notification function will be enqueued when the event …","Calling wait_for_event or check_event will enqueue the …","Address space which is part of the processor.","Memory region which is usable and is also non-volatile.","The event is to be signaled periodically. Parameter is …","This memory range can be set as read-only.","Supports read-protection.","This enum variant is not used.","This memory must be mapped by the OS when a runtime …","The event is allocated from runtime memory. This must be …","Runtime drivers’ code.","Runtime services’ code.","The event is to be signaled once in 100ns units. …","The event will be signaled at ExitBootServices time. This …","The event will be notified when SetVirtualAddressMap is …","The type of handle search to perform.","The event is a timer event and may be passed to …","Timer events manipulation","Task priority level.","RAII guard for task priority level changes","Supports marking as uncacheable, exported and supports …","Supports marking as uncacheable.","Memory in which errors have been detected.","Support write-back.","Supports write-combining.","Supports write-protection.","Supports write-through.","","Returns the set containing all flags.","Returns the set containing all flags.","Allocates memory pages from the system.","Allocates from a memory pool. The pointer will be 8-byte …","The capability attributes of this memory range.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Creates an event","Construct a custom <code>MemoryType</code>. Values in the range …","","","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","Frees memory pages allocated by UEFI.","Frees memory allocated from a pool.","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","Constructs a new search type for a specified protocol.","Query a handle for a certain protocol.","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Locates the handle to a device on the device path that …","Enumerates all handles installed on the system which …","Returns a protocol implementation, if present on the …","Copies memory from source to destination. The buffers can …","Retrieves the current memory map.","Retrieves the size, in bytes, of the current memory map.","Sets a buffer to a certain value.","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Number of 4 KiB pages contained in this range.","","","Starting physical address.","Raises a task’s priority level and returns its previous …","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the trigger for <code>EventType::TIMER</code> event.","Set the watchdog timer.","Stalls the processor for an amount of time.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","Type of memory occupying this range.","","","","","","","","","","","","Starting virtual address.","Stops execution until an event is signaled","Entry pointing to the ACPI 2 RSDP.","Entry pointing to the old ACPI 1 RSDP.","Contains a set of GUID / pointer for a vendor-specific …","Pointer to the debug image info table.","Table which provides Driver eXecution Environment …","Hand-off Blocks are used to pass data from the early …","LZMA-compressed filesystem.","Used to identify Hand-off Blocks which store status codes …","Table used in the early boot environment to record memory …","Flags describing memory protection.","If this bit is set, then the UEFI implementation will …","GUID of the UEFI properties table.","This table contains additional information about the UEFI …","Entry pointing to the SMBIOS 3.0 table.","Entry pointing to the SMBIOS 1.0 table.","A custom compressed filesystem used by the Tiano UEFI …","The starting address of this table.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","The GUID identifying this table.","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Length in bytes of this table.","Memory protection attributes.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","Version of the UEFI properties table.","Time is affected by daylight savings time","Resets all the internal circuitry to its initial state.","Flags describing the capabilities of a memory range.","Time has been adjusted for daylight savings time","A platform-specific reset type.","The type of system reset.","Contains pointers to all of the runtime services.","The components are powered off.","The current time information","Real time clock capabilities","The processor is reset to its initial state.","Timekeeping accuracy in units of 1e-6 parts per million.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Query the day","Query the daylight savings time information","Returns an empty set of flags","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Query the current time and date information","Query the current time and date information and the RTC …","","Query the hour","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Query the minute","Query the month","Query the nanosecond","","","Build an UEFI time struct","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Resets the computer.","Reporting resolution of the clock in counts per second. 1 …","Query the second","Inserts or removes the specified flags depending on the …","Sets the current local time and date information","Changes the runtime addressing mode of EFI firmware from …","Whether a time set operation clears the device’s time …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Query the time offset in minutes from UTC, or None if …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Query the year"],"i":[1,0,0,0,0,0,0,0,0,2,2,2,0,3,4,2,2,3,4,3,4,2,4,2,2,2,2,2,2,3,4,2,3,4,2,2,0,0,0,2,3,4,2,0,2,2,2,0,2,3,4,3,4,2,0,0,0,0,5,5,5,0,0,0,6,7,8,6,7,8,9,10,11,7,8,9,10,11,0,9,10,11,11,8,8,11,11,9,10,11,7,7,7,8,8,8,11,9,10,11,8,11,7,7,8,8,9,10,11,9,10,11,7,8,9,10,11,0,0,0,0,0,0,12,13,14,12,13,14,13,14,13,14,13,14,13,14,13,13,14,14,12,13,13,14,12,13,14,13,14,13,14,12,13,13,14,14,14,12,13,14,12,13,14,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,0,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,3,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,0,0,0,16,0,17,0,0,0,0,0,15,17,16,16,16,18,19,20,21,22,18,19,15,20,23,21,17,16,22,18,19,15,20,23,21,17,16,15,20,23,21,17,19,15,20,15,20,23,21,17,16,19,22,18,19,15,20,23,21,21,17,16,20,21,22,22,22,18,19,15,20,23,21,17,16,19,20,21,23,23,18,18,20,21,20,23,19,18,23,22,18,19,15,20,23,21,17,16,22,18,19,15,20,23,21,17,16,22,18,19,15,20,23,21,17,16,18,18,24,25,26,26,24,25,27,26,24,25,27,24,25,27,28,28,0,0,0,29,30,31,29,30,31,31,30,31,30,31,29,30,31,29,30,31,29,29,31,29,29,30,31,29,30,31,29,30,31,29,32,32,0,32,32,33,34,33,32,32,32,0,33,33,32,33,34,34,0,32,32,32,32,0,33,0,34,32,35,32,32,32,32,32,32,32,36,35,32,33,34,36,35,32,33,34,35,32,33,34,32,32,35,35,32,32,33,34,32,35,32,32,32,32,32,33,34,36,35,32,33,34,32,32,32,32,36,32,32,32,36,35,32,33,34,36,32,32,32,32,35,32,36,35,32,36,32,36,36,35,32,32,35,32,36,35,32,33,34,36,35,32,33,34,36,35,32,33,34,36,37,37,37,38,38,38,0,38,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,0,0,37,38,38,38,38,38,38,37,38,37,0,0,37,37,39,37,37,38,37,0,39,37,37,37,37,38,38,40,39,37,41,42,38,40,39,37,41,42,38,41,39,37,42,38,42,42,41,41,41,41,39,37,42,39,37,42,38,40,39,37,41,42,38,42,40,39,37,41,42,38,41,39,37,42,41,42,40,40,41,42,41,41,41,41,40,39,37,41,42,38,40,39,37,41,42,38,40,39,37,41,42,38,40,41,43,43,43,0,43,43,0,43,43,43,43,43,44,44,43,44,43,43,43,43,44,43,44,43,43,44,43,44,43,44,43,45,0,45,0,0,0,45,46,46,45,45,45,47,48,45,46,47,48,45,46,47,48,45,45,46,47,48,45,46,47,47,48,45,46,48,47,48,47,48,45,46,47,48,45,46,47,48,45,46,47,49,0,0,49,50,49,50,49,50,49,50,49,50,50,49,50,50,49,50,49,50,49,0,0,0,0,0,0,51,52,51,52,51,52,51,52,51,52,51,51,51,51,51,51,51,51,51,51,52,51,51,52,52,52,51,52,51,52,51,52,53,54,53,55,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,53,54,54,55,0,53,53,57,53,57,58,53,53,53,53,53,53,53,57,59,60,56,61,55,57,62,63,64,54,53,60,56,61,55,57,62,63,64,54,53,54,53,65,53,53,57,58,65,61,53,54,53,53,57,58,57,58,65,57,62,63,64,54,53,53,53,53,53,57,59,60,56,61,55,57,62,63,64,54,53,53,53,53,53,66,57,65,56,60,56,61,53,53,53,60,56,61,55,57,62,63,64,54,53,61,53,53,57,58,57,58,53,60,56,57,57,57,58,59,67,53,65,53,57,58,56,60,57,59,53,60,53,65,56,53,53,53,60,56,61,55,57,62,63,64,54,53,60,56,61,55,57,62,63,64,54,53,60,56,61,55,57,62,63,64,54,53,57,57,59,67,57,59,56,0,68,68,68,68,68,68,68,68,0,0,0,0,0,0,69,70,71,72,69,70,71,72,71,69,70,71,72,69,69,70,71,69,70,71,72,72,72,69,70,71,72,70,70,70,70,71,70,72,72,72,71,69,69,70,71,72,69,70,71,72,69,70,71,72,72,0,0,0,0,73,0,0,0,74,75,76,74,77,78,75,76,74,77,78,0,78,78,74,77,78,74,74,74,77,78,75,76,74,77,78,75,76,74,77,78,78,78,78,78,78,77,0,74,74,77,77,74,74,74,75,76,74,77,78,75,76,74,77,78,75,76,74,77,78,74,74,79,80,80,80,79,81,82,0,81,80,80,0,82,79,80,83,84,0,79,80,80,0,80,80,84,81,0,0,0,0,84,79,85,85,80,80,83,84,84,80,84,85,80,80,83,85,85,0,85,0,0,0,84,84,80,84,84,84,84,86,84,85,87,87,86,84,85,84,85,84,85,84,85,84,85,84,85,84,85,87,88,83,79,81,80,86,84,89,82,85,87,88,83,79,81,80,86,84,89,82,85,79,81,80,86,84,89,82,85,84,85,84,85,87,80,86,88,84,85,79,80,84,89,85,84,85,79,81,80,86,84,84,84,84,84,89,82,85,85,85,85,85,87,87,87,88,83,79,81,80,86,84,89,82,85,84,85,84,85,84,85,84,85,82,87,84,85,84,85,84,85,87,88,83,79,81,80,86,84,89,82,85,84,85,84,85,87,87,87,87,87,87,87,79,80,84,89,85,84,85,86,84,85,86,87,84,85,84,85,87,87,87,84,85,84,85,84,85,87,88,83,79,81,80,86,84,89,82,85,87,88,83,79,81,80,86,84,89,82,85,86,87,88,83,79,81,80,86,84,89,82,85,86,87,0,0,0,0,0,0,0,0,0,0,90,0,0,0,0,0,91,90,90,90,90,90,90,90,90,92,91,90,92,91,90,90,90,90,90,90,90,91,90,90,90,90,90,92,91,90,90,90,90,90,91,90,90,90,92,91,90,90,90,92,92,90,90,90,90,90,90,90,90,92,91,90,92,91,90,92,91,90,92,93,94,0,93,94,0,0,94,0,0,94,95,93,93,93,93,93,93,93,93,96,97,93,95,94,96,97,93,95,94,97,93,95,94,93,93,97,97,93,93,95,94,93,97,93,93,93,93,93,95,94,96,97,93,95,94,93,93,93,93,96,96,93,97,93,93,96,97,93,95,94,93,93,97,97,97,93,95,97,93,93,93,96,95,97,93,96,96,95,93,93,97,93,96,97,93,95,94,96,97,93,95,94,96,97,93,95,94,97],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["completion",3]],null,[[],["result",6]],[[],["result",6]],[[["completion",3]],["bool",15]],[[["str",15]]],[[["str",15]],["error",3]],[[["str",15]],["error",3]],[[["str",15]]],[[["str",15]]],[[["formatter",3]],["result",6]],[[["status",3]],["result",6]],[[["status",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["completion",3]],[[],["result",6]],[[],["result",6]],[[["completion",3]],["bool",15]],[[["status",3]]],null,null,null,[[]],[[],["status",3]],[[],["status",3]],[[],["status",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["status",3]]],null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["handle",3]],[[],["event",3]],[[],["guid",3]],[[["guid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["result",4],["fromslicewithnulerror",4]]],[[]],[[]],[[]],[[],[["result",4],["fromslicewithnulerror",4]]],[[]],[[["u32",15],["u16",15]]],[[]],[[]],[[]],[[],["cstr16iter",3]],[[["guid",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["char8",3]],[[],["char16",3]],[[["char8",3]],["ordering",4]],[[["char16",3]],["ordering",4]],[[],["char8",3]],[[],["char16",3]],[[["char8",3]],["bool",15]],[[["char16",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[["char8",3]],["bool",15]],[[["char16",3]],["bool",15]],[[["char8",3]],[["ordering",4],["option",4]]],[[["char16",3]],[["ordering",4],["option",4]]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[["u16",15]],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["controlflow",4]],[[],["status",3]],[[],["result",6]],null,[[["status",3]],["bool",15]],[[["str",15]],["error",3]],[[["str",15]]],[[["formatter",3]],["result",6]],[[]],[[["error",4]]],[[]],[[["statusresidual",3]]],[[]],[[],[["result",6],["debug",8]]],[[],[["debug",8],["result",6]]],[[],["result",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["error",3]]],[[],["result",6]],[[["status",3]],["bool",15]],[[],["status",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["result",4],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["bltop",4]],["result",6]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pixelformat",4]],[[],["pixelbitmask",3]],[[],["modeinfo",3]],[[],["bltpixel",3]],[[],["bltregion",4]],[[],["modeinfo",3]],[[["pixelformat",4]],["bool",15]],[[["pixelbitmask",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["framebuffer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],null,null,[[],["modeinfo",3]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pixelbitmask",3]],["bool",15]],[[["u8",15]]],[[],[["pixelbitmask",3],["option",4]]],[[],["pixelformat",4]],[[["usize",15]],["u8",15]],[[["usize",15]]],null,null,null,[[]],[[["mode",3]],["result",6]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["u8",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["pointermode",3]],[[],["pointerstate",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pointermode",3]],[[],[["result",6],["option",4]]],null,[[["bool",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["event",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["controlbits",3]],null,[[["controlbits",3]],["controlbits",3]],[[["controlbits",3]]],[[["controlbits",3]],["controlbits",3]],[[["controlbits",3]]],[[],["u32",15]],[[["controlbits",3]],["controlbits",3]],[[["controlbits",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iomode",3]],[[],["controlbits",3]],[[],["parity",4]],[[],["stopbits",4]],[[["controlbits",3]],["ordering",4]],[[["controlbits",3]],["bool",15]],null,null,[[],["controlbits",3]],[[["controlbits",3]],["bool",15]],[[["parity",4]],["bool",15]],[[["stopbits",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["controlbits",3],["option",4]]],[[["u32",15]],["controlbits",3]],[[["u32",15]],["controlbits",3]],[[["intoiterator",8]],["controlbits",3]],[[],[["controlbits",3],["result",6]]],[[]],[[["controlbits",3]]],[[["controlbits",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["iomode",3]],[[],["bool",15]],[[],["bool",15]],[[["controlbits",3]],["bool",15]],[[],["controlbits",3]],null,[[["controlbits",3]],[["ordering",4],["option",4]]],[[],[["result",6],["usize",15]]],null,[[["controlbits",3]]],[[],["result",6]],[[["bool",15],["controlbits",3]]],[[["iomode",3]],["result",6]],[[["controlbits",3]],["result",6]],null,[[["controlbits",3]],["controlbits",3]],[[["controlbits",3]]],null,[[["controlbits",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6],["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["key",4]],[[],["scancode",3]],[[],["outputmode",3]],[[],["color",4]],[[["outputmode",3]],["ordering",4]],[[],["usize",15]],[[],[["result",6],["option",4]]],[[]],[[],["bool",15]],[[["bool",15]],["result",6]],[[["key",4]],["bool",15]],[[["scancode",3]],["bool",15]],[[["outputmode",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["outputmodeiter",3]],[[["key",4]],["bool",15]],[[["scancode",3]],["bool",15]],[[["outputmode",3]],["bool",15]],[[["cstr16",3]],["result",6]],[[["outputmode",3]],[["ordering",4],["option",4]]],[[],[["option",4],["result",6]]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],["usize",15]],[[["color",4]],["result",6]],[[["usize",15]],["result",6]],[[["outputmode",3]],["result",6]],[[["cstr16",3]],[["result",6],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["event",3]],[[["str",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["processorarch",3]],[[]],[[]],[[]],[[]],[[],["processorarch",3]],[[["processorarch",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["processorarch",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["devicetype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["handle",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["loadoptionserror",4],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["lba",6]],[[],["u32",15]],[[],["lba",6]],[[],["blockiomedia",3]],[[],["u32",15]],[[],["u32",15]],[[["u32",15],["lba",6]],["result",6]],[[["bool",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15],["lba",6]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["fileattribute",3]],[[],["fileattribute",3]],[[],["fileattribute",3]],[[["fileattribute",3]],["fileattribute",3]],[[["fileattribute",3]]],[[["fileattribute",3]],["fileattribute",3]],[[["fileattribute",3]]],[[],["u64",15]],[[["fileattribute",3]],["fileattribute",3]],[[["fileattribute",3]]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["filemode",4]],[[],["fileattribute",3]],[[]],[[["fileattribute",3]],["ordering",4]],[[["fileattribute",3]],["bool",15]],[[],["time",3]],[[],["time",3]],[[],["result",6]],[[]],[[],["fileattribute",3]],[[["filemode",4]],["bool",15]],[[["fileattribute",3]],["bool",15]],[[["intoiterator",8]]],[[],["cstr16",3]],[[],["cstr16",3]],[[],["u64",15]],[[],["u64",15]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["fileattribute",3]]],[[["u64",15]],["fileattribute",3]],[[["u64",15]],["fileattribute",3]],[[["intoiterator",8]],["fileattribute",3]],[[]],[[]],[[],[["result",6],["option",4]]],[[],[["u64",15],["result",6]]],[[],["filehandle",3]],[[],["filehandle",3]],[[],["filehandle",3]],[[]],[[["fileattribute",3]]],[[["fileattribute",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",6],["filetype",4]]],[[],["bool",15]],[[],["bool",15]],[[],["time",3]],[[],["time",3]],[[],["time",3]],[[],["time",3]],[[["fileattribute",3]],["bool",15]],[[["filehandle",3]]],[[["filehandle",3]]],[[["str",15]],[["fileinfocreationerror",4],["result",4]]],[[["bool",15],["str",15],["u32",15],["u64",15]],[["fileinfocreationerror",4],["result",4]]],[[["time",3],["str",15],["u64",15],["fileattribute",3]],[["fileinfocreationerror",4],["result",4]]],[[["time",3],["str",15],["u64",15],["fileattribute",3]],[["fileinfocreationerror",4],["result",4]]],[[["bool",15],["str",15],["u32",15],["u64",15]],[["fileinfocreationerror",4],["result",4]]],[[["str",15]],[["fileinfocreationerror",4],["result",4]]],[[],["fileattribute",3]],[[["fileattribute",3],["str",15],["filemode",4]],[["filehandle",3],["result",6]]],[[["fileattribute",3]],[["ordering",4],["option",4]]],[[],["u64",15]],[[],["u64",15]],[[],[["result",6],["usize",15],["option",4]]],[[],[["result",6],["option",4],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[["fileattribute",3]]],[[],["result",6]],[[["bool",15],["fileattribute",3]]],[[],["result",6]],[[["u64",15]],["result",6]],[[["fileattribute",3]],["fileattribute",3]],[[["fileattribute",3]]],[[["fileattribute",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["cstr16",3]],[[],["cstr16",3]],[[],["cstr16",3]],[[],["cstr16",3]],[[],["u64",15]],[[],["u64",15]],[[],[["result",6],["usize",15]]],null,[[]],[[]],[[]],[[]],[[],[["result",6],["directory",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["processorcount",3]],[[],["processorinformation",3]],[[],["cpuphysicallocation",3]],[[["usize",15],["bool",15],["option",4]],["result",6]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["processorcount",3],["result",6]]],[[["usize",15]],[["result",6],["processorinformation",3]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["duration",3],["bool",15],["procedure",6],["option",4]],["result",6]],[[["duration",3],["procedure",6],["option",4],["usize",15]],["result",6]],[[["usize",15],["bool",15]],["result",6]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6],["usize",15]]],null,null,null,null,null,null,null,null,[[],["bootservices",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["revision",3]],[[["revision",3]],["ordering",4]],[[]],null,[[["revision",3]],["bool",15]],[[["handle",3]],["result",6]],[[],["revision",3]],[[],["cstr16",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[["revision",3]],["bool",15]],[[["u16",15]]],[[["revision",3]],[["ordering",4],["option",4]]],null,null,[[],["runtimeservices",3]],[[],["runtimeservices",3]],null,null,[[],["output",3]],[[],["input",3]],[[],["output",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["revision",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["memoryattribute",3]],[[],["eventtype",3]],[[["memorytype",3],["allocatetype",4],["usize",15]],[["u64",15],["result",6]]],[[["memorytype",3],["usize",15]],["result",6]],null,[[["memoryattribute",3]],["memoryattribute",3]],[[["eventtype",3]],["eventtype",3]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[["memoryattribute",3]],["memoryattribute",3]],[[["eventtype",3]],["eventtype",3]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[],["u64",15]],[[],["u32",15]],[[["memoryattribute",3]],["memoryattribute",3]],[[["eventtype",3]],["eventtype",3]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tpl",3]],[[],["allocatetype",4]],[[],["memorytype",3]],[[],["memorydescriptor",3]],[[],["memoryattribute",3]],[[],["memorymapkey",3]],[[],["searchtype",4]],[[],["eventtype",3]],[[["memoryattribute",3]],["ordering",4]],[[["eventtype",3]],["ordering",4]],[[["memoryattribute",3]],["bool",15]],[[["eventtype",3]],["bool",15]],[[["tpl",3],["option",4],["eventtype",3]],[["result",6],["event",3]]],[[["u32",15]],["memorytype",3]],[[],["memorydescriptor",3]],[[]],[[],["memoryattribute",3]],[[],["eventtype",3]],[[["tpl",3]],["bool",15]],[[["memorytype",3]],["bool",15]],[[["memoryattribute",3]],["bool",15]],[[["memorymapkey",3]],["bool",15]],[[["eventtype",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15],["u64",15]],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["memoryattribute",3]]],[[["u32",15]],[["eventtype",3],["option",4]]],[[["u64",15]],["memoryattribute",3]],[[["u32",15]],["eventtype",3]],[[["u64",15]],["memoryattribute",3]],[[["u32",15]],["eventtype",3]],[[["intoiterator",8]],["memoryattribute",3]],[[["intoiterator",8]],["eventtype",3]],[[]],[[["handle",3]],[["result",6],["unsafecell",3]]],[[]],[[]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[["memoryattribute",3]],["bool",15]],[[["eventtype",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["devicepath",3]],[["result",6],["handle",3]]],[[["searchtype",4],["option",4]],[["result",6],["usize",15]]],[[],[["result",6],["unsafecell",3]]],[[["usize",15]]],[[],["result",6]],[[],["usize",15]],[[["usize",15],["u8",15]]],[[["tpl",3]],["bool",15]],[[["memorytype",3]],["bool",15]],[[["memoryattribute",3]],["bool",15]],[[["memorymapkey",3]],["bool",15]],[[["eventtype",3]],["bool",15]],[[],["memoryattribute",3]],[[],["eventtype",3]],null,[[["memoryattribute",3]],[["ordering",4],["option",4]]],[[["eventtype",3]],[["ordering",4],["option",4]]],null,[[["tpl",3]],["tplguard",3]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[["memoryattribute",3],["bool",15]]],[[["bool",15],["eventtype",3]]],[[["timertrigger",4],["event",3]],["result",6]],[[["option",4],["usize",15],["u64",15]],["result",6]],[[["usize",15]]],[[["memoryattribute",3]],["memoryattribute",3]],[[["eventtype",3]],["eventtype",3]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[["memoryattribute",3]]],[[["eventtype",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["result",6],["usize",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]]],[[["memoryprotectionattribute",3]],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]]],[[],["usize",15]],[[["memoryprotectionattribute",3]],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]],["ordering",4]],[[["memoryprotectionattribute",3]],["bool",15]],[[],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]],[["memoryprotectionattribute",3],["option",4]]],[[["usize",15]],["memoryprotectionattribute",3]],[[["usize",15]],["memoryprotectionattribute",3]],[[["intoiterator",8]],["memoryprotectionattribute",3]],null,[[]],[[["memoryprotectionattribute",3]]],[[["memoryprotectionattribute",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["memoryprotectionattribute",3]],["bool",15]],[[],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]],[["ordering",4],["option",4]]],[[["memoryprotectionattribute",3]]],[[["memoryprotectionattribute",3],["bool",15]]],[[["memoryprotectionattribute",3]],["memoryprotectionattribute",3]],[[["memoryprotectionattribute",3]]],[[["memoryprotectionattribute",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["daylight",3]],[[["daylight",3]],["daylight",3]],[[["daylight",3]]],[[["daylight",3]],["daylight",3]],[[["daylight",3]]],[[],["u8",15]],[[["daylight",3]],["daylight",3]],[[["daylight",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["time",3]],[[],["daylight",3]],[[],["timecapabilities",3]],[[],["resettype",4]],[[["daylight",3]],["ordering",4]],[[["daylight",3]],["bool",15]],[[],["u8",15]],[[],["daylight",3]],[[],["daylight",3]],[[["daylight",3]],["bool",15]],[[["timecapabilities",3]],["bool",15]],[[["resettype",4]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["daylight",3],["option",4]]],[[["u8",15]],["daylight",3]],[[["u8",15]],["daylight",3]],[[["intoiterator",8]],["daylight",3]],[[],[["time",3],["result",6]]],[[],["result",6]],[[]],[[],["u8",15]],[[["daylight",3]]],[[["daylight",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[["daylight",3]],["bool",15]],[[["timecapabilities",3]],["bool",15]],[[["i16",15],["daylight",3],["u32",15],["u8",15],["u16",15]]],[[],["daylight",3]],[[["daylight",3]],[["ordering",4],["option",4]]],[[["daylight",3]]],[[["resettype",4],["option",4],["status",3]]],null,[[],["u8",15]],[[["bool",15],["daylight",3]]],[[["time",3]],["result",6]],[[],["result",6]],null,[[["daylight",3]],["daylight",3]],[[["daylight",3]]],[[],[["option",4],["i16",15]]],[[["daylight",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u16",15]]],"p":[[3,"Status"],[3,"Completion"],[8,"ResultExt"],[6,"Result"],[8,"Identify"],[8,"Align"],[3,"CStr8"],[3,"CStr16"],[3,"Handle"],[3,"Event"],[3,"Guid"],[3,"CharConversionError"],[3,"Char8"],[3,"Char16"],[4,"PixelFormat"],[4,"BltOp"],[4,"BltRegion"],[3,"FrameBuffer"],[3,"GraphicsOutput"],[3,"PixelBitmask"],[3,"BltPixel"],[3,"Mode"],[3,"ModeInfo"],[13,"VideoToBltBuffer"],[13,"BufferToVideo"],[13,"VideoFill"],[13,"VideoToVideo"],[13,"SubRectangle"],[3,"Pointer"],[3,"PointerMode"],[3,"PointerState"],[3,"ControlBits"],[4,"Parity"],[4,"StopBits"],[3,"IoMode"],[3,"Serial"],[3,"ScanCode"],[4,"Color"],[4,"Key"],[3,"Input"],[3,"Output"],[3,"OutputMode"],[3,"ProcessorArch"],[3,"DebugSupport"],[4,"DeviceType"],[4,"DeviceSubType"],[3,"AcpiDevicePath"],[3,"DevicePath"],[4,"LoadOptionsError"],[3,"LoadedImage"],[3,"BlockIOMedia"],[3,"BlockIO"],[3,"FileAttribute"],[4,"FileMode"],[4,"FileType"],[3,"RegularFile"],[3,"NamedFileProtocolInfo"],[6,"FileInfo"],[6,"FileSystemInfo"],[3,"Directory"],[3,"FileHandle"],[3,"FileInfoHeader"],[3,"FileSystemInfoHeader"],[3,"FileSystemVolumeLabelHeader"],[8,"File"],[8,"FromUefi"],[6,"FileSystemVolumeLabel"],[3,"SimpleFileSystem"],[3,"ProcessorCount"],[3,"ProcessorInformation"],[3,"CpuPhysicalLocation"],[3,"MpServices"],[8,"Table"],[3,"SystemTable"],[3,"Boot"],[3,"Runtime"],[3,"Header"],[3,"Revision"],[3,"Tpl"],[3,"MemoryType"],[4,"AllocateType"],[4,"SearchType"],[4,"TimerTrigger"],[3,"MemoryAttribute"],[3,"EventType"],[3,"MemoryDescriptor"],[3,"BootServices"],[3,"TplGuard"],[3,"MemoryMapKey"],[3,"MemoryProtectionAttribute"],[3,"ConfigTableEntry"],[3,"PropertiesTable"],[3,"Daylight"],[4,"ResetType"],[3,"TimeCapabilities"],[3,"RuntimeServices"],[3,"Time"]]},\
"volatile":{"doc":"Provides the wrapper type <code>Volatile</code>, which wraps a …","t":[3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Volatile","access","borrow","borrow_mut","clone","extract_inner","fmt","fmt","from","index","index_mut","into","map","map_mut","new","new_read_only","new_write_only","read","read_only","try_from","try_into","type_id","update","write","write_only","ReadOnly","ReadWrite","Readable","Writable","WriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","fmt","fmt","fmt","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["volatile","","","","","","","","","","","","","","","","","","","","","","","","","volatile::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps a reference to make accesses to the referenced …","Allows creating read-only and write-only <code>Volatile</code> values.","","","","Extracts the inner value stored in the wrapper type.","","","","Applies the index operation on the wrapped slice.","Applies the mutable index operation on the wrapped slice.","","Constructs a new <code>Volatile</code> reference by mapping the …","Constructs a new mutable <code>Volatile</code> reference by mapping …","Constructs a new volatile instance wrapping the given …","Constructs a new read-only volatile instance wrapping the …","Constructs a new write-only volatile instance wrapping …","Performs a volatile read of the contained value.","Restricts access permissions to read-only.","","","","Updates the contained value using the given closure and …","Performs a volatile write, setting the contained value to …","Restricts access permissions to write-only.","Zero-sized marker type for allowing only read access.","Zero-sized marker type for allowing both read and write …","Helper trait that is implemented by [<code>ReadWrite</code>] and […","Helper trait that is implemented by [<code>ReadWrite</code>] and […","Zero-sized marker type for allowing only write access.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],"f":[null,null,[[]],[[]],[[],["volatile",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["volatile",3]],[[],["volatile",3]],[[]],[[],["volatile",3]],[[],["volatile",3]],[[],["volatile",3]],[[],[["volatile",3],["readonly",3]]],[[],[["writeonly",3],["volatile",3]]],[[]],[[],[["volatile",3],["readonly",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],[["writeonly",3],["volatile",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["readwrite",3]],[[],["readonly",3]],[[],["writeonly",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Volatile"],[3,"ReadWrite"],[3,"ReadOnly"],[3,"WriteOnly"]]},\
"x86_64":{"doc":"This crate provides x86_64 specific functions and data …","t":[4,13,13,13,13,0,11,11,11,11,11,11,11,0,11,0,14,0,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,5,0,0,5,0,0,0,5,5,5,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,4,3,13,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,18,18,3,3,3,3,3,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,3,3,3,18,18,18,3,18,18,18,18,18,18,18,3,18,18,3,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,5,5,18,18,18,18,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,0,0,11,12,0,0,11,11,0,11,12,18,18,18,18,18,18,18,4,3,18,18,3,18,18,18,18,18,18,18,3,13,18,18,18,18,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,6,6,3,3,6,6,18,3,3,3,18,18,3,6,18,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,12,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,8,10,10,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,4,4,13,4,3,8,8,3,3,13,13,13,3,13,13,13,13,8,13,13,13,13,3,13,13,13,8,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,3,8,3,3,3,8,18,18,18,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,4,13,18,18,13,18,18,18,3,3,3,3,3,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,3,11,11,11,11,11,12,11,12,11,12,11,11,11],"n":["PrivilegeLevel","Ring0","Ring1","Ring2","Ring3","addr","borrow","borrow_mut","clone","eq","fmt","from","from_u16","instructions","into","registers","software_interrupt","structures","try_from","try_into","type_id","PhysAddr","PhysAddrNotValid","VirtAddr","VirtAddrNotValid","add","add","add","add","add_assign","add_assign","add_assign","add_assign","align_down","align_down","align_down","align_up","align_up","align_up","as_mut_ptr","as_ptr","as_u64","as_u64","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_ptr","into","into","into","into","is_aligned","is_aligned","is_null","is_null","ne","ne","new","new","new_truncate","new_truncate","new_unsafe","new_unsafe","p1_index","p2_index","p3_index","p4_index","page_offset","partial_cmp","partial_cmp","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","zero","zero","bochs_breakpoint","hlt","interrupts","nop","port","random","read_rip","segmentation","tables","tlb","are_enabled","disable","enable","enable_and_hlt","int3","without_interrupts","Port","PortReadOnly","PortWriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","new","new","new","read","read","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","RdRand","borrow","borrow_mut","clone","fmt","from","get_u16","get_u32","get_u64","into","new","try_from","try_into","type_id","cs","load_ds","load_es","load_fs","load_gs","load_ss","rdfsbase","rdgsbase","set_cs","swap_gs","wrfsbase","wrgsbase","lgdt","lidt","load_tss","sidt","Address","All","AllExceptGlobal","InvPicdCommand","Pcid","Single","borrow","borrow","borrow_mut","borrow_mut","flush","flush_all","flush_pcid","fmt","fmt","from","from","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","value","control","model_specific","rflags","xcontrol","ALIGNMENT_MASK","CACHE_DISABLE","Cr0","Cr0Flags","Cr2","Cr3","Cr3Flags","Cr4","Cr4Flags","DEBUGGING_EXTENSIONS","EMULATE_COPROCESSOR","FSGSBASE","L5_PAGING","MACHINE_CHECK_EXCEPTION","MONITOR_COPROCESSOR","NOT_WRITE_THROUGH","NUMERIC_ERROR","OSFXSR","OSXMMEXCPT_ENABLE","OSXSAVE","PAGE_GLOBAL","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_WRITETHROUGH","PAGE_SIZE_EXTENSION","PAGING","PCID","PERFORMANCE_MONITOR_COUNTER","PHYSICAL_ADDRESS_EXTENSION","PROTECTED_MODE_ENABLE","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTION_KEY","SAFER_MODE_EXTENSIONS","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","TASK_SWITCHED","TIMESTAMP_DISABLE","USER_MODE_INSTRUCTION_PREVENTION","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","WRITE_PROTECT","all","all","all","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","contains","contains","contains","empty","empty","empty","eq","eq","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","hash","hash","hash","insert","insert","insert","intersects","intersects","intersects","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","ne","ne","ne","not","not","not","partial_cmp","partial_cmp","partial_cmp","read","read","read","read","read_pcid","read_raw","read_raw","read_raw","remove","remove","remove","set","set","set","sub","sub","sub","sub_assign","sub_assign","sub_assign","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","write","write","write","write_pcid","write_raw","write_raw","Efer","EferFlags","FAST_FXSAVE_FXRSTOR","FsBase","GsBase","KernelGsBase","LONG_MODE_ACTIVE","LONG_MODE_ENABLE","LONG_MODE_SEGMENT_LIMIT_ENABLE","LStar","MSR","MSR","MSR","MSR","MSR","MSR","MSR","Msr","NO_EXECUTE_ENABLE","SECURE_VIRTUAL_MACHINE_ENABLE","SFMask","SYSTEM_CALL_EXTENSIONS","Star","TRANSLATION_CACHE_EXTENSION","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","into","into","into","into","into","into","into","is_all","is_empty","ne","new","not","partial_cmp","read","read","read","read","read","read","read","read","read_raw","read_raw","remove","set","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","write","write","write","write","write","write","write","write","write_raw","write_raw","ALIGNMENT_CHECK","AUXILIARY_CARRY_FLAG","CARRY_FLAG","DIRECTION_FLAG","ID","INTERRUPT_FLAG","IOPL_HIGH","IOPL_LOW","NESTED_TASK","OVERFLOW_FLAG","PARITY_FLAG","RESUME_FLAG","RFlags","SIGN_FLAG","TRAP_FLAG","VIRTUAL_8086_MODE","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT_PENDING","ZERO_FLAG","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","is_all","is_empty","ne","not","partial_cmp","read","read_raw","remove","set","sub","sub_assign","toggle","try_from","try_into","type_id","write","write_raw","LWP","MPK","SSE","X87","XCr0","XCr0Flags","YMM","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","contains","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersects","into","into","is_all","is_empty","ne","not","partial_cmp","read","read_raw","remove","set","sub","sub_assign","toggle","try_from","try_from","try_into","try_into","type_id","type_id","write","write_raw","DescriptorTablePointer","base","borrow","borrow_mut","clone","fmt","from","gdt","idt","into","limit","paging","port","try_from","try_into","tss","type_id","0","ACCESSED","AVAILABLE","BASE_0_23","BASE_24_31","CONFORMING","DEFAULT_SIZE","DPL_RING_3","Descriptor","DescriptorFlags","EXECUTABLE","GRANULARITY","GlobalDescriptorTable","KERNEL_CODE32","KERNEL_CODE64","KERNEL_DATA","LIMIT_0_15","LIMIT_16_19","LONG_MODE","PRESENT","SegmentSelector","SystemSegment","USER_CODE32","USER_CODE64","USER_DATA","USER_SEGMENT","UserSegment","WRITABLE","add_entry","all","as_raw_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","contains","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw_slice","hash","index","insert","intersects","into","into","into","into","is_all","is_empty","kernel_code_segment","kernel_data_segment","load","load_unsafe","ne","ne","new","new","not","partial_cmp","remove","rpl","set","set_rpl","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tss_segment","type_id","type_id","type_id","type_id","user_code_segment","user_data_segment","CAUSED_BY_WRITE","DivergingHandlerFunc","DivergingHandlerFuncWithErrCode","Entry","EntryOptions","HandlerFunc","HandlerFuncWithErrCode","INSTRUCTION_FETCH","InterruptDescriptorTable","InterruptStackFrame","InterruptStackFrameValue","MALFORMED_TABLE","PROTECTION_VIOLATION","PageFaultErrorCode","PageFaultHandlerFunc","USER_MODE","alignment_check","all","as_mut","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_range_exceeded","breakpoint","clone","clone","clone","clone","clone","cmp","code_segment","contains","cpu_flags","debug","deref","device_not_available","disable_interrupts","divide_error","double_fault","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","general_protection_fault","hash","index","index_mut","insert","instruction_pointer","intersects","into","into","into","into","into","into","invalid_opcode","invalid_tss","is_all","is_empty","load","load_unsafe","machine_check","missing","ne","ne","new","non_maskable_interrupt","not","overflow","page_fault","partial_cmp","remove","reset","security_exception","segment_not_present","set","set_handler_fn","set_handler_fn","set_handler_fn","set_handler_fn","set_handler_fn","set_present","set_privilege_level","set_stack_index","simd_floating_point","slice","slice_mut","stack_pointer","stack_segment","stack_segment_fault","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","virtualization","x87_floating_point","FrameAllocator","FrameDeallocator","allocate_frame","deallocate_frame","frame","mapper","page","page_table","PhysFrame","PhysFrameRange","PhysFrameRangeInclusive","add","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","containing_address","end","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_start_address","from_start_address_unchecked","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","partial_cmp","range","range_inclusive","size","start","start","start_address","sub","sub","sub_assign","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","FlagUpdateError","FrameAllocationFailed","InvalidFrameAddress","InvalidFrameAddress","InvalidFrameAddress","InvalidPageTable","MapToError","Mapped","MappedFrame","MappedPageTable","Mapper","MapperAllSizes","MapperFlush","MapperFlushAll","NotActive","NotMapped","NotRecursive","OffsetPageTable","PageAlreadyMapped","PageNotMapped","PageNotMapped","PageNotMapped","PageTableFrameMapping","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","RecursivePageTable","Size1GiB","Size2MiB","Size4KiB","Translate","TranslateError","TranslateResult","UnmapError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush_all","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_to_pointer","from","from","from","from","from","from","from","from","from","from","from","from","identity_map","ignore","ignore","into","into","into","into","into","into","into","into","into","into","into","into","level_4_table","level_4_table","level_4_table","map_to","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","new","new","new","new_unchecked","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","size","start_address","translate","translate","translate","translate","translate_addr","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","flags","frame","offset","AddressNotAligned","NotGiantPageSize","Page","PageRange","PageRangeInclusive","PageSize","SIZE","SIZE","SIZE_AS_DEBUG_STR","Size1GiB","Size2MiB","Size4KiB","add","add_assign","as_4kib_page_range","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","containing_address","end","end","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_page_table_indices","from_page_table_indices_1gib","from_page_table_indices_2mib","from_start_address","from_start_address_unchecked","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","p1_index","p2_index","p3_index","p4_index","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","range_inclusive","size","start","start","start_address","sub","sub","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACCESSED","BIT_10","BIT_11","BIT_52","BIT_53","BIT_54","BIT_55","BIT_56","BIT_57","BIT_58","BIT_59","BIT_60","BIT_61","BIT_62","BIT_9","DIRTY","FrameError","FrameNotPresent","GLOBAL","HUGE_PAGE","HugeFrame","NO_CACHE","NO_EXECUTE","PRESENT","PageOffset","PageTable","PageTableEntry","PageTableFlags","PageTableIndex","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","addr","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","contains","default","empty","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","index","index","index_mut","index_mut","insert","intersects","into","into","into","into","into","into","is_all","is_empty","is_unused","iter","iter_mut","ne","ne","ne","new","new","new","new","new_truncate","new_truncate","not","partial_cmp","partial_cmp","partial_cmp","remove","set","set_addr","set_flags","set_frame","set_unused","sub","sub_assign","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","zero","PortRead","PortWrite","read_from_port","write_to_port","TaskStateSegment","borrow","borrow_mut","clone","fmt","from","interrupt_stack_table","into","iomap_base","new","privilege_stack_table","try_from","try_into","type_id"],"q":["x86_64","","","","","","","","","","","","","","","","","","","","","x86_64::addr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions","","","","","","","","","","x86_64::instructions::interrupts","","","","","","x86_64::instructions::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::random","","","","","","","","","","","","","","x86_64::instructions::segmentation","","","","","","","","","","","","x86_64::instructions::tables","","","","x86_64::instructions::tlb","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers","","","","x86_64::registers::controlx86_64::registers::model_specific","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::rflags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::xcontrol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures","","","","","","","","","","","","","","","","","x86_64::structures::gdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::idt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging","","","","","","","","x86_64::structures::paging::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::mapperx86_64::structures::paging::mapper::TranslateResult","","","x86_64::structures::paging::page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::page_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::port","","","","x86_64::structures::tss","","","","","","","","","","","","",""],"d":["Represents a protection ring level.","Privilege-level 0 (most privilege): This level is used by …","Privilege-level 1 (moderate privilege): This level is …","Privilege-level 2 (moderate privilege): Like level 1, …","Privilege-level 3 (least privilege): This level is used …","Physical and virtual addresses manipulation","","","","","","","Creates a <code>PrivilegeLevel</code> from a numeric value. The value …","Special x86_64 instructions.","","Access to various system and model specific registers.","Generate a software interrupt by invoking the <code>int</code> …","Representations of various x86 specific structures and …","","","","A 64-bit physical memory address.","A passed <code>u64</code> was not a valid physical address.","A canonical 64-bit virtual memory address.","A passed <code>u64</code> was not a valid virtual address.","","","","","","","","","Align address downwards.","Aligns the virtual address downwards to the given …","Aligns the physical address downwards to the given …","Align address upwards.","Aligns the virtual address upwards to the given alignment.","Aligns the physical address upwards to the given …","Converts the address to a mutable raw pointer.","Converts the address to a raw pointer.","Converts the address to an <code>u64</code>.","Converts the address to an <code>u64</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a virtual address from the given pointer","","","","","Checks whether the virtual address has the demanded …","Checks whether the physical address has the demanded …","Convenience method for checking if a virtual address is …","Convenience method for checking if a physical address is …","","","Creates a new canonical virtual address.","Creates a new physical address.","Creates a new canonical virtual address, throwing out …","Creates a new physical address, throwing bits 52..64 away.","Creates a new virtual address, without any checks.","Creates a new physical address, without any checks.","Returns the 9-bit level 1 page table index.","Returns the 9-bit level 2 page table index.","Returns the 9-bit level 3 page table index.","Returns the 9-bit level 4 page table index.","Returns the 12-bit page offset of this virtual address.","","","","","","","","","","","","","","","","","","","","","Tries to create a new canonical virtual address.","Tries to create a new physical address.","","","","","Creates a virtual address that points to <code>0</code>.","Creates a physical address that points to <code>0</code>.","Emits a ‘magic breakpoint’ instruction for the Bochs …","Halts the CPU until the next interrupt arrives.","Enabling and disabling interrupts","Executes the <code>nop</code> instructions, which performs no …","Access to I/O ports","Support for build-in RNGs","Gets the current instruction pointer. Note that this is …","Provides functions to read and write segment registers.","Functions to load GDT, IDT, and TSS structures.","Functions to flush the translation lookaside buffer (TLB).","Returns whether interrupts are enabled.","Disable interrupts.","Enable interrupts.","Atomically enable interrupts and put the CPU to sleep","Cause a breakpoint exception by invoking the <code>int3</code> …","Run a closure with disabled interrupts.","An I/O port.","A read only I/O port.","A write only I/O port.","","","","","","","","","","","","","","","","","","","","","","Creates a read only I/O port with the given port number.","Creates a write only I/O port with the given port number.","Creates an I/O port with the given port number.","Reads from the port.","Reads from the port.","","","","","","","","","","Writes to the port.","Writes to the port.","Used to obtain random numbers using x86_64’s RDRAND …","","","","","","Uniformly sampled u16. May fail in rare circumstances or …","Uniformly sampled u32. May fail in rare circumstances or …","Uniformly sampled u64. May fail in rare circumstances or …","","Creates Some(RdRand) if RDRAND is supported, None …","","","","Returns the current value of the code segment register.","Reload data segment register.","Reload es segment register.","Reload fs segment register.","Reload gs segment register.","Reload stack segment register.","Reads the FS segment base address","Reads the GS segment base address","Reload code segment register.","Swap <code>KernelGsBase</code> MSR and <code>GsBase</code> MSR.","Writes the FS segment base address","Writes the GS segment base address","Load a GDT.","Load an IDT.","Load the task state register using the <code>ltr</code> instruction.","Get the address of the current IDT.","The logical processor invalidates mappings—except …","The logical processor invalidates all …","The logical processor invalidates all mappings—except …","The Invalidate PCID Command to execute.","Structure of a PCID. A PCID has to be <= 4096 for x86_64.","The logical processor invalidates all mappings—except …","","","","","Invalidate the given address in the TLB using the <code>invlpg</code> …","Invalidate the TLB completely by reloading the CR3 …","Invalidate the given address in the TLB using the <code>invpcid</code> …","","","","","","","Create a new PCID. Will result in a failure if the value …","","","","","","","Get the value of the current PCID.","Functions to read and write control registers.","Functions to read and write model specific registers.","Processor state stored in the RFLAGS register.","Access to various extended system registers","Enables automatic alignment checking.","Disables internal caches (only for some cases).","Various control flags modifying the basic operation of …","Configuration flags of the Cr0 register.","Contains the Page Fault Linear Address (PFLA).","Contains the physical address of the level 4 page table.","Controls cache settings for the level 4 page table.","Various control flags modifying the basic operation of …","Controls cache settings for the level 4 page table.","Enables I/O breakpoint capability and enforces treatment …","Force all x87 and MMX instructions to cause an exception.","Enables software running in 64-bit mode at any privilege …","Enables 5-level paging on supported CPUs.","Enables the machine-check exception mechanism.","Enables monitoring of the coprocessor, typical for x87 …","Ignored. Used to control write-back/write-through cache …","Enables the native error reporting mechanism for x87 FPU …","Enable the use of legacy SSE instructions; allows using …","Enables the SIMD floating-point exception (#XF) for …","Enables extendet processor state management instructions, …","Enables the global-page mechanism, which allows to make …","Disable caching for the P4 table.","Use a writethrough cache policy for the P4 table (else a …","Enables the use of 4MB physical frames; ignored in long …","Enables page translation.","Enables process-context identifiers (PCIDs).","Allows software running at any privilege level to use the …","Enables physical address extension and 2MB physical …","Enables protected mode.","Enables support for protected-mode virtual interrupts.","Enables 4-level paging to associate each linear address …","Enables SMX instructions.","Enables restrictions for supervisor-mode software when …","Prevents the execution of instructions that reside in …","Automatically set to 1 on <em>hardware</em> task switch.","When set, only privilege-level 0 can execute the RDTSC or …","Prevents the execution of the SGDT, SIDT, SLDT, SMSW, and …","Enables hardware-supported performance enhancements for …","Enables VMX insturctions.","Controls whether supervisor-level writes to read-only …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","Convert from underlying bit representation, preserving all…","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Read the current set of CR0 flags.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register.","Read the current set of CR4 flags.","Read the current P4 table address from the CR3 register …","Read the current raw CR0 value.","Read the current P4 table address from the CR3 register","Read the current raw CR4 value.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Updates CR0 flags.","Updates CR4 flags.","Write CR0 flags.","Write a new P4 table address into the CR3 register.","Write CR4 flags.","Write a new P4 table address into the CR3 register.","Write raw CR0 flags.","Write raw CR4 flags.","The Extended Feature Enable Register.","Flags of the Extended Feature Enable Register.","Enable the <code>fxsave</code> and <code>fxrstor</code> instructions to execute …","FS.Base Model Specific Register.","GS.Base Model Specific Register.","KernelGsBase Model Specific Register.","Indicates that long mode is active.","Activates long mode, requires activating paging.","Enable certain limit checks in 64-bit mode.","Syscall Register: LSTAR","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","A model specific register.","Enables the no-execute page-protection feature.","Enables SVM extensions.","Syscall Register: SFMASK","Enables the <code>syscall</code> and <code>sysret</code> instructions.","Syscall Register: STAR","Changes how the <code>invlpg</code> instruction operates on TLB …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Create an instance from a register.","Returns the complement of this set of flags.","","Read 64 bits msr register.","Read the current EFER flags.","Read the current FsBase register.","Read the current GsBase register.","Read the current KernelGsBase register.","Read the Ring 0 and Ring 3 segment bases. Returns","Read the current LStar register. This holds the target …","Read to the SFMask register. The SFMASK register is used …","Read the current raw EFER flags.","Read the Ring 0 and Ring 3 segment bases. The remaining …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update EFER flags.","Write 64 bits to msr register.","Write the EFER flags, preserving reserved values.","Write a given virtual address to the FS.Base register.","Write a given virtual address to the GS.Base register.","Write a given virtual address to the KernelGsBase …","Write the Ring 0 and Ring 3 segment bases. The remaining …","Write a given virtual address to the LStar register. This …","Write to the SFMask register. The SFMASK register is used …","Write the EFER flags.","Write the Ring 0 and Ring 3 segment bases. The remaining …","Enable automatic alignment checking if CR0.AM is set. …","Set by hardware if last arithmetic operation generated a …","Set by hardware if last arithmetic operation generated a …","Determines the order in which strings are processed.","Processor feature identification flag.","Enable interrupts.","The high bit of the I/O Privilege Level field.","The low bit of the I/O Privilege Level field.","Used by <code>iret</code> in hardware task switch mode to determine if …","Set by hardware to indicate that the sign bit of the …","Set by hardware if last result has an even number of 1 …","Allows to restart an instruction following an instrucion …","The RFLAGS register.","Set by hardware if last arithmetic operation resulted in …","Enable single-step mode for debugging.","Enable the virtual-8086 mode.","Virtual image of the INTERRUPT_FLAG bit.","Indicates that an external, maskable interrupt is pending.","Set by hardware if last arithmetic operation resulted in …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Returns the current value of the RFLAGS register.","Returns the raw current value of the RFLAGS register.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","Writes the RFLAGS register, preserves reserved bits.","Writes the RFLAGS register.","When set the Lightweight Profiling extensions are enabled","When set, PKRU state management is supported by …","Enables 128-bit (legacy) SSE Must be set to enable AVX …","Enables x87 FPU","Extended feature enable mask register","Configuration flags of the XCr0 register.","Enables 256-bit SSE Must be set to enable AVX","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Read the current set of XCR0 flags.","Read the current raw XCR0 value.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","Write XCR0 flags.","Write raw XCR0 flags.","A struct describing a pointer to a descriptor table (GDT …","Pointer to the memory region containing the DT.","","","","","","Types for the Global Descriptor Table and segment …","Provides types for the Interrupt Descriptor Table and its …","","Size of the DT.","Abstractions for page tables and other paging related …","Traits for accessing I/O ports.","","","Provides a type for the task state segment structure.","","","Set by the processor if this segment has been accessed. …","Available for use by the Operating System","Bits <code>0..=23</code> of the base field (ignored in 64-bit mode, …","Bits <code>24..=31</code> of the base field (ignored in 64-bit mode, …","For code segments, sets the segment as “conforming”, …","Use 32-bit (as opposed to 16-bit) operands. If [<code>LONG_MODE</code>]…","The DPL for this descriptor is Ring 3. In 64-bit mode, …","A 64-bit mode segment descriptor.","Flags for a GDT descriptor. Not all flags are valid for …","This flag must be set for code segments and unset for …","Limit field is scaled by 4096 bytes. In 64-bit mode, …","A 64-bit mode global descriptor table (GDT).","A flat 32-bit kernel code segment","A 64-bit kernel code segment","A kernel data segment (64-bit or flat 32-bit)","Bits <code>0..=15</code> of the limit field (ignored in 64-bit mode)","Bits <code>16..=19</code> of the limit field (ignored in 64-bit mode)","Must be set for 64-bit code segments, unset otherwise.","Must be set for any segment, causes a segment not present …","Specifies which element to load into a segment from …","A system segment descriptor such as a LDT or TSS …","A flat 32-bit user code segment","A 64-bit user code segment","A user data segment (64-bit or flat 32-bit)","This flag must be set for user segments (in contrast to …","Descriptor for a code or data segment.","For 32-bit data segments, sets the segment as writable. …","Adds the given segment descriptor to the GDT, returning …","Returns the set containing all flags.","Get a reference to the internal table.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns an empty set of flags","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Forms a GDT from a slice of <code>u64</code>.","","Returns the GDT index.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a segment descriptor for a 64-bit kernel code …","Creates a segment descriptor for a kernel data segment …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","","","Creates a new SegmentSelector","Creates an empty GDT.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Returns the requested privilege level.","Inserts or removes the specified flags depending on the …","Set the privilege level for this Segment selector.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","Creates a TSS system descriptor for the given TSS.","","","","","Creates a segment descriptor for a 64-bit ring 3 code …","Creates a segment descriptor for a ring 3 data segment …","If this flag is set, the memory access that caused the …","A handler function that must not return, e.g. for a …","A handler function with an error code that must not …","An Interrupt Descriptor Table entry.","Represents the options field of an IDT entry.","A handler function for an interrupt or an exception …","A handler function for an exception that pushes an error …","If this flag is set, it indicates that the access that …","An Interrupt Descriptor Table with 256 entries.","Wrapper type for the interrupt stack frame pushed by the …","Represents the interrupt stack frame pushed by the CPU on …","If this flag is set, the page fault is a result of the …","If this flag is set, the page fault was caused by a …","Describes an page fault error code.","A page fault handler function that pushes a page fault …","If this flag is set, an access in user mode (CPL=3) …","An alignment check exception (<code>#AC</code>) occurs when an …","Returns the set containing all flags.","Gives mutable access to the contents of the interrupt …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","A bound-range exception (<code>#BR</code>) exception can occur as a …","A breakpoint (<code>#BP</code>) exception occurs when an <code>INT3</code> …","","","","","","","The code segment selector, padded with zeros.","Returns <code>true</code> all of the flags in <code>other</code> are contained …","The flags register before the interrupt handler was …","When the debug-exception mechanism is enabled, a <code>#DB</code> …","","A device not available exception (<code>#NM</code>) occurs under any …","Let the CPU disable hardware interrupts when the handler …","A divide error (<code>#DE</code>) occurs when the denominator of a DIV …","A double fault (<code>#DF</code>) exception can occur when a second …","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","A general protection fault (<code>#GP</code>) can occur in various …","","Returns the IDT entry with the specified index.","Returns a mutable reference to the IDT entry with the …","Inserts the specified flags in-place.","This value points to the instruction that should be …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","An invalid opcode exception (<code>#UD</code>) occurs when an attempt …","An invalid TSS exception (<code>#TS</code>) occurs only as a result of …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Loads the IDT in the CPU using the <code>lidt</code> command.","Loads the IDT in the CPU using the <code>lidt</code> command.","The machine check exception (<code>#MC</code>) is model specific. …","Creates a non-present IDT entry (but sets the must-be-one …","","","Creates a new IDT filled with non-present entries.","An non maskable interrupt exception (NMI) occurs as a …","Returns the complement of this set of flags.","An overflow exception (<code>#OF</code>) occurs as a result of …","A page fault (<code>#PF</code>) can occur during a memory access in …","","Removes the specified flags in-place.","Resets all entries of this IDT in place.","The Security Exception (<code>#SX</code>) signals security-sensitive …","An segment-not-present exception (<code>#NP</code>) occurs when an …","Inserts or removes the specified flags depending on the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set or reset the preset bit.","Set the required privilege level (DPL) for invoking the …","Assigns a Interrupt Stack Table (IST) stack to this …","The SIMD Floating-Point Exception (<code>#XF</code>) is used to handle …","Returns slice of IDT entries with the specified range.","Returns a mutable slice of IDT entries with the specified …","The stack pointer at the time of the interrupt.","The stack segment descriptor at the time of the interrupt …","An stack segment exception (<code>#SS</code>) can occur in the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","vector nr. 20","The x87 Floating-Point Exception-Pending exception (<code>#MF</code>) …","A trait for types that can allocate a frame of memory.","A trait for types that can deallocate a frame of memory.","Allocate a frame of the appropriate size and return it if …","Deallocate the given unused frame.","Abstractions for default-sized and huge physical memory …","Abstractions for reading and modifying the mapping of …","Abstractions for default-sized and huge virtual memory …","Abstractions for page tables and page table entries.","A physical memory frame.","An range of physical memory frames, exclusive the upper …","An range of physical memory frames, inclusive the upper …","","","","","","","","","","","","","Returns the frame that contains the given physical …","The end of the range, exclusive.","The start of the range, inclusive.","","","","","","","","","","Returns the frame that starts at the given virtual …","Returns the frame that starts at the given virtual …","","","","","","Returns whether the range contains no frames.","Returns whether the range contains no frames.","","","","","","","Returns a range of frames, exclusive <code>end</code>.","Returns a range of frames, inclusive <code>end</code>.","Returns the size the frame (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the frame.","","","","","","","","","","","","","An error indicating that an <code>update_flags</code> call failed.","An additional frame was needed for the mapping process, …","The page table entry for the given virtual address points …","The page table entry for the given page points to an …","The page table entry for the given page points to an …","The given page table was not suitable to create a …","This error is returned from <code>map_to</code> and similar methods.","The virtual address is mapped to a physical frame.","Represents a physical frame mapped in a page table.","A Mapper implementation that relies on a PhysAddr to …","A trait for common page table operations on pages of size …","An empty convencience trait that requires the <code>Mapper</code> …","This type represents a page whose mapping has changed in …","This type represents a change of a page table requiring a …","The given page table was not active on the CPU.","The given virtual address is not mapped to a physical …","The given page table was not at an recursive address.","A Mapper implementation that requires that the complete …","The given page is already mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","Provides a virtual address mapping for physical page …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","A recursive page table is a last level page table with an …","The virtual address is mapped to a “huge” 1GiB frame.","The virtual address is mapped to a “large” 2MiB frame.","The virtual address is mapped to a 4KiB frame.","Provides methods for translating virtual addresses.","An error indicating that an <code>translate</code> call failed.","The return value of the [<code>Translate::translate</code>] function.","An error indicating that an <code>unmap</code> call failed.","","","","","","","","","","","","","","","","","","","","","","","","","Flush the page from the TLB to ensure that the newest …","Flush all pages from the TLB to ensure that the newest …","","","","","","","","","","","","","","Translate the given physical frame to a virtual page …","","","","","","","","","","","","","Maps the given frame to the virtual page with the same …","Don’t flush the TLB and silence the “must be used” …","Don’t flush the TLB and silence the “must be used” …","","","","","","","","","","","","","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Creates a new mapping in the page table.","Creates a new mapping in the page table.","","","","","","","","","","Creates a new <code>MappedPageTable</code> that uses the passed …","Creates a new <code>OffsetPageTable</code> that uses the given offset …","Creates a new RecursivePageTable from the passed level 4 …","Creates a new RecursivePageTable without performing any …","Set the flags of an existing page table level 2 entry","","","","","","","","","","Set the flags of an existing page table level 3 entry","","","","","","","","","","Set the flags of an existing page level 4 table entry","","","","","","","","","","Returns the size the frame (4KB, 2MB or 1GB).","Returns the start address of the frame.","Return the frame that the given virtual address is mapped …","","","","Translates the given virtual address to the physical …","Return the frame that the specified page is mapped to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes a mapping from the page table and returns the …","","","","","","","","","","Updates the flags of an existing mapping.","","","","","","","","","","The entry flags in the lowest-level page table.","The mapped frame.","The offset whithin the mapped frame.","The given address was not sufficiently aligned.","This trait is implemented for 4KiB and 2MiB pages, but …","A virtual memory page.","A range of pages with exclusive upper bound.","A range of pages with inclusive upper bound.","Trait for abstracting over the three possible page sizes …","The page size in bytes.","The page size in bytes.","A string representation of the page size for debug output.","A “giant” 1GiB page.","A “huge” 2MiB page.","A standard 4KiB page.","","","Converts the range of 2MiB pages to a range of 4KiB pages.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the page that contains the given virtual address.","The end of the range, exclusive.","The end of the range, inclusive.","","","","","","","","","","","","","","","","","","","","","","Returns the 4KiB memory page with the specified page …","Returns the 1GiB memory page with the specified page …","Returns the 2MiB memory page with the specified page …","Returns the page that starts at the given virtual address.","Returns the page that starts at the given virtual address.","","","","","","","","","","Returns wether this range contains no pages.","Returns wether this range contains no pages.","","","","","","Returns the level 1 page table index of this page.","Returns the level 2 page table index of this page.","Returns the level 3 page table index of this page.","Returns the level 4 page table index of this page.","","","","","Returns a range of pages, exclusive <code>end</code>.","Returns a range of pages, inclusive <code>end</code>.","Returns the size the page (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the page.","","","","","","","","","","","","","","","","","","","","","","","","","Set by the CPU when the mapped frame or page table is …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Available to the OS, can be used to store additional …","Set by the CPU on a write to the mapped frame.","The error returned by the <code>PageTableEntry::frame</code> method.","The entry does not have the <code>PRESENT</code> flag set, so it isn’…","Indicates that the mapping is present in all address …","Specifies that the entry maps a huge frame instead of a …","The entry does have the <code>HUGE_PAGE</code> flag set. The <code>frame</code> …","Disables caching for the pointed entry is cacheable.","Forbid code execution from the mapped frames.","Specifies whether the mapped frame or page table is …","A 12-bit offset into a 4KiB Page.","Represents a page table.","A 64-bit page table entry.","Possible flags for a page table entry.","A 9-bit index into a page table.","Controls whether accesses from userspace (i.e. ring 3) …","Controls whether writes to the mapped frames are allowed.","If this bit is set, a “write-through” policy is used …","Returns the physical address mapped by this entry, might …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","Returns an empty set of flags","","","","","","Returns the flags of this entry.","","","","","","","","","","","Returns the physical frame mapped by this entry.","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","","","","","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns whether this entry is zero.","Returns an iterator over the entries of the page table.","Returns an iterator that allows modifying the entries of …","","","","Creates an unused page table entry.","Creates an empty page table.","Creates a new index from the given <code>u16</code>. Panics if the …","Creates a new offset from the given <code>u16</code>. Panics if the …","Creates a new index from the given <code>u16</code>. Throws away bits …","Creates a new offset from the given <code>u16</code>. Throws away bits …","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Map the entry to the specified physical address with the …","Sets the flags of this entry.","Map the entry to the specified physical frame with the …","Sets this entry to zero.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Clears all entries.","A helper trait that implements the read port operation.","A helper trait that implements the write port operation.","Reads a <code>Self</code> value from the given port.","Writes a <code>Self</code> value to the given port.","In 64-bit mode the TSS holds information that is not …","","","","","","The full 64-bit canonical forms of the interrupt stack …","","The 16-bit offset to the I/O permission bit map from the …","Creates a new TSS with zeroed privilege and interrupt …","The full 64-bit canonical forms of the stack pointers …","","",""],"i":[0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,2,2,3,3,2,2,3,3,0,2,3,0,2,3,2,2,2,3,2,3,4,5,2,3,4,5,2,3,2,3,2,3,2,2,2,2,2,2,3,3,3,3,3,3,4,5,2,3,4,5,2,2,3,4,5,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,2,2,2,3,2,2,2,3,3,3,2,2,3,3,2,3,4,5,2,3,4,5,2,3,2,3,4,5,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,8,6,7,8,6,7,8,6,7,8,7,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,0,0,10,10,11,10,11,0,0,0,10,11,10,11,10,11,11,10,11,10,11,10,11,11,0,0,0,0,12,12,0,0,0,0,0,0,0,13,12,13,13,13,12,12,12,13,13,13,13,14,14,13,12,13,13,13,12,13,13,13,13,13,12,13,13,13,13,12,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,15,12,16,17,14,18,13,15,12,16,17,14,18,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,15,12,12,12,12,12,16,17,14,14,14,14,14,18,13,13,13,13,13,15,12,16,17,14,18,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,15,12,16,17,14,18,13,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,15,16,17,18,17,15,17,18,12,14,13,12,14,13,12,14,13,12,14,13,12,14,13,15,12,16,17,14,18,13,15,12,16,17,14,18,13,15,12,16,17,14,18,13,15,18,15,17,18,17,15,18,0,0,19,0,0,0,19,19,19,0,20,21,22,23,24,25,26,0,19,19,0,19,0,19,19,19,19,19,19,19,19,19,27,20,21,22,23,24,25,26,19,27,20,21,22,23,24,25,26,19,19,19,19,19,19,19,27,20,21,22,23,24,25,26,19,19,19,19,19,27,20,21,22,23,24,25,26,19,19,19,19,19,19,19,19,27,20,21,22,23,24,25,26,19,19,19,19,27,19,19,27,20,21,22,23,24,25,26,20,24,19,19,19,19,19,27,20,21,22,23,24,25,26,19,27,20,21,22,23,24,25,26,19,27,20,21,22,23,24,25,26,19,20,27,20,21,22,23,24,25,26,20,24,28,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,28,28,28,28,28,28,28,28,0,0,29,29,29,29,0,0,29,29,29,29,29,29,29,29,29,30,29,30,29,29,29,29,29,29,29,30,29,29,29,29,29,30,29,29,29,29,29,29,29,29,30,29,29,29,29,29,29,30,30,29,29,29,29,29,30,29,30,29,30,29,30,30,0,31,31,31,31,31,31,0,0,31,31,0,0,31,31,0,31,32,33,33,33,33,33,33,33,0,0,33,33,0,33,33,33,33,33,33,33,0,34,33,33,33,33,34,33,35,33,35,33,33,33,33,33,33,33,32,35,34,33,32,35,34,33,32,35,34,33,33,33,33,32,33,33,32,35,34,33,33,33,33,33,32,35,34,33,33,33,33,33,35,33,32,33,33,32,35,34,33,33,33,34,34,35,35,32,33,32,35,33,33,33,32,33,32,33,33,33,32,35,34,33,32,35,34,33,34,32,35,34,33,34,34,36,0,0,0,0,0,0,36,0,0,0,36,36,0,0,36,37,36,38,36,36,36,36,36,36,36,38,37,39,40,41,36,38,37,39,40,41,36,37,37,37,39,40,41,36,36,41,36,41,37,38,37,40,37,37,36,39,40,36,36,38,39,40,41,36,36,36,36,36,38,37,39,40,41,36,36,36,36,36,37,36,37,37,36,41,36,38,37,39,40,41,36,37,37,36,36,37,37,37,39,40,36,37,37,36,37,37,36,36,37,37,37,36,39,39,39,39,39,40,40,40,37,37,37,41,41,37,36,36,36,38,37,39,40,41,36,38,37,39,40,41,36,38,37,39,40,41,36,37,37,0,0,42,43,0,0,0,0,0,0,0,44,44,44,45,46,44,45,46,44,45,46,44,44,45,46,44,45,46,44,45,46,44,45,46,44,44,44,45,46,45,46,45,46,44,45,46,45,46,44,44,44,44,45,46,44,44,44,44,44,45,46,44,45,46,44,45,46,0,47,48,49,50,0,0,48,0,0,0,0,0,0,51,48,51,0,47,49,52,50,0,47,49,52,50,0,53,53,53,0,0,0,0,54,55,56,51,48,53,57,58,47,49,52,50,54,55,56,51,48,53,57,58,47,49,52,50,57,58,54,55,56,51,51,48,53,57,58,47,49,52,50,59,54,55,56,51,48,53,57,58,47,49,52,50,60,57,58,54,55,56,51,48,53,57,58,47,49,52,50,54,55,56,60,60,54,54,54,55,55,55,56,56,56,54,55,56,56,60,54,54,54,55,55,55,56,56,56,60,54,54,54,55,55,55,56,56,56,60,54,54,54,55,55,55,56,56,56,53,53,61,54,55,56,61,60,54,54,54,55,55,55,56,56,56,54,55,56,51,48,53,57,58,47,49,52,50,54,55,56,51,48,53,57,58,47,49,52,50,54,55,56,51,48,53,57,58,47,49,52,50,60,54,54,54,55,55,55,56,56,56,60,54,54,54,55,55,55,56,56,56,62,62,62,0,0,0,0,0,0,63,64,63,0,0,0,64,64,65,66,67,68,64,65,69,70,66,67,68,64,65,69,70,66,67,68,64,65,69,66,67,68,64,64,65,69,66,67,68,64,65,69,66,67,68,64,65,69,70,70,66,67,68,64,65,69,70,64,64,64,64,64,66,67,68,64,65,69,70,65,69,65,69,64,65,69,65,69,64,64,64,64,66,67,68,64,64,64,64,65,69,64,64,64,64,66,67,68,64,65,69,70,66,67,68,64,65,69,70,66,67,68,64,65,69,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,71,71,72,71,71,71,0,0,0,0,0,71,71,71,73,71,71,71,71,71,71,71,71,72,73,71,74,75,76,72,73,71,74,75,76,72,73,71,74,75,76,71,75,76,71,74,71,72,71,75,76,71,73,72,73,71,71,71,71,71,74,75,76,73,72,73,71,74,75,76,71,71,71,71,71,74,74,74,74,71,71,72,73,71,74,75,76,71,71,73,74,74,71,75,76,73,74,75,76,75,76,71,71,75,76,71,71,73,73,73,73,71,71,71,72,73,71,74,75,76,72,73,71,74,75,76,72,73,71,74,75,76,74,0,0,77,78,0,79,79,79,79,79,79,79,79,79,79,79,79,79],"f":[null,null,null,null,null,null,[[]],[[]],[[],["privilegelevel",4]],[[["privilegelevel",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]],["privilegelevel",4]],null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[["u64",15]],["u64",15]],[[]],[[]],[[["u64",15]],["u64",15]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["virtaddr",3]],[[],["physaddr",3]],[[["virtaddr",3]],["ordering",4]],[[["physaddr",3]],["ordering",4]],[[["virtaddr",3]],["bool",15]],[[["physaddr",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["virtaddr",3]],["bool",15]],[[["physaddr",3]],["bool",15]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[["u64",15]],["virtaddr",3]],[[["u64",15]],["physaddr",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pageoffset",3]],[[["virtaddr",3]],[["ordering",4],["option",4]]],[[["physaddr",3]],[["ordering",4],["option",4]]],[[["u64",15]]],[[["usize",15]]],[[["virtaddr",3]]],[[["u64",15]]],[[["physaddr",3]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[["usize",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",15]],[["result",4],["virtaddr",3],["virtaddrnotvalid",3]]],[[["u64",15]],[["physaddr",3],["physaddrnotvalid",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["virtaddr",3]],[[],["physaddr",3]],[[]],[[]],null,[[]],null,null,[[],["virtaddr",3]],null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],["portreadonly",3]],[[["u16",15]],["portwriteonly",3]],[[["u16",15]],["port",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],[[],["rdrand",3]],[[["formatter",3]],["result",6]],[[]],[[],[["option",4],["u16",15]]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["segmentselector",3]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[],["u64",15]],[[],["u64",15]],[[["segmentselector",3]]],[[]],[[["u64",15]]],[[["u64",15]]],[[["descriptortablepointer",3]]],[[["descriptortablepointer",3]]],[[["segmentselector",3]]],[[],["descriptortablepointer",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["virtaddr",3]]],[[]],[[["invpicdcommand",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u16",15]],[["pcid",3],["str",15],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u16",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["ordering",4]],[[["cr3flags",3]],["ordering",4]],[[["cr4flags",3]],["ordering",4]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["cr0flags",3],["option",4]]],[[["u64",15]],[["cr3flags",3],["option",4]]],[[["u64",15]],[["option",4],["cr4flags",3]]],[[["u64",15]],["cr0flags",3]],[[["u64",15]],["cr3flags",3]],[[["u64",15]],["cr4flags",3]],[[["u64",15]],["cr0flags",3]],[[["u64",15]],["cr3flags",3]],[[["u64",15]],["cr4flags",3]],[[["intoiterator",8]],["cr0flags",3]],[[["intoiterator",8]],["cr3flags",3]],[[["intoiterator",8]],["cr4flags",3]],[[]],[[]],[[]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["cr0flags",3]],["bool",15]],[[["cr3flags",3]],["bool",15]],[[["cr4flags",3]],["bool",15]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3]],[["ordering",4],["option",4]]],[[["cr3flags",3]],[["ordering",4],["option",4]]],[[["cr4flags",3]],[["ordering",4],["option",4]]],[[],["cr0flags",3]],[[],["virtaddr",3]],[[]],[[],["cr4flags",3]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3],["bool",15]]],[[["bool",15],["cr3flags",3]]],[[["bool",15],["cr4flags",3]]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[["cr0flags",3]]],[[["cr3flags",3]]],[[["cr4flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["cr0flags",3]]],[[["physframe",3],["cr3flags",3]]],[[["cr4flags",3]]],[[["physframe",3],["pcid",3]]],[[["u64",15]]],[[["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["eferflags",3]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[],["u64",15]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eferflags",3]],[[["eferflags",3]],["ordering",4]],[[["eferflags",3]],["bool",15]],[[],["eferflags",3]],[[["eferflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["eferflags",3],["option",4]]],[[["u64",15]],["eferflags",3]],[[["u64",15]],["eferflags",3]],[[["intoiterator",8]],["eferflags",3]],[[]],[[["eferflags",3]]],[[["eferflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["eferflags",3]],["bool",15]],[[["u32",15]],["msr",3]],[[],["eferflags",3]],[[["eferflags",3]],[["ordering",4],["option",4]]],[[],["u64",15]],[[],["eferflags",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[]],[[],["virtaddr",3]],[[],["rflags",3]],[[],["u64",15]],[[]],[[["eferflags",3]]],[[["bool",15],["eferflags",3]]],[[["eferflags",3]],["eferflags",3]],[[["eferflags",3]]],[[["eferflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["u64",15]]],[[["eferflags",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["segmentselector",3]],[["str",15],["result",4]]],[[["virtaddr",3]]],[[["rflags",3]]],[[["u64",15]]],[[["u16",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["rflags",3]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[],["u64",15]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[]],[[]],[[],["rflags",3]],[[["rflags",3]],["ordering",4]],[[["rflags",3]],["bool",15]],[[],["rflags",3]],[[["rflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]],[["option",4],["rflags",3]]],[[["u64",15]],["rflags",3]],[[["u64",15]],["rflags",3]],[[["intoiterator",8]],["rflags",3]],[[]],[[["rflags",3]]],[[["rflags",3]],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["rflags",3]],["bool",15]],[[],["rflags",3]],[[["rflags",3]],[["ordering",4],["option",4]]],[[],["rflags",3]],[[],["u64",15]],[[["rflags",3]]],[[["bool",15],["rflags",3]]],[[["rflags",3]],["rflags",3]],[[["rflags",3]]],[[["rflags",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["rflags",3]]],[[["u64",15]]],null,null,null,null,null,null,null,[[],["xcr0flags",3]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[],["u64",15]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[]],[[]],[[]],[[]],[[],["xcr0flags",3]],[[["xcr0flags",3]],["ordering",4]],[[["xcr0flags",3]],["bool",15]],[[],["xcr0flags",3]],[[["xcr0flags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]],[["xcr0flags",3],["option",4]]],[[["u64",15]],["xcr0flags",3]],[[["u64",15]],["xcr0flags",3]],[[["intoiterator",8]],["xcr0flags",3]],[[]],[[["xcr0flags",3]]],[[["xcr0flags",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["xcr0flags",3]],["bool",15]],[[],["xcr0flags",3]],[[["xcr0flags",3]],[["ordering",4],["option",4]]],[[],["xcr0flags",3]],[[],["u64",15]],[[["xcr0flags",3]]],[[["bool",15],["xcr0flags",3]]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[["xcr0flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["xcr0flags",3]]],[[["u64",15]]],null,null,[[]],[[]],[[],["descriptortablepointer",3]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["descriptor",4]],["segmentselector",3]],[[],["descriptorflags",3]],[[]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[],["u64",15]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[],["globaldescriptortable",3]],[[],["descriptor",4]],[[],["descriptorflags",3]],[[["descriptorflags",3]],["ordering",4]],[[["descriptorflags",3]],["bool",15]],[[],["descriptorflags",3]],[[["segmentselector",3]],["bool",15]],[[["descriptorflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15]],[["descriptorflags",3],["option",4]]],[[["u64",15]],["descriptorflags",3]],[[["u64",15]],["descriptorflags",3]],[[["intoiterator",8]],["descriptorflags",3]],[[],["globaldescriptortable",3]],[[]],[[],["u16",15]],[[["descriptorflags",3]]],[[["descriptorflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["descriptor",4]],[[],["descriptor",4]],[[]],[[]],[[["segmentselector",3]],["bool",15]],[[["descriptorflags",3]],["bool",15]],[[["privilegelevel",4],["u16",15]],["segmentselector",3]],[[],["globaldescriptortable",3]],[[],["descriptorflags",3]],[[["descriptorflags",3]],[["ordering",4],["option",4]]],[[["descriptorflags",3]]],[[],["privilegelevel",4]],[[["bool",15],["descriptorflags",3]]],[[["privilegelevel",4]]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3]]],[[["descriptorflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taskstatesegment",3]],["descriptor",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["descriptor",4]],[[],["descriptor",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["pagefaulterrorcode",3]],[[],[["interruptstackframevalue",3],["volatile",3]]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[],["u64",15]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["interruptdescriptortable",3]],[[],["entry",3]],[[],["entryoptions",3]],[[],["interruptstackframevalue",3]],[[],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]],["ordering",4]],null,[[["pagefaulterrorcode",3]],["bool",15]],null,null,[[]],null,[[["bool",15]]],null,null,[[],["pagefaulterrorcode",3]],[[],["bool",15]],[[["entryoptions",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["pagefaulterrorcode",3]]],[[["u64",15]],["pagefaulterrorcode",3]],[[["u64",15]],["pagefaulterrorcode",3]],[[["intoiterator",8]],["pagefaulterrorcode",3]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["pagefaulterrorcode",3]]],null,[[["pagefaulterrorcode",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],null,[[]],[[["entryoptions",3]],["bool",15]],[[["pagefaulterrorcode",3]],["bool",15]],[[],["interruptdescriptortable",3]],null,[[],["pagefaulterrorcode",3]],null,null,[[["pagefaulterrorcode",3]],[["ordering",4],["option",4]]],[[["pagefaulterrorcode",3]]],[[]],null,null,[[["bool",15],["pagefaulterrorcode",3]]],[[["handlerfuncwitherrcode",6]],["entryoptions",3]],[[["diverginghandlerfuncwitherrcode",6]],["entryoptions",3]],[[["pagefaulthandlerfunc",6]],["entryoptions",3]],[[["handlerfunc",6]],["entryoptions",3]],[[["diverginghandlerfunc",6]],["entryoptions",3]],[[["bool",15]]],[[["privilegelevel",4]]],[[["u16",15]]],null,[[]],[[]],null,null,null,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],[["physframe",3],["option",4]]],[[["physframe",3]]],null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["physframe",3]],[[],["physframerange",3]],[[],["physframerangeinclusive",3]],[[["physframe",3]],["ordering",4]],[[["physaddr",3]]],null,null,[[["physframe",3]],["bool",15]],[[["physframerange",3]],["bool",15]],[[["physframerangeinclusive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["physaddr",3]],[["result",4],["addressnotaligned",3]]],[[["physaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["physframe",3]],["bool",15]],[[["physframerange",3]],["bool",15]],[[["physframerangeinclusive",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["physframe",3]],[["ordering",4],["option",4]]],[[["physframe",3]],["physframerange",3]],[[["physframe",3]],["physframerangeinclusive",3]],[[],["u64",15]],null,null,[[],["physaddr",3]],[[["u64",15]]],[[["physframe",3]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["physframe",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["physframe",3],["pagetableflags",3]],[["maptoerror",4],["mapperflush",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pagetable",3]],[[],["pagetable",3]],[[],["pagetable",3]],[[["pagetableflags",3],["page",3],["physframe",3]],[["maptoerror",4],["mapperflush",3],["result",4]]],[[["pagetableflags",3],["page",3],["physframe",3]],[["maptoerror",4],["mapperflush",3],["result",4]]],[[["page",3],["size1gib",4],["physframe",3],["pagetableflags",3]],[["mapperflush",3],["result",4],["maptoerror",4]]],[[["pagetableflags",3],["size2mib",4],["physframe",3],["page",3]],[["maptoerror",4],["mapperflush",3],["result",4]]],[[["size4kib",4],["pagetableflags",3],["physframe",3],["page",3]],[["result",4],["maptoerror",4],["mapperflush",3]]],[[["page",3],["size1gib",4],["physframe",3],["pagetableflags",3]],[["mapperflush",3],["result",4],["maptoerror",4]]],[[["size4kib",4],["pagetableflags",3],["physframe",3],["page",3]],[["result",4],["maptoerror",4],["mapperflush",3]]],[[["pagetableflags",3],["size2mib",4],["physframe",3],["page",3]],[["maptoerror",4],["mapperflush",3],["result",4]]],[[["size4kib",4],["pagetableflags",3],["physframe",3],["page",3]],[["result",4],["maptoerror",4],["mapperflush",3]]],[[["pagetableflags",3],["size2mib",4],["physframe",3],["page",3]],[["maptoerror",4],["mapperflush",3],["result",4]]],[[["page",3],["size1gib",4],["physframe",3],["pagetableflags",3]],[["mapperflush",3],["result",4],["maptoerror",4]]],[[["pagetable",3]]],[[["virtaddr",3],["pagetable",3]]],[[["pagetable",3]],[["result",4],["invalidpagetable",4]]],[[["pagetableindex",3],["pagetable",3]]],[[["page",3],["pagetableflags",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["page",3],["pagetableflags",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["page",3],["pagetableflags",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["mapperflushall",3],["result",4],["flagupdateerror",4]]],[[],["u64",15]],[[],["physaddr",3]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],["translateresult",4]],[[["virtaddr",3]],[["option",4],["physaddr",3]]],[[["page",3]],[["result",4],["physframe",3],["translateerror",4]]],[[["page",3],["size1gib",4]],[["physframe",3],["result",4],["translateerror",4]]],[[["size2mib",4],["page",3]],[["result",4],["physframe",3],["translateerror",4]]],[[["size4kib",4],["page",3]],[["physframe",3],["translateerror",4],["result",4]]],[[["page",3],["size1gib",4]],[["physframe",3],["result",4],["translateerror",4]]],[[["size2mib",4],["page",3]],[["result",4],["physframe",3],["translateerror",4]]],[[["size4kib",4],["page",3]],[["physframe",3],["translateerror",4],["result",4]]],[[["size4kib",4],["page",3]],[["physframe",3],["translateerror",4],["result",4]]],[[["page",3],["size1gib",4]],[["physframe",3],["result",4],["translateerror",4]]],[[["size2mib",4],["page",3]],[["result",4],["physframe",3],["translateerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["page",3]],[["result",4],["unmaperror",4]]],[[["page",3],["size1gib",4]],[["result",4],["unmaperror",4]]],[[["size2mib",4],["page",3]],[["unmaperror",4],["result",4]]],[[["size4kib",4],["page",3]],[["result",4],["unmaperror",4]]],[[["size2mib",4],["page",3]],[["unmaperror",4],["result",4]]],[[["page",3],["size1gib",4]],[["result",4],["unmaperror",4]]],[[["size4kib",4],["page",3]],[["result",4],["unmaperror",4]]],[[["size4kib",4],["page",3]],[["result",4],["unmaperror",4]]],[[["size2mib",4],["page",3]],[["unmaperror",4],["result",4]]],[[["page",3],["size1gib",4]],[["result",4],["unmaperror",4]]],[[["page",3],["pagetableflags",3]],[["result",4],["mapperflush",3],["flagupdateerror",4]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflush",3]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflush",3],["flagupdateerror",4],["result",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflush",3]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflush",3]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflush",3]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflush",3],["flagupdateerror",4],["result",4]]],[[["size2mib",4],["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflush",3]]],[[["size4kib",4],["pagetableflags",3],["page",3]],[["flagupdateerror",4],["result",4],["mapperflush",3]]],[[["pagetableflags",3],["page",3],["size1gib",4]],[["mapperflush",3],["flagupdateerror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],[[["u64",15]]],[[],[["pagerange",3],["size4kib",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["size4kib",4]],[[],["size2mib",4]],[[],["size1gib",4]],[[],["page",3]],[[],["pagerange",3]],[[],["pagerangeinclusive",3]],[[["size4kib",4]],["ordering",4]],[[["size2mib",4]],["ordering",4]],[[["size1gib",4]],["ordering",4]],[[["page",3]],["ordering",4]],[[["virtaddr",3]]],null,null,[[["size4kib",4]],["bool",15]],[[["size2mib",4]],["bool",15]],[[["size1gib",4]],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["pagerangeinclusive",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetableindex",3]]],[[["pagetableindex",3]]],[[["pagetableindex",3]]],[[["virtaddr",3]],[["result",4],["addressnotaligned",3]]],[[["virtaddr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["page",3]],["bool",15]],[[["pagerange",3]],["bool",15]],[[["pagerangeinclusive",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[],["pagetableindex",3]],[[["size4kib",4]],[["ordering",4],["option",4]]],[[["size2mib",4]],[["ordering",4],["option",4]]],[[["size1gib",4]],[["ordering",4],["option",4]]],[[["page",3]],[["ordering",4],["option",4]]],[[],["pagerange",3]],[[],["pagerangeinclusive",3]],[[],["u64",15]],null,null,[[],["virtaddr",3]],[[]],[[["u64",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["physaddr",3]],[[],["pagetableflags",3]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[],["u64",15]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["frameerror",4]],[[],["pagetableentry",3]],[[],["pagetableflags",3]],[[],["pagetable",3]],[[],["pagetableindex",3]],[[],["pageoffset",3]],[[["pagetableflags",3]],["ordering",4]],[[["pagetableindex",3]],["ordering",4]],[[["pageoffset",3]],["ordering",4]],[[["pagetableflags",3]],["bool",15]],[[]],[[],["pagetableflags",3]],[[["frameerror",4]],["bool",15]],[[["pagetableflags",3]],["bool",15]],[[["pagetableindex",3]],["bool",15]],[[["pageoffset",3]],["bool",15]],[[["intoiterator",8]]],[[],["pagetableflags",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["frameerror",4],["physframe",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["option",4],["pagetableflags",3]]],[[["u64",15]],["pagetableflags",3]],[[["u64",15]],["pagetableflags",3]],[[["intoiterator",8]],["pagetableflags",3]],[[]],[[["pagetableindex",3]]],[[["usize",15]]],[[["usize",15]]],[[["pagetableindex",3]]],[[["pagetableflags",3]]],[[["pagetableflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["pagetableflags",3]],["bool",15]],[[["pagetableindex",3]],["bool",15]],[[["pageoffset",3]],["bool",15]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[],["pagetableflags",3]],[[["pagetableflags",3]],[["ordering",4],["option",4]]],[[["pagetableindex",3]],[["ordering",4],["option",4]]],[[["pageoffset",3]],[["ordering",4],["option",4]]],[[["pagetableflags",3]]],[[["bool",15],["pagetableflags",3]]],[[["pagetableflags",3],["physaddr",3]]],[[["pagetableflags",3]]],[[["physframe",3],["pagetableflags",3]]],[[]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3]]],[[["pagetableflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[["u16",15]]],[[["u16",15]]],null,[[]],[[]],[[],["taskstatesegment",3]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[],["taskstatesegment",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"PrivilegeLevel"],[3,"VirtAddr"],[3,"PhysAddr"],[3,"VirtAddrNotValid"],[3,"PhysAddrNotValid"],[3,"PortReadOnly"],[3,"PortWriteOnly"],[3,"Port"],[3,"RdRand"],[4,"InvPicdCommand"],[3,"Pcid"],[3,"Cr0Flags"],[3,"Cr4Flags"],[3,"Cr3Flags"],[3,"Cr0"],[3,"Cr2"],[3,"Cr3"],[3,"Cr4"],[3,"EferFlags"],[3,"Efer"],[3,"FsBase"],[3,"GsBase"],[3,"KernelGsBase"],[3,"Star"],[3,"LStar"],[3,"SFMask"],[3,"Msr"],[3,"RFlags"],[3,"XCr0Flags"],[3,"XCr0"],[3,"DescriptorTablePointer"],[3,"SegmentSelector"],[3,"DescriptorFlags"],[4,"Descriptor"],[3,"GlobalDescriptorTable"],[3,"PageFaultErrorCode"],[3,"InterruptDescriptorTable"],[3,"InterruptStackFrame"],[3,"Entry"],[3,"EntryOptions"],[3,"InterruptStackFrameValue"],[8,"FrameAllocator"],[8,"FrameDeallocator"],[3,"PhysFrame"],[3,"PhysFrameRange"],[3,"PhysFrameRangeInclusive"],[4,"MapToError"],[4,"TranslateResult"],[4,"UnmapError"],[4,"TranslateError"],[4,"InvalidPageTable"],[4,"FlagUpdateError"],[4,"MappedFrame"],[3,"MappedPageTable"],[3,"OffsetPageTable"],[3,"RecursivePageTable"],[3,"MapperFlush"],[3,"MapperFlushAll"],[8,"PageTableFrameMapping"],[8,"Mapper"],[8,"Translate"],[13,"Mapped"],[8,"PageSize"],[3,"Page"],[3,"PageRange"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"],[3,"PageRangeInclusive"],[3,"AddressNotAligned"],[3,"PageTableFlags"],[4,"FrameError"],[3,"PageTableEntry"],[3,"PageTable"],[3,"PageTableIndex"],[3,"PageOffset"],[8,"PortRead"],[8,"PortWrite"],[3,"TaskStateSegment"]]},\
"xmas_elf":{"doc":"","t":[3,8,6,6,11,11,0,11,11,11,11,10,11,10,11,11,11,0,0,12,12,11,11,0,11,11,11,11,0,0,11,11,11,13,13,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,11,11,12,13,13,13,13,13,4,3,13,13,4,3,13,13,3,13,13,3,4,3,13,13,13,13,13,17,4,3,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,3,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,5,11,12,11,12,11,12,12,12,5,11,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,13,17,17,17,17,17,3,13,13,13,13,13,13,13,13,13,13,13,4,3,3,3,4,13,17,17,17,17,17,13,4,3,13,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,12,5,11,12,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,17,17,17,17,3,3,4,3,13,13,13,13,13,13,13,13,13,13,17,17,17,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,4,3,3,3,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,4,3,13,13,3,3,8,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["ElfFile","Extensions","P32","P64","borrow","borrow_mut","dynamic","find_section_by_name","fmt","from","get_dyn_string","get_gnu_buildid","get_gnu_buildid","get_gnu_debuglink","get_gnu_debuglink","get_shstr","get_string","hash","header","header","input","into","new","program","program_header","program_iter","section_header","section_iter","sections","symbol_table","try_from","try_into","type_id","BindNow","Debug","Dynamic","FLAG_1_CONFALT","FLAG_1_DIRECT","FLAG_1_DISPRELDNE","FLAG_1_DISPRELPND","FLAG_1_EDITED","FLAG_1_ENDFILTEE","FLAG_1_GLOBAL","FLAG_1_GLOBAUDIT","FLAG_1_GROUP","FLAG_1_IGNMULDEF","FLAG_1_INITFIRST","FLAG_1_INTERPOSE","FLAG_1_LOADFLTR","FLAG_1_NODEFLIB","FLAG_1_NODELETE","FLAG_1_NODIRECT","FLAG_1_NODUMP","FLAG_1_NOHDR","FLAG_1_NOKSYMS","FLAG_1_NOOPEN","FLAG_1_NORELOC","FLAG_1_NOW","FLAG_1_ORIGIN","FLAG_1_PIE","FLAG_1_SINGLETON","FLAG_1_STUB","FLAG_1_SYMINTPOSE","FLAG_1_TRANS","Fini","FiniArray","FiniArraySize","Flags","Flags1","Hash","Init","InitArray","InitArraySize","JmpRel","Needed","Null","OsSpecific","PltRel","PltRelSize","Pltgot","PreInitArray","PreInitArraySize","ProcessorSpecific","RPath","Rel","RelEnt","RelSize","Rela","RelaEnt","RelaSize","RunPath","SoName","StrSize","StrTab","SymEnt","SymTab","SymTabShIndex","Symbolic","Tag","Tag_","TextRel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","get_ptr","get_ptr","get_tag","get_tag","get_val","get_val","into","into","into","ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HashTable","borrow","borrow_mut","clone","fmt","from","get_bucket","get_chain","hash","into","lookup","try_from","try_into","type_id","0","AArch64","Aix","Arm","BPF","BigEndian","Class","Class_","Core","Current","Data","Data_","Executable","FreeBSD","Header","Header32","Header64","HeaderPt1","HeaderPt2","HeaderPt2_","HpUx","Ia64","Irix","Linux","LittleEndian","MAGIC","Machine","Machine_","Mips","NetBSD","None","None","None","None","None","OpenBSD","OpenVMS","OsAbi","OsAbi_","Other","Other","Other","Other","Other","PowerPC","ProcessorSpecific","Relocatable","SharedObject","SixtyFour","Solaris","Sparc","SuperH","SystemV","ThirtyTwo","Type","Type_","Version","Version_","X86","X86_64","abi_version","as_class","as_data","as_machine","as_os_abi","as_type","as_version","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","data","data","entry_point","entry_point","eq","eq","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header_size","header_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_none","is_none","is_none","is_none","is_none","is_none","machine","machine","magic","ne","ne","ne","ne","ne","ne","ne","os_abi","os_abi","padding","parse_header","ph_count","ph_count","ph_entry_size","ph_entry_size","ph_offset","ph_offset","pt1","pt2","sanity_check","sh_count","sh_count","sh_entry_size","sh_entry_size","sh_offset","sh_offset","sh_str_index","sh_str_index","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","0","Dynamic","Dynamic32","Dynamic64","Empty","FLAG_MASKOS","FLAG_MASKPROC","FLAG_R","FLAG_W","FLAG_X","Flags","GnuRelro","Interp","Load","Note","Note64","Null","OsSpecific","Ph32","Ph64","Phdr","ProcessorSpecific","ProgramHeader","ProgramHeader32","ProgramHeader64","ProgramIter","SegmentData","ShLib","TYPE_GNU_RELRO","TYPE_HIOS","TYPE_HIPROC","TYPE_LOOS","TYPE_LOPROC","Tls","Type","Type_","Undefined","align","align","align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","default","default","default","default","eq","eq","file","file_size","file_size","file_size","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_data","get_data","get_data","get_type","get_type","get_type","into","into","into","into","into","into","into","into","into_iter","is_execute","is_read","is_write","mem_size","mem_size","mem_size","ne","ne","next","next_index","offset","offset","offset","parse_program_header","physical_addr","physical_addr","physical_addr","raw_data","raw_data","sanity_check","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virtual_addr","virtual_addr","virtual_addr","COMPRESS_HIOS","COMPRESS_HIPROC","COMPRESS_LOOS","COMPRESS_LOPROC","CompressionHeader32","CompressionHeader64","CompressionType","CompressionType_","DynSym","DynSymbolTable32","DynSymbolTable64","Dynamic","Dynamic32","Dynamic64","Empty","FiniArray","FnArray32","FnArray64","GRP_COMDAT","GRP_MASKOS","GRP_MASKPROC","Group","Group","Hash","HashTable","InitArray","NoBits","Note","Note64","NoteHeader","Null","OsSpecific","OsSpecific","PreInitArray","ProcessorSpecific","ProcessorSpecific","ProgBits","Rel","Rel","Rel32","Rel64","Rela","Rela","Rela32","Rela64","SHF_ALLOC","SHF_COMPRESSED","SHF_EXECINSTR","SHF_GROUP","SHF_INFO_LINK","SHF_LINK_ORDER","SHF_MASKOS","SHF_MASKPROC","SHF_MERGE","SHF_OS_NONCONFORMING","SHF_STRINGS","SHF_TLS","SHF_WRITE","SHN_ABS","SHN_COMMON","SHN_HIOS","SHN_HIPROC","SHN_HIRESERVE","SHN_LOOS","SHN_LOPROC","SHN_LORESERVE","SHN_UNDEF","SHN_XINDEX","SHT_HIOS","SHT_HIPROC","SHT_HIUSER","SHT_LOOS","SHT_LOPROC","SHT_LOUSER","SectionData","SectionHeader","SectionHeader_","SectionIter","SectionStrings","Sh32","Sh64","ShLib","ShType","ShType_","StrArray","StrTab","SymTab","SymTabShIndex","SymTabShIndex","SymbolTable32","SymbolTable64","Undefined","User","Zlib","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","desc","eq","eq","file","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_addend","get_addend","get_data","get_name","get_offset","get_offset","get_offset","get_offset","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_type","get_type","get_type","get_type","get_type","info","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","link","name","name","ne","ne","next","next","next_index","offset","parse_section_header","raw_data","sanity_check","size","strings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","flags","indicies","Binding","Binding_","Common","Default","DynEntry32","DynEntry64","Entry","Entry32","Entry64","File","Func","Global","Hidden","Internal","Local","NoType","Object","OsSpecific","OsSpecific","ProcessorSpecific","ProcessorSpecific","Protected","Section","Tls","Type","Type_","Visibility","Visibility_","Weak","as_binding","as_type","as_visibility","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_binding","get_name","get_name","get_name","get_name","get_name","get_other","get_section_header","get_type","info","info","info","info","info","into","into","into","into","into","into","into","into","into","into","name","name","name","name","name","ne","ne","other","other","other","other","other","shndx","shndx","shndx","shndx","shndx","size","size","size","size","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value"],"q":["xmas_elf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::dynamic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::hash","","","","","","","","","","","","","","xmas_elf::headerxmas_elf::program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::sections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::sections::SectionData","","xmas_elf::symbol_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A trait for things that are common ELF conventions but …","","","","","","","","","","Parse and return the value of the .note.gnu.build-id …","","Parse and return the value of the .gnu_debuglink section, …i":[0,0,0,0,1,1,0,1,1,1,1,2,1,2,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,4,5,3,4,5,3,5,3,4,5,5,3,4,5,3,4,4,4,4,4,4,4,5,3,3,4,5,3,4,5,3,4,5,3,0,6,6,6,6,6,6,6,0,6,6,6,6,6,7,8,9,8,8,10,0,0,11,12,0,0,11,9,0,13,13,0,0,0,9,8,9,9,10,0,0,0,8,9,14,10,12,11,8,9,9,0,0,14,10,12,9,8,8,11,11,11,14,9,8,8,9,14,0,0,0,0,8,8,15,16,17,18,19,7,20,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,15,15,21,15,13,16,14,17,10,20,12,19,9,7,11,18,8,15,15,13,22,16,14,10,12,9,11,8,22,21,21,15,13,13,22,22,16,14,17,10,20,12,19,9,7,11,18,8,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,13,22,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,16,14,17,10,20,12,13,22,15,16,14,10,12,9,11,8,15,15,15,0,13,22,13,22,13,22,21,21,0,13,22,13,22,13,22,13,22,13,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,13,22,21,15,13,22,16,14,17,10,20,12,19,9,7,11,18,8,15,13,15,22,23,24,25,25,25,0,0,0,0,0,0,24,24,24,24,25,24,24,26,26,24,24,0,0,0,0,0,24,0,0,0,0,0,24,0,0,25,26,27,28,29,26,27,28,23,30,24,25,29,26,27,28,23,30,24,25,26,27,28,23,30,24,27,28,23,30,23,24,29,26,27,28,26,27,28,29,26,26,27,27,28,28,23,23,23,30,24,25,29,26,27,28,23,30,24,25,26,27,28,26,27,28,29,26,27,28,23,30,24,25,29,23,23,23,26,27,28,23,24,29,29,26,27,28,0,26,27,28,27,28,0,29,26,27,28,23,30,24,25,29,26,27,28,23,30,24,25,27,28,29,26,27,28,23,30,24,25,26,27,28,0,0,0,0,0,0,0,0,31,32,32,31,32,32,32,31,32,32,0,0,0,31,32,31,32,31,31,31,32,0,31,31,33,31,31,33,31,0,31,32,32,0,31,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,31,0,0,32,31,31,31,32,32,32,32,31,33,34,35,34,36,37,31,32,38,39,40,41,33,42,43,44,35,34,36,37,31,32,38,39,40,41,33,42,43,44,34,37,31,39,40,41,33,44,44,31,33,35,34,35,34,34,36,37,31,32,38,39,40,41,33,42,43,44,35,34,36,37,31,32,38,39,40,41,33,42,43,44,42,42,34,34,42,42,43,43,42,42,43,43,34,42,42,43,43,34,35,34,36,37,31,32,38,39,40,41,33,42,43,44,35,38,34,34,44,31,33,35,38,35,34,0,34,0,34,32,35,34,36,37,31,32,38,39,40,41,33,42,43,44,35,34,36,37,31,32,38,39,40,41,33,42,43,44,34,44,35,34,36,37,31,32,38,39,40,41,33,42,43,44,45,45,0,0,46,47,0,0,0,0,0,46,46,48,47,47,48,46,46,48,46,48,46,47,46,46,0,0,0,0,48,49,50,51,52,53,54,55,51,47,49,48,50,46,52,53,54,55,51,47,49,48,50,46,51,47,49,48,50,46,48,46,56,52,53,54,55,51,47,49,48,50,46,52,53,54,55,51,47,49,48,50,46,56,56,52,53,54,55,56,56,56,56,52,53,54,55,52,53,54,55,51,47,49,48,50,46,56,52,53,54,55,48,46,56,52,53,54,55,56,52,53,54,55,56,52,53,54,55,52,53,54,55,51,47,49,48,50,46,52,53,54,55,51,47,49,48,50,46,52,53,54,55,51,47,49,48,50,46,56,52,53,54,55],"f":[null,null,null,null,[[]],[[]],null,[[["str",15]],[["option",4],["sectionheader",4]]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],[["result",4],["str",15],["str",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],[["result",4],["str",15],["str",15]]],[[["u32",15]],[["result",4],["str",15],["str",15]]],null,null,null,null,[[]],[[],[["str",15],["result",4],["elffile",3]]],null,[[["u16",15]],[["programheader",4],["str",15],["result",4]]],[[],["programiter",3]],[[["u16",15]],[["str",15],["sectionheader",4],["result",4]]],[[],["sectioniter",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tag_",3]],[[["tag",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["result",4],["str",15],["p64",6]]],[[],[["str",15],["result",4],["p32",6]]],[[],[["str",15],["tag",4],["result",4]]],[[],[["str",15],["result",4],["tag",4]]],[[],[["result",4],["str",15],["p64",6]]],[[],[["str",15],["result",4],["p32",6]]],[[]],[[]],[[]],[[["tag",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[],["hashtable",3]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["str",15]],["u32",15]],[[]],[[["str",15]],["entry",8]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["class",4]],[[],["data",4]],[[],["machine",4]],[[],["osabi",4]],[[],["type",4]],[[],["version",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["class",4]],null,[[],["header",3]],[[],["headerpt1",3]],[[],["headerpt2",4]],[[],["class_",3]],[[],["class",4]],[[],["data_",3]],[[],["data",4]],[[],["version_",3]],[[],["version",4]],[[],["osabi_",3]],[[],["osabi",4]],[[],["type_",3]],[[],["type",4]],[[],["machine_",3]],[[],["machine",4]],[[],["data",4]],null,[[],["u64",15]],null,[[["class_",3]],["bool",15]],[[["class",4]],["bool",15]],[[["data",4]],["bool",15]],[[["version",4]],["bool",15]],[[["osabi",4]],["bool",15]],[[["type",4]],["bool",15]],[[["machine",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["machine_",3]],null,null,[[["class_",3]],["bool",15]],[[["class",4]],["bool",15]],[[["data",4]],["bool",15]],[[["version",4]],["bool",15]],[[["osabi",4]],["bool",15]],[[["type",4]],["bool",15]],[[["machine",4]],["bool",15]],[[],["osabi",4]],null,null,[[],[["header",3],["str",15],["result",4]]],[[],["u16",15]],null,[[],["u16",15]],null,[[],["u64",15]],null,null,null,[[["elffile",3]],[["str",15],["result",4]]],[[],["u16",15]],null,[[],["u16",15]],null,[[],["u64",15]],null,[[],["u16",15]],null,[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type_",3]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["version",4]],[[],["u32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["programheader",4]],[[],["programheader32",3]],[[],["programheader64",3]],[[],["flags",3]],[[],["type_",3]],[[],["type",4]],[[],["programheader32",3]],[[],["programheader64",3]],[[],["flags",3]],[[],["type_",3]],[[["flags",3]],["bool",15]],[[["type",4]],["bool",15]],null,[[],["u64",15]],null,null,[[],["flags",3]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["elffile",3]],[["result",4],["str",15],["segmentdata",4]]],[[["elffile",3]],[["result",4],["str",15],["segmentdata",4]]],[[["elffile",3]],[["result",4],["str",15],["segmentdata",4]]],[[],[["str",15],["result",4],["type",4]]],[[],[["str",15],["result",4],["type",4]]],[[],[["str",15],["result",4],["type",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],null,null,[[["flags",3]],["bool",15]],[[["type",4]],["bool",15]],[[],["option",4]],null,[[],["u64",15]],null,null,[[["header",3],["u16",15]],[["programheader",4],["str",15],["result",4]]],[[],["u64",15]],null,null,[[["elffile",3]]],[[["elffile",3]]],[[["programheader",4],["elffile",3]],[["str",15],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sectionheader",4]],[[],["shtype_",3]],[[],["shtype",4]],[[],["compressionheader64",3]],[[],["compressionheader32",3]],[[],["compressiontype_",3]],[[],["compressiontype",4]],[[],["noteheader",3]],[[]],[[["shtype",4]],["bool",15]],[[["compressiontype",4]],["bool",15]],null,[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u32",15]],[[["elffile",3]],[["str",15],["result",4],["sectiondata",4]]],[[["elffile",3]],[["result",4],["str",15],["str",15]]],[[],["u64",15]],[[],["u32",15]],[[],["u64",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],[["str",15],["result",4],["shtype",4]]],[[],["u32",15]],[[],["u8",15]],[[],["u32",15]],[[],["u8",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["str",15]],[[["shtype",4]],["bool",15]],[[["compressiontype",4]],["bool",15]],[[],["option",4]],[[],[["option",4],["str",15]]],null,[[],["u64",15]],[[["header",3],["u16",15]],[["str",15],["sectionheader",4],["result",4]]],[[["elffile",3]]],[[["sectionheader",4],["elffile",3]],[["str",15],["result",4]]],[[],["u64",15]],[[],[["sectionstrings",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["shtype_",3]],[[],["u32",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["binding",4],["str",15],["result",4]]],[[],[["type",4],["result",4],["str",15]]],[[],["visibility",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["visibility_",3]],[[],["visibility",4]],[[],["binding_",3]],[[],["binding",4]],[[],["type_",3]],[[],["type",4]],[[["binding",4]],["bool",15]],[[["type",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["binding",4],["str",15],["result",4]]],[[["elffile",3]],[["result",4],["str",15],["str",15]]],[[["elffile",3]],[["result",4],["str",15],["str",15]]],[[["elffile",3]],[["result",4],["str",15],["str",15]]],[[["elffile",3]],[["result",4],["str",15],["str",15]]],[[["elffile",3]],[["result",4],["str",15],["str",15]]],[[],["visibility",4]],[[["usize",15],["elffile",3]],[["result",4],["str",15],["sectionheader",4]]],[[],[["type",4],["result",4],["str",15]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["binding",4]],["bool",15]],[[["type",4]],["bool",15]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]]],"p":[[3,"ElfFile"],[8,"Extensions"],[4,"Tag"],[3,"Dynamic"],[3,"Tag_"],[3,"HashTable"],[3,"Type_"],[4,"Machine"],[4,"OsAbi"],[4,"Data"],[4,"Type"],[4,"Version"],[4,"HeaderPt2"],[4,"Class"],[3,"HeaderPt1"],[3,"Class_"],[3,"Data_"],[3,"Machine_"],[3,"OsAbi_"],[3,"Version_"],[3,"Header"],[3,"HeaderPt2_"],[3,"Flags"],[4,"Type"],[4,"SegmentData"],[4,"ProgramHeader"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"ProgramIter"],[3,"Type_"],[4,"ShType"],[4,"SectionData"],[4,"CompressionType"],[4,"SectionHeader"],[3,"SectionIter"],[3,"SectionHeader_"],[3,"ShType_"],[3,"SectionStrings"],[3,"CompressionHeader64"],[3,"CompressionHeader32"],[3,"CompressionType_"],[3,"Rela"],[3,"Rel"],[3,"NoteHeader"],[13,"Group"],[4,"Type"],[4,"Visibility"],[4,"Binding"],[3,"Binding_"],[3,"Type_"],[3,"Visibility_"],[3,"Entry32"],[3,"Entry64"],[3,"DynEntry32"],[3,"DynEntry64"],[8,"Entry"]]},\
"zero":{"doc":"Functions for reading binary data into Rust data …","t":[8,3,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,11,11,11,11],"n":["Pod","StrReaderIterator","borrow","borrow_mut","clone","fmt","from","into","into_iter","next","read","read_array","read_array_unsafe","read_str","read_str_unsafe","read_strs_to_null","read_unsafe","size_hint","try_from","try_into","type_id"],"q":["zero","","","","","","","","","","","","","","","","","","","",""],"d":["Implementing this trait means that the concrete type is …","Iterates over <code>self.data</code>, yielding strings …","","","","","","","","","Reads a single <code>T</code> from <code>input</code>.","Read an array of <code>T</code>s from input.","Reads an array of <code>T</code>s from <code>input</code> with no checks.","Read a string from <code>input</code>. The string must be a …","Reads a null-terminated string from <code>input</code> with no checks.","Returns an iterator which will return a sequence of …","Reads a <code>T</code> from <code>input</code> with no checks.","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],"f":[null,null,[[]],[[]],[[],["strreaderiterator",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["str",15],["option",4]]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["strreaderiterator",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"StrReaderIterator"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};