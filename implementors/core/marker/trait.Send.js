(function() {var implementors = {};
implementors["aero"] = [{"text":"impl Send for MousePoition","synthetic":true,"types":[]},{"text":"impl Send for GDTDescriptor","synthetic":true,"types":[]},{"text":"impl Send for GDTEntry","synthetic":true,"types":[]},{"text":"impl Send for GDT","synthetic":true,"types":[]},{"text":"impl Send for GLOBAL_DESCRIPTOR_TABLE","synthetic":true,"types":[]},{"text":"impl Send for IDTFlags","synthetic":true,"types":[]},{"text":"impl Send for IDTDescriptor","synthetic":true,"types":[]},{"text":"impl Send for IDTEntry","synthetic":true,"types":[]},{"text":"impl Send for AeroSystemAllocator","synthetic":true,"types":[]},{"text":"impl Send for PITDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ScreenChar","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for ColorCode","synthetic":true,"types":[]},{"text":"impl Send for RENDERER","synthetic":true,"types":[]},{"text":"impl Send for Rendy","synthetic":true,"types":[]}];
implementors["bootloader"] = [{"text":"impl Send for MemoryMap","synthetic":true,"types":[]},{"text":"impl Send for MemoryRegion","synthetic":true,"types":[]},{"text":"impl Send for FrameRange","synthetic":true,"types":[]},{"text":"impl Send for MemoryRegionType","synthetic":true,"types":[]},{"text":"impl Send for BootInfo","synthetic":true,"types":[]},{"text":"impl Send for TlsTemplate","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["volatile"] = [{"text":"impl&lt;T&gt; Send for Volatile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadOnly&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteOnly&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["x86_64"] = [{"text":"impl Send for VirtAddr","synthetic":true,"types":[]},{"text":"impl Send for PhysAddr","synthetic":true,"types":[]},{"text":"impl Send for VirtAddrNotValid","synthetic":true,"types":[]},{"text":"impl Send for PhysAddrNotValid","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PortReadOnly&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PortWriteOnly&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RdRand","synthetic":true,"types":[]},{"text":"impl Send for InvPicdCommand","synthetic":true,"types":[]},{"text":"impl Send for Pcid","synthetic":true,"types":[]},{"text":"impl Send for Cr0","synthetic":true,"types":[]},{"text":"impl Send for Cr0Flags","synthetic":true,"types":[]},{"text":"impl Send for Cr2","synthetic":true,"types":[]},{"text":"impl Send for Cr3","synthetic":true,"types":[]},{"text":"impl Send for Cr3Flags","synthetic":true,"types":[]},{"text":"impl Send for Cr4","synthetic":true,"types":[]},{"text":"impl Send for Cr4Flags","synthetic":true,"types":[]},{"text":"impl Send for Msr","synthetic":true,"types":[]},{"text":"impl Send for Efer","synthetic":true,"types":[]},{"text":"impl Send for FsBase","synthetic":true,"types":[]},{"text":"impl Send for GsBase","synthetic":true,"types":[]},{"text":"impl Send for KernelGsBase","synthetic":true,"types":[]},{"text":"impl Send for Star","synthetic":true,"types":[]},{"text":"impl Send for LStar","synthetic":true,"types":[]},{"text":"impl Send for SFMask","synthetic":true,"types":[]},{"text":"impl Send for EferFlags","synthetic":true,"types":[]},{"text":"impl Send for RFlags","synthetic":true,"types":[]},{"text":"impl Send for SegmentSelector","synthetic":true,"types":[]},{"text":"impl Send for GlobalDescriptorTable","synthetic":true,"types":[]},{"text":"impl Send for Descriptor","synthetic":true,"types":[]},{"text":"impl Send for DescriptorFlags","synthetic":true,"types":[]},{"text":"impl Send for InterruptDescriptorTable","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Entry&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntryOptions","synthetic":true,"types":[]},{"text":"impl Send for InterruptStackFrame","synthetic":true,"types":[]},{"text":"impl Send for InterruptStackFrameValue","synthetic":true,"types":[]},{"text":"impl Send for PageFaultErrorCode","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PhysFrame&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PhysFrameRange&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PhysFrameRangeInclusive&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for MappedPageTable&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OffsetPageTable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecursivePageTable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvalidPageTable","synthetic":true,"types":[]},{"text":"impl Send for TranslateResult","synthetic":true,"types":[]},{"text":"impl Send for MappedFrame","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MapperFlush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MapperFlushAll","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MapToError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnmapError","synthetic":true,"types":[]},{"text":"impl Send for FlagUpdateError","synthetic":true,"types":[]},{"text":"impl Send for TranslateError","synthetic":true,"types":[]},{"text":"impl Send for Size4KiB","synthetic":true,"types":[]},{"text":"impl Send for Size2MiB","synthetic":true,"types":[]},{"text":"impl Send for Size1GiB","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Page&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PageRange&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PageRangeInclusive&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AddressNotAligned","synthetic":true,"types":[]},{"text":"impl Send for FrameError","synthetic":true,"types":[]},{"text":"impl Send for PageTableEntry","synthetic":true,"types":[]},{"text":"impl Send for PageTableFlags","synthetic":true,"types":[]},{"text":"impl Send for PageTable","synthetic":true,"types":[]},{"text":"impl Send for PageTableIndex","synthetic":true,"types":[]},{"text":"impl Send for PageOffset","synthetic":true,"types":[]},{"text":"impl Send for TaskStateSegment","synthetic":true,"types":[]},{"text":"impl Send for DescriptorTablePointer","synthetic":true,"types":[]},{"text":"impl Send for PrivilegeLevel","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()