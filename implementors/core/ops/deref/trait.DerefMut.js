(function() {var implementors = {
"arrayvec":[["impl&lt;T, const CAP: usize&gt; DerefMut for <a class=\"struct\" href=\"arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::ArrayVec\">ArrayVec</a>&lt;T, CAP&gt;"],["impl&lt;const CAP: usize&gt; DerefMut for <a class=\"struct\" href=\"arrayvec/struct.ArrayString.html\" title=\"struct arrayvec::ArrayString\">ArrayString</a>&lt;CAP&gt;"]],
"limine":[["impl&lt;T&gt; DerefMut for <a class=\"struct\" href=\"limine/struct.NonNullPtr.html\" title=\"struct limine::NonNullPtr\">NonNullPtr</a>&lt;T&gt;"]],
"once_cell":[["impl&lt;T, F: FnOnce() -&gt; T&gt; DerefMut for <a class=\"struct\" href=\"once_cell/unsync/struct.Lazy.html\" title=\"struct once_cell::unsync::Lazy\">Lazy</a>&lt;T, F&gt;"]],
"spin":[["impl&lt;'a, T: ?Sized&gt; DerefMut for <a class=\"struct\" href=\"spin/mutex/spin/struct.SpinMutexGuard.html\" title=\"struct spin::mutex::spin::SpinMutexGuard\">SpinMutexGuard</a>&lt;'a, T&gt;"],["impl&lt;'rwlock, T: ?Sized, R&gt; DerefMut for <a class=\"struct\" href=\"spin/rwlock/struct.RwLockWriteGuard.html\" title=\"struct spin::rwlock::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'rwlock, T, R&gt;"],["impl&lt;'a, T: ?Sized&gt; DerefMut for <a class=\"struct\" href=\"spin/mutex/struct.MutexGuard.html\" title=\"struct spin::mutex::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()